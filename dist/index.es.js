import require$$1 from 'prop-types/checkPropTypes';
import PropTypes$1, { arrayOf } from 'prop-types';
import styled, { ThemeProvider, createGlobalStyle, css } from 'styled-components';
import find from 'array-find-es6';
import Media from 'react-media';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var react = {exports: {}};

var react_production_min = {};

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

var objectAssign;
var hasRequiredObjectAssign;

function requireObjectAssign () {
	if (hasRequiredObjectAssign) return objectAssign;
	hasRequiredObjectAssign = 1;
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};
	return objectAssign;
}

/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReact_production_min;

function requireReact_production_min () {
	if (hasRequiredReact_production_min) return react_production_min;
	hasRequiredReact_production_min = 1;
var l=requireObjectAssign(),n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.forward_ref"):60112,y=n?Symbol.for("react.suspense"):60113,z=n?Symbol.for("react.memo"):60115,A=n?Symbol.for("react.lazy"):
	60116,B="function"===typeof Symbol&&Symbol.iterator;function C(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
	var D={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D;}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,"setState");};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};
	function G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D;}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};
	function M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h;}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return {$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}
	function N(a,b){return {$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return "object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return "$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return {result:a,keyPrefix:b,func:c,context:e,count:0}}
	function S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a);}
	function T(a,b,c,e){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0;}}if(g)return c(e,a,""===b?"."+U(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e);}else if(null===a||"object"!==typeof a?f=null:(f=B&&a[B]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),k=
	0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if("object"===d)throw c=""+a,Error(C(31,"[object Object]"===c?"object with keys {"+Object.keys(a).join(", ")+"}":c,""));return g}function V(a,b,c){return null==a?0:T(a,"",b,c)}function U(a,b){return "object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++);}
	function aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(P,"$&/")+"/")+c)),e.push(a));}function X(a,b,c,e,d){var g="";null!=c&&(g=(""+c).replace(P,"$&/")+"/");b=R(b,g,e,d);V(a,aa,b);S(b);}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}
	var ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};react_production_min.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b);},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};
	react_production_min.Component=F;react_production_min.Fragment=r;react_production_min.Profiler=u;react_production_min.PureComponent=H;react_production_min.StrictMode=t;react_production_min.Suspense=y;react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;
	react_production_min.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h]);}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f;}return {$$typeof:p,type:a.type,
	key:d,ref:g,props:e,_owner:k}};react_production_min.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};react_production_min.createElement=M;react_production_min.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};react_production_min.createRef=function(){return {current:null}};react_production_min.forwardRef=function(a){return {$$typeof:x,render:a}};react_production_min.isValidElement=O;
	react_production_min.lazy=function(a){return {$$typeof:A,_ctor:a,_status:-1,_result:null}};react_production_min.memo=function(a,b){return {$$typeof:z,type:a,compare:void 0===b?null:b}};react_production_min.useCallback=function(a,b){return Z().useCallback(a,b)};react_production_min.useContext=function(a,b){return Z().useContext(a,b)};react_production_min.useDebugValue=function(){};react_production_min.useEffect=function(a,b){return Z().useEffect(a,b)};react_production_min.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};
	react_production_min.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};react_production_min.useMemo=function(a,b){return Z().useMemo(a,b)};react_production_min.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};react_production_min.useRef=function(a){return Z().useRef(a)};react_production_min.useState=function(a){return Z().useState(a)};react_production_min.version="16.14.0";
	return react_production_min;
}

var react_development = {};

/** @license React v16.14.0
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReact_development;

function requireReact_development () {
	if (hasRequiredReact_development) return react_development;
	hasRequiredReact_development = 1;



	if (process.env.NODE_ENV !== "production") {
	  (function() {

	var _assign = requireObjectAssign();
	var checkPropTypes = require$$1;

	var ReactVersion = '16.14.0';

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	/**
	 * Keeps track of the current dispatcher.
	 */
	var ReactCurrentDispatcher = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	/**
	 * Keeps track of the current batch's configuration such as how long an update
	 * should suspend for if it needs to.
	 */
	var ReactCurrentBatchConfig = {
	  suspense: null
	};

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
	function describeComponentFrame (name, source, ownerName) {
	  var sourceInfo = '';

	  if (source) {
	    var path = source.fileName;
	    var fileName = path.replace(BEFORE_SLASH_RE, '');

	    {
	      // In DEV, include code for a common special case:
	      // prefer "folder/index.js" instead of just "index.js".
	      if (/^index\./.test(fileName)) {
	        var match = path.match(BEFORE_SLASH_RE);

	        if (match) {
	          var pathBeforeSlash = match[1];

	          if (pathBeforeSlash) {
	            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
	            fileName = folderName + '/' + fileName;
	          }
	        }
	      }
	    }

	    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
	  } else if (ownerName) {
	    sourceInfo = ' (created by ' + ownerName + ')';
	  }

	  return '\n    in ' + (name || 'Unknown') + sourceInfo;
	}

	var Resolved = 1;
	function refineResolvedLazyComponent(lazyComponent) {
	  return lazyComponent._status === Resolved ? lazyComponent._result : null;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return "Profiler";

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return 'Context.Consumer';

	      case REACT_PROVIDER_TYPE:
	        return 'Context.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);

	      case REACT_BLOCK_TYPE:
	        return getComponentName(type.render);

	      case REACT_LAZY_TYPE:
	        {
	          var thenable = type;
	          var resolvedThenable = refineResolvedLazyComponent(thenable);

	          if (resolvedThenable) {
	            return getComponentName(resolvedThenable);
	          }

	          break;
	        }
	    }
	  }

	  return null;
	}

	var ReactDebugCurrentFrame = {};
	var currentlyValidatingElement = null;
	function setCurrentlyValidatingElement(element) {
	  {
	    currentlyValidatingElement = element;
	  }
	}

	{
	  // Stack implementation injected by the current renderer.
	  ReactDebugCurrentFrame.getCurrentStack = null;

	  ReactDebugCurrentFrame.getStackAddendum = function () {
	    var stack = ''; // Add an extra top frame while an element is being validated

	    if (currentlyValidatingElement) {
	      var name = getComponentName(currentlyValidatingElement.type);
	      var owner = currentlyValidatingElement._owner;
	      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
	    } // Delegate to the injected renderer-specific implementation


	    var impl = ReactDebugCurrentFrame.getCurrentStack;

	    if (impl) {
	      stack += impl() || '';
	    }

	    return stack;
	  };
	}

	/**
	 * Used by act() to track whether you're inside an act() scope.
	 */
	var IsSomeRendererActing = {
	  current: false
	};

	var ReactSharedInternals = {
	  ReactCurrentDispatcher: ReactCurrentDispatcher,
	  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
	  ReactCurrentOwner: ReactCurrentOwner,
	  IsSomeRendererActing: IsSomeRendererActing,
	  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
	  assign: _assign
	};

	{
	  _assign(ReactSharedInternals, {
	    // These should not be included in production.
	    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
	    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
	    // TODO: remove in React 17.0.
	    ReactComponentTreeHook: {}
	  });
	}

	// by calls to these methods by a Babel plugin.
	//
	// In PROD (or in packages without access to React internals),
	// they are left as they are instead.

	function warn(format) {
	  {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    printWarning('warn', format, args);
	  }
	}
	function error(format) {
	  {
	    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	      args[_key2 - 1] = arguments[_key2];
	    }

	    printWarning('error', format, args);
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

	    if (!hasExistingStack) {
	      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	      var stack = ReactDebugCurrentFrame.getStackAddendum();

	      if (stack !== '') {
	        format += '%s';
	        args = args.concat([stack]);
	      }
	    }

	    var argsWithFormat = args.map(function (item) {
	      return '' + item;
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      throw new Error(message);
	    } catch (x) {}
	  }
	}

	var didWarnStateUpdateForUnmountedComponent = {};

	function warnNoop(publicInstance, callerName) {
	  {
	    var _constructor = publicInstance.constructor;
	    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
	    var warningKey = componentName + "." + callerName;

	    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
	      return;
	    }

	    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

	    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
	  }
	}
	/**
	 * This is the abstract API for an update queue.
	 */


	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance, callback, callerName) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	var emptyObject = {};

	{
	  Object.freeze(emptyObject);
	}
	/**
	 * Base class helpers for the updating state of a component.
	 */


	function Component(props, context, updater) {
	  this.props = props;
	  this.context = context; // If a component has string refs, we will assign a different object later.

	  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
	  // renderer.

	  this.updater = updater || ReactNoopUpdateQueue;
	}

	Component.prototype.isReactComponent = {};
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */

	Component.prototype.setState = function (partialState, callback) {
	  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
	    {
	      throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
	    }
	  }

	  this.updater.enqueueSetState(this, partialState, callback, 'setState');
	};
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */


	Component.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
	};
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */


	{
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };

	  var defineDeprecationWarning = function (methodName, info) {
	    Object.defineProperty(Component.prototype, methodName, {
	      get: function () {
	        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

	        return undefined;
	      }
	    });
	  };

	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	function ComponentDummy() {}

	ComponentDummy.prototype = Component.prototype;
	/**
	 * Convenience component with default shallow equality check for sCU.
	 */

	function PureComponent(props, context, updater) {
	  this.props = props;
	  this.context = context; // If a component has string refs, we will assign a different object later.

	  this.refs = emptyObject;
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
	pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

	_assign(pureComponentPrototype, Component.prototype);

	pureComponentPrototype.isPureReactComponent = true;

	// an immutable object with a single mutable value
	function createRef() {
	  var refObject = {
	    current: null
	  };

	  {
	    Object.seal(refObject);
	  }

	  return refObject;
	}

	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

	{
	  didWarnAboutStringRefs = {};
	}

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    {
	      if (!specialPropKeyWarningShown) {
	        specialPropKeyWarningShown = true;

	        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	      }
	    }
	  };

	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    {
	      if (!specialPropRefWarningShown) {
	        specialPropRefWarningShown = true;

	        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	      }
	    }
	  };

	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	function warnIfStringRefCannotBeAutoConverted(config) {
	  {
	    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
	      var componentName = getComponentName(ReactCurrentOwner.current.type);

	      if (!didWarnAboutStringRefs[componentName]) {
	        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

	        didWarnAboutStringRefs[componentName] = true;
	      }
	    }
	  }
	}
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, instanceof check
	 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} props
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} owner
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @internal
	 */


	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allows us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.

	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    }); // self and source are DEV only properties.

	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    }); // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.

	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });

	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://reactjs.org/docs/react-api.html#createelement
	 */

	function createElement(type, config, children) {
	  var propName; // Reserved names are extracted

	  var props = {};
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;

	      {
	        warnIfStringRefCannotBeAutoConverted(config);
	      }
	    }

	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  } // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.


	  var childrenLength = arguments.length - 2;

	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);

	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }

	    {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }

	    props.children = childArray;
	  } // Resolve default props


	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;

	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  {
	    if (key || ref) {
	      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

	      if (key) {
	        defineKeyPropWarningGetter(props, displayName);
	      }

	      if (ref) {
	        defineRefPropWarningGetter(props, displayName);
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	}
	function cloneAndReplaceKey(oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	  return newElement;
	}
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://reactjs.org/docs/react-api.html#cloneelement
	 */

	function cloneElement(element, config, children) {
	  if (!!(element === null || element === undefined)) {
	    {
	      throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
	    }
	  }

	  var propName; // Original props are copied

	  var props = _assign({}, element.props); // Reserved names are extracted


	  var key = element.key;
	  var ref = element.ref; // Self is preserved since the owner is preserved.

	  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.

	  var source = element._source; // Owner will be preserved, unless ref is overridden

	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }

	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    } // Remaining properties override existing props


	    var defaultProps;

	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }

	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  } // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.


	  var childrenLength = arguments.length - 2;

	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);

	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }

	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	}
	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a ReactElement.
	 * @final
	 */

	function isValidElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	  return '$' + escapedString;
	}
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */


	var didWarnAboutMaps = false;
	var userProvidedKeyEscapeRegex = /\/+/g;

	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	var POOL_SIZE = 10;
	var traverseContextPool = [];

	function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
	  if (traverseContextPool.length) {
	    var traverseContext = traverseContextPool.pop();
	    traverseContext.result = mapResult;
	    traverseContext.keyPrefix = keyPrefix;
	    traverseContext.func = mapFunction;
	    traverseContext.context = mapContext;
	    traverseContext.count = 0;
	    return traverseContext;
	  } else {
	    return {
	      result: mapResult,
	      keyPrefix: keyPrefix,
	      func: mapFunction,
	      context: mapContext,
	      count: 0
	    };
	  }
	}

	function releaseTraverseContext(traverseContext) {
	  traverseContext.result = null;
	  traverseContext.keyPrefix = null;
	  traverseContext.func = null;
	  traverseContext.context = null;
	  traverseContext.count = 0;

	  if (traverseContextPool.length < POOL_SIZE) {
	    traverseContextPool.push(traverseContext);
	  }
	}
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */


	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  var invokeCallback = false;

	  if (children === null) {
	    invokeCallback = true;
	  } else {
	    switch (type) {
	      case 'string':
	      case 'number':
	        invokeCallback = true;
	        break;

	      case 'object':
	        switch (children.$$typeof) {
	          case REACT_ELEMENT_TYPE:
	          case REACT_PORTAL_TYPE:
	            invokeCallback = true;
	        }

	    }
	  }

	  if (invokeCallback) {
	    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);

	    if (typeof iteratorFn === 'function') {

	      {
	        // Warn about using Maps as children
	        if (iteratorFn === children.entries) {
	          if (!didWarnAboutMaps) {
	            warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');
	          }

	          didWarnAboutMaps = true;
	        }
	      }

	      var iterator = iteratorFn.call(children);
	      var step;
	      var ii = 0;

	      while (!(step = iterator.next()).done) {
	        child = step.value;
	        nextName = nextNamePrefix + getComponentKey(child, ii++);
	        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	      }
	    } else if (type === 'object') {
	      var addendum = '';

	      {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
	      }

	      var childrenString = '' + children;

	      {
	        {
	          throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum );
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */


	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */


	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (typeof component === 'object' && component !== null && component.key != null) {
	    // Explicit key
	    return escape(component.key);
	  } // Implicit key determined by the index in the set


	  return index.toString(36);
	}

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;
	  func.call(context, child, bookKeeping.count++);
	}
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */


	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  releaseTraverseContext(traverseContext);
	}

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;
	  var mappedChild = func.call(context, child, bookKeeping.count++);

	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
	      return c;
	    });
	  } else if (mappedChild != null) {
	    if (isValidElement(mappedChild)) {
	      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }

	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';

	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }

	  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  releaseTraverseContext(traverseContext);
	}
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */


	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrencount
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */


	function countChildren(children) {
	  return traverseAllChildren(children, function () {
	    return null;
	  }, null);
	}
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
	 */


	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
	    return child;
	  });
	  return result;
	}
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */


	function onlyChild(children) {
	  if (!isValidElement(children)) {
	    {
	      throw Error( "React.Children.only expected to receive a single React element child." );
	    }
	  }

	  return children;
	}

	function createContext(defaultValue, calculateChangedBits) {
	  if (calculateChangedBits === undefined) {
	    calculateChangedBits = null;
	  } else {
	    {
	      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
	        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
	      }
	    }
	  }

	  var context = {
	    $$typeof: REACT_CONTEXT_TYPE,
	    _calculateChangedBits: calculateChangedBits,
	    // As a workaround to support multiple concurrent renderers, we categorize
	    // some renderers as primary and others as secondary. We only expect
	    // there to be two concurrent renderers at most: React Native (primary) and
	    // Fabric (secondary); React DOM (primary) and React ART (secondary).
	    // Secondary renderers store their context values on separate fields.
	    _currentValue: defaultValue,
	    _currentValue2: defaultValue,
	    // Used to track how many concurrent renderers this context currently
	    // supports within in a single renderer. Such as parallel server rendering.
	    _threadCount: 0,
	    // These are circular
	    Provider: null,
	    Consumer: null
	  };
	  context.Provider = {
	    $$typeof: REACT_PROVIDER_TYPE,
	    _context: context
	  };
	  var hasWarnedAboutUsingNestedContextConsumers = false;
	  var hasWarnedAboutUsingConsumerProvider = false;

	  {
	    // A separate object, but proxies back to the original context object for
	    // backwards compatibility. It has a different $$typeof, so we can properly
	    // warn for the incorrect usage of Context as a Consumer.
	    var Consumer = {
	      $$typeof: REACT_CONTEXT_TYPE,
	      _context: context,
	      _calculateChangedBits: context._calculateChangedBits
	    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

	    Object.defineProperties(Consumer, {
	      Provider: {
	        get: function () {
	          if (!hasWarnedAboutUsingConsumerProvider) {
	            hasWarnedAboutUsingConsumerProvider = true;

	            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
	          }

	          return context.Provider;
	        },
	        set: function (_Provider) {
	          context.Provider = _Provider;
	        }
	      },
	      _currentValue: {
	        get: function () {
	          return context._currentValue;
	        },
	        set: function (_currentValue) {
	          context._currentValue = _currentValue;
	        }
	      },
	      _currentValue2: {
	        get: function () {
	          return context._currentValue2;
	        },
	        set: function (_currentValue2) {
	          context._currentValue2 = _currentValue2;
	        }
	      },
	      _threadCount: {
	        get: function () {
	          return context._threadCount;
	        },
	        set: function (_threadCount) {
	          context._threadCount = _threadCount;
	        }
	      },
	      Consumer: {
	        get: function () {
	          if (!hasWarnedAboutUsingNestedContextConsumers) {
	            hasWarnedAboutUsingNestedContextConsumers = true;

	            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	          }

	          return context.Consumer;
	        }
	      }
	    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

	    context.Consumer = Consumer;
	  }

	  {
	    context._currentRenderer = null;
	    context._currentRenderer2 = null;
	  }

	  return context;
	}

	function lazy(ctor) {
	  var lazyType = {
	    $$typeof: REACT_LAZY_TYPE,
	    _ctor: ctor,
	    // React uses these fields to store the result.
	    _status: -1,
	    _result: null
	  };

	  {
	    // In production, this would just set it on the object.
	    var defaultProps;
	    var propTypes;
	    Object.defineProperties(lazyType, {
	      defaultProps: {
	        configurable: true,
	        get: function () {
	          return defaultProps;
	        },
	        set: function (newDefaultProps) {
	          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

	          defaultProps = newDefaultProps; // Match production behavior more closely:

	          Object.defineProperty(lazyType, 'defaultProps', {
	            enumerable: true
	          });
	        }
	      },
	      propTypes: {
	        configurable: true,
	        get: function () {
	          return propTypes;
	        },
	        set: function (newPropTypes) {
	          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

	          propTypes = newPropTypes; // Match production behavior more closely:

	          Object.defineProperty(lazyType, 'propTypes', {
	            enumerable: true
	          });
	        }
	      }
	    });
	  }

	  return lazyType;
	}

	function forwardRef(render) {
	  {
	    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
	      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
	    } else if (typeof render !== 'function') {
	      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
	    } else {
	      if (render.length !== 0 && render.length !== 2) {
	        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
	      }
	    }

	    if (render != null) {
	      if (render.defaultProps != null || render.propTypes != null) {
	        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
	      }
	    }
	  }

	  return {
	    $$typeof: REACT_FORWARD_REF_TYPE,
	    render: render
	  };
	}

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function memo(type, compare) {
	  {
	    if (!isValidElementType(type)) {
	      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
	    }
	  }

	  return {
	    $$typeof: REACT_MEMO_TYPE,
	    type: type,
	    compare: compare === undefined ? null : compare
	  };
	}

	function resolveDispatcher() {
	  var dispatcher = ReactCurrentDispatcher.current;

	  if (!(dispatcher !== null)) {
	    {
	      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
	    }
	  }

	  return dispatcher;
	}

	function useContext(Context, unstable_observedBits) {
	  var dispatcher = resolveDispatcher();

	  {
	    if (unstable_observedBits !== undefined) {
	      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');
	    } // TODO: add a more generic warning for invalid values.


	    if (Context._context !== undefined) {
	      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
	      // and nobody should be using this in existing code.

	      if (realContext.Consumer === Context) {
	        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
	      } else if (realContext.Provider === Context) {
	        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
	      }
	    }
	  }

	  return dispatcher.useContext(Context, unstable_observedBits);
	}
	function useState(initialState) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useState(initialState);
	}
	function useReducer(reducer, initialArg, init) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useReducer(reducer, initialArg, init);
	}
	function useRef(initialValue) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useRef(initialValue);
	}
	function useEffect(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useEffect(create, deps);
	}
	function useLayoutEffect(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useLayoutEffect(create, deps);
	}
	function useCallback(callback, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useCallback(callback, deps);
	}
	function useMemo(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useMemo(create, deps);
	}
	function useImperativeHandle(ref, create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useImperativeHandle(ref, create, deps);
	}
	function useDebugValue(value, formatterFn) {
	  {
	    var dispatcher = resolveDispatcher();
	    return dispatcher.useDebugValue(value, formatterFn);
	  }
	}

	var propTypesMisspellWarningShown;

	{
	  propTypesMisspellWarningShown = false;
	}

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = getComponentName(ReactCurrentOwner.current.type);

	    if (name) {
	      return '\n\nCheck the render method of `' + name + '`.';
	    }
	  }

	  return '';
	}

	function getSourceInfoErrorAddendum(source) {
	  if (source !== undefined) {
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	  }

	  return '';
	}

	function getSourceInfoErrorAddendumForProps(elementProps) {
	  if (elementProps !== null && elementProps !== undefined) {
	    return getSourceInfoErrorAddendum(elementProps.__source);
	  }

	  return '';
	}
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */


	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

	    if (parentName) {
	      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
	    }
	  }

	  return info;
	}
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */


	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }

	  element._store.validated = true;
	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

	  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	    return;
	  }

	  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.

	  var childOwner = '';

	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
	  }

	  setCurrentlyValidatingElement(element);

	  {
	    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
	  }

	  setCurrentlyValidatingElement(null);
	}
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */


	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }

	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];

	      if (isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);

	    if (typeof iteratorFn === 'function') {
	      // Entry iterators used to provide implicit keys,
	      // but now we print a separate warning for them later.
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;

	        while (!(step = iterator.next()).done) {
	          if (isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */


	function validatePropTypes(element) {
	  {
	    var type = element.type;

	    if (type === null || type === undefined || typeof type === 'string') {
	      return;
	    }

	    var name = getComponentName(type);
	    var propTypes;

	    if (typeof type === 'function') {
	      propTypes = type.propTypes;
	    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
	    // Inner props are checked in the reconciler.
	    type.$$typeof === REACT_MEMO_TYPE)) {
	      propTypes = type.propTypes;
	    } else {
	      return;
	    }

	    if (propTypes) {
	      setCurrentlyValidatingElement(element);
	      checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
	      setCurrentlyValidatingElement(null);
	    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	      propTypesMisspellWarningShown = true;

	      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
	    }

	    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
	    }
	  }
	}
	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */


	function validateFragmentProps(fragment) {
	  {
	    setCurrentlyValidatingElement(fragment);
	    var keys = Object.keys(fragment.props);

	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];

	      if (key !== 'children' && key !== 'key') {
	        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

	        break;
	      }
	    }

	    if (fragment.ref !== null) {
	      error('Invalid attribute `ref` supplied to `React.Fragment`.');
	    }

	    setCurrentlyValidatingElement(null);
	  }
	}
	function createElementWithValidation(type, props, children) {
	  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
	  // succeed and there will likely be errors in render.

	  if (!validType) {
	    var info = '';

	    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	    }

	    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

	    if (sourceInfo) {
	      info += sourceInfo;
	    } else {
	      info += getDeclarationErrorAddendum();
	    }

	    var typeString;

	    if (type === null) {
	      typeString = 'null';
	    } else if (Array.isArray(type)) {
	      typeString = 'array';
	    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
	      info = ' Did you accidentally export a JSX literal instead of a component?';
	    } else {
	      typeString = typeof type;
	    }

	    {
	      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	    }
	  }

	  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
	  // TODO: Drop this when these are no longer allowed as the type argument.

	  if (element == null) {
	    return element;
	  } // Skip key warning if the type isn't valid since our key validation logic
	  // doesn't expect a non-string/function type and can throw confusing errors.
	  // We don't want exception behavior to differ between dev and prod.
	  // (Rendering will throw with a helpful message and as soon as the type is
	  // fixed, the key warnings will appear.)


	  if (validType) {
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }
	  }

	  if (type === REACT_FRAGMENT_TYPE) {
	    validateFragmentProps(element);
	  } else {
	    validatePropTypes(element);
	  }

	  return element;
	}
	var didWarnAboutDeprecatedCreateFactory = false;
	function createFactoryWithValidation(type) {
	  var validatedFactory = createElementWithValidation.bind(null, type);
	  validatedFactory.type = type;

	  {
	    if (!didWarnAboutDeprecatedCreateFactory) {
	      didWarnAboutDeprecatedCreateFactory = true;

	      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
	    } // Legacy hook: remove it


	    Object.defineProperty(validatedFactory, 'type', {
	      enumerable: false,
	      get: function () {
	        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

	        Object.defineProperty(this, 'type', {
	          value: type
	        });
	        return type;
	      }
	    });
	  }

	  return validatedFactory;
	}
	function cloneElementWithValidation(element, props, children) {
	  var newElement = cloneElement.apply(this, arguments);

	  for (var i = 2; i < arguments.length; i++) {
	    validateChildKeys(arguments[i], newElement.type);
	  }

	  validatePropTypes(newElement);
	  return newElement;
	}

	{

	  try {
	    var frozenObject = Object.freeze({});
	    var testMap = new Map([[frozenObject, null]]);
	    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
	    // https://github.com/rollup/rollup/issues/1771
	    // TODO: we can remove these if Rollup fixes the bug.

	    testMap.set(0, 0);
	    testSet.add(0);
	  } catch (e) {
	  }
	}

	var createElement$1 =  createElementWithValidation ;
	var cloneElement$1 =  cloneElementWithValidation ;
	var createFactory =  createFactoryWithValidation ;
	var Children = {
	  map: mapChildren,
	  forEach: forEachChildren,
	  count: countChildren,
	  toArray: toArray,
	  only: onlyChild
	};

	react_development.Children = Children;
	react_development.Component = Component;
	react_development.Fragment = REACT_FRAGMENT_TYPE;
	react_development.Profiler = REACT_PROFILER_TYPE;
	react_development.PureComponent = PureComponent;
	react_development.StrictMode = REACT_STRICT_MODE_TYPE;
	react_development.Suspense = REACT_SUSPENSE_TYPE;
	react_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
	react_development.cloneElement = cloneElement$1;
	react_development.createContext = createContext;
	react_development.createElement = createElement$1;
	react_development.createFactory = createFactory;
	react_development.createRef = createRef;
	react_development.forwardRef = forwardRef;
	react_development.isValidElement = isValidElement;
	react_development.lazy = lazy;
	react_development.memo = memo;
	react_development.useCallback = useCallback;
	react_development.useContext = useContext;
	react_development.useDebugValue = useDebugValue;
	react_development.useEffect = useEffect;
	react_development.useImperativeHandle = useImperativeHandle;
	react_development.useLayoutEffect = useLayoutEffect;
	react_development.useMemo = useMemo;
	react_development.useReducer = useReducer;
	react_development.useRef = useRef;
	react_development.useState = useState;
	react_development.version = ReactVersion;
	  })();
	}
	return react_development;
}

if (process.env.NODE_ENV === 'production') {
  react.exports = requireReact_production_min();
} else {
  react.exports = requireReact_development();
}

var reactExports = react.exports;
var React = /*@__PURE__*/getDefaultExportFromCjs(reactExports);

const componentWithName$1 = (passedName, checkDisplayName) => {
  if (typeof passedName !== "string") {
    throw new Error("passedName must be a string");
  }
  const checkProp = (props, propName, componentName) => {
    if (typeof props[propName] === "undefined" || props[propName] === null) {
      return undefined;
    }
    if (Array.isArray(props[propName])) {
      return props[propName].map((_, index) => checkProp(props[propName], index, componentName)).find(Boolean);
    }
    const testNameInObject = () => typeof props[propName] === "object" && (!checkDisplayName && props[propName].type.name !== passedName || checkDisplayName && props[propName].type.displayName !== passedName);
    const testNameInFunction = () => typeof props[propName] === "function" && (!checkDisplayName && props[propName].name !== passedName || checkDisplayName && props[propName].displayName !== passedName);
    if (props[propName] && typeof props[propName] !== "object" && typeof props[propName] !== "function" || testNameInObject() || testNameInFunction()) {
      return new Error(`${componentName}: Component passed to \`${propName}\` prop should be ${passedName}`);
    }
    return undefined;
  };
  const checkRequired = (props, propName, componentName) => {
    if (props[propName] === undefined) {
      return new Error(`The prop \`${propName}\` is marked as required in \`${componentName}\`, but its value is ${props[propName]}.`);
    }
    return undefined;
  };
  const createValidate = isRequired => {
    if (isRequired) {
      return (props, propName, componentName) => {
        const checkForError = checkProp(props, propName, componentName);
        if (checkForError) {
          return checkForError;
        }
        return checkRequired(props, propName, componentName);
      };
    }
    return checkProp;
  };
  const validate = createValidate();
  validate.isRequired = createValidate(true);
  return validate;
};

function responsiveProps(type) {
  return PropTypes$1.oneOfType([type, PropTypes$1.shape({
    xs: type,
    sm: type,
    md: type,
    lg: type,
    xl: type
  })]);
}

const createValidator = validators => {
  const validator = (props, propName, componentName, ...rest) => {
    if (props[propName] === undefined) {
      return null;
    }
    const errors = validators.map(v => v(props, propName, componentName, ...rest)).filter(error => error);
    if (errors.length >= validators.length) {
      return new Error(`Invalid value supplied to ${propName} in ${componentName}.`);
    }
    return null;
  };
  validator.isRequired = (props, propName, componentName, ...rest) => {
    if (props[propName] === undefined) {
      return new Error(`The prop \`${propName}\` is marked as required in \`${componentName}\`, but its value is ${props[propName]}.`);
    }
    const errors = validators.map(v => v(props, propName, componentName, ...rest)).filter(error => error);
    if (errors.length === validators.length) {
      return new Error(`Invalid value ${errors} supplied to required prop \`${propName}\` in \`${componentName}\`.`);
    }
    return null;
  };
  return validator;
};
const or$1 = validators => {
  if (!Array.isArray(validators)) {
    throw new Error("2 or more validators are required to use or");
  }
  if (validators.length < 2) {
    throw new Error("2 or more validators are required to use or");
  }
  return createValidator([arrayOf(createValidator(validators)), ...validators]);
};

const htmlElement = element => {
  if (typeof element !== "string") {
    throw new Error("element must be a string");
  }
  const checkProp = (props, propName, componentName) => {
    if (typeof props[propName] === "undefined" || props[propName] === null) {
      return undefined;
    }
    if (Array.isArray(props[propName])) {
      // Iterates through every child and try to find the first element that does not match the passed name
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean
      return props[propName].map((_, index) => checkProp(props[propName], index, componentName)).find(Boolean);
    }
    if (typeof props[propName] === "object" && typeof props[propName].type === "string") {
      if (props[propName].type === element) {
        return undefined;
      }
      return new Error(`${componentName}: Expected \`${propName}\` to be an HTML \`<${element}>\` tag`);
    }
    return undefined;
  };
  const checkRequired = (props, propName, componentName) => {
    if (props[propName] === undefined) {
      return new Error(`The prop \`${propName}\` is marked as required in \`${componentName}\`, but its value is ${props[propName]}.`);
    }
    return undefined;
  };
  const createValidate = isRequired => {
    if (isRequired) {
      return (props, propName, componentName) => {
        const checkForError = checkProp(props, propName, componentName);
        if (checkForError) {
          return checkForError;
        }
        return checkRequired(props, propName, componentName);
      };
    }
    return checkProp;
  };
  const validate = createValidate();
  validate.isRequired = createValidate(true);
  return validate;
};

const getCopy = (dictionary, copy) => {
  if (typeof copy === "undefined" || copy === null) {
    return {};
  }
  if (typeof copy === "string") {
    return dictionary[copy];
  }
  return copy;
};

let idCounter = 0;
const uniqueId = prefix => {
  const id = ++idCounter;
  return `${prefix}${id}`;
};

// eslint-disable-line no-plusplus
var safeRest = (({
  style,
  className,
  as,
  ...props
}) => props);

const BASE_FONT_SIZE = 16;
const pixelToRem = pixel => {
  return `${pixel / BASE_FONT_SIZE}rem`;
};

var DependentIconSizeContext = /*#__PURE__*/reactExports.createContext({});

const breakpoints = {
  sm: 576,
  md: 768,
  lg: 992,
  xl: 1200
};
var media = {
  query: {},
  from(breakpoint) {
    if (breakpoint !== "xs") {
      this.query.minWidth = breakpoint;
    }
    return this;
  },
  until(breakpoint) {
    this.query.maxWidth = breakpoint;
    return this;
  },
  and(custom) {
    this.query.and = custom;
    return this;
  },
  css(style) {
    const {
      minWidth,
      maxWidth,
      and
    } = this.query;
    const min = minWidth ? `(min-width: ${breakpoints[minWidth]}px)` : undefined;
    const max = maxWidth ? `(max-width: ${breakpoints[maxWidth] - 1}px)` : undefined;
    if (typeof min !== "undefined" || typeof max !== "undefined" || typeof and !== "undefined") {
      const mediaQuery = `@media ${[min, max, and].filter(a => a).join(" and ")}`;
      this.query = {};
      return {
        [mediaQuery]: {
          ...(typeof style === "function" ? style() : style)
        }
      };
    }
    return typeof style === "function" ? style() : style;
  }
};

const BREAKPOINTS = ["xs", "sm", "md", "lg", "xl"];
const MOBILE_BREAKPOINTS = ["xs", "sm"];
const DESKTOP_BREAKPOINTS = ["md", "lg", "xl"];
const isMobileBreakpoint = breakpoint => MOBILE_BREAKPOINTS.indexOf(breakpoint) !== -1;
const isDesktopBreakpoint = breakpoint => DESKTOP_BREAKPOINTS.indexOf(breakpoint) !== -1;
const isResponsiveProp = prop => prop && BREAKPOINTS.find(breakpoint => Object.prototype.hasOwnProperty.call(prop, breakpoint));
const getResponsiveProps = props => Object.keys(props).filter(prop => isResponsiveProp(props[prop]));
const getStaticProps = props => Object.keys(props).filter(prop => !isResponsiveProp(props[prop]));
const sortBreakpointAsc = (a, b) => {
  if (BREAKPOINTS.indexOf(a.from) > BREAKPOINTS.indexOf(b.from)) {
    return 1;
  }
  if (BREAKPOINTS.indexOf(a.from) < BREAKPOINTS.indexOf(b.from)) {
    return -1;
  }
  return 0;
};
const collectBreakpoints = props => breakpoint => {
  const o = {
    from: breakpoint,
    until: undefined,
    props: {
      ...getStaticProps(props).reduce((acc, staticProp) => {
        if (typeof props[staticProp] !== "undefined") {
          acc[staticProp] = props[staticProp];
        }
        return acc;
      }, {}),
      ...getResponsiveProps(props).reduce((acc, responsiveProp) => {
        if (typeof props[responsiveProp][breakpoint] !== "undefined") {
          acc[responsiveProp] = props[responsiveProp][breakpoint];
        }
        return acc;
      }, {})
    }
  };
  return o;
};
const inheritAndPopulateUntil = (bp, index, src) => {
  const breakpoint = bp;
  if (index !== 0) {
    breakpoint.props = {
      ...src[index - 1].props,
      ...bp.props
    };
  }
  if (index < src.length - 1) {
    breakpoint.until = src[index + 1].from;
  }
  return breakpoint;
};
const prepareArray = props => {
  // gather all breakpoints
  const responsivePropNames = getResponsiveProps(props);
  const breakpoints = [];
  responsivePropNames.forEach(responsivePropName => {
    Object.keys(props[responsivePropName]).forEach(breakpoint => {
      if (breakpoints.indexOf(breakpoint) === -1) {
        breakpoints.push(breakpoint);
      }
    });
  });

  // build object
  if (breakpoints.length === 0) {
    breakpoints.push("xs");
  }
  const preparedArray = breakpoints.map(collectBreakpoints(props)).sort(sortBreakpointAsc).map(inheritAndPopulateUntil);
  return preparedArray;
};
const generateStyles = (breakpoints, style) => {
  const styles = breakpoints.reduce((acc, breakpoint) => {
    const props = breakpoint.props;
    if (!(typeof breakpoint.from === "undefined" && typeof breakpoint.until === "undefined")) {
      const result = media.from(breakpoint.from === "xs" ? undefined : breakpoint.from).until(breakpoint.until === "xl" ? undefined : breakpoint.until).css(typeof style === "function" ? style(props, breakpoint.from, breakpoint.until) : style);
      return {
        ...acc,
        ...result
      };
    }
    return acc;
  }, {});
  return styles;
};
const handleBoundaryCrossing = (acc, curr) => {
  if (isMobileBreakpoint(curr.from) && (curr.until !== "md" && isDesktopBreakpoint(curr.until) || typeof curr.until === "undefined")) {
    const props = Object.keys(curr.props).filter(prop => typeof curr.props[prop] === "number" && curr.props[prop] > 3);
    if (props.length !== 0) {
      const mobileBreakpoint = {
        ...curr,
        props: curr.props
      };
      const desktopBreakpoint = {
        ...curr,
        props: curr.props
      };
      mobileBreakpoint.until = "md";
      desktopBreakpoint.from = "md";
      return acc.concat([mobileBreakpoint, desktopBreakpoint]);
    }
  }
  return acc.concat([curr]);
};
const handleResponsiveStyles = (props, styleFn) => {
  const breakpoints = prepareArray(props).filter(bp => Object.keys(bp.props).length > 0).reduce(handleBoundaryCrossing, []);
  return generateStyles(breakpoints, styleFn);
};

const StyledA11yContent = styled.span({
  position: "absolute",
  height: "1px",
  width: "1px",
  overflow: "hidden",
  clip: "rect(1px, 1px, 1px, 1px)"
});
const A11yContent = ({
  children,
  ...rest
}) => {
  return /*#__PURE__*/React.createElement(StyledA11yContent, safeRest(rest), children);
};
A11yContent.propTypes = {
  children: or$1([PropTypes$1.string, componentWithName$1("Heading")]).isRequired
};
A11yContent.defaultProps = {};

function _extends$2() {
  _extends$2 = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$2.apply(this, arguments);
}

const spacing = {
  mobile: {
    0: "0rem",
    1: "0.25rem",
    2: "0.5rem",
    3: "1rem",
    4: "1.5rem",
    5: "2rem",
    6: "2.5rem",
    7: "3rem",
    8: "4rem"
  },
  desktop: {
    0: "0rem",
    1: "0.25rem",
    2: "0.5rem",
    3: "1rem",
    4: "2rem",
    5: "3rem",
    6: "4rem",
    7: "4.5rem",
    8: "6rem"
  }
};
const convertToRem = (level, breakpoint) => {
  if (["xs", "sm"].indexOf(breakpoint) !== -1) {
    return spacing.mobile[level];
  }
  return spacing.desktop[level];
};
const inlineBetweenStyles = props => handleResponsiveStyles({
  between: props.between,
  inline: props.inline
}, ({
  between,
  inline
}, breakpoint) => {
  const base = {
    display: between !== undefined ? "flex" : "block",
    flexDirection: inline ? "row" : "column"
  };
  if (between === undefined) {
    return base;
  }
  if (between === "space-between") {
    return Object.assign(base, {
      justifyContent: "space-between"
    });
  }
  const rem = convertToRem(between, breakpoint);
  return Object.assign(base, {
    "> *:not(:last-child)": {
      ...(inline ? {
        marginRight: rem
      } : {
        marginBottom: rem
      })
    }
  });
});
const horizontalStyles = props => handleResponsiveStyles({
  horizontal: props.horizontal
}, ({
  horizontal
}, breakpoint) => {
  if (horizontal === undefined) {
    return undefined;
  }
  const rem = convertToRem(horizontal, breakpoint);
  return {
    paddingLeft: rem,
    paddingRight: rem
  };
});
const verticalStyles = props => handleResponsiveStyles({
  vertical: props.vertical
}, ({
  vertical
}, breakpoint) => {
  if (vertical === undefined) {
    return undefined;
  }
  const rem = convertToRem(vertical, breakpoint);
  return {
    paddingTop: rem,
    paddingBottom: rem
  };
});
const insetStyles = props => handleResponsiveStyles({
  inset: props.inset
}, ({
  inset
}, breakpoint) => {
  if (inset === undefined) {
    return undefined;
  }
  const rem = convertToRem(inset, breakpoint);
  return {
    paddingTop: rem,
    paddingBottom: rem,
    paddingLeft: rem,
    paddingRight: rem
  };
});
const belowStyles = props => handleResponsiveStyles({
  below: props.below
}, ({
  below
}, breakpoint) => {
  if (below === undefined) {
    return undefined;
  }
  const rem = convertToRem(below, breakpoint);
  return {
    marginBottom: rem
  };
});
const StyledBox = styled.div.attrs(({
  className,
  tag
}) => {
  return {
    className,
    as: tag
  };
})(inlineBetweenStyles, horizontalStyles, verticalStyles, insetStyles, belowStyles);
const Box = /*#__PURE__*/reactExports.forwardRef((props, ref) => /*#__PURE__*/React.createElement(StyledBox, _extends$2({}, props, {
  ref: ref
})));
Box.displayName = "Box";
Box.propTypes = {
  tag: PropTypes$1.string,
  vertical: responsiveProps(PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8])),
  horizontal: responsiveProps(PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8])),
  inset: responsiveProps(PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8])),
  below: responsiveProps(PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8])),
  between: responsiveProps(PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, "space-between"])),
  inline: responsiveProps(PropTypes$1.bool),
  className: PropTypes$1.string,
  children: PropTypes$1.node.isRequired
};
Box.defaultProps = {
  inline: false,
  tag: "div",
  vertical: undefined,
  horizontal: undefined,
  inset: undefined,
  below: undefined,
  between: undefined,
  className: undefined
};

// colours
const colorShark = "#2a2c2e";
const colorAthensGrey = "#f7f7f8";
const colorShuttleGrey = "#54595f";
const colorGainsboro = "#d8d8d8";
const colorDarkRaja = "#8C5415";
const colorRaja = "#FACA69";
const colorLightRaja = "#FFF9EE";

// brand
const colorNemetonGreen = "#6c0";
const colorNemetonPurple = "#0077b6";
const colorAccessibleGreen = "#2B8000";
const colorWhite = "#fff";

// grey
const colorGreyShark = "#2a2c2e";
const colorGreyShuttle = "#54595f";
const colorGreyRaven = "#71757b";
const colorGreyGainsboro = "#d8d8d8";
const colorGreyAthens = "#f7f7f8";

// notification
const colorLavenderBlush = "#fff6f8";
const colorPanache = "#f4f9f2";
const colorWhiteLilac = "#f2eff4";
const colorCardinal = "#c12335";
const colorRajahDark = "#8C5415";
const colorRajah = "#FACA69";
const colorRajahLight = "#FFF9EE";

// typography
const colorLink = colorGreyShuttle;
const colorText = colorGreyShark;

// tokens
const colorPrimary = colorAccessibleGreen;
const colorSecondary = colorNemetonPurple;

// icons
const colorIconPrimary = colorPrimary;
const colorIconSecondary = colorSecondary;
const colorIconDisabled = colorGreyShuttle;
const colorIconError = colorCardinal;

var colours = /*#__PURE__*/Object.freeze({
	__proto__: null,
	colorShark: colorShark,
	colorAthensGrey: colorAthensGrey,
	colorShuttleGrey: colorShuttleGrey,
	colorGainsboro: colorGainsboro,
	colorDarkRaja: colorDarkRaja,
	colorRaja: colorRaja,
	colorLightRaja: colorLightRaja,
	colorNemetonGreen: colorNemetonGreen,
	colorNemetonPurple: colorNemetonPurple,
	colorAccessibleGreen: colorAccessibleGreen,
	colorWhite: colorWhite,
	colorGreyShark: colorGreyShark,
	colorGreyShuttle: colorGreyShuttle,
	colorGreyRaven: colorGreyRaven,
	colorGreyGainsboro: colorGreyGainsboro,
	colorGreyAthens: colorGreyAthens,
	colorLavenderBlush: colorLavenderBlush,
	colorPanache: colorPanache,
	colorWhiteLilac: colorWhiteLilac,
	colorCardinal: colorCardinal,
	colorRajahDark: colorRajahDark,
	colorRajah: colorRajah,
	colorRajahLight: colorRajahLight,
	colorLink: colorLink,
	colorText: colorText,
	colorPrimary: colorPrimary,
	colorSecondary: colorSecondary,
	colorIconPrimary: colorIconPrimary,
	colorIconSecondary: colorIconSecondary,
	colorIconDisabled: colorIconDisabled,
	colorIconError: colorIconError
});

const fontNemeton = "'Nemeton-Web','Helvetica Neue', Helvetica, Arial, sans-serif";
const helveticaNeueThin35 = {
  fontWeight: 300
};
const helveticaNeueLight45 = {
  fontWeight: 400
};
const helveticaNeueRoman55 = {
  fontWeight: 500
};
const helveticaNeueMedium65 = {
  fontWeight: 700
};
const sizeSmall = {
  fontSize: "0.875rem",
  letterSpacing: -0.6,
  lineHeight: "1.42857"
};
const sizeMedium = {
  fontSize: "1rem",
  letterSpacing: -0.8,
  lineHeight: "1.5"
};
const sizeLarge = {
  fontSize: "1.25rem",
  letterSpacing: -1,
  lineHeight: "1.6"
};
const wordBreak = {
  wordWrap: "break-word"
};
const baseSupSubScripts = {
  position: "relative",
  verticalAlign: "baseline",
  paddingLeft: "0.1em"
};
const sup = {
  top: "-0.5em",
  fontSize: "0.875rem",
  ...baseSupSubScripts
};
const base$3 = {
  ...wordBreak,
  fontSize: "inherit"
};
const baseFont = {
  fontWeight: "inherit"
};
const small = {
  ...wordBreak,
  ...sizeSmall
};
const smallFont = {
  ...helveticaNeueRoman55
};
const medium = {
  ...wordBreak,
  ...sizeMedium
};
const mediumFont = {
  ...helveticaNeueLight45
};
const large = {
  ...wordBreak,
  ...sizeLarge
};
const largeFont = {
  ...wordBreak,
  ...helveticaNeueLight45
};
const boldFont = {
  ...wordBreak,
  ...helveticaNeueMedium65
};
const color = {
  color: colorText
};
const invertedColor = {
  color: colorWhite
};
const blockText = {
  display: "block"
};

var typography = /*#__PURE__*/Object.freeze({
	__proto__: null,
	fontNemeton: fontNemeton,
	helveticaNeueThin35: helveticaNeueThin35,
	helveticaNeueLight45: helveticaNeueLight45,
	helveticaNeueRoman55: helveticaNeueRoman55,
	helveticaNeueMedium65: helveticaNeueMedium65,
	sizeSmall: sizeSmall,
	sizeMedium: sizeMedium,
	sizeLarge: sizeLarge,
	wordBreak: wordBreak,
	baseSupSubScripts: baseSupSubScripts,
	sup: sup,
	base: base$3,
	baseFont: baseFont,
	small: small,
	smallFont: smallFont,
	medium: medium,
	mediumFont: mediumFont,
	large: large,
	largeFont: largeFont,
	boldFont: boldFont,
	color: color,
	invertedColor: invertedColor,
	blockText: blockText
});

const textColor = ({
  invert
}) => invert ? invertedColor : color;
const textInheritColor = ({
  inheritColor
}) => inheritColor ? {
  color: "inherit"
} : undefined;
const textSize = ({
  size
}) => typography[size];
const textBold = ({
  bold,
  size
}) => bold ? boldFont : typography[`${size}Font`];
const textBlock = ({
  block
}) => block ? blockText : undefined;

// This named export is not guaranteed to be maintained and may be removed at any time.
const StyledText = styled.span(textColor, textInheritColor, textSize, textBold, textBlock, {
  sup: sup
});
const Text = ({
  children,
  size,
  invert,
  ...rest
}, context) => /*#__PURE__*/React.createElement(DependentIconSizeContext.Provider, {
  value: {
    paragraphSize: size,
    invert
  }
}, /*#__PURE__*/React.createElement(StyledText, _extends$2({}, safeRest(rest), {
  size: size,
  invert: invert,
  inheritColor: context.inheritColor
}), children));
Text.propTypes = {
  block: PropTypes$1.bool,
  bold: PropTypes$1.bool,
  size: PropTypes$1.oneOf(["base", "small", "medium", "large"]),
  invert: PropTypes$1.bool,
  children: PropTypes$1.node.isRequired
};
Text.defaultProps = {
  block: false,
  bold: false,
  size: "base",
  invert: false
};
Text.contextTypes = {
  inheritColor: PropTypes$1.bool
};

const deprecate = (componentName, message) => {
  if (process.env.NODE_ENV === "production") {
    return;
  }
  console.warn(`[NDS] [Deprecate] ${componentName}: ${message}`); // eslint-disable-line no-console
};

const warn = (componentName, message) => {
  if (process.env.NODE_ENV === "production") {
    return;
  }
  console.warn(`[NDS] ${componentName}: ${message}`); // eslint-disable-line no-console
};

const HeadingLevels = {
  h1: {
    ...helveticaNeueLight45,
    fontSize: "1.75rem",
    lineHeight: "1.29",
    // 36px
    letterSpacing: "-1.6px",
    ...media.from("md").css({
      ...helveticaNeueThin35,
      fontSize: "2.75rem",
      lineHeight: "1.18",
      letterSpacing: "0"
    }),
    sup: {
      ...baseSupSubScripts,
      fontSize: "1.25rem",
      top: "-1em",
      ...media.from("md").css({
        fontSize: "1.25rem",
        top: "-1.3em"
      })
    }
  },
  h2: {
    ...helveticaNeueLight45,
    fontSize: "1.5rem",
    lineHeight: "1.33",
    // 30px
    letterSpacing: "-0.7px",
    ...media.from("md").css({
      fontSize: "1.75rem",
      lineHeight: "1.29",
      letterSpacing: "-0.8px"
    }),
    sup: {
      ...baseSupSubScripts,
      fontSize: "1rem",
      top: "-0.8em",
      ...media.from("md").css({
        fontSize: "1rem",
        top: "-0.7em"
      })
    }
  },
  h3: {
    ...helveticaNeueMedium65,
    fontSize: "1.25rem",
    lineHeight: "1.4",
    // 28px
    letterSpacing: "-0.6px",
    sup: {
      ...baseSupSubScripts,
      fontSize: "0.875rem",
      top: "-0.5em"
    }
  },
  h4: {
    ...helveticaNeueMedium65,
    fontSize: "1rem",
    lineHeight: "1.25",
    // 20px
    letterSpacing: "-0.6px",
    sup: {
      ...baseSupSubScripts,
      fontSize: "0.875rem",
      top: "-0.5em"
    }
  }
};
const StyledHeading = styled.h1(wordBreak, ({
  level,
  invert
}) => {
  const baseColor = level === "h1" || level === "h2" ? colorSecondary : colorText;
  const color = invert ? colorWhite : baseColor;
  return {
    color,
    ...HeadingLevels[`${level}`],
    "& > span": {
      letterSpacing: "inherit"
    }
  };
});
const Heading = /*#__PURE__*/reactExports.forwardRef(({
  level,
  tag = level,
  invert,
  children,
  ...rest
}, ref) => {
  return /*#__PURE__*/React.createElement(StyledHeading, _extends$2({}, safeRest(rest), {
    ref: ref,
    as: tag,
    level: level,
    invert: invert,
    "data-testid": "heading"
  }), children);
});
Heading.displayName = "Heading";
Heading.propTypes = {
  level: PropTypes$1.oneOf(["h1", "h2", "h3", "h4"]).isRequired,
  tag: PropTypes$1.oneOf(["h1", "h2", "h3", "h4", "div", "span"]),
  invert: PropTypes$1.bool,
  children: PropTypes$1.node.isRequired
};
Heading.defaultProps = {
  invert: false,
  tag: undefined
};

const BenefitItem$1 = ({
  icon: Icon,
  heading,
  children,
  ...rest
}) => {
  if (Icon === undefined || typeof Icon === "undefined") {
    warn("BenefitWitHeading", "An icon must be set in either BenefitWithHeading or BenefitWithHeading.Item.");
  }
  return /*#__PURE__*/React.createElement(Box, _extends$2({}, safeRest(rest), {
    between: 3,
    inline: true,
    tag: "li"
  }), Icon && /*#__PURE__*/React.createElement(Box, {
    vertical: 1
  }, /*#__PURE__*/React.createElement(Icon, {
    size: 24,
    variant: "default"
  })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Heading, {
    level: "h4",
    tag: "div"
  }, heading), /*#__PURE__*/React.createElement(Text, {
    size: "small"
  }, children)));
};
BenefitItem$1.propTypes = {
  icon: componentWithName$1("DecorativeIcon", true),
  heading: PropTypes$1.string.isRequired,
  children: PropTypes$1.node.isRequired
};
BenefitItem$1.defaultProps = {
  icon: undefined
};
BenefitItem$1.displayName = "BenefitWithHeading.Item";

const cloneChild$1 = (icon, child) => {
  if (child.props.icon) {
    return child;
  }
  return /*#__PURE__*/React.cloneElement(child, {
    icon
  });
};
const BenefitWithHeading = ({
  icon,
  children,
  ...rest
}) => /*#__PURE__*/React.createElement(Box, _extends$2({}, safeRest(rest), {
  tag: "ul",
  between: 3
}), React.Children.map(children, child => cloneChild$1(icon, child)));
BenefitWithHeading.propTypes = {
  icon: componentWithName$1("DecorativeIcon", true),
  children: componentWithName$1("BenefitItem").isRequired
};
BenefitWithHeading.defaultProps = {
  icon: undefined
};
BenefitWithHeading.Item = BenefitItem$1;

const BenefitItem = ({
  icon: Icon,
  children,
  ...rest
}) => {
  if (Icon === undefined || typeof Icon === "undefined") {
    warn("BenefitNoHeading", "An icon must be set in either BenefitNoHeading or BenefitNoHeading.Item.");
  }
  return /*#__PURE__*/React.createElement(Box, _extends$2({}, safeRest(rest), {
    between: 3,
    inline: true,
    tag: "li"
  }), Icon && /*#__PURE__*/React.createElement(Icon, {
    size: 24,
    variant: "default"
  }), /*#__PURE__*/React.createElement(Text, {
    size: "small"
  }, children));
};
BenefitItem.propTypes = {
  icon: componentWithName$1("DecorativeIcon", true),
  children: PropTypes$1.node.isRequired
};
BenefitItem.defaultProps = {
  icon: undefined
};
BenefitItem.displayName = "BenefitNoHeading.Item";

const cloneChild = (icon, child) => {
  if (child.props.icon) {
    return child;
  }
  return /*#__PURE__*/React.cloneElement(child, {
    icon
  });
};
const BenefitNoHeading = ({
  icon,
  children,
  ...rest
}) => /*#__PURE__*/React.createElement(Box, _extends$2({}, safeRest(rest), {
  tag: "ul",
  between: 3
}), React.Children.map(children, child => cloneChild(icon, child)));
BenefitNoHeading.propTypes = {
  icon: componentWithName$1("DecorativeIcon", true),
  children: componentWithName$1("BenefitItem").isRequired
};
BenefitNoHeading.defaultProps = {
  icon: undefined
};
BenefitNoHeading.Item = BenefitItem;

const thin = {
  borderWidth: 1,
  borderStyle: "solid"
};
const none = {
  borderWidth: "0"
};
const rounded = {
  borderRadius: "4px"
};
const circular = {
  borderRadius: "50%"
};

const standard = {
  backgroundColor: colorGreyAthens
};
const success = {
  backgroundColor: colorPanache
};
const error = {
  backgroundColor: colorLavenderBlush
};
const warning = {
  backgroundColor: colorRajahLight
};

const noSpacing = {
  padding: 0,
  margin: 0
};

const relative = {
  position: "relative"
};
const absolute = {
  position: "absolute"
};
const centerVertically = {
  top: "50%",
  transform: "translateY(-50%)"
};

const inputHeight = {
  height: "3rem"
};
const font = {
  fontFamily: fontNemeton
};
const baseButton$1 = {
  boxSixing: "border-box",
  margin: 0,
  padding: "0 2rem",
  cursor: "pointer",
  background: "none",
  transition: "background 0.2s",
  display: "flex",
  width: "100%",
  alignItems: "center",
  justifyContent: "center",
  textAlign: "center",
  minHeight: "3.25rem",
  ...media.from("md").css({
    display: "inline-flex",
    width: "auto",
    minWidth: "180px"
  }),
  "&:after": {
    content: "",
    minHeight: "inherit",
    fontSize: 0
  }
};

const noStyle = {
  ...noSpacing,
  ...none,
  ...font,
  ...color,
  appearance: "none",
  background: "none",
  boxShadow: "none",
  cursor: "pointer"
};

const fixLineHeight = {
  lineHeight: 1
};

/*
By default, browsers outline links in their own way. (Chrome/Safari do a light blue outline, Firefox/IE do a dotted line, etc)
Firefox also uses the text color for the outline, causing it to be invisible for primary and secondary ButtonLinks.

So, reset the outlines to fix Firefox and use browser defaults.

Solution from here: https://stackoverflow.com/questions/7538771/what-is-webkit-focus-ring-color
*/

const focusOutline = {
  ":focus": {
    // outline: 'dotted 1px Highlight', // TOOD: cannot have duplicate keys with style-objects.
    outline: "auto 5px -webkit-focus-ring-color"
  }
};

const base$2 = {
  "&": {
    paddingLeft: "3rem"
  },
  "& &": {
    marginTop: "1rem",
    marginBottom: "0.5rem"
  }
};

const preventDisabling = ({
  disabled,
  ...props
}) => {
  if (disabled) {
    warn("Button", "Buttons are not able to be disabled.");
  }
  return props;
};
const getVariant$1 = ({
  variant,
  rank
}) => {
  let backgroundColor;
  let color;
  let border;
  let transition;
  const hover = {};
  const active = {};
  const focus = {};
  if (variant === "standard" || variant === "brand" || variant === "danger") {
    focus.outline = "none !important";
    transition = "background 0.2s, color 0.2s, border 0.2s ease";
  } else {
    hover.boxShadow = "0 0 0 0.0625rem";
  }
  switch (variant) {
    case "primary":
      backgroundColor = colorPrimary;
      color = colorWhite;
      hover.backgroundColor = colorWhite;
      hover.color = colorPrimary;
      break;
    case "secondary":
      backgroundColor = colorSecondary;
      color = colorWhite;
      hover.backgroundColor = colorWhite;
      hover.color = colorSecondary;
      break;
    case "inverted":
      backgroundColor = colorWhite;
      color = colorText;
      hover.backgroundColor = "transparent";
      hover.color = colorWhite;
      break;
    case "standard":
      if (rank === "main") {
        backgroundColor = colorAccessibleGreen;
        color = colorWhite;
        hover.backgroundColor = "#1F5C09";
        hover.boxShadow = "0 0 0 0.125rem #1F5C09";
        active.backgroundColor = "#163E06 !important";
        focus.backgroundColor = "#1F5C09";
        focus.boxShadow = `0 0 0 0.1875rem #509F33, 0 0 0 0.125rem ${colorWhite} inset`;
      } else {
        backgroundColor = colorWhite;
        color = colorAccessibleGreen;
        border = `0.0625rem solid ${colorAccessibleGreen}`;
        hover.boxShadow = `0 0 0 0.125rem ${colorAccessibleGreen}`;
        active.backgroundColor = "#F4F9F2";
        active.color = "#1F5C09";
        focus.border = "0.0625rem solid #509F33";
        focus.boxShadow = `0 0 0 0.125rem #509F33, 0 0 0 0.125rem ${colorWhite} inset, 0 0 0 0.1875rem ${colorAccessibleGreen} inset`;
      }
      break;
    case "brand":
      if (rank === "main") {
        backgroundColor = colorNemetonPurple;
        color = colorWhite;
        hover.backgroundColor = "#371E4F";
        hover.boxShadow = "0 0 0 0.125rem #371E4F";
        active.backgroundColor = "#231332 !important";
        focus.backgroundColor = "#371E4F";
        focus.boxShadow = `0 0 0 0.1875rem #7C53A5 , 0 0 0 0.125rem ${colorWhite} inset`;
      } else {
        backgroundColor = colorWhite;
        color = colorNemetonPurple;
        border = `0.0625rem solid ${colorNemetonPurple}`;
        hover.boxShadow = `0 0 0 0.125rem ${colorNemetonPurple}`;
        active.color = "#371E4F";
        active.backgroundColor = `${colorWhiteLilac}`;
        focus.border = "0.0625rem solid #7C53A5";
        focus.boxShadow = `0 0 0 0.125rem #7C53A5, 0 0 0 0.125rem ${colorWhite} inset, 0 0 0 0.1875rem ${colorNemetonPurple} inset`;
      }
      break;
    case "danger":
      backgroundColor = colorWhite;
      color = colorCardinal;
      border = `0.0625rem solid ${colorCardinal}`;
      hover.boxShadow = `0 0 0 0.125rem ${colorCardinal}`;
      active.color = "#770F1B";
      active.backgroundColor = `${colorLavenderBlush}`;
      focus.border = "0.0625rem solid #D7707B";
      focus.boxShadow = `0 0 0 0.125rem #D7707B, 0 0 0 0.125rem ${colorWhite} inset, 0 0 0 0.1875rem ${colorCardinal} inset`;
      break;
  }
  return {
    backgroundColor,
    color,
    border,
    transition,
    "&:hover": hover,
    "@media (hover: none)": {
      "&:hover": {
        boxShadow: "none",
        backgroundColor,
        color
      }
    },
    "&:active": active,
    "&:focus": focus,
    "@media (prefers-reduced-motion: reduce)": {
      transition: "none !important"
    }
  };
};
const StyledButton = styled.button(none, rounded, medium, boldFont, font, baseButton$1, getVariant$1);
const ButtonTextWrapper = styled.span(({
  isOldButton
}) => ({
  width: "100%",
  marginTop: !isOldButton && "-1px"
}));
const isDeprecatedButtonVariant$1 = variant => {
  return ["primary", "secondary"].indexOf(variant) !== -1;
};
const Button$1 = /*#__PURE__*/reactExports.forwardRef(({
  type,
  variant,
  rank,
  children,
  ...rest
}, ref) => {
  const restNoDisabled = preventDisabling(rest);

  /* if (isDeprecatedButtonVariant(variant)) {
    deprecate(
      "core-button",
      "The 'primary' and 'secondary' variants have been deprecated."
    );
  } */

  return /*#__PURE__*/React.createElement(StyledButton, _extends$2({}, safeRest(restNoDisabled), {
    variant: variant,
    rank: rank,
    type: type,
    ref: ref
  }), /*#__PURE__*/React.createElement(ButtonTextWrapper, {
    isOldButton: isDeprecatedButtonVariant$1(variant)
  }, children));
});
Button$1.displayName = "Button";
Button$1.propTypes = {
  type: PropTypes$1.oneOf(["button", "submit", "reset"]),
  variant: PropTypes$1.oneOf(["primary", "secondary", "inverted", "standard", "brand", "danger"]),
  rank: PropTypes$1.oneOf(["main", "common"]),
  children: or$1([PropTypes$1.string, componentWithName$1("A11yContent"), htmlElement("span")]).isRequired
};
Button$1.defaultProps = {
  type: "button",
  variant: "primary",
  rank: "common"
};

const sanitize = text => text.toString().toLowerCase().replace(/ /g, "-").replace(/[^a-zA-Z0-9-]/g, "");
const generateId = (...choices) => {
  const id = sanitize(find(choices, choice => choice));
  return {
    identity: () => id,
    postfix: value => `${id}_${sanitize(value)}`
  };
};

const StyledButtonGroupItem = styled.div({
  margin: "0.5rem 0"
});
const StyledInput$1 = styled.input({
  position: "absolute",
  opacity: "0",
  "&:checked ~ label": {
    backgroundColor: colorNemetonPurple,
    boxShadow: `0px 0px 0px 0px ${colorNemetonPurple}`,
    color: colorWhite
  },
  "&:focus ~ label": {
    boxShadow: `0px 0px 0px 2px ${colorNemetonPurple}, 0px 0px 8px 1px ${colorNemetonPurple}`
  }
});
const StyledLabel$4 = styled.label(none, rounded, medium, boldFont, font, baseButton$1, {
  transition: "background 0.2s, color 0.2s, box-shadow 0.2s",
  backgroundColor: colorWhite,
  boxShadow: `0px 0px 0px 1px ${colorNemetonPurple}`,
  color: colorNemetonPurple,
  whiteSpace: "nowrap",
  minWidth: "136px",
  "&:hover": {
    backgroundColor: colorWhite,
    color: colorNemetonPurple,
    boxShadow: `0px 0px 0px 2px ${colorNemetonPurple}, 0px 0px 8px 1px ${colorNemetonPurple}`
  },
  ...media.from("md").css({
    minWidth: "136px"
  })
});
const ButtonGroupItem = /*#__PURE__*/React.forwardRef(({
  name,
  value,
  checked,
  onChange,
  onFocus,
  onBlur,
  children,
  defaultChecked,
  readOnly,
  ...rest
}, ref) => {
  const itemId = generateId(name).postfix(value);
  return /*#__PURE__*/React.createElement(StyledButtonGroupItem, safeRest(rest), /*#__PURE__*/React.createElement(StyledInput$1, {
    id: itemId,
    name: name,
    value: value,
    type: "radio",
    checked: checked,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    defaultChecked: defaultChecked,
    readOnly: readOnly,
    ref: ref
  }), /*#__PURE__*/React.createElement(StyledLabel$4, {
    htmlFor: itemId
  }, children));
});
ButtonGroupItem.propTypes = {
  name: PropTypes$1.string,
  value: PropTypes$1.string.isRequired,
  checked: PropTypes$1.bool,
  onChange: PropTypes$1.func,
  onFocus: PropTypes$1.func,
  onBlur: PropTypes$1.func,
  defaultChecked: PropTypes$1.bool,
  readOnly: PropTypes$1.bool,
  children: or$1([PropTypes$1.string, componentWithName$1("A11yContent")]).isRequired
};
ButtonGroupItem.defaultProps = {
  checked: undefined,
  name: undefined,
  onChange: undefined,
  onFocus: undefined,
  onBlur: undefined,
  defaultChecked: undefined,
  readOnly: undefined
};
ButtonGroupItem.displayName = "ButtonGroup.Item";

const StyledButtonGroup = styled(Box)({
  flexFlow: "row wrap",
  maxWidth: "784px"
});
const ButtonGroup = /*#__PURE__*/React.forwardRef(({
  name,
  onChange,
  onFocus,
  onBlur,
  value,
  label,
  children,
  readOnly,
  showFieldset,
  ...rest
}, ref) => {
  const passedButtons = React.Children.map(children, child => /*#__PURE__*/React.cloneElement(child, {
    name,
    onChange,
    onFocus,
    onBlur,
    checked: typeof value !== "undefined" ? value === child.props.value : undefined,
    readOnly
  }));
  const buttonValues = [];
  Object.keys(passedButtons).forEach(key => {
    buttonValues.push(passedButtons[key].props.value);
  });
  if (!showFieldset) {
    return /*#__PURE__*/React.createElement(Box, {
      between: 2
    }, /*#__PURE__*/React.createElement(Text, {
      bold: true,
      size: "medium"
    }, label), /*#__PURE__*/React.createElement(StyledButtonGroup, {
      between: 3,
      inline: true
    }, passedButtons));
  }
  return /*#__PURE__*/React.createElement("fieldset", _extends$2({}, safeRest(rest), {
    name: name,
    ref: ref
  }), /*#__PURE__*/React.createElement("legend", null, /*#__PURE__*/React.createElement(Text, {
    bold: true,
    size: "medium"
  }, label)), /*#__PURE__*/React.createElement(StyledButtonGroup, {
    between: 3,
    inline: true
  }, passedButtons));
});
ButtonGroup.displayName = "ButtonGroup";
ButtonGroup.propTypes = {
  name: PropTypes$1.string.isRequired,
  value: PropTypes$1.string,
  label: PropTypes$1.string.isRequired,
  onChange: PropTypes$1.func,
  onFocus: PropTypes$1.func,
  onBlur: PropTypes$1.func,
  readOnly: PropTypes$1.bool,
  showFieldset: PropTypes$1.bool,
  children: componentWithName$1("ButtonGroup.Item", true).isRequired
};
ButtonGroup.defaultProps = {
  onFocus: undefined,
  onBlur: undefined,
  onChange: undefined,
  value: undefined,
  readOnly: undefined,
  showFieldset: false
};
ButtonGroup.Item = ButtonGroupItem;

const VARIANT_PRIMARY = "primary";
const VARIANT_SECONDARY = "secondary";
const VARIANT_INVERTED = "inverted";
const VARIANT_STANDARD = "standard";
const VARIANT_BRAND = "brand";
const RANK_MAIN = "main";
const RANK_COMMON = "common";
const DEFAULT_VARIANT = VARIANT_PRIMARY;
const VALID_VARIANTS = [VARIANT_PRIMARY, VARIANT_SECONDARY, VARIANT_INVERTED, VARIANT_STANDARD, VARIANT_BRAND];
const getVisitedColor = (variant, rank) => {
  if (variant === VARIANT_PRIMARY || variant === VARIANT_SECONDARY) {
    return colorWhite;
  }
  if (variant === VARIANT_STANDARD) {
    return rank === RANK_MAIN ? colorWhite : colorPrimary;
  }
  if (variant === VARIANT_BRAND) {
    return rank === RANK_MAIN ? colorWhite : colorSecondary;
  }
  return colorText;
};
const getHoverColor = (variant, rank) => {
  if (variant === VARIANT_PRIMARY || variant === VARIANT_STANDARD && rank === RANK_COMMON) {
    return colorPrimary;
  }
  if (variant === VARIANT_SECONDARY || variant === VARIANT_BRAND && rank === RANK_COMMON) {
    return colorSecondary;
  }
  return colorWhite;
};
const hoverStyles = ({
  variant,
  rank
}) => {
  const hoverColor = getHoverColor(variant, rank);
  return {
    "@media(hover: hover)": {
      "&:hover": {
        color: hoverColor
      }
    }
  };
};
const visitedStyles = ({
  variant,
  rank
}) => {
  const color = getVisitedColor(variant, rank);
  return {
    "&:link,&:visited": {
      color
    }
  };
};
const StyledButtonLink = styled(StyledButton)(focusOutline, {
  textDecoration: "none"
}, visitedStyles, hoverStyles, ({
  fullWidth
}) => {
  const width = fullWidth ? "100%" : "auto";
  return {
    "&:link,&:visited": {
      width
    }
  };
});
const isDeprecatedButtonVariant = variant => {
  return ["primary", "secondary"].indexOf(variant) !== -1;
};
const validateVariant = variant => {
  if (VALID_VARIANTS.indexOf(variant) === -1) {
    return DEFAULT_VARIANT;
  }
  return variant;
};
const ButtonLink = /*#__PURE__*/reactExports.forwardRef(({
  reactRouterLinkComponent,
  variant,
  fullWidth,
  children,
  ...rest
}, ref) => {
  if ((reactRouterLinkComponent || rest.to) && !(reactRouterLinkComponent && rest.to)) {
    warn("Link Button", "The props `reactRouterLinkComponent` and `to` must be used together.");
  }
  if (isDeprecatedButtonVariant(variant)) {
    deprecate("@nds-core/core-button-link", "The 'primary' and 'secondary' variants have been deprecated.");
  }
  return /*#__PURE__*/React.createElement(StyledButtonLink, _extends$2({}, safeRest(rest), {
    as: reactRouterLinkComponent || "a",
    variant: validateVariant(variant),
    ref: ref,
    fullWidth: fullWidth
  }), children);
});
ButtonLink.displayName = "ButtonLink";
ButtonLink.propTypes = {
  variant: PropTypes$1.oneOf(VALID_VARIANTS),
  rank: PropTypes$1.oneOf(["main", "common"]),
  reactRouterLinkComponent: PropTypes$1.oneOfType([PropTypes$1.func, PropTypes$1.object]),
  to: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.object]),
  href: PropTypes$1.string,
  fullWidth: PropTypes$1.bool,
  children: or$1([PropTypes$1.string, componentWithName$1("A11yContent"), htmlElement("span")]).isRequired
};
ButtonLink.defaultProps = {
  variant: DEFAULT_VARIANT,
  rank: "common",
  reactRouterLinkComponent: null,
  to: null,
  href: null,
  fullWidth: false
};

class ColoredTextProvider extends React.Component {
  getChildContext() {
    return {
      inheritColor: true
    };
  }
  render() {
    const {
      colorClassName,
      className,
      tag,
      children
    } = this.props;
    return /*#__PURE__*/React.createElement(tag, {
      className: colorClassName || className
    }, children);
  }
}
ColoredTextProvider.propTypes = {
  colorClassName: PropTypes$1.string,
  className: PropTypes$1.string,
  tag: PropTypes$1.string,
  children: PropTypes$1.node.isRequired
};
ColoredTextProvider.defaultProps = {
  colorClassName: undefined,
  className: undefined,
  tag: "div"
};
ColoredTextProvider.childContextTypes = {
  inheritColor: PropTypes$1.bool
};

const StyledFeedback = styled(({
  feedback,
  ...rest
}) => /*#__PURE__*/React.createElement(Box, rest))(({
  feedback
}) => ({
  ...rounded,
  ...(feedback === "success" && success),
  ...(feedback === "error" && error),
  ...(feedback === undefined && standard)
}));
const InputFeedback = ({
  feedback,
  children,
  ...rest
}) => /*#__PURE__*/React.createElement(StyledFeedback, _extends$2({}, safeRest(rest), {
  inset: 3,
  role: feedback === "error" ? "alert" : null,
  feedback: feedback
}), children);
InputFeedback.propTypes = {
  feedback: PropTypes$1.oneOf(["success", "error"]),
  children: PropTypes$1.node.isRequired
};
InputFeedback.defaultProps = {
  feedback: undefined
};

const paragraphColor = ({
  invert
}) => invert ? invertedColor : color;
const paragraphInheritColor = ({
  inheritColor
}) => inheritColor ? {
  color: "inherit"
} : undefined;
const paragraphSize = ({
  size
}) => typography[size];
const paragraphBold = ({
  bold,
  size
}) => bold ? boldFont : typography[`${size}Font`];
const paragraphAlign = ({
  align
}) => ({
  textAlign: align
});
const truncateText = ({
  truncate,
  numberOfLines
}) => truncate && {
  display: "-webkit-box",
  "-webkit-box-orient": "vertical",
  "-webkit-line-clamp": `${numberOfLines} !important`,
  overflow: "hidden"
};
const StyledParagraph = styled.p(paragraphColor, wordBreak, noSpacing, paragraphInheritColor, paragraphSize, paragraphBold, paragraphAlign, truncateText, {
  sup: sup
});
const Paragraph = ({
  size,
  invert,
  children,
  ...rest
}, context) => {
  return /*#__PURE__*/React.createElement(DependentIconSizeContext.Provider, {
    value: {
      paragraphSize: size,
      invert
    }
  }, /*#__PURE__*/React.createElement(StyledParagraph, _extends$2({}, safeRest(rest), {
    size: size,
    invert: invert,
    inheritColor: context.inheritColor,
    numberOfLines: rest.numberOfLines,
    truncate: rest.truncate
  }), children));
};
Paragraph.propTypes = {
  bold: PropTypes$1.bool,
  size: PropTypes$1.oneOf(["small", "medium", "large"]),
  align: PropTypes$1.oneOf(["left", "center", "right"]),
  invert: PropTypes$1.bool,
  children: PropTypes$1.node.isRequired,
  truncate: PropTypes$1.bool,
  numberOfLines: PropTypes$1.number
};
Paragraph.defaultProps = {
  bold: false,
  size: "medium",
  align: "left",
  invert: false
};
Paragraph.contextTypes = {
  inheritColor: PropTypes$1.bool
};

const StyledSVG = styled.svg(({
  width,
  height
}) => ({
  width: `${width}rem`,
  height: `${height}rem`
}));
const FeedbackIcon$1 = ({
  width,
  height,
  copy,
  copyDictionary,
  optionalText,
  children,
  ...rest
}) => {
  if (rest.onClick) {
    console.warn("FeedbackIcon", "FeedbackIcons are not meant to be interactive, do not pass an onClick handler.");
  }
  const a11yText = getCopy(copyDictionary, !optionalText ? copy || "en" : copy).a11yText;
  if (!optionalText && a11yText === "") {
    warn("FeedbackIcon", "The `copy` prop is required, please provide some copy by supplying an object with `a11yText` as a key and your copy as a value.");
  }
  return /*#__PURE__*/React.createElement(StyledSVG, _extends$2({}, safeRest(rest), {
    role: "img",
    "aria-hidden": a11yText === "" ? true : undefined,
    width: pixelToRem(width),
    height: pixelToRem(height)
  }), a11yText && /*#__PURE__*/React.createElement("title", null, a11yText), children);
};
FeedbackIcon$1.propTypes = {
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    a11yText: PropTypes$1.string.isRequired
  })]).isRequired,
  copyDictionary: PropTypes$1.object,
  optionalText: PropTypes$1.bool,
  children: PropTypes$1.node.isRequired,
  width: PropTypes$1.number.isRequired,
  height: PropTypes$1.number.isRequired
};
FeedbackIcon$1.defaultProps = {
  optionalText: false,
  copyDictionary: {}
};

const Checkmark = props => {
  return /*#__PURE__*/React.createElement(FeedbackIcon$1, _extends$2({
    copy: {
      a11yText: ""
    }
  }, props, {
    optionalText: true,
    width: 16,
    height: 16,
    viewBox: "0 0 16 16"
  }), /*#__PURE__*/React.createElement("path", {
    fill: colorAccessibleGreen,
    fillRule: "evenodd",
    d: "M5.807 13.072a.592.592 0 0 1-.091.106l-.026.024-.1.112a.545.545 0 0 1-.433.185.581.581 0 0 1-.453-.204L1.159 9.2a.677.677 0 0 1 .014-.888.55.55 0 0 1 .812 0l3.155 3.382 8.872-9.512a.548.548 0 0 1 .816.002c.226.242.23.636.009.881l-9.03 10.008z"
  }));
};
Checkmark.displayName = "Checkmark";

const Times = props => {
  return /*#__PURE__*/React.createElement(FeedbackIcon$1, _extends$2({
    copy: {
      a11yText: ""
    }
  }, props, {
    optionalText: true,
    width: 16,
    height: 16,
    viewBox: "0 0 16 16"
  }), /*#__PURE__*/React.createElement("path", {
    fill: colorCardinal,
    fillRule: "evenodd",
    d: "M8 9.17l-4.931 4.637a.756.756 0 0 1-1.034-.021l.176.175a.718.718 0 0 1-.003-1.012l4.781-4.782a40.59 40.59 0 0 1-.083-.085l-4.72-5.017a.753.753 0 0 1 .03-1.03l-.176.177a.714.714 0 0 1 1.012-.003L8 7.157l4.948-4.948a.714.714 0 0 1 1.012.003l-.176-.176a.753.753 0 0 1 .03 1.029l-4.72 5.017a40.59 40.59 0 0 1-.083.085l4.781 4.782a.718.718 0 0 1-.003 1.012l.176-.175a.756.756 0 0 1-1.034.021L8 9.17z"
  }));
};
Times.displayName = "Times";

const copyDictionary$9 = {
  en: {
    a11yText: "Success"
  },
  fr: {
    a11yText: "Réussite"
  }
};
const NotificationSuccess = props => /*#__PURE__*/React.createElement(FeedbackIcon$1, _extends$2({}, props, {
  copyDictionary: copyDictionary$9,
  width: 20,
  height: 20,
  viewBox: "0 0 20 20"
}), /*#__PURE__*/React.createElement("path", {
  fill: colorAccessibleGreen,
  fillRule: "evenodd",
  d: "M0 10C0 4.48 4.48 0 10 0s10 4.48 10 10-4.48 10-10 10S0 15.52 0 10zm8.127 4.673a.633.633 0 0 0 .092-.105l7.734-8.572a.693.693 0 0 0-.009-.925.595.595 0 0 0-.882-.001l-7.514 8.055-2.612-2.8a.596.596 0 0 0-.88 0 .706.706 0 0 0-.014.928l3.038 3.51a.623.623 0 0 0 .486.219.587.587 0 0 0 .46-.2l.087-.097.014-.012z"
}));
NotificationSuccess.displayName = "NotificationSuccess";

const copyDictionary$8 = {
  en: {
    a11yText: "Warning"
  },
  fr: {
    a11yText: "Avertissement"
  }
};
const NotificationWarning = props => /*#__PURE__*/React.createElement(FeedbackIcon$1, _extends$2({}, props, {
  copyDictionary: copyDictionary$8,
  width: 20,
  height: 20,
  viewBox: "0 0 20 20"
}), /*#__PURE__*/React.createElement("path", {
  fill: colorRajahDark,
  fillRule: "evenodd",
  d: "M10.878 1.61l8.315 15.244a1 1 0 0 1-.878 1.48H1.685a1 1 0 0 1-.878-1.48L9.122 1.61a1 1 0 0 1 1.756 0zM10 16.794c.46 0 .833-.402.833-.898 0-.495-.373-.897-.833-.897-.46 0-.833.402-.833.897 0 .496.373.898.833.898zm-.022-2.885c.347 0 .63-.297.64-.67l.179-6.698c.01-.388-.28-.709-.64-.709h-.35c-.361 0-.65.32-.64.708l.171 6.699c.01.373.294.67.64.67z"
}));
NotificationWarning.displayName = "NotificationWarning";

const copyDictionary$7 = {
  en: {
    a11yText: "Error"
  },
  fr: {
    a11yText: "Erreur"
  }
};
const NotificationError = props => /*#__PURE__*/React.createElement(FeedbackIcon$1, _extends$2({}, props, {
  copyDictionary: copyDictionary$7,
  width: 20,
  height: 20,
  viewBox: "0 0 20 20"
}), /*#__PURE__*/React.createElement("path", {
  fill: colorCardinal,
  fillRule: "evenodd",
  d: "M0 10C0 4.48 4.48 0 10 0s10 4.48 10 10-4.48 10-10 10S0 15.52 0 10zm10 5.833a.833.833 0 1 0 0-1.666.833.833 0 0 0 0 1.666zm-.003-2.5c.354 0 .644-.306.654-.69l.182-6.912c.01-.4-.285-.731-.654-.731H9.82c-.369 0-.664.33-.654.73l.175 6.912c.01.385.3.691.655.691z"
}));
NotificationError.displayName = "NotificationError";

const ErrorText = styled(ColoredTextProvider)(({
  isError
}) => ({
  ...(isError && {
    color: colorCardinal
  })
}));
const FakeCheckbox = styled.span({
  height: "1.25rem",
  width: "1.25rem",
  minHeight: "1.25rem",
  minWidth: "1.25rem",
  outline: 0,
  lineHeight: 0,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  cursor: "pointer",
  marginTop: "0.125rem",
  transition: "border-color 0.1s linear, background-color 0.1s linear",
  ...thin,
  ...rounded,
  borderColor: colorGreyShuttle,
  backgroundColor: colorWhite,
  "& > i": {
    display: "none"
  }
});
const HiddenInput$1 = styled.input({
  position: "absolute",
  width: "1.2rem",
  height: "1.2rem",
  margin: "2px 1px",
  opacity: "0",
  pointerEvents: "none"
});
const StyledLabel$3 = styled.label(({
  isError
}) => ({
  display: "flex",
  cursor: "pointer",
  ...(isError && {
    [`div > ${FakeCheckbox}`]: {
      borderColor: colorCardinal
    }
  }),
  [`${HiddenInput$1}:focus ~ & > div > ${FakeCheckbox}`]: {
    boxShadow: `0 0 4px 1px ${colorGreyShuttle}`,
    borderColor: isError ? colorCardinal : colorWhite
  },
  [`${HiddenInput$1}:checked ~ & > div > ${FakeCheckbox}`]: {
    backgroundColor: colorAccessibleGreen,
    borderColor: colorAccessibleGreen,
    "& > i": {
      display: "block"
    }
  },
  [`${HiddenInput$1}:disabled ~ & > div > ${FakeCheckbox}`]: {
    backgroundColor: colorGreyGainsboro,
    borderColor: colorGreyGainsboro
  },
  [`${HiddenInput$1}:disabled ~ & > div > div`]: {
    color: colorGreyGainsboro
  }
}));
const CheckmarkContainer = styled.span({
  "& > svg": {
    "& > path": {
      fill: colorWhite
    }
  }
});
const renderError$4 = (error, errorId) => /*#__PURE__*/React.createElement(InputFeedback, {
  id: errorId,
  feedback: "error"
}, /*#__PURE__*/React.createElement(Paragraph, {
  size: "small"
}, error || ""));
const getGeneratedId$1 = (name, value) => {
  return generateId(name).postfix(value);
};
const getErrorId$1 = (name, value, id) => {
  return generateId(id || getGeneratedId$1(name, value)).postfix("error-message");
};
const Checkbox = /*#__PURE__*/React.forwardRef(({
  id,
  name,
  value,
  label,
  feedback,
  error,
  ...rest
}, ref) => /*#__PURE__*/React.createElement(Box, {
  between: 2
}, feedback === "error" && renderError$4(error, getErrorId$1(name, value, id)), /*#__PURE__*/React.createElement(HiddenInput$1, _extends$2({
  type: "checkbox",
  id: id || getGeneratedId$1(name, value),
  name: name,
  value: value,
  "aria-invalid": feedback === "error",
  "aria-describedby": feedback === "error" ? getErrorId$1(name, value, id) : undefined,
  "data-testid": "hidden-input",
  ref: ref
}, safeRest(rest))), /*#__PURE__*/React.createElement(StyledLabel$3, {
  isError: feedback === "error",
  htmlFor: id || getGeneratedId$1(name, value),
  "data-testid": "checkbox-label"
}, /*#__PURE__*/React.createElement(Box, {
  between: 3,
  inline: true
}, /*#__PURE__*/React.createElement(FakeCheckbox, {
  "data-testid": "fake-input"
}, /*#__PURE__*/React.createElement(CheckmarkContainer, {
  id: "checkmark"
}, /*#__PURE__*/React.createElement(Checkmark, null))), /*#__PURE__*/React.createElement(ErrorText, {
  isError: feedback === "error"
}, /*#__PURE__*/React.createElement(Text, null, label))))));
Checkbox.propTypes = {
  label: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.node]).isRequired,
  name: PropTypes$1.string.isRequired,
  value: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number, PropTypes$1.bool]).isRequired,
  checked: PropTypes$1.bool,
  id: PropTypes$1.string,
  feedback: PropTypes$1.oneOf(["error"]),
  error: PropTypes$1.string
};
Checkbox.defaultProps = {
  id: undefined,
  feedback: undefined,
  error: undefined,
  checked: undefined
};
Checkbox.displayName = "Checkbox";

const StyledInteractiveIconSVG$1 = styled.svg(({
  theme
}) => ({
  fill: theme.iconColor
}), {
  width: "1.5rem",
  height: "1.5rem",
  zIndex: "2"
});

const animations = {
  reduceMotion: {
    "@media (prefers-reduced-motion: reduce)": {
      transition: "none"
    }
  },
  scale: {
    "&:hover svg": {
      transition: "transform 150ms ease-in-out",
      transform: "scale(1.1, 1.1)"
    },
    "&:active svg": {
      transition: "transform 150ms ease-in-out",
      transform: "scale(1, 1)"
    }
  }
};

const iconSize$1 = props => handleResponsiveStyles({
  size: props.size
}, ({
  size
}) => ({
  width: size === 20 ? "1.25rem" : "1.5rem",
  height: size === 20 ? "1.25rem" : "1.5rem"
}));
const StyledLimitedInteractiveIconSVG = styled(StyledInteractiveIconSVG$1)(({
  animationDirection
}) => ({
  transition: "transform 150ms ease-in-out",
  "@media (prefers-reduced-motion: reduce)": {
    transition: "none"
  },
  [":hover, :focus, :active"]: {
    transform: `translate${animationDirection === "up" || animationDirection === "down" ? "Y" : "X"}(${animationDirection === "up" || animationDirection === "left" ? "-" : ""}4px)`
  }
}), animations.reduceMotion, iconSize$1);
const getTheme$2 = variant => {
  if (variant === "basic") {
    return {
      backgroundColor: "transparent",
      iconColor: colorShark
    };
  }
  if (variant === "alternative") {
    return {
      backgroundColor: "transparent",
      iconColor: colorNemetonPurple
    };
  }
  if (variant === "inverted") {
    return {
      backgroundColor: "transparent",
      iconColor: colorWhite
    };
  }
  if (variant === "error") {
    return {
      backgroundColor: "transparent",
      iconColor: colorCardinal
    };
  }
  return {
    backgroundColor: "transparent",
    iconColor: colorAccessibleGreen
  };
};
const Limited = ({
  variant,
  children,
  size
}) => /*#__PURE__*/React.createElement(ThemeProvider, {
  theme: getTheme$2(variant),
  size: size
}, children);
Limited.displayName = "Limited";
Limited.propTypes = {
  /**
   * The style.
   */
  variant: PropTypes$1.oneOf(["default", "basic", "alternative", "inverted", "error"]),
  size: responsiveProps(PropTypes$1.oneOf([16, 24])),
  children: PropTypes$1.node.isRequired
};
Limited.defaultProps = {
  variant: "default",
  size: 24
};

const CaretUp = /*#__PURE__*/reactExports.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Limited, _extends$2({}, props, {
  animationDirection: "up",
  ref: ref
}), /*#__PURE__*/React.createElement(StyledLimitedInteractiveIconSVG, _extends$2({
  animationDirection: "up",
  viewBox: "0 0 24 24"
}, props), /*#__PURE__*/React.createElement("path", {
  d: "M17.7940812,14.8167698 C17.4424627,15.1174894 17.0896181,14.9549557 16.8868854,14.7547243 L11.9968161,10.259447 L7.11722187,14.7547243 C6.93839231,14.9185479 6.49053328,15.1800328 6.16524043,14.8167698 C5.83994757,14.4535067 6.06520964,14.0838947 6.24327169,13.9200711 L11.6348225,8.12339734 C11.8136521,7.95886755 12.1060729,7.95886755 12.2849025,8.12339734 C12.2849025,8.12410347 17.7940809,13.920071 17.7940809,13.920071 C17.9792355,14.0649573 18.1456996,14.5160501 17.7940812,14.8167698 Z"
}))));
CaretUp.displayName = "CaretUp";

const CaretDown = /*#__PURE__*/reactExports.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Limited, _extends$2({}, props, {
  ref: ref
}), /*#__PURE__*/React.createElement(StyledLimitedInteractiveIconSVG, _extends$2({
  animationDirection: "down",
  viewBox: "0 0 24 24"
}, props), /*#__PURE__*/React.createElement("path", {
  d: "M17.7940812,9.18323023 C17.4424627,8.8825106 17.0896181,9.04504427 16.8868854,9.24527574 L11.9968161,13.740553 L7.11722187,9.24527573 C6.93839231,9.08145209 6.49053328,8.81996721 6.16524043,9.18323023 C5.83994757,9.54649326 6.06520964,9.91610528 6.24327169,10.0799289 L11.6348225,15.8766027 C11.8136521,16.0411324 12.1060729,16.0411324 12.2849025,15.8766027 C12.2849025,15.8758965 17.7940809,10.079929 17.7940809,10.079929 C17.9792355,9.93504267 18.1456996,9.48394985 17.7940812,9.18323023 Z"
}))));
CaretDown.displayName = "CaretDown";

const ChevronLeft = /*#__PURE__*/reactExports.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Limited, _extends$2({}, props, {
  ref: ref
}), /*#__PURE__*/React.createElement(StyledLimitedInteractiveIconSVG, _extends$2({
  animationDirection: "left",
  viewBox: "0 0 24 24"
}, props), /*#__PURE__*/React.createElement("path", {
  d: "M14.8167698,17.7940812 C14.5160501,18.1456996 14.0649573,17.9792355 13.920071,17.7940809 C13.920071,17.7940809 8.12410347,12.2849025 8.12339734,12.2849025 C7.95886755,12.1060729 7.95886755,11.8136521 8.12339734,11.6348225 L13.9200711,6.24327169 C14.0838947,6.06520964 14.4535067,5.83994757 14.8167698,6.16524043 C15.1800328,6.49053328 14.9185479,6.93839231 14.7547243,7.11722187 L10.259447,11.9968161 L14.7547243,16.8868854 C14.9549557,17.0896181 15.1174894,17.4424627 14.8167698,17.7940812 Z"
}))));
ChevronLeft.displayName = "ChevronLeft";

const ChevronRight = /*#__PURE__*/reactExports.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Limited, _extends$2({}, props, {
  ref: ref
}), /*#__PURE__*/React.createElement(StyledLimitedInteractiveIconSVG, _extends$2({
  animationDirection: "right",
  viewBox: "0 0 24 24"
}, props), /*#__PURE__*/React.createElement("path", {
  d: "M9.18323023,17.7940812 C8.8825106,17.4424627 9.04504427,17.0896181 9.24527574,16.8868854 L13.740553,11.9968161 L9.24527573,7.11722187 C9.08145209,6.93839231 8.81996721,6.49053328 9.18323023,6.16524043 C9.54649326,5.83994757 9.91610528,6.06520964 10.0799289,6.24327169 L15.8766027,11.6348225 C16.0411324,11.8136521 16.0411324,12.1060729 15.8766027,12.2849025 C15.8758965,12.2849025 10.079929,17.7940809 10.079929,17.7940809 C9.93504267,17.9792355 9.48394985,18.1456996 9.18323023,17.7940812 Z"
}))));
ChevronRight.displayName = "ChevronRight";

const cartEmptyBoldCopyDictionary = {
  en: {
    a11yText: "Cart"
  },
  fr: {
    a11yText: "Panier"
  }
};
const cartFilledBoldCopyDictionary = {
  en: {
    a11yText: {
      single: "%{numItems} item in cart",
      multiple: "%{numItems} items in cart"
    }
  },
  fr: {
    a11yText: {
      single: "%{numItems} article dans le panier",
      multiple: "%{numItems} articles dans le panier"
    }
  }
};
const notifyBoldCopyDictionary = {
  en: {
    a11yText: "Notifications"
  },
  fr: {
    a11yText: "Avis"
  }
};
const newNotifyBoldCopyDictionary = {
  en: {
    a11yText: "New Notification(s)"
  },
  fr: {
    a11yText: "Nouvel Avis"
  }
};
const profileBoldCopyDictionary = {
  en: {
    a11yText: "Profile"
  },
  fr: {
    a11yText: "Profil"
  }
};
const searchBoldCopyDictionary = {
  en: {
    a11yText: "Search"
  },
  fr: {
    a11yText: "Chercher"
  }
};
const settingsBoldCopyDictionary = {
  en: {
    a11yText: "Settings"
  },
  fr: {
    a11yText: "Paramètres"
  }
};
const supportBoldCopyDictionary = {
  en: {
    a11yText: "Support"
  },
  fr: {
    a11yText: "Soutien"
  }
};
const userAddBoldCopyDictionary = {
  en: {
    a11yText: "Add subscriber"
  },
  fr: {
    a11yText: "Ajouter un utilisateur"
  }
};

const getOutline = ({
  variant
}) => {
  if (variant !== "inverted") {
    return {
      outline: "none",
      "&:focus::-moz-focus-inner": {
        border: 0
      }
    };
  }
  return {
    "&:focus": {
      outline: "transparent",
      border: `0.125rem solid ${colorWhite}`,
      borderRadius: "50%"
    },
    "&:active": {
      borderRadius: "50%",
      backgroundColor: "rgba(0,0,0,0.5)",
      backgroundBlendMode: "multiply"
    }
  };
};
const StyledInteractiveIconButton$1 = styled.button(noStyle, getOutline, {
  width: "2.5rem",
  height: "2.5rem",
  display: "inline-flex",
  justifyContent: "center",
  alignItems: "center",
  position: "relative",
  "-webkit-tap-highlight-color": "transparent"
});

const StyledInteractiveIconHover = styled.span(({
  theme
}) => ({
  backgroundColor: theme.hoverBackgroundColor
}), animations.reduceMotion, {
  position: "absolute",
  top: 0,
  left: 0,
  width: "100%",
  height: "100%",
  borderRadius: "50%",
  transition: "transform 200ms ease-in-out",
  transform: "scale(0,0)",
  [`${StyledInteractiveIconButton$1}:focus &, ${StyledInteractiveIconButton$1}:active &`]: {
    transform: "scale(1,1)"
  }
});

const StyledTooltip$1 = styled.div(animations.reduceMotion, {
  position: "absolute",
  padding: "0.0625rem 0.5rem 0.1875rem 0.5rem",
  maxWidth: "8.25rem",
  backgroundColor: colorGreyShuttle,
  border: `1px solid ${colorWhite}`,
  borderRadius: "0.25rem",
  zIndex: 4,
  marginTop: "0.25rem",
  visibility: "hidden",
  opacity: 0,
  transition: "opacity 200ms",
  [`${StyledInteractiveIconButton$1}:hover + &,${StyledInteractiveIconButton$1}:focus + &`]: {
    visibility: "visible",
    opacity: 1
  },
  [`${StyledInteractiveIconButton$1}:focus + &`]: {
    zIndex: 3 // lower the zIndex on the tooltip focused on to prevent it from being displayed on top of the tooltip being hovered over
  }
}, ({
  width
}) => {
  if (width) {
    return {
      marginLeft: `calc(${width}px / -2 + 1.25rem)`
    };
  }
  return {};
});
const Tooltip$1 = ({
  children,
  ...props
}) => {
  const tooltipRef = reactExports.useRef(null);
  const [width, setWidth] = reactExports.useState(0);
  reactExports.useEffect(() => {
    setWidth(tooltipRef.current.offsetWidth);
  }, []);
  return /*#__PURE__*/React.createElement(StyledTooltip$1, _extends$2({}, props, {
    role: "tooltip",
    ref: tooltipRef,
    width: width,
    "aria-hidden": "true"
  }), /*#__PURE__*/React.createElement(Text, {
    size: "small",
    invert: true
  }, children));
};
Tooltip$1.propTypes = {
  children: PropTypes$1.node.isRequired
};

const StyledInteractiveIconSVG = styled(StyledInteractiveIconSVG$1)({
  transition: "transform 150ms ease-in-out"
}, animations.reduceMotion);
const StyledInteractiveIconButton = styled(StyledInteractiveIconButton$1)(animations.scale, animations.reduceMotion);
const StyledButtonAndTooltip = styled.div({
  display: "inline-block"
});
const getTheme$1 = variant => {
  if (variant === "inverted") {
    return {
      hoverBackgroundColor: "transparent",
      iconColor: colorWhite
    };
  }
  return {
    hoverBackgroundColor: colorGreyGainsboro,
    iconColor: colorGreyShuttle
  };
};
const NavButton = /*#__PURE__*/reactExports.forwardRef(({
  a11yText,
  variant,
  onClick,
  children,
  tag,
  ...rest
}, ref) => {
  const ariaId = uniqueId(a11yText.replace(/\s+/g, "-").toLowerCase());
  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: getTheme$1(variant)
  }, /*#__PURE__*/React.createElement(StyledButtonAndTooltip, null, /*#__PURE__*/React.createElement(StyledInteractiveIconButton, _extends$2({}, safeRest(rest), {
    "aria-labelledby": ariaId,
    variant: variant,
    onClick: onClick,
    as: tag,
    ref: ref
  }), /*#__PURE__*/React.createElement(StyledInteractiveIconHover, null), children), /*#__PURE__*/React.createElement(Tooltip$1, {
    id: ariaId
  }, a11yText)));
});
NavButton.displayName = "NavButton";
NavButton.propTypes = {
  /**
   * Use the copy prop to either select provided English or French copy
   * by passing `'en'` or `'fr'` respectively.
   *
   * To provide your own, pass an object with the key `a11yText`.
   */
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    a11yText: PropTypes$1.string.isRequired
  })]).isRequired,
  /**
   * @ignore
   * A description of the icon for screen readers, also appears as the hint when hovering over the icon.
   */
  a11yText: PropTypes$1.string,
  /**
   * The style.
   */
  variant: PropTypes$1.oneOf(["default", "inverted"]),
  /**
   * Pass a handler to the icon to make it interactive.
   */
  onClick: PropTypes$1.func,
  /**
   * The tag
   */
  tag: PropTypes$1.oneOf(["button", "a"]),
  /**
   * @ignore
   */
  children: PropTypes$1.node.isRequired
};
NavButton.defaultProps = {
  a11yText: undefined,
  variant: "default",
  onClick: undefined,
  tag: "button"
};

const CartEmptyBold = /*#__PURE__*/reactExports.forwardRef(({
  copy,
  ...props
}, ref) => /*#__PURE__*/React.createElement(NavButton, _extends$2({}, props, {
  ref: ref,
  a11yText: getCopy(cartEmptyBoldCopyDictionary, copy).a11yText,
  copy: copy // Passed in to satisfy styleguidist workaround
}), /*#__PURE__*/React.createElement(StyledInteractiveIconSVG, {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  "aria-hidden": "true"
}, /*#__PURE__*/React.createElement("path", {
  d: "M17.526 18c1.394 0 2.527 1.123 2.527 2.504 0 1.379-1.133 2.503-2.527 2.503-1.393 0-2.526-1.124-2.526-2.503C15 19.123 16.133 18 17.526 18zm0 1.539a.97.97 0 00-.974.965.97.97 0 00.974.964.97.97 0 00.975-.964.97.97 0 00-.975-.965zm-9 1.929a.97.97 0 01-.974-.964.97.97 0 01.974-.965.97.97 0 01.975.965.97.97 0 01-.975.964zm0-3.468c1.394 0 2.527 1.123 2.527 2.504 0 1.379-1.133 2.503-2.527 2.503C7.133 23.007 6 21.883 6 20.504 6 19.123 7.133 18 8.526 18zM2.025 2h2.627c.446 0 .838.284.975.691l.031.114.36 1.745h16.137c.297 0 .578.125.774.343.17.189.26.432.254.681l-.011.125-.781 5.466a1.878 1.878 0 01-1.496 1.553l-.158.025-12.596 1.553c.268.41.683.68 1.137.73l.152.008h10.975c.567 0 1.027.451 1.027 1.004 0 .517-.4.944-.915.998l-.112.006H9.43c-1.63 0-3.119-1.185-3.538-2.786l-.044-.187L3.812 4.008H2.025C1.46 4.008 1 3.558 1 3.004c0-.516.4-.943.914-.998L2.025 2h2.627-2.627zm18.948 4.559H6.429l1.145 5.712 12.804-1.507.595-4.205z",
  fillRule: "evenodd"
}))));
CartEmptyBold.propTypes = {
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    a11yText: PropTypes$1.string.isRequired
  })]).isRequired
};
CartEmptyBold.displayName = "CartEmptyBold";

const CartFilledBold = /*#__PURE__*/reactExports.forwardRef(({
  copy,
  variant,
  numItems,
  ...props
}, ref) => {
  let a11yText = getCopy(cartFilledBoldCopyDictionary, copy).a11yText;
  if (typeof a11yText === "object") {
    if (numItems > 1) {
      a11yText = a11yText.multiple;
    } else {
      a11yText = a11yText.single;
    }
  }
  return /*#__PURE__*/React.createElement(NavButton, _extends$2({}, props, {
    ref: ref,
    a11yText: a11yText.replace("%{numItems}", numItems),
    variant: variant,
    copy: copy // Passed in to satisfy styleguidist workaround
  }), /*#__PURE__*/React.createElement(StyledInteractiveIconSVG, {
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    "aria-hidden": "true"
  }, /*#__PURE__*/React.createElement("g", {
    fillRule: "evenodd"
  }, /*#__PURE__*/React.createElement("path", {
    d: "M17.527 18c1.393 0 2.526 1.122 2.526 2.503 0 1.379-1.133 2.503-2.526 2.503-1.394 0-2.527-1.124-2.527-2.503C15 19.122 16.133 18 17.527 18zm0 1.539a.969.969 0 00-.974.964.97.97 0 00.974.965.97.97 0 00.974-.965.97.97 0 00-.974-.964zm-9 1.929a.97.97 0 01-.974-.965c0-.533.436-.964.974-.964a.97.97 0 01.974.964.97.97 0 01-.974.965zm0-3.468c1.394 0 2.527 1.122 2.527 2.503 0 1.379-1.133 2.503-2.527 2.503C7.133 23.006 6 21.882 6 20.503 6 19.122 7.133 18 8.527 18zM2.028 2h2.625c.446 0 .838.29.975.702l.031.116.333 1.726h10.141l.06.166c.156.438.392.84.72 1.224l.171.19.4.422H6.409l1.167 5.761 12.801-1.536.474-3.283.172-.036c.48-.099.938-.285 1.368-.558l.212-.143.477-.341-.688 4.765a1.899 1.899 0 01-1.494 1.579l-.157.026-12.634 1.518c.266.392.689.65 1.163.697l.16.008h10.976c.566 0 1.027.457 1.027 1.019 0 .525-.402.959-.915 1.014l-.112.006H9.43a3.657 3.657 0 01-3.537-2.723l-.043-.185L3.812 4.037H2.028A1.024 1.024 0 011 3.019c0-.525.402-.958.916-1.013L2.028 2h2.625-2.625z"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M23.25 3.061c0 1.689-1.386 3.061-3.091 3.061-1.703 0-3.089-1.372-3.089-3.061C17.07 1.373 18.456 0 20.159 0c1.705 0 3.091 1.373 3.091 3.061z",
    fill: variant === "inverted" ? colorNemetonGreen : colorAccessibleGreen
  }))));
});
CartFilledBold.propTypes = {
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    a11yText: PropTypes$1.string.isRequired
  })]).isRequired,
  variant: PropTypes$1.oneOf(["default", "inverted"]),
  numItems: PropTypes$1.number.isRequired
};
CartFilledBold.defaultProps = {
  variant: "default"
};
CartFilledBold.displayName = "CartFilledBold";

const NotifyBold = /*#__PURE__*/reactExports.forwardRef(({
  copy,
  ...props
}, ref) => /*#__PURE__*/React.createElement(NavButton, _extends$2({}, props, {
  ref: ref,
  a11yText: getCopy(notifyBoldCopyDictionary, copy).a11yText,
  copy: copy // Passed in to satisfy styleguidist workaround
}), /*#__PURE__*/React.createElement(StyledInteractiveIconSVG, {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  "aria-hidden": "true"
}, /*#__PURE__*/React.createElement("path", {
  d: "M12 0c1.322 0 2.41 1.008 2.494 2.276l.006.16v1.346c2.54.86 4.402 3.006 4.728 5.73l.036.699c.014.333.026.75.026 1.176l-.003.698c.002 1.206.085 2.45.824 3.831l.169.298 1.542 2.544c.228.373.237.844.02 1.228-.196.35-.55.58-.946.623l-.133.007h-5.865l.025.19c.008.079.012.134.012.181 0 1.661-1.323 3.013-2.95 3.013-1.627 0-2.95-1.352-2.95-3.013 0-.063.006-.142.02-.251l.016-.12H3.237c-.45 0-.863-.24-1.081-.63a1.22 1.22 0 01-.046-1.102l.069-.129 1.545-2.547c.937-1.57 1.027-2.962.993-4.352l-.014-.606c-.006-.859.062-1.666.065-1.704.318-2.658 2.067-4.76 4.48-5.674l.252-.09V2.436C9.5 1.093 10.622 0 12 0zm1.136 20.616h-2.302c-.003.042-.01.083-.01.126 0 .755.52 1.367 1.16 1.367.64 0 1.16-.612 1.16-1.367 0-.043-.005-.084-.008-.126zM12 5.372c-2.697 0-4.807 1.696-5.21 4.152l-.032.225s-.068.823-.053 1.62l.016.662c.018 1.447-.12 3.098-1.11 4.904l-.174.304-.835 1.377h14.795l-.831-1.37c-1.128-1.891-1.27-3.592-1.279-5.023l.003-1a30.047 30.047 0 00-.053-1.528c-.303-2.523-2.46-4.323-5.237-4.323zm0-3.46c-.38 0-.696.27-.746.622l-.006.097v.778a7.63 7.63 0 011.255-.02l.248.02v-.778c0-.397-.337-.719-.751-.719z",
  fillRule: "evenodd"
}))));
NotifyBold.propTypes = {
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    a11yText: PropTypes$1.string.isRequired
  })]).isRequired
};
NotifyBold.displayName = "NotifyBold";

const UnreadNotification = /*#__PURE__*/reactExports.forwardRef(({
  copy,
  ...props
}, ref) => /*#__PURE__*/React.createElement(NavButton, _extends$2({}, props, {
  ref: ref,
  a11yText: getCopy(newNotifyBoldCopyDictionary, copy).a11yText,
  copy: copy // Passed in to satisfy styleguidist workaround
}), /*#__PURE__*/React.createElement(StyledInteractiveIconSVG, {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  "aria-hidden": "true"
}, /*#__PURE__*/React.createElement("path", {
  d: "M11.9996,0.0002 C13.32248,0.0002 14.4094304,1.0075088 14.4942698,2.27629395 L14.4996,2.4362 L14.4996,3.7822 C17.0406,4.6412 18.9016,6.7882 19.2276,9.5122 L19.264225,10.210825 C19.2778969,10.5438719 19.2901332,10.9612332 19.290299,11.3872916 L19.2869987,12.0848432 C19.2886515,13.2905843 19.3717282,14.535302 20.1109442,15.9161784 L20.2796,16.2142 L21.8216,18.7582 C22.0496,19.1312 22.0586,19.6022 21.8426,19.9862 C21.6464,20.3363 21.29144,20.56652 20.895818,20.609063 L20.7626,20.6162 L14.8976,20.6162 L14.92272,20.806408 C14.93136,20.8846 14.9346,20.9404 14.9346,20.9872 C14.9346,22.6482 13.6116,24.0002 11.9846,24.0002 C10.3576,24.0002 9.0346,22.6482 9.0346,20.9872 C9.0346,20.9242 9.0407875,20.8448875 9.05442812,20.7357625 L9.0706,20.6162 L3.2366,20.6162 C2.7876,20.6162 2.3736,20.3752 2.1556,19.9862 C1.96448889,19.6448667 1.94957531,19.2347926 2.11015693,18.8838022 L2.1786,18.7552 L3.7236,16.2082 C4.66101176,14.6373765 4.75070035,13.246373 4.71715669,11.8559427 L4.70291651,11.2504571 C4.69690796,10.3912865 4.76495294,9.58414118 4.7676,9.5462 C5.08563333,6.88786667 6.83523556,4.78646222 9.24770152,3.87248748 L9.4996,3.7822 L9.4996,2.4362 C9.4996,1.0932 10.6216,0.0002 11.9996,0.0002 Z M13.1356,20.6162 L10.8336,20.6162 C10.8306,20.6582 10.8246,20.6992 10.8246,20.7422 C10.8246,21.4972 11.3446,22.1092 11.9846,22.1092 C12.6246,22.1092 13.1446,21.4972 13.1446,20.7422 C13.1446,20.6992 13.1386,20.6582 13.1356,20.6162 Z M11.9996,5.3722 C9.30330588,5.3722 7.19296159,7.06787474 6.78954113,9.52386011 L6.7576,9.7492 C6.7576,9.7492 6.68992422,10.5718562 6.70453604,11.3692989 L6.72060161,12.0306112 C6.73938419,13.4781932 6.60148186,15.128641 5.61079631,16.9349293 L5.4366,17.2392 L4.6016,18.6162 L19.3966,18.6162 L18.5656,17.2452 C17.4376909,15.3547 17.2965649,13.6536504 17.2874235,12.2232152 L17.2896605,11.2226492 C17.2835219,10.4270281 17.237475,9.70395 17.2366,9.6952 C16.9336,7.1722 14.7776,5.3722 11.9996,5.3722 Z M11.9996,1.9122 C11.6191833,1.9122 11.3043083,2.18276944 11.2544709,2.53365544 L11.2476,2.6312 L11.2476,3.4092 C11.4956,3.3862 11.7456,3.3722 11.9996,3.3722 C12.1689333,3.3722 12.3364889,3.37842222 12.502563,3.38938519 L12.7506,3.4092 L12.7506,2.6312 C12.7506,2.2342 12.4136,1.9122 11.9996,1.9122 Z"
}), /*#__PURE__*/React.createElement("circle", {
  id: "Indicator",
  stroke: props?.variant === "inverted" ? colorNemetonPurple : colorWhite,
  fill: props?.variant === "inverted" ? colorNemetonGreen : colorAccessibleGreen,
  cx: "18.5",
  cy: "8.5",
  r: "5"
}))));
UnreadNotification.propTypes = {
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    a11yText: PropTypes$1.string.isRequired
  })]).isRequired
};
UnreadNotification.displayName = "UnreadNotification";

const ProfileBold = /*#__PURE__*/reactExports.forwardRef(({
  copy,
  ...props
}, ref) => /*#__PURE__*/React.createElement(NavButton, _extends$2({}, props, {
  ref: ref,
  a11yText: getCopy(profileBoldCopyDictionary, copy).a11yText,
  copy: copy // Passed in to satisfy styleguidist workaround
}), /*#__PURE__*/React.createElement(StyledInteractiveIconSVG, {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  "aria-hidden": "true"
}, /*#__PURE__*/React.createElement("path", {
  d: "M11.999 1C18.065 1 23 5.934 23 11.999c0 6.066-4.935 11-11.001 11-6.065 0-10.999-4.934-10.999-11C1 5.934 5.934 1 11.999 1zm0 13.455c-2.747 0-5.096 1.99-5.648 4.628a9.024 9.024 0 0011.296 0c-.552-2.637-2.902-4.628-5.648-4.628zm0-11.524c-5 0-9.068 4.068-9.068 9.068 0 2.063.7 3.961 1.864 5.487 1.129-2.902 3.972-4.962 7.204-4.962 3.231 0 6.075 2.06 7.205 4.962a9.013 9.013 0 001.865-5.487c0-5-4.07-9.068-9.07-9.068zm0 1.248a3.866 3.866 0 013.862 3.862 3.866 3.866 0 01-3.862 3.861 3.866 3.866 0 01-3.861-3.861 3.866 3.866 0 013.861-3.862zm0 1.93c-1.065 0-1.93.867-1.93 1.932 0 1.064.865 1.93 1.93 1.93s1.931-.866 1.931-1.93c0-1.065-.866-1.931-1.93-1.931z",
  fillRule: "evenodd"
}))));
ProfileBold.propTypes = {
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    a11yText: PropTypes$1.string.isRequired
  })]).isRequired
};
ProfileBold.displayName = "ProfileBold";

const SearchBold = /*#__PURE__*/reactExports.forwardRef(({
  copy,
  ...props
}, ref) => /*#__PURE__*/React.createElement(NavButton, _extends$2({}, props, {
  ref: ref,
  a11yText: getCopy(searchBoldCopyDictionary, copy).a11yText,
  copy: copy // Passed in to satisfy styleguidist workaround
}), /*#__PURE__*/React.createElement(StyledInteractiveIconSVG, {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  "aria-hidden": "true"
}, /*#__PURE__*/React.createElement("path", {
  d: "M10.022 1l.253.003c4.994.13 8.935 4.278 8.806 9.267a8.985 8.985 0 01-1.728 5.087l-.189.249 5.604 5.897c.3.316.306.802.034 1.133l-.074.08-.03.028a.945.945 0 01-1.173.098l-.092-.072-6.081-5.418a9.01 9.01 0 01-5.543 1.719c-4.993-.13-8.935-4.278-8.806-9.267C1.13 4.898 5.144 1.008 10.023 1zm.02 1.81a7.214 7.214 0 100 14.43 7.214 7.214 0 000-14.43z"
}))));
SearchBold.propTypes = {
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    a11yText: PropTypes$1.string.isRequired
  })]).isRequired
};
SearchBold.displayName = "SearchBold";

const SettingsBold = /*#__PURE__*/reactExports.forwardRef(({
  copy,
  ...props
}, ref) => /*#__PURE__*/React.createElement(NavButton, _extends$2({}, props, {
  ref: ref,
  a11yText: getCopy(settingsBoldCopyDictionary, copy).a11yText,
  copy: copy // Passed in to satisfy styleguidist workaround
}), /*#__PURE__*/React.createElement(StyledInteractiveIconSVG, {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  "aria-hidden": "true"
}, /*#__PURE__*/React.createElement("path", {
  d: "M9.929 1h4.145c.678 0 1.26.458 1.401 1.086l.022.127.32 2.17c.265.126.527.269.783.426l.253.161 2.108-.824c.646-.232 1.354-.007 1.718.515l.069.108 2.06 3.479a1.393 1.393 0 01-.245 1.713l-.104.09-1.79 1.36a6.798 6.798 0 01.014.989l-.013.188 1.784 1.36c.516.4.684 1.079.428 1.663l-.062.124-2.084 3.514c-.311.559-1.002.827-1.64.652l-.126-.041-2.12-.83c-.258.17-.514.321-.774.457l-.26.13-.321 2.188c-.081.635-.624 1.13-1.287 1.189l-.135.006H9.928c-.679 0-1.26-.458-1.4-1.084l-.023-.127-.32-2.171a8.527 8.527 0 01-.784-.426l-.253-.162-2.11.825c-.658.232-1.351.013-1.716-.516l-.068-.11-2.061-3.476c-.326-.583-.218-1.278.245-1.712l.105-.09 1.79-1.364a6.502 6.502 0 01-.014-.97l.014-.205-1.784-1.36a1.383 1.383 0 01-.413-1.698l.062-.115 2.067-3.486c.313-.56 1.003-.832 1.64-.653l.127.042 2.12.83c.258-.17.514-.322.774-.458l.26-.13.322-2.19c.08-.634.622-1.129 1.287-1.188L9.929 1h4.145H9.93zm.4 1.803l-.39 2.334a.91.91 0 01-.558.695 6.98 6.98 0 00-1.551.878.94.94 0 01-.784.152l-.114-.037-2.203-.863-1.733 2.85 1.883 1.495c.247.19.38.505.34.817a7.023 7.023 0 00-.067.876c0 .253.022.533.066.88a.884.884 0 01-.257.741l-.09.078-1.904 1.451 1.696 2.86 2.277-.837a.98.98 0 01.898.125 6.763 6.763 0 001.54.87c.265.106.465.33.54.6l.023.102.337 2.29 3.394.037.39-2.332a.898.898 0 01.564-.697 7.088 7.088 0 001.546-.877.942.942 0 01.783-.151l.115.036 2.203.863 1.758-2.892-1.901-1.449a.889.889 0 01-.347-.822l.037-.321c.017-.172.029-.359.029-.555 0-.327-.033-.628-.066-.878a.891.891 0 01.257-.742l.089-.078 1.906-1.451-1.696-2.86-2.278.838a.932.932 0 01-.897-.125 6.754 6.754 0 00-1.54-.87.916.916 0 01-.542-.602l-.022-.102-.335-2.288-3.396-.039zM12 9.116a2.887 2.887 0 012.884 2.883A2.887 2.887 0 0112 14.883 2.886 2.886 0 019.117 12 2.886 2.886 0 0112 9.116zm4.583 2.883A4.588 4.588 0 0012 7.417a4.588 4.588 0 00-4.583 4.582A4.588 4.588 0 0012 16.582 4.588 4.588 0 0016.583 12z",
  fillRule: "evenodd"
}))));
SettingsBold.propTypes = {
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    a11yText: PropTypes$1.string.isRequired
  })]).isRequired
};
SettingsBold.displayName = "SettingsBold";

const SupportBold = /*#__PURE__*/reactExports.forwardRef(({
  copy,
  ...props
}, ref) => /*#__PURE__*/React.createElement(NavButton, _extends$2({}, props, {
  ref: ref,
  a11yText: getCopy(supportBoldCopyDictionary, copy).a11yText,
  copy: copy // Passed in to satisfy styleguidist workaround
}), /*#__PURE__*/React.createElement(StyledInteractiveIconSVG, {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  "aria-hidden": "true"
}, /*#__PURE__*/React.createElement("path", {
  d: "M12 1c6.065 0 11 4.934 11 11 0 6.065-4.935 11-11 11-6.066 0-11-4.935-11-11C1 5.934 5.934 1 12 1zm0 1.878c-5.03 0-9.122 4.093-9.122 9.122 0 5.03 4.093 9.122 9.122 9.122 5.03 0 9.122-4.092 9.122-9.122S17.029 2.878 12 2.878zm0 12.58a1.17 1.17 0 110 2.34 1.17 1.17 0 010-2.34zm-.045-9.005c.694 0 1.274.096 1.738.285.463.19.837.427 1.12.711.284.285.488.589.608.917.123.326.184.632.184.915 0 .47-.061.855-.184 1.158a2.81 2.81 0 01-.454.777 3.04 3.04 0 01-.6.55c-.22.151-.428.302-.624.454a2.928 2.928 0 00-.52.52 1.417 1.417 0 00-.256.562l-.03.17v.558h-1.978v-.66c.03-.42.11-.772.241-1.055.133-.283.287-.525.462-.725.177-.201.361-.374.557-.522.196-.145.377-.292.542-.438.166-.148.302-.308.404-.484.102-.175.148-.395.14-.66 0-.449-.11-.78-.33-.996-.22-.215-.526-.323-.917-.323-.263 0-.49.051-.681.155-.19.102-.347.239-.469.41-.123.17-.213.37-.271.6a2.803 2.803 0 00-.082.546l-.005.195H8.394c.01-.529.1-1.011.273-1.451.17-.44.41-.82.717-1.144a3.223 3.223 0 011.114-.753 3.753 3.753 0 011.457-.272z",
  fillRule: "evenodd"
}))));
SupportBold.propTypes = {
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    a11yText: PropTypes$1.string.isRequired
  })]).isRequired
};
SupportBold.displayName = "SupportBold";

const UserAddBold = /*#__PURE__*/reactExports.forwardRef(({
  copy,
  ...props
}, ref) => /*#__PURE__*/React.createElement(NavButton, _extends$2({}, props, {
  ref: ref,
  a11yText: getCopy(userAddBoldCopyDictionary, copy).a11yText,
  copy: copy // Passed in to satisfy styleguidist workaround
}), /*#__PURE__*/React.createElement(StyledInteractiveIconSVG, {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  "aria-hidden": "true"
}, /*#__PURE__*/React.createElement("path", {
  d: "M18.205 14C20.849 14 23 16.085 23 18.647c0 2.562-2.15 4.647-4.795 4.647-2.644 0-4.795-2.085-4.795-4.647 0-2.562 2.151-4.647 4.795-4.647zm0 1.72c-1.68 0-3.047 1.313-3.047 2.927s1.366 2.927 3.047 2.927c1.68 0 3.048-1.313 3.048-2.927s-1.368-2.927-3.048-2.927zm0 .782c.42 0 .768.311.82.713l.006.102v.515h.552a.82.82 0 01.825.815.819.819 0 01-.722.807l-.103.007h-.552v.516c0 .449-.371.814-.827.814a.823.823 0 01-.818-.712l-.007-.102v-.516h-.55a.821.821 0 01-.827-.814.82.82 0 01.723-.808l.103-.007h.551v-.515c0-.45.37-.815.825-.815zM10.038 1c1.072 0 1.609.231 2.13.662 1.73.012 2.636 1.561 2.69 4.605l.003.3c0 2.992 1.033 3.9 1.043 3.909.243.184.38.484.356.795a.925.925 0 01-.474.738l-.16.069c-.44.178-1.715.64-3.248.899a.965.965 0 01-.732-.16.89.89 0 01-.371-.594.966.966 0 01.751-1.074c.742-.1 1.331-.237 1.777-.368-.42-.787-.81-2.015-.851-3.879l-.004-.335c0-2.149-.444-2.981-.764-3.042l-.037-.004h-.352a.973.973 0 01-.665-.26l-.164-.15c-.242-.215-.374-.251-.928-.251-.255 0-.993.17-1.644.695-.838.678-1.263 1.691-1.263 3.012 0 2.054-.413 3.382-.858 4.216.44.129 1.019.263 1.734.356a.967.967 0 01.658.391.91.91 0 01.164.646l-.021.114-.302 1.132a.938.938 0 01-.588.638l-.112.034-2.898.682c-.765.181-1.387.661-1.722 1.296l-.078.162h2.053c.527 0 .957.418.957.931a.924.924 0 01-.833.924l-.111.006H1.956a.977.977 0 01-.663-.259.925.925 0 01-.293-.67c0-1.923 1.325-3.597 3.249-4.141l.208-.054 1.472-.348c-1.092-.296-1.644-.617-1.65-.62a.916.916 0 01-.168-1.476l.105-.087c.108-.11.94-1.032.997-3.593l.003-.28C5.216 2.4 8.53 1 10.04 1zm8.45 0c1.45 0 2.514.472 3.16 1.404.67.96.674 1.932.017 2.69l-.122.132-.1.097-.034.635a1.561 1.561 0 01.66 1.32l-.012.15-.175 1.325a1.587 1.587 0 01-.832 1.187 5.361 5.361 0 01-1.462 2.555.91.91 0 01-.711.32c-.204 0-.414-.061-.594-.193a.914.914 0 01-.371-.63.941.941 0 01.133-.615l.076-.105.054-.057c.607-.535 1.009-1.31 1.074-2.073a.929.929 0 01.653-.809l.11-.028.113-.852a.93.93 0 01-.659-.806l-.002-.127.086-1.657a.898.898 0 01.208-.533l.082-.087.35-.331c.05-.05.117-.119-.127-.47-.268-.387-.798-.584-1.574-.584-.655 0-1.352.06-1.999.493a.982.982 0 01-1.315-.218.906.906 0 01-.172-.698.933.933 0 01.402-.615C16.632 1 17.933 1 18.489 1z",
  fillRule: "evenodd"
}))));
UserAddBold.propTypes = {
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    a11yText: PropTypes$1.string.isRequired
  })]).isRequired
};
UserAddBold.displayName = "UserAddBold";

const positionStyles = ({
  paragraphSize
}) => {
  let top = 0;
  if (paragraphSize === "large") {
    top = "-4px";
  }
  return {
    position: "relative",
    top
  };
};
const StyledDependentSVG = styled.svg.attrs({
  "aria-hidden": true,
  focusable: false
})(positionStyles, ({
  paragraphSize
}) => ({
  width: paragraphSize === "small" ? "1.25rem" : "1.5rem",
  height: paragraphSize === "small" ? "1.25rem" : "1.5rem"
}), ({
  color
}) => {
  let fill;
  if (color === "greyShark") {
    fill = colorGreyShark;
  } else if (color === "white") {
    fill = colorWhite;
  } else if (color === "nemetonPurple") {
    fill = colorNemetonPurple;
  } else if (color === "accessibleGreen") {
    fill = colorAccessibleGreen;
  }
  return {
    fill
  };
});
const Dependent = ({
  children,
  ...rest
}) => {
  return /*#__PURE__*/React.createElement(DependentIconSizeContext.Consumer, null, ({
    paragraphSize
  }) => {
    return /*#__PURE__*/React.cloneElement(children, {
      paragraphSize,
      "data-testid": "dependentSvg",
      ...rest
    });
  });
};
Dependent.propTypes = {
  /**
   * @ignore
   */
  children: PropTypes$1.node.isRequired,
  color: PropTypes$1.oneOf(["greyShark", "white", "nemetonPurple", "accessibleGreen"])
};
Dependent.defaultProps = {
  color: "greyShark"
};

const Delete = props => /*#__PURE__*/React.createElement(Dependent, props, /*#__PURE__*/React.createElement(StyledDependentSVG, {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M13.687 1c.97 0 1.852.46 2.346 1.213l.093.154.134.24h2.115c1.452 0 2.539 1.04 2.62 2.35l.005.158v.804c0 .462-.369.843-.84.895l-.11.006H20v13.463c0 1.983-1.427 3.609-3.376 3.712l-.197.005h-8.74c-1.983 0-3.58-1.562-3.682-3.52L4 20.283V6.82h-.053c-.485 0-.886-.348-.94-.796L3 5.919v-.804c0-1.33 1.135-2.421 2.565-2.503l.173-.005h2.115l.133-.24c.442-.79 1.29-1.3 2.247-1.36L10.425 1h3.262zM19 6.82v13.463l-.005.172c-.075 1.361-1.046 2.454-2.397 2.54l-.171.005h-8.74l-.171-.005a2.694 2.694 0 01-2.51-2.54L5 20.283V6.82h14zM13.687 2l.166.007c.549.044 1.034.309 1.32.72l.079.127.422.753h2.701l.157.006c.823.066 1.397.642 1.462 1.365l.006.137v.705H4v-.705l.006-.13c.072-.726.739-1.306 1.574-1.372l.158-.006h2.703l.419-.753.08-.128c.286-.41.77-.675 1.319-.72L10.425 2h3.262zM7.5 8.5a.5.5 0 01.492.41L8 9v12a.5.5 0 01-.992.09L7 21V9a.5.5 0 01.5-.5zm3 0a.5.5 0 01.492.41L11 9v12a.5.5 0 01-.992.09L10 21V9a.5.5 0 01.5-.5zm3 0a.5.5 0 01.492.41L14 9v12a.5.5 0 01-.992.09L13 21V9a.5.5 0 01.5-.5zm3 0a.5.5 0 01.492.41L17 9v12a.5.5 0 01-.992.09L16 21V9a.5.5 0 01.5-.5z",
  fillRule: "evenodd"
})));
Delete.displayName = "Dependent";

const Close$1 = props => /*#__PURE__*/React.createElement(Dependent, props, /*#__PURE__*/React.createElement(StyledDependentSVG, {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M12 12.707l-4.147 4.146a.498.498 0 0 1-.707 0 .5.5 0 0 1 0-.707L11.293 12 7.146 7.853a.5.5 0 0 1 .707-.707L12 11.293l4.146-4.147a.5.5 0 0 1 .707.707L12.707 12l4.146 4.146a.5.5 0 0 1-.707.707L12 12.707zM12 24C5.383 24 0 18.617 0 12S5.383 0 12 0s12 5.383 12 12-5.383 12-12 12zm0-22.957C5.958 1.043 1.043 5.958 1.043 12c0 6.042 4.915 10.957 10.957 10.957 6.042 0 10.957-4.915 10.957-10.957 0-6.042-4.915-10.957-10.957-10.957z",
  fillRule: "nonzero"
})));
Close$1.displayName = "Dependent";

const QuestionMarkCircle = props => /*#__PURE__*/React.createElement(Dependent, props, /*#__PURE__*/React.createElement(StyledDependentSVG, {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  clipRule: "evenodd",
  fillRule: "evenodd",
  d: "M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2V2ZM13.0001 19H11.0001V17H13.0001V19V19ZM14.1699 12.17C13.4499 12.9 12.9999 13.5 12.9999 15H10.9999V14.5C10.9999 13.4 11.4499 12.4 12.1699 11.67L13.4099 10.41C13.7799 10.05 13.9999 9.55001 13.9999 9.00001C13.9999 7.90001 13.0999 7.00001 11.9999 7.00001C10.8999 7.00001 9.99989 7.90001 9.99989 9.00001H7.99989C7.99989 6.79001 9.78989 5.00001 11.9999 5.00001C14.2099 5.00001 15.9999 6.79001 15.9999 9.00001C15.9999 9.88001 15.6399 10.68 15.0699 11.25L14.1699 12.17Z"
})));
QuestionMarkCircle.displayName = "Dependent";

const StyledIconButton$1 = styled(StyledInteractiveIconButton$1)(animations.scale, {
  "&:hover > svg": animations.reduceMotion
});
const getTheme = variant => {
  if (variant === "alternative") {
    return {
      hoverBackgroundColor: "#D8CBE5"
    };
  }
  if (variant === "inverted") {
    return {
      hoverBackgroundColor: "transparent"
    };
  }
  return {
    hoverBackgroundColor: colorGreyGainsboro
  };
};
const IconButton = /*#__PURE__*/reactExports.forwardRef(({
  a11yText,
  variant,
  onClick,
  tag,
  icon: Icon,
  ...rest
}, ref) => {
  let color;
  if (variant === "alternative") {
    color = "colorNemetonPurple";
  } else if (variant === "inverted") {
    color = "white";
  } else {
    color = "greyShark";
  }
  if (Icon.name !== "Add" && Icon.name !== "Close" && Icon.name !== "Subtract" && Icon.name !== "PlayVideo") {
    warn("IconButton", "IconButton is meant to be used with the Add, Close, Subtract, and PlayVideo icons for their universally-recognizable appearance. Other icons should be accompanied with text and not as a part of IconButton.");
  }
  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: getTheme(variant)
  }, /*#__PURE__*/React.createElement(StyledIconButton$1, _extends$2({}, safeRest(rest), {
    variant: variant,
    onClick: onClick,
    as: tag,
    ref: ref
  }), /*#__PURE__*/React.createElement(A11yContent, null, a11yText), /*#__PURE__*/React.createElement(StyledInteractiveIconHover, null), /*#__PURE__*/React.createElement(Icon, {
    color: color
  })));
});
IconButton.displayName = "IconButton";
IconButton.propTypes = {
  a11yText: PropTypes$1.string.isRequired,
  variant: PropTypes$1.oneOf(["default", "alternative", "inverted"]),
  onClick: PropTypes$1.func,
  tag: PropTypes$1.oneOf(["button", "a"]),
  icon: PropTypes$1.oneOfType([componentWithName$1("Add"), componentWithName$1("Close"), componentWithName$1("PlayVideo"), componentWithName$1("Subtract")]).isRequired
};
IconButton.defaultProps = {
  variant: "default",
  onClick: undefined,
  tag: "button"
};

const base$1 = {
  display: "inline-block",
  textDecoration: "none",
  maxWidth: "100%",
  verticalAlign: "top"
};
const variantDict = {
  primary: "default",
  secondary: "alternative",
  inverted: "inverted"
};
const StyledChevronLink = styled.a(medium, helveticaNeueRoman55, base$1, ({
  variant
}) => {
  let color;
  if (variant === "secondary") {
    color = colorSecondary;
  } else if (variant === "inverted") {
    color = colorWhite;
  } else {
    color = colorPrimary;
  }
  return {
    "&:link,&:visited": {
      color
    }
  };
});
const StyledChevron$1 = styled.span(({
  direction
}) => ({
  display: "inline-block",
  transition: "transform 300ms",
  [`${StyledChevronLink}:hover &`]: {
    transform: `translateX(${direction === "right" ? "0.25rem" : "-0.25rem"})`
  }
}));
const getIcon$1 = (direction, variant) => /*#__PURE__*/React.createElement(StyledChevron$1, {
  direction: direction
}, direction === "left" && /*#__PURE__*/React.createElement(ChevronLeft, {
  size: 16,
  variant: variant
}), direction === "right" && /*#__PURE__*/React.createElement(ChevronRight, {
  size: 16,
  variant: variant
}));
const ChevronLink = /*#__PURE__*/reactExports.forwardRef(({
  reactRouterLinkComponent,
  variant,
  direction,
  children,
  ...rest
}, ref) => {
  if ((reactRouterLinkComponent || rest.to) && !(reactRouterLinkComponent && rest.to)) {
    warn("Chevron Link", "The props `reactRouterLinkComponent` and `to` must be used together.");
  }
  const iconVariant = variantDict[variant];
  const innerLink = /*#__PURE__*/React.createElement(Box, {
    tag: "span",
    inline: true,
    between: 2
  }, direction === "left" ? getIcon$1(direction, iconVariant) : undefined, /*#__PURE__*/React.createElement("span", null, children), direction === "right" ? getIcon$1(direction, iconVariant) : undefined);
  return /*#__PURE__*/React.createElement(StyledChevronLink, _extends$2({}, safeRest(rest), {
    as: reactRouterLinkComponent || "a",
    variant: variant,
    direction: direction,
    ref: ref
  }), innerLink);
});
ChevronLink.displayName = "ChevronLink";
ChevronLink.propTypes = {
  variant: PropTypes$1.oneOf(["primary", "secondary", "inverted"]),
  direction: PropTypes$1.oneOf(["left", "right"]),
  reactRouterLinkComponent: PropTypes$1.oneOfType([PropTypes$1.func, PropTypes$1.object]),
  to: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.object]),
  href: PropTypes$1.string,
  children: or$1([PropTypes$1.string, componentWithName$1("A11yContent"), htmlElement("span")]).isRequired
};
ChevronLink.defaultProps = {
  variant: "primary",
  direction: "right",
  reactRouterLinkComponent: null,
  to: null,
  href: null
};

const icons = {
  default: {
    fontFamily: "NEMETON Core Icons" /* stylelint-disable-line font-family-no-missing-generic-family-keyword */,
    display: "inline-block",
    fontWeight: "normal",
    fontStyle: "normal",
    speak: "none",
    textDecoration: "inherit",
    textTransform: "none",
    textRendering: "auto",
    "-webkit-font-smoothing": "antialiased",
    "-moz-osx-font-smoothing": "grayscale",
    lineHeight: 1,
    verticalAlign: "middle"
  },
  caretDown: {
    "&::before": {
      content: "'\f105'"
    }
  },
  caretUp: {
    "&::before": {
      content: "'\f106'"
    }
  },
  checkmark: {
    "&::before": {
      content: "'\f101'"
    }
  },
  chevron: {
    "&::before": {
      content: "'\f107'"
    }
  },
  leftChevron: {
    "&::before": {
      content: "'\f107'",
      display: "inline-block",
      transform: "rotate(-180deg) translateY(1.5px)"
    }
  },
  exclamationPointCircle: {
    "&::before": {
      content: "'\f103'"
    }
  },
  expander: {
    "&::before": {
      content: "'\f113'"
    }
  },
  hamburger: {
    "&::before": {
      content: "'\f112'"
    }
  },
  location: {
    "&::before": {
      content: "'\f110'"
    }
  },
  minus: {
    "&::before": {
      content: "'\f109'"
    }
  },
  plus: {
    "&::before": {
      content: "'\f108'"
    }
  },
  questionMarkCircle: {
    "&::before": {
      content: "'\f102'"
    }
  },
  spyglass: {
    "&::before": {
      content: "'\f111'"
    }
  },
  times: {
    "&::before": {
      content: "'\f104'"
    }
  }
};

const getColour$1 = variant => {
  switch (variant) {
    case "primary":
      return colorIconPrimary;
    case "secondary":
      return colorIconSecondary;
    case "inverted":
      return colorWhite;
    case "error":
      return colorCardinal;
    default:
      return undefined;
  }
};
const iconSymbol = ({
  symbol
}) => ({
  ...icons.default,
  ...icons[symbol]
});
const iconVariant = ({
  variant
}) => ({
  color: getColour$1(variant)
});
const iconSize = ({
  iSize
}) => ({
  fontSize: pixelToRem(iSize)
});
const StyledIcon$2 = styled.i(iconSymbol, iconVariant, iconSize);
const Icon = ({
  symbol,
  variant,
  size,
  ...rest
}) => /*#__PURE__*/React.createElement(StyledIcon$2, _extends$2({}, safeRest(rest), {
  symbol: symbol,
  variant: variant,
  iSize: size
}));
Icon.propTypes = {
  symbol: PropTypes$1.oneOf(["caretDown", "caretUp", "checkmark", "chevron", "leftChevron", "exclamationPointCircle", "expander", "hamburger", "location", "minus", "plus", "questionMarkCircle", "spyglass", "times"]).isRequired,
  variant: PropTypes$1.oneOf(["primary", "secondary", "inverted", "error"]),
  size: PropTypes$1.oneOf([16, 20, 24, 32, 48])
};
Icon.defaultProps = {
  variant: undefined,
  size: 24
};

const DecorativeIcon = ({
  symbol,
  variant,
  size,
  ...rest
}) => {
  return /*#__PURE__*/React.createElement(Icon, _extends$2({}, rest, {
    symbol: symbol,
    variant: variant,
    size: size,
    "aria-hidden": "true"
  }));
};
DecorativeIcon.propTypes = {
  symbol: PropTypes$1.oneOf(["caretDown", "caretUp", "checkmark", "chevron", "leftChevron", "exclamationPointCircle", "expander", "hamburger", "location", "minus", "plus", "questionMarkCircle", "spyglass", "times"]).isRequired,
  variant: PropTypes$1.oneOf(["primary", "secondary", "inverted", "error"]),
  size: PropTypes$1.oneOf([16, 20, 24, 32, 48])
};
DecorativeIcon.defaultProps = {
  variant: undefined,
  size: 24
};

const getColour = variant => {
  switch (variant) {
    case "alternative":
      return colorGreyShark;
    case "inverted":
      return colorWhite;
    case "default":
    default:
      return colorNemetonPurple;
  }
};
const svgVariant = ({
  variant
}) => ({
  "& > svg": {
    fill: getColour(variant)
  }
});
const svgSize = ({
  size
}) => ({
  "& > svg": {
    width: pixelToRem(size),
    height: pixelToRem(size)
  }
});
const StyledSVGIcon = styled.i({
  display: "inline-flex"
}, svgVariant, svgSize);
const SVGIcon = ({
  onClick,
  ...rest
}) => {
  if (onClick) {
    warn("SVGIcon", "SVG Icon is not interactive and does not accept events through props.");
  }
  return /*#__PURE__*/React.createElement(StyledSVGIcon, _extends$2({}, safeRest(rest), {
    "aria-hidden": "true"
  }));
};
SVGIcon.propTypes = {
  children: PropTypes$1.node.isRequired,
  onClick: PropTypes$1.func,
  variant: PropTypes$1.oneOf(["default", "alternative", "inverted"]),
  size: PropTypes$1.oneOf([16, 20, 24, 32, 48])
};
SVGIcon.defaultProps = {
  variant: "default",
  size: 24,
  onClick: undefined
};

const Accessible = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M1.231 11.257l.662.662a5.87 5.87 0 00-.982 3.235c0 1.585.618 3.078 1.74 4.2a5.903 5.903 0 004.2 1.739 5.838 5.838 0 002.991-.831l.242-.151.647.645C9.564 21.566 8.214 22 6.851 22a6.83 6.83 0 01-4.845-2.003A6.805 6.805 0 010 15.154c0-1.416.438-2.76 1.232-3.897zm5.81-9.99c.223 0 .449.058.652.176 0 0 5.947 3.455 5.957 3.462.307.192.507.492.579.822.124.433.054.913-.22 1.3l-.1.125-2.68 2.738c.159.132.316.27.465.42l.014.015.014.016 5.136-.603.07-.002a1.3 1.3 0 011.3 1.265l-.004.14-.39 6.71a1.46 1.46 0 01-1.55 1.366 1.456 1.456 0 01-1.36-1.41l.002-.141.337-4.465a.09.09 0 00-.09-.103h-.013l-.012.004-1.684.297a6.859 6.859 0 01-.81 5.367l-.165.253-.66-.66a5.882 5.882 0 00.96-3.206 5.903 5.903 0 00-1.738-4.2 5.904 5.904 0 00-4.201-1.74c-1.06 0-2.073.291-2.966.813l-.24.148-.648-.648a6.827 6.827 0 012.94-1.156l.312-.035 2.507-2.778-1.5-.876L5.33 6.31a1.47 1.47 0 01-2.081.002c-.542-.542-.554-1.423-.078-2.008l.102-.112 2.902-2.596c.244-.217.552-.33.865-.33zm9.49 9.43l-.061.004-3.975.467c.223.338.41.701.576 1.073l.12.28 1.75-.308.077-.022.156-.004c.288 0 .562.125.754.34.15.174.236.392.246.617l-.003.137-.337 4.454a.541.541 0 00.136.389.536.536 0 00.287.171l.086.013c.289 0 .509-.18.567-.422l.015-.093.357-6.14c.095-.847-.407-.964-.75-.955zm-9.49-8.52a.387.387 0 00-.202.057l-.057.043L3.905 4.85c-.215.23-.222.607-.012.817a.558.558 0 00.725.057l.068-.058.027-.027.029-.024 1.924-1.63.49-.416.558.325 1.5.876.967.565-.75.832-1.913 2.12a6.959 6.959 0 012.683.85l.31.183 2.727-2.784a.603.603 0 00.135-.46l-.02-.1-.008-.026-.005-.027a.385.385 0 00-.165-.241c-.278-.163-5.044-2.93-5.83-3.388l-.063-.036-.047-.027a.38.38 0 00-.194-.053zM14.743 0c1.16 0 2.106.945 2.106 2.106a2.11 2.11 0 01-2.106 2.107 2.11 2.11 0 01-2.106-2.107C12.637.945 13.582 0 14.743 0zm0 .91a1.196 1.196 0 000 2.392 1.196 1.196 0 000-2.391z",
  fillRule: "evenodd"
})));
Accessible.displayName = "DecorativeIcon";

const AddUser = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M19,19 L19,20.5 C19,20.776 18.776,21 18.5,21 C18.224,21 18,20.776 18,20.5 L18,19 L16.5,19 C16.224,19 16,18.776 16,18.5 C16,18.224 16.224,18 16.5,18 L18,18 L18,16.5 C18,16.224 18.224,16 18.5,16 C18.776,16 19,16.224 19,16.5 L19,18 L20.5,18 C20.776,18 21,18.224 21,18.5 C21,18.776 20.776,19 20.5,19 L19,19 Z M13.605,24 L0.5,24 C0.224,24 0,23.776 0,23.5 L0,21.098 C0,21.057 0.005,21.016 0.015,20.977 C0.276,19.933 0.685,18.912 1.904,18.505 L6.342,17.026 C7.385,16.59 7.873,14.864 7.978,14.209 C7.213,13.506 6.5,12.449 6.5,11.5 C6.5,11.146 6.395,11 6.339,10.973 C6.183,10.934 6.095,10.835 6.035,10.686 C5.981,10.549 5.5,9.322 5.5,8.5 C5.5,8.459 5.505,8.418 5.515,8.379 C5.57,8.159 5.723,7.839 6,7.651 L6,5 C6,2.912 7.902,0 11,0 C14.06,0 14.892,1.569 14.99,2.345 C15.508,2.729 16,3.389 16,5 L16,7.651 C16.277,7.839 16.43,8.159 16.485,8.379 C16.495,8.418 16.5,8.459 16.5,8.5 C16.5,9.322 16.019,10.549 15.964,10.686 C15.904,10.835 15.776,10.947 15.621,10.986 C15.605,11 15.5,11.146 15.5,11.5 C15.5,11.935 15.352,12.412 15.061,12.92 C14.923,13.159 14.618,13.241 14.378,13.105 C14.139,12.967 14.056,12.662 14.193,12.422 C14.394,12.072 14.5,11.754 14.5,11.5 C14.5,10.753 14.809,10.339 15.101,10.143 C15.245,9.751 15.474,9.039 15.498,8.576 C15.481,8.537 15.457,8.496 15.441,8.482 C15.165,8.481 15,8.276 15,8 L15,5 C15,3.528 14.527,3.229 14.325,3.1 C14.204,3.022 14,2.894 13.97,2.619 C13.964,2.559 13.972,2.492 13.992,2.424 C13.921,2.027 13.321,1 11,1 C8.558,1 7,3.369 7,5 L7,8 C7,8.276 6.776,8.5 6.5,8.5 C6.524,8.5 6.515,8.534 6.502,8.572 C6.525,9.038 6.755,9.751 6.899,10.142 C7.191,10.338 7.5,10.753 7.5,11.5 C7.5,12.173 8.163,13.073 8.818,13.614 C8.934,13.71 9,13.851 9,14 C9,14.635 8.423,17.24 6.692,17.962 L2.22,19.454 C1.512,19.69 1.231,20.259 1,21.16 L1,23 L13.605,23 C13.881,23 14.105,23.224 14.105,23.5 C14.105,23.776 13.882,24 13.605,24 Z M18.5,24 C15.467,24 13,21.532 13,18.5 C13,15.468 15.467,13 18.5,13 C21.533,13 24,15.468 24,18.5 C24,21.532 21.533,24 18.5,24 Z M18.5,14 C16.019,14 14,16.019 14,18.5 C14,20.981 16.019,23 18.5,23 C20.981,23 23,20.981 23,18.5 C23,16.019 20.981,14 18.5,14 Z"
})));
AddUser.displayName = "DecorativeIcon";

const AlarmClock = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "23",
  viewBox: "0 0 24 23"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M12.51384,13.393472 L17.03544,17.134592 C17.1708,17.269952 17.24376,17.427392 17.24376,17.573312 C17.24376,17.683712 17.20152,17.784512 17.12184,17.863232 C17.03064,17.954432 16.8444,18.055232 16.72248,18.055232 C16.63512,18.055232 16.51608,18.055232 16.40184,17.941952 L11.68728,14.013632 C11.598,13.926272 11.48664,13.813952 11.48664,13.606592 L11.48664,8.097152 C11.48664,7.794752 11.69784,7.583552 12.00024,7.583552 C12.30264,7.583552 12.51384,7.794752 12.51384,8.097152 L12.51384,13.393472 Z M6.484368,3.211328 C6.845328,2.850368 6.831888,2.435648 6.698448,2.168768 C6.525648,1.739648 6.219408,1.526528 5.781648,1.526528 C5.478288,1.526528 5.280528,1.605248 5.079888,1.805888 L1.773648,5.112128 C1.572048,5.313728 1.494288,5.510528 1.494288,5.814848 C1.494288,6.251648 1.706448,6.557888 2.126928,6.725888 C2.403408,6.864128 2.818128,6.878528 3.178128,6.516608 L6.484368,3.211328 Z M7.204368,3.931328 L3.899088,7.237568 C3.515088,7.620608 3.023568,7.824128 2.476368,7.824128 C2.219088,7.824128 1.969488,7.740608 1.729488,7.659968 C0.935568,7.307648 0.467088,6.619328 0.467088,5.814848 C0.467088,5.267648 0.669648,4.775168 1.053648,4.391168 L4.359888,1.085888 C4.742928,0.702848 5.234448,0.500288 5.781648,0.500288 C6.586128,0.500288 7.274448,0.967808 7.623888,1.752128 C7.957968,2.504768 7.796688,3.339968 7.204368,3.931328 Z M17.307312,2.15984 C17.168112,2.43632 17.154672,2.84912 17.515632,3.21104 L20.821872,6.51728 C21.182832,6.87824 21.595632,6.8648 21.864432,6.7304 C22.157232,6.58352 22.505712,6.30608 22.505712,5.81456 C22.505712,5.51024 22.426992,5.31344 22.226352,5.11184 L18.921072,1.8056 C18.720432,1.60496 18.522672,1.52624 18.217392,1.52624 C17.780592,1.52624 17.474352,1.74032 17.307312,2.15984 Z M22.947312,4.39184 C23.319792,4.76336 23.532912,5.28272 23.532912,5.81456 C23.532912,6.61904 23.065392,7.30736 22.282032,7.65584 C22.030512,7.74032 21.780912,7.82384 21.524592,7.82384 C20.976432,7.82384 20.485872,7.62032 20.100912,7.23728 L16.794672,3.93104 C16.203312,3.33968 16.042992,2.50448 16.377072,1.75184 C16.725552,0.96752 17.412912,0.5 18.217392,0.5 C18.766512,0.5 19.257072,0.70256 19.642032,1.0856 L22.947312,4.39184 Z M12.000144,21.751328 C16.491984,21.751328 20.144784,18.097568 20.144784,13.606688 C20.144784,9.115808 16.491984,5.462048 12.000144,5.462048 C7.509264,5.462048 3.855504,9.115808 3.855504,13.606688 C3.855504,18.097568 7.509264,21.751328 12.000144,21.751328 Z M12.000144,4.434848 C17.057424,4.434848 21.171984,8.549408 21.171984,13.606688 C21.171984,18.663968 17.057424,22.778528 12.000144,22.778528 C6.942864,22.778528 2.828304,18.663968 2.828304,13.606688 C2.828304,8.549408 6.942864,4.434848 12.000144,4.434848 Z"
})));
AlarmClock.displayName = "DecorativeIcon";

const Ambulance = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "23",
  viewBox: "0 0 24 23"
}, /*#__PURE__*/React.createElement("path", {
  d: "M22.5,15.5c-0.3,0-0.5-0.2-0.5-0.5V8.2l-0.7-0.7H5.8L3,11.2V15c0,0.3-0.2,0.5-0.5,0.5S2,15.3,2,15v-4 c0-0.1,0-0.2,0.1-0.3l3-4c0.1-0.1,0.2-0.2,0.4-0.2h16c0.1,0,0.3,0.1,0.4,0.1l1,1C22.9,7.7,23,7.9,23,8v7 C23,15.3,22.8,15.5,22.5,15.5z"
}), /*#__PURE__*/React.createElement("path", {
  d: "M7.5,12.5h-3c-0.2,0-0.4-0.1-0.4-0.3c-0.1-0.2-0.1-0.4,0-0.5l2-3c0.1-0.1,0.2-0.2,0.4-0.2h1 C7.8,8.5,8,8.7,8,9v3C8,12.3,7.8,12.5,7.5,12.5z M5.4,11.5H7v-2H6.8L5.4,11.5z"
}), /*#__PURE__*/React.createElement("path", {
  d: "M22.5,17.5h-1c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5H22v-1H6.5c-0.1,0-0.2,0-0.2-0.1l-2-1 C4,14.3,3.9,14,4.1,13.8c0.1-0.2,0.4-0.3,0.7-0.2l1.9,0.9h15.9c0.3,0,0.5,0.2,0.5,0.5v2C23,17.3,22.8,17.5,22.5,17.5z"
}), /*#__PURE__*/React.createElement("path", {
  d: "M2.5,17.5h-1C1.2,17.5,1,17.3,1,17v-2c0-0.3,0.2-0.5,0.5-0.5h1C2.8,14.5,3,14.7,3,15s-0.2,0.5-0.5,0.5H2v1 h0.5C2.8,16.5,3,16.7,3,17S2.8,17.5,2.5,17.5z"
}), /*#__PURE__*/React.createElement("path", {
  d: "M5,20.5c-1.1,0-2-0.9-2-2s0.9-2,2-2s2,0.9,2,2S6.1,20.5,5,20.5z M5,17.5c-0.6,0-1,0.4-1,1s0.4,1,1,1 s1-0.4,1-1S5.6,17.5,5,17.5z"
}), /*#__PURE__*/React.createElement("path", {
  d: "M19,20.5c-1.1,0-2-0.9-2-2s0.9-2,2-2s2,0.9,2,2S20.1,20.5,19,20.5z M19,17.5c-0.6,0-1,0.4-1,1s0.4,1,1,1 s1-0.4,1-1S19.6,17.5,19,17.5z"
}), /*#__PURE__*/React.createElement("path", {
  d: "M16.5,17.5h-9C7.2,17.5,7,17.3,7,17s0.2-0.5,0.5-0.5h9c0.3,0,0.5,0.2,0.5,0.5S16.8,17.5,16.5,17.5z"
}), /*#__PURE__*/React.createElement("path", {
  d: "M18.5,13.5c-0.3,0-0.5-0.2-0.5-0.5V9c0-0.3,0.2-0.5,0.5-0.5S19,8.7,19,9v4C19,13.3,18.8,13.5,18.5,13.5z"
}), /*#__PURE__*/React.createElement("path", {
  d: "M20.2,12.5c-0.1,0-0.2,0-0.2-0.1l-3.5-2c-0.2-0.1-0.3-0.4-0.2-0.7c0.1-0.2,0.4-0.3,0.7-0.2l3.5,2 c0.2,0.1,0.3,0.4,0.2,0.7C20.6,12.4,20.4,12.5,20.2,12.5z"
}), /*#__PURE__*/React.createElement("path", {
  d: "M16.8,12.5c-0.2,0-0.3-0.1-0.4-0.2c-0.1-0.2-0.1-0.5,0.2-0.7l3.5-2c0.2-0.1,0.5-0.1,0.7,0.2 c0.1,0.2,0.1,0.5-0.2,0.7l-3.5,2C16.9,12.5,16.9,12.5,16.8,12.5z"
}), /*#__PURE__*/React.createElement("path", {
  d: "M14.5,12.5h-4c-0.3,0-0.5-0.2-0.5-0.5V9c0-0.3,0.2-0.5,0.5-0.5h4C14.8,8.5,15,8.7,15,9v3 C15,12.3,14.8,12.5,14.5,12.5z M11,11.5h3v-2h-3V11.5z"
}), /*#__PURE__*/React.createElement("path", {
  d: "M11.5,7.5h-2C9.2,7.5,9,7.3,9,7V5c0-0.8,0.7-1.5,1.5-1.5S12,4.2,12,5v2C12,7.3,11.8,7.5,11.5,7.5z M10,6.5h1 V5c0-0.3-0.2-0.5-0.5-0.5S10,4.7,10,5V6.5z"
})));
Ambulance.displayName = "DecorativeIcon";

const AppleWatch = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  fill: "#fff",
  d: "M17 19.7143H6.71429C5.768 19.7143 5 18.9463 5 18V6.85711C5 5.91082 5.768 5.14282 6.71429 5.14282H17C17.9463 5.14282 18.7143 5.91082 18.7143 6.85711V18C18.7143 18.9463 17.9463 19.7143 17 19.7143Z",
  stroke: "#4B286D",
  strokeLinecap: "round",
  strokeLinejoin: "round"
}), /*#__PURE__*/React.createElement("path", {
  d: "M7 5L7.61865 1H16.3814L17 5",
  fill: "#fff",
  stroke: "#4B286D",
  strokeLinecap: "round",
  strokeLinejoin: "round"
}), /*#__PURE__*/React.createElement("path", {
  d: "M17 20L16.5217 23H7.47924L7 20",
  fill: "#fff",
  stroke: "#4B286D",
  strokeLinecap: "round",
  strokeLinejoin: "round"
}), /*#__PURE__*/React.createElement("path", {
  d: "M19.5703 8.57153V10.2858",
  fill: "#fff",
  stroke: "#4B286D",
  strokeLinecap: "round",
  strokeLinejoin: "round"
}), /*#__PURE__*/React.createElement("path", {
  d: "M19.5703 13.7144V15.4286",
  fill: "#fff",
  stroke: "#4B286D",
  strokeLinecap: "round",
  strokeLinejoin: "round"
})));
AppleWatch.displayName = "DecorativeIcon";

const ArrowDown = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "20",
  height: "24",
  viewBox: "0 0 20 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-2)",
  d: "M21.353125,14.853 L12.353125,23.853 C12.307125,23.899 12.251125,23.936 12.190125,23.961 C12.155125,23.976 12.119125,23.977 12.082125,23.983 C12.054125,23.988 12.029125,24 11.999125,24 C11.961125,24 11.928125,23.986 11.892125,23.978 C11.865125,23.972 11.837125,23.973 11.811125,23.962 C11.748125,23.936 11.691125,23.898 11.644125,23.851 L2.646125,14.853 C2.452125,14.658 2.452125,14.341 2.646125,14.146 C2.841125,13.951 3.159125,13.951 3.353125,14.146 L11.499125,22.293 L11.499125,0.5 C11.499125,0.224 11.724125,0 11.999125,0 C12.275125,0 12.499125,0.224 12.499125,0.5 L12.499125,22.293 L20.646125,14.146 C20.744125,14.049 20.872125,14 20.999125,14 C21.127125,14 21.255125,14.049 21.353125,14.146 C21.548125,14.341 21.548125,14.658 21.353125,14.853 Z"
})));
ArrowDown.displayName = "DecorativeIcon";

const ArrowUp = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "20",
  height: "24",
  viewBox: "0 0 20 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-2)",
  d: "M21.353125,9.147 L12.353125,0.147 L12.353125,0.147 C12.307125,0.101 12.251125,0.064 12.190125,0.039 C12.155125,0.024 12.119125,0.023 12.082125,0.017 C12.054125,0.012 12.029125,0 11.999125,0 C11.961125,0 11.928125,0.014 11.892125,0.022 C11.865125,0.028 11.837125,0.027 11.811125,0.038 C11.748125,0.064 11.691125,0.102 11.644125,0.149 L2.646125,9.147 C2.452125,9.342 2.452125,9.659 2.646125,9.854 C2.841125,10.049 3.159125,10.049 3.353125,9.854 L11.499125,1.707 L11.499125,23.5 C11.499125,23.776 11.724125,24 11.999125,24 C12.275125,24 12.499125,23.776 12.499125,23.5 L12.499125,1.707 L20.646125,9.854 C20.744125,9.951 20.872125,10 20.999125,10 C21.127125,10 21.255125,9.951 21.353125,9.854 C21.548125,9.659 21.548125,9.342 21.353125,9.147"
})));
ArrowUp.displayName = "DecorativeIcon";

const ArtificialIntelligence = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "21",
  height: "24",
  viewBox: "0 0 21 24"
}, /*#__PURE__*/React.createElement("path", {
  transform: "translate(-1)",
  d: "M7.5,7.48783227 C6.948,7.48783227 6.5,7.04055909 6.5,6.48945464 C6.5,5.93835018 6.948,5.491077 7.5,5.491077 C8.052,5.491077 8.5,5.93835018 8.5,6.48945464 C8.5,7.04055909 8.052,7.48783227 7.5,7.48783227 Z M7.5,6.48845626 L8,6.48945464 L7.5,6.48845626 Z M14.5,12.9789093 L12.5,12.9789093 C12.367,12.9789093 12.24,12.9259953 12.146,12.8331461 L11.146,11.8347685 C10.951,11.6400849 10.951,11.3235992 11.146,11.1289155 C11.341,10.9342319 11.658,10.9342319 11.853,11.1289155 L12.707,11.9805316 L14.293,11.9805316 L15.147,11.1279171 C15.342,10.9332335 15.659,10.9332335 15.854,11.1279171 C16.049,11.3226008 16.049,11.6390865 15.854,11.8337701 L14.854,12.8321478 C14.76,12.9259953 14.633,12.9789093 14.5,12.9789093 Z M12.5,20.9659304 C12.372,20.9659304 12.244,20.9170099 12.146,20.8201672 L11.146,19.8217896 C11.053,19.7279421 11,19.6011481 11,19.4683639 L11,15.4748534 C11,15.3420691 11.053,15.2152752 11.146,15.1214277 L12.146,14.12305 C12.341,13.9283664 12.658,13.9283664 12.853,14.12305 C13.048,14.3177337 13.048,14.6342194 12.853,14.828903 L12,15.6815175 L12,19.2616997 L12.854,20.1143142 C13.049,20.3089979 13.049,20.6254836 12.854,20.8201672 C12.756,20.9170099 12.628,20.9659304 12.5,20.9659304 Z M13.5,18.9691751 C13.224,18.9691751 13,18.7455385 13,18.4699863 L13,16.473231 C13,16.3404468 13.053,16.2136528 13.146,16.1198053 L17.146,12.1262948 C17.341,11.9316111 17.658,11.9316111 17.853,12.1262948 C18.048,12.3209784 18.048,12.6374641 17.853,12.8321478 L14,16.6798952 L14,18.4699863 C14,18.7455385 13.776,18.9691751 13.5,18.9691751 Z M12.5,21.4651192 C11.948,21.4651192 11.5,21.017846 11.5,20.4667415 C11.5,19.9156371 11.948,19.4683639 12.5,19.4683639 C13.052,19.4683639 13.5,19.9156371 13.5,20.4667415 C13.5,21.017846 13.052,21.4651192 12.5,21.4651192 Z M12.5,20.4657432 L13,20.4667415 L12.5,20.4657432 Z M15.5,19.9675527 C15.224,19.9675527 15,19.7439161 15,19.4683639 L15,17.4716086 C15,17.3388244 15.053,17.2120305 15.146,17.118183 L16.146,16.1198053 C16.341,15.9251217 16.658,15.9251217 16.853,16.1198053 C17.048,16.314489 17.048,16.6309747 16.853,16.8256583 L16,17.6782728 L16,19.4683639 C16,19.7439161 15.776,19.9675527 15.5,19.9675527 Z M14.5,5.491077 C13.948,5.491077 13.5,5.04380382 13.5,4.49269936 C13.5,3.94159491 13.948,3.49432173 14.5,3.49432173 C15.052,3.49432173 15.5,3.94159491 15.5,4.49269936 C15.5,5.04380382 15.052,5.491077 14.5,5.491077 Z M19.5103002,17.5695678 C19.4790183,17.411616 19.5245849,17.2413979 19.647,17.1191813 L19.928,16.8386372 L19.526,15.6335954 C19.481,15.4988144 19.497,15.3510545 19.567,15.2272557 C19.638,15.1044553 19.758,15.016598 19.898,14.9876451 C20.438,14.87383 20.956,14.6072632 21.002,14.4694871 C20.965,14.0771247 19.856,11.9615625 18.85,10.2363659 C18.786,10.1245476 18.766,9.99076501 18.797,9.86496942 C18.798,9.85498565 19,9.01535006 19,7.48783227 C19,6.11406464 16.874,0.998377636 10.5,0.998377636 C4.078,0.998377636 2,6.04317983 2,8.48620991 C2,10.7115937 3.4,13.1356546 4.525,15.0834893 C5.35,16.510171 6,17.6373393 6,18.4699863 C6,20.3579184 3.188,23.4538874 2.867,23.8003245 C2.769,23.9071509 2.635,23.9610633 2.5,23.9610633 C2.379,23.9610633 2.257,23.9171347 2.161,23.828279 C1.958,23.6415824 1.945,23.3260951 2.133,23.1234244 C2.93,22.2598278 5,19.740921 5,18.4699863 C5,17.9049045 4.349,16.7767378 3.659,15.5816798 C2.475,13.5320105 1,10.9781605 1,8.48620991 C1,4.96293523 3.947,0 10.5,0 C17.174,0 20,5.35629602 20,7.48783227 C20,8.71783352 19.878,9.53949832 19.81,9.89891426 C20.539,11.1578685 22,13.768626 22,14.4764757 C22,15.2082865 21.215,15.6156246 20.641,15.8143018 L20.975,16.8146762 C21.035,16.9943841 20.988,17.1920629 20.854,17.3258455 L20.4419017,17.7372752 C20.4881899,17.8247622 20.5091046,17.9268756 20.496,18.0326969 C20.462,18.3072507 20.206,18.4999376 19.937,18.4659928 C20,18.5578435 20.019,18.5947835 20.121,18.7455385 C20.271,18.9701735 20.5,19.3096219 20.5,19.9675527 C20.5,21.4810932 18.812,21.7566455 17.581,21.9573194 C15.938,22.2258829 14.163,23.1833271 13.986,23.5397479 C13.986,23.8153001 13.77,24 13.493,24 C13.217,24 13,23.7374267 13,23.4618745 C13,22.2957694 16.098,21.1885686 17.419,20.972919 C19.351,20.6564333 19.5,20.35692 19.5,19.9675527 C19.5,19.614127 19.412,19.4833396 19.29,19.3016348 C19.168,19.1189317 19,18.8693373 19,18.4699863 C19,18.064645 19.172,17.8270311 19.315,17.7002371 C19.3781125,17.6445538 19.4443464,17.6019944 19.5103002,17.5695678 Z M9.5,23.9610633 C9.224,23.9610633 9,23.7374267 9,23.4618745 L9,12.6863846 L6.146,9.83801323 C6.053,9.74416573 6,9.61737177 6,9.48458755 L6,7.48783227 C6,7.35504805 6.053,7.22825409 6.146,7.13440659 L7.146,6.13602895 C7.341,5.94134531 7.658,5.94134531 7.853,6.13602895 C8.048,6.33071259 8.048,6.6471983 7.853,6.84188194 L7,7.69449644 L7,9.27792337 L9.854,12.1272931 C9.947,12.2201423 10,12.3469362 10,12.4797205 L10,23.4618745 C10,23.7374267 9.776,23.9610633 9.5,23.9610633 Z M16.5,9.98377636 L9.5,9.98377636 C9.367,9.98377636 9.24,9.93086235 9.146,9.83801323 L8.146,8.83963559 C7.951,8.64495195 7.951,8.32846624 8.146,8.1337826 C8.341,7.93909896 8.658,7.93909896 8.853,8.1337826 L9.707,8.98539873 L16.5,8.98539873 C16.776,8.98539873 17,9.20903532 17,9.48458755 C17,9.76013977 16.776,9.98377636 16.5,9.98377636 Z M15.5,7.98702109 L12.5,7.98702109 C12.224,7.98702109 12,7.7633845 12,7.48783227 C12,7.21228004 12.224,6.98864345 12.5,6.98864345 L15.293,6.98864345 L16.147,6.13602895 C16.342,5.94134531 16.659,5.94134531 16.854,6.13602895 C17.049,6.33071259 17.049,6.6471983 16.854,6.84188194 L15.854,7.84025958 C15.76,7.93410708 15.633,7.98702109 15.5,7.98702109 Z M10.5,6.98864345 C10.372,6.98864345 10.244,6.93972295 10.146,6.84288032 C9.951,6.64819668 9.951,6.33171097 10.146,6.13702733 L11.146,5.13864969 C11.24,5.0448022 11.367,4.99188818 11.5,4.99188818 L13.293,4.99188818 L14.147,4.13927368 C14.342,3.94459004 14.659,3.94459004 14.854,4.13927368 C15.049,4.33395732 15.049,4.65044303 14.854,4.84512667 L13.854,5.84350431 C13.76,5.9373518 13.633,5.99026582 13.5,5.99026582 L11.707,5.99026582 L10.853,6.84288032 C10.756,6.93972295 10.628,6.98864345 10.5,6.98864345 Z M7.5,23.9610633 C7.224,23.9610633 7,23.7374267 7,23.4618745 L7,13.6847623 L4.146,10.8353925 C4.053,10.7425434 4,10.6157494 4,10.4829652 L4,5.491077 C4,5.35829277 4.053,5.23149881 4.146,5.13765132 L6.146,3.14089604 C6.24,3.04804692 6.367,2.99513291 6.5,2.99513291 L8.5,2.99513291 C8.633,2.99513291 8.76,3.04804692 8.854,3.14089604 L9.854,4.13927368 C10.049,4.33395732 10.049,4.65044303 9.854,4.84512667 C9.659,5.03981031 9.342,5.03981031 9.147,4.84512667 L8.293,3.99351055 L6.707,3.99351055 L5,5.69774117 L5,10.276301 L7.854,13.1256708 C7.947,13.2185199 8,13.3453139 8,13.4780981 L8,23.4618745 C8,23.7374267 7.776,23.9610633 7.5,23.9610633 Z"
})));
ArtificialIntelligence.displayName = "DecorativeIcon";

const Attention = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "22",
  viewBox: "0 0 24 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -1)",
  d: "M10.6206024,6.61159154 C10.2686411,7.00054884 10.0976598,7.52149165 10.1496541,8.04243446 L11.0005607,16.5495006 C11.0265579,16.8054725 11.2415343,16.9994512 11.4985061,16.9994512 L12.4983963,16.9994512 C12.7553681,16.9994512 12.9703445,16.8054725 12.9953417,16.5495006 L13.8462483,8.04243446 C13.8982426,7.52149165 13.7272614,7.00054884 13.3753,6.61159154 C12.6723772,5.83467683 11.3235253,5.83467683 10.6206024,6.61159154 Z M12.0464459,15.9995609 L11.9514563,15.9995609 L11.1475446,7.94244544 C11.1225473,7.69847223 11.1995389,7.46449791 11.3645208,7.28251789 C11.6934847,6.91955774 12.3064174,6.91955774 12.6353813,7.28251789 C12.7993632,7.46349802 12.8763548,7.69847223 12.8523574,7.94244544 L12.0464459,15.9995609 Z M23.5841793,17.8603566 L15.0711139,2.82500724 C14.4481822,1.68313259 13.2993084,1.00120746 11.9984512,1.00120746 C10.697594,1.00120746 9.54872011,1.68313259 8.90779047,2.86300307 L0.421722077,17.8423586 C-0.165213489,18.9332389 -0.138216453,20.2190977 0.494714064,21.2859806 C1.13164414,22.3578629 2.25652065,22.9987925 3.50438366,22.9987925 L20.4935186,22.9987925 C21.7403817,22.9987925 22.8662581,22.3578629 23.5021883,21.2859806 C24.1391184,20.2130984 24.1631157,18.9182405 23.5841793,17.8603566 Z M22.6422827,20.7760366 C22.1873326,21.5429524 21.3834209,21.9999022 20.4925187,21.9999022 L3.50338377,21.9999022 C2.61248157,21.9999022 1.80856983,21.5429524 1.35361977,20.7760366 C0.898669717,20.0091208 0.881671583,19.0842223 1.30862471,18.3023081 C1.31562394,18.2903094 1.32162328,18.2783108 1.32762263,18.2653122 L9.80369212,3.30395466 C10.2486433,2.48804423 11.0695531,2.00109769 11.9984512,2.00109769 C12.9273492,2.00109769 13.7482591,2.48804423 14.1742123,3.26695872 L22.6872777,18.3023081 C23.1142309,19.0852222 23.0972327,20.0091208 22.6422827,20.7760366 Z M11.9984512,17.9993414 C11.171542,17.9993414 10.4986158,18.6722675 10.4986158,19.4991767 C10.4986158,20.326086 11.171542,20.9990121 11.9984512,20.9990121 C12.8253604,20.9990121 13.4982865,20.326086 13.4982865,19.4991767 C13.4982865,18.6722675 12.8253604,17.9993414 11.9984512,17.9993414 Z M11.9984512,19.9991218 C11.7224815,19.9991218 11.4985061,19.7741465 11.4985061,19.4991767 C11.4985061,19.2242069 11.7224815,18.9992316 11.9984512,18.9992316 C12.2744209,18.9992316 12.4983963,19.2242069 12.4983963,19.4991767 C12.4983963,19.7741465 12.2744209,19.9991218 11.9984512,19.9991218 Z"
})));
Attention.displayName = "DecorativeIcon";

const AutomaticFallDetection = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  fill: "none"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M13.2415 17.7419L13.9259 14.665C13.9708 14.4632 14.1483 14.3431 14.3224 14.3968C14.4965 14.4505 14.6012 14.6576 14.5563 14.8594L13.5617 19.3311L13.4172 19.9807L13.0133 19.4957L10.2332 16.1571C10.1077 16.0064 10.1104 15.7671 10.2391 15.6225C10.3679 15.4779 10.574 15.4828 10.6995 15.6335L12.6124 17.9307L12.0397 15.4258L11.2009 11.7566L4.92397 13.7279L4.60684 13.8275L4.52221 13.4573L2.01102 2.47261C1.9648 2.27041 2.06817 2.06422 2.24189 2.01207C2.41563 1.95992 2.59394 2.08156 2.64016 2.28376L5.06671 12.8983L11.3437 10.9269L11.6609 10.8273L11.7455 11.1975L12.6689 15.2369L13.2415 17.7419Z",
  fill: "#4B286D",
  stroke: "#4B286D",
  strokeWidth: "0.25"
}), /*#__PURE__*/React.createElement("path", {
  d: "M15.0273 20.3447L16.3323 16.9084",
  stroke: "#4B286D",
  strokeLinecap: "round"
}), /*#__PURE__*/React.createElement("path", {
  d: "M9.63672 20.3447L13.1146 21.4356",
  stroke: "#4B286D",
  strokeLinecap: "round"
}), /*#__PURE__*/React.createElement("path", {
  d: "M15.0273 21.8612L21.1149 19.675",
  stroke: "#4B286D",
  strokeLinecap: "round"
})));
AutomaticFallDetection.displayName = "DecorativeIcon";

const Award = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "22",
  height: "24",
  viewBox: "0 0 22 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-1)",
  d: "M7.04936881,2.0728 C7.25236881,5.4018 8.09336881,13.5788 11.5133688,17.6028 C11.6983688,17.8208 11.6733688,18.1488 11.4543688,18.3348 C11.3583688,18.4158 11.2383688,18.4578 11.1173688,18.4578 C10.9653688,18.4578 10.8213688,18.3918 10.7213688,18.2748 C7.10036881,14.0128 6.22136881,5.5678 6.01136881,2.1358 C6.00336881,1.9968 6.04936881,1.8628 6.14136881,1.7588 C6.23436881,1.6548 6.36136881,1.5938 6.49936881,1.5848 C6.78036881,1.5848 7.03136881,1.7898 7.04936881,2.0728 Z M21.2182688,9.3823 C22.1342688,7.0623 21.8132688,4.1103 20.8972688,3.5143 C20.4572688,3.2223 19.8692688,3.6413 19.4462688,4.0563 C19.1782688,6.9223 18.5662688,11.0073 17.1592688,14.6023 C18.4902688,13.3683 20.4502688,11.3253 21.2182688,9.3823 Z M13.3662688,19.0023 C17.8552688,14.2183 18.5062688,3.4843 18.5962688,1.0393 L5.41126881,1.0393 C5.50226881,3.4833 6.15126881,14.2153 10.6422688,19.0023 L13.3662688,19.0023 Z M16.2362688,22.6543 C16.2362688,21.1583 14.6282688,20.0413 13.1922688,20.0413 L10.8162688,20.0413 C9.38026881,20.0413 7.77326881,21.1583 7.77326881,22.6543 L7.77326881,22.9613 L16.2362688,22.9613 L16.2362688,22.6543 Z M2.79026881,9.5303 C3.56026881,11.4793 5.53626881,13.4713 6.87226881,14.6653 C5.44826881,11.0503 4.83026881,6.9293 4.56226881,4.0373 C4.14726881,3.6333 3.57526881,3.2293 3.14126881,3.5133 C2.19426881,4.1303 1.85426881,7.1573 2.79026881,9.5303 Z M21.4632688,2.6433 C22.9082688,3.5833 23.2592688,7.0433 22.1842688,9.7633 C20.8062688,13.2523 16.2062688,16.7993 16.1602688,16.8353 L16.1302688,16.8543 C15.6502688,17.7523 15.1162688,18.5513 14.5442688,19.2363 C15.9312688,19.7103 17.2752688,20.9213 17.2752688,22.6543 L17.2752688,23.4803 C17.2752688,23.7673 17.0412688,24.0003 16.7542688,24.0003 L7.25426881,24.0003 C6.96726881,24.0003 6.73426881,23.7673 6.73426881,23.4803 L6.73426881,22.6553 C6.73426881,20.9233 8.07726881,19.7113 9.46526881,19.2363 C8.88626881,18.5453 8.34826881,17.7353 7.86326881,16.8283 L7.85826881,16.8253 C7.66726881,16.6843 3.18826881,13.3623 1.82426881,9.9123 C0.729268813,7.1373 1.09426881,3.6053 2.57526881,2.6433 C2.89826881,2.4323 3.55426881,2.1743 4.45226881,2.6663 C4.40626881,1.9813 4.38226881,1.4243 4.37026881,1.0393 L4.08726881,1.0393 C3.80026881,1.0393 3.56726881,0.8063 3.56726881,0.5193 C3.56726881,0.2333 3.80026881,0.0003 4.08726881,0.0003 L19.9212688,0.0003 C20.2082688,0.0003 20.4422688,0.2333 20.4422688,0.5193 C20.4422688,0.8063 20.2082688,1.0393 19.9212688,1.0393 L19.6382688,1.0393 C19.6282688,1.3733 19.6062688,1.9423 19.5562688,2.6803 C20.4722688,2.1703 21.1372688,2.4293 21.4632688,2.6433 Z"
})));
Award.displayName = "DecorativeIcon";

const Baby = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M19.2531253,11.3245841 C17.4385586,13.1381444 14.4887556,13.1381444 12.6762018,11.3245841 C10.8636479,9.51102389 10.8636479,6.56122086 12.6762018,4.74766062 C13.5829819,3.8408805 14.7735711,3.38799365 15.9641603,3.38799365 C17.1557559,3.38799365 18.3463451,3.8408805 19.2531253,4.74766062 C20.1317258,5.6252547 20.6158115,6.79370278 20.6158115,8.03561917 C20.6158115,9.27854197 20.1317258,10.4459836 19.2531253,11.3245841 M19.9646608,4.03612506 C17.7596051,1.83006288 14.169722,1.83006288 11.9646662,4.03612506 C9.75860401,6.24118082 9.75860401,9.83005752 11.9646662,12.0361197 C13.0676973,13.1391508 14.5159288,13.6906663 15.9641603,13.6906663 C17.4133982,13.6906663 18.8616297,13.1391508 19.9646608,12.0361197 C21.0334738,10.9683131 21.6222267,9.54725484 21.6222267,8.03561917 C21.6222267,6.52498991 21.0334738,5.10393161 19.9646608,4.03612506 M17.9675304,8.29104735 C18.3006539,8.30010509 18.6106298,8.43899039 18.8380796,8.68153646 C19.2919729,9.16059011 19.2919729,9.9133887 18.8380796,10.3934488 C18.7394509,10.4981159 18.6066041,10.551456 18.4727509,10.551456 C18.3489618,10.551456 18.2241663,10.5061673 18.1265441,10.4135771 C17.925261,10.2233646 17.9162033,9.90533738 18.1074222,9.70304792 C18.1949803,9.61045772 18.1949803,9.46553392 18.1074222,9.37294372 C18.044018,9.3055139 17.9655176,9.29444333 17.9323059,9.29746258 C17.8940621,9.29746258 17.8256259,9.30652032 17.7662474,9.36287957 C17.5659708,9.55309205 17.2449243,9.54403431 17.0557183,9.34174485 C16.8644994,9.1404618 16.8735571,8.82142818 17.0758466,8.63020928 C17.3173862,8.40175303 17.6243429,8.26890622 17.9675304,8.29104735 Z M15.4692053,10.0105078 C15.7469759,10.0105078 15.9724129,10.2359448 15.9724129,10.5137154 C15.9724129,10.791486 15.7469759,11.016923 15.4692053,11.016923 C14.8049712,11.016923 14.1809938,10.7582743 13.7120043,10.2892848 C13.2420084,9.81928887 12.9833597,9.19531143 12.9833597,8.53107738 C12.9833597,8.25330678 13.2087967,8.02786977 13.4865673,8.02786977 C13.7653443,8.02786977 13.9897749,8.25330678 13.9897749,8.53107738 C13.9897749,8.92659857 14.1447629,9.29796579 14.4235399,9.57774922 C14.7023169,9.85652624 15.0736841,10.0105078 15.4692053,10.0105078 Z M14.2986437,5.89296115 C14.0963543,6.08518646 13.7783271,6.07612872 13.5871082,5.87383926 C13.3968957,5.67255622 13.404947,5.35352259 13.6072365,5.1623037 C13.8477697,4.93284103 14.1597584,4.80401988 14.4969075,4.82213535 C14.830031,4.83119309 15.1400069,4.97007839 15.3684631,5.21262446 C15.8233628,5.69167811 15.8233628,6.4444767 15.3684631,6.92453676 C15.2698344,7.02920394 15.1369876,7.08254395 15.0031344,7.08254395 C14.8793453,7.08254395 14.7545498,7.03725526 14.6569276,6.94466506 C14.4556445,6.75445259 14.4465868,6.43642537 14.6378057,6.23413591 C14.7253638,6.14154571 14.7253638,5.99662192 14.6378057,5.90403172 C14.5744015,5.8366019 14.5240808,5.82251209 14.4626894,5.82855058 C14.4244456,5.82855058 14.3580222,5.83760831 14.2986437,5.89296115 Z M17.167531,16.775329 L20.9355496,13.0073104 C22.2469086,11.6989706 22.996688,9.88742319 22.9936687,8.03662558 C22.9936687,4.15991413 19.8405698,1.00681523 15.9648648,1.00681523 C15.9638584,1.00580881 15.9598327,1.00580881 15.9558071,1.00681523 C14.1080287,1.00681523 12.300507,1.75659457 10.99418,3.06392795 L7.13055193,6.92856242 L6.963487,8.10606823 C6.96147417,8.12217088 6.74207565,9.9608915 7.75251654,14.9225186 C12.4645526,16.6636169 16.8424589,16.7692905 16.8867411,16.7702969 L17.167531,16.775329 Z M13.006004,20.9358495 L16.1983531,17.7445069 C14.8437182,17.6549359 11.6040676,17.3228189 8.01317809,16.0859346 C8.69150195,18.8988651 9.63250019,21.0224013 10.8150381,22.4152799 C11.6282216,22.0650474 12.3759881,21.5678783 13.006004,20.9358495 Z M8.04236413,22.9949751 C8.6351427,22.9949751 9.22288919,22.9094298 9.79252021,22.7614868 C8.49927664,21.0898311 7.50091274,18.6221009 6.82158246,15.403585 C5.84938535,10.7257671 5.91178309,8.63544264 5.95304612,8.10506182 L3.06463442,10.9934735 C1.7351599,12.3209352 1.00349603,14.0861875 1.00651528,15.9631519 C1.00651528,19.8408698 4.15961418,22.9949751 8.03531922,22.9949751 L8.04236413,22.9949751 Z M24.000084,8.03561917 C24.0031032,10.151104 23.1456374,12.2233129 21.6470852,13.718846 L17.7361556,17.6287691 C17.7311235,17.6348076 17.725085,17.6408461 17.7180401,17.6468846 L13.7175396,21.6473851 C12.9285101,22.4384275 11.9754348,23.0442894 10.9418464,23.4468555 C10.875423,23.489125 10.8029611,23.5152918 10.72748,23.5233431 C9.86900776,23.8302997 8.96222764,24.0013903 8.04337054,24.0013903 L8.03531922,24.0013903 C3.60407298,24.0013903 0.000100051928,20.396411 0.000100051928,15.9641583 C-0.00291919375,13.8174746 0.833411859,11.7996121 2.35410527,10.281938 L10.2826444,2.3533988 C11.7751582,0.857865773 13.8423351,0.0004 15.9558071,0.0004 L15.9658712,0.0004 C20.396111,0.0004 24.000084,3.60537934 24.000084,8.03561917 Z"
})));
Baby.displayName = "DecorativeIcon";

const BabyBoy = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M15.1582,17.2159 C15.3402,16.9959 15.6672,16.9629 15.8872,17.1389 C16.1112,17.3199 16.1482,17.6389 15.9712,17.8629 C15.9272,17.9209 14.8492,19.2499 12.0002,19.2499 C9.1622,19.2499 8.0742,17.9209 8.0292,17.8639 C7.8522,17.6389 7.8922,17.3109 8.1162,17.1339 C8.3412,16.9579 8.6662,16.9979 8.8422,17.2169 C8.8492,17.2259 9.7062,18.2109 12.0002,18.2109 C14.2992,18.2109 15.1492,17.2269 15.1582,17.2159 Z M9.208,13.4991 C9.191,13.4771 8.74,12.9151 8.041,12.9151 C7.349,12.9151 6.889,13.4791 6.87,13.5031 C6.696,13.7281 6.37,13.7711 6.144,13.6011 C5.917,13.4291 5.871,13.1031 6.041,12.8751 C6.12,12.7721 6.838,11.8761 8.04,11.8761 C9.243,11.8761 9.961,12.7721 10.04,12.8751 C10.211,13.1041 10.165,13.4321 9.936,13.6031 C9.846,13.6711 9.738,13.7071 9.625,13.7071 C9.459,13.7071 9.308,13.6321 9.209,13.5001 L9.208,13.4991 Z M15.958,11.8765 C17.193,11.8765 17.927,12.8345 17.956,12.8755 C18.041,12.9865 18.075,13.1245 18.056,13.2615 C18.036,13.3975 17.964,13.5195 17.854,13.6025 C17.763,13.6705 17.655,13.7075 17.542,13.7075 C17.379,13.7075 17.224,13.6295 17.126,13.5005 C17.109,13.4775 16.656,12.9155 15.959,12.9155 C15.267,12.9155 14.807,13.4785 14.787,13.5025 C14.613,13.7275 14.287,13.7715 14.062,13.6005 C13.834,13.4285 13.788,13.1025 13.959,12.8755 C13.989,12.8345 14.723,11.8765 15.958,11.8765 Z M12,22.169 C16.434,22.169 20.152,18.982 20.844,14.593 C20.883,14.339 21.121,14.154 21.385,14.155 L21.469,14.164 L21.47,14.288 L21.47,14.164 C22.292,14.164 22.961,13.502 22.961,12.687 C22.961,11.871 22.298,11.207 21.483,11.207 C21.398,11.207 21.312,11.221 21.234,11.233 C20.978,11.277 20.719,11.116 20.647,10.856 C19.993,8.415 18.334,6.366 16.082,5.206 L16.082,6.062 C16.082,6.349 15.85,6.582 15.563,6.582 C15.276,6.582 15.044,6.349 15.044,6.062 L15.044,4.749 C14.599,4.587 14.149,4.461 13.707,4.374 L13.707,5.271 C13.707,5.557 13.474,5.79 13.187,5.79 C12.901,5.79 12.668,5.557 12.668,5.271 L12.668,4.232 C12.217,4.197 11.783,4.197 11.332,4.232 L11.332,5.271 C11.332,5.557 11.099,5.79 10.812,5.79 C10.525,5.79 10.292,5.557 10.292,5.271 L10.292,4.374 C9.848,4.461 9.399,4.587 8.957,4.749 L8.957,6.062 C8.957,6.349 8.724,6.582 8.437,6.582 C8.15,6.582 7.917,6.349 7.917,6.062 L7.917,5.206 C5.666,6.366 4.007,8.415 3.353,10.855 C3.283,11.117 3.027,11.281 2.763,11.232 C2.686,11.22 2.602,11.207 2.516,11.207 C1.702,11.207 1.039,11.871 1.039,12.687 C1.039,13.504 1.702,14.168 2.516,14.168 L2.611,14.155 L2.644,14.155 C2.901,14.155 3.117,14.34 3.157,14.593 C3.848,18.982 7.567,22.169 12,22.169 Z M23.248,10.896 C23.733,11.372 24,12.009 24,12.688 C24,13.954 23.038,15.035 21.793,15.189 C20.854,19.841 16.75,23.208 12,23.208 C7.249,23.208 3.146,19.841 2.208,15.189 C0.962,15.035 0,13.954 0,12.688 C0,12.013 0.27,11.376 0.76,10.896 C1.221,10.443 1.84,10.182 2.47,10.169 C3.328,7.447 5.306,5.225 7.917,4.049 L7.917,2.103 C7.917,1.816 8.15,1.584 8.437,1.584 C8.724,1.584 8.957,1.816 8.957,2.103 L8.957,3.647 C9.394,3.506 9.842,3.395 10.292,3.316 L10.292,1.312 C10.292,1.025 10.525,0.792 10.812,0.792 C11.099,0.792 11.332,1.025 11.332,1.312 L11.332,3.19 C11.78,3.161 12.22,3.161 12.668,3.19 L12.668,1.312 C12.668,1.025 12.901,0.792 13.187,0.792 C13.474,0.792 13.707,1.025 13.707,1.312 L13.707,3.316 C14.157,3.395 14.605,3.505 15.044,3.647 L15.044,2.103 C15.044,1.816 15.276,1.584 15.563,1.584 C15.85,1.584 16.082,1.816 16.082,2.103 L16.082,4.049 C18.693,5.224 20.672,7.447 21.529,10.17 C22.177,10.183 22.784,10.439 23.248,10.896 Z"
})));
BabyBoy.displayName = "DecorativeIcon";

const BabyGirl = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M9.2114,14.2939 C9.1624,14.2329 8.7114,13.7069 8.0414,13.7069 C7.3334,13.7069 6.8774,14.2869 6.8724,14.2929 C6.7004,14.5189 6.3734,14.5649 6.1454,14.3919 C5.9174,14.2199 5.8714,13.8959 6.0424,13.6669 C6.0724,13.6269 6.8064,12.6679 8.0414,12.6679 C9.2324,12.6679 9.9604,13.5629 10.0384,13.6649 C10.2124,13.8969 10.1654,14.2229 9.9364,14.3949 C9.8484,14.4629 9.7374,14.4989 9.6254,14.4989 C9.4614,14.4989 9.3114,14.4249 9.2114,14.2939 Z M15.1592,18.0068 C15.3422,17.7868 15.6682,17.7538 15.8882,17.9328 C16.1072,18.1088 16.1452,18.4338 15.9712,18.6558 C15.8572,18.7988 14.7822,20.0408 12.0002,20.0408 C9.1622,20.0408 8.0742,18.7118 8.0292,18.6558 C7.8522,18.4288 7.8912,18.1028 8.1162,17.9258 C8.3392,17.7528 8.6652,17.7878 8.8422,18.0088 C8.8492,18.0178 9.7062,19.0018 12.0002,19.0018 C14.3072,19.0018 15.1482,18.0198 15.1572,18.0088 L15.1612,18.0028 L15.1592,18.0068 Z M15.959,12.668 C17.193,12.668 17.927,13.627 17.956,13.667 C18.129,13.897 18.082,14.223 17.854,14.395 C17.763,14.464 17.655,14.499 17.542,14.499 C17.38,14.499 17.224,14.421 17.126,14.292 C17.079,14.233 16.63,13.707 15.959,13.707 C15.267,13.707 14.807,14.271 14.787,14.295 C14.616,14.521 14.29,14.564 14.063,14.392 C13.835,14.22 13.789,13.895 13.96,13.667 C13.99,13.627 14.724,12.668 15.959,12.668 Z M18.7168,3.6577 C18.8528,3.3197 19.0018,2.9457 19.0018,2.4987 C19.0018,1.8247 18.6108,1.0387 17.5068,1.0387 C16.5178,1.0387 15.4798,1.5507 14.7148,2.4117 C15.0918,3.0297 15.2908,3.7417 15.2908,4.4777 C15.2908,5.2147 15.0918,5.9277 14.7148,6.5447 C15.4808,7.4067 16.5188,7.9187 17.5068,7.9187 C18.6098,7.9187 19.0018,7.1637 19.0018,6.4587 C19.0018,6.0057 18.8508,5.6317 18.7168,5.3007 C18.5998,5.0087 18.4978,4.7567 18.4978,4.4787 C18.4978,4.2017 18.5998,3.9497 18.7168,3.6577 Z M11.9998,1.8307 C10.7588,1.8307 9.7488,3.0187 9.7488,4.4777 C9.7488,5.9377 10.7588,7.1257 11.9998,7.1257 C13.2418,7.1257 14.2518,5.9377 14.2518,4.4777 C14.2518,3.0187 13.2418,1.8307 11.9998,1.8307 Z M5.5028,4.4777 C5.5028,4.7577 5.3958,5.0207 5.2818,5.2997 C5.1488,5.6327 4.9978,6.0077 4.9978,6.4577 C4.9978,7.1317 5.3898,7.9177 6.4928,7.9177 C7.4838,7.9177 8.5208,7.4057 9.2848,6.5447 C8.9078,5.9257 8.7088,5.2137 8.7088,4.4777 C8.7088,3.7427 8.9078,3.0307 9.2848,2.4117 C8.5208,1.5507 7.4828,1.0387 6.4928,1.0387 C5.3908,1.0387 4.9978,1.7927 4.9978,2.4987 C4.9978,2.9467 5.1478,3.3197 5.2808,3.6497 L5.1688,3.7027 L5.2828,3.6567 C5.4018,3.9487 5.5038,4.2007 5.5028,4.4777 Z M11.9998,22.9607 C16.4338,22.9607 20.1528,19.7757 20.8448,15.3857 C20.8828,15.1407 21.1138,14.9487 21.3648,14.9487 L21.3878,14.9487 L21.4718,14.9567 C22.2928,14.9557 22.9608,14.2937 22.9618,13.4797 C22.9618,12.6637 22.2988,11.9997 21.4848,11.9997 C21.4048,11.9997 21.3248,12.0117 21.2358,12.0257 C20.9768,12.0707 20.7198,11.9097 20.6488,11.6487 C20.3478,10.5277 19.7988,9.4347 19.0598,8.4807 C18.6298,8.7967 18.1098,8.9567 17.5068,8.9567 C16.2758,8.9567 14.9888,8.3577 14.0418,7.3477 C13.4528,7.8757 12.7328,8.1647 11.9998,8.1647 C11.2568,8.1647 10.5528,7.8837 9.9588,7.3477 C9.0108,8.3577 7.7238,8.9567 6.4928,8.9567 C5.8908,8.9567 5.3698,8.7967 4.9428,8.4807 C4.2008,9.4377 3.6528,10.5307 3.3518,11.6487 C3.2818,11.9117 3.0258,12.0767 2.7618,12.0257 C2.6718,12.0107 2.5948,11.9997 2.5158,11.9997 C1.7018,11.9997 1.0388,12.6637 1.0388,13.4807 C1.0388,14.2967 1.7018,14.9607 2.5158,14.9607 L2.6028,14.9497 C2.6108,14.9497 2.6188,14.9497 2.6278,14.9497 C2.8908,14.9497 3.1168,15.1377 3.1558,15.3867 C3.8478,19.7757 7.5678,22.9607 11.9998,22.9607 Z M23.2468,11.6747 C23.7328,12.1507 23.9998,12.7917 23.9998,13.4787 C23.9998,14.7447 23.0368,15.8247 21.7918,15.9797 C20.8558,20.6327 16.7508,23.9997 11.9998,23.9997 C7.2488,23.9997 3.1458,20.6327 2.2078,15.9807 C0.9618,15.8257 -0.000200000001,14.7457 -0.000200000001,13.4797 C-0.000200000001,12.7997 0.2708,12.1607 0.7628,11.6797 C1.2298,11.2237 1.8328,10.9697 2.4708,10.9607 C2.8418,9.7887 3.4548,8.6567 4.2498,7.6747 C4.0588,7.3047 3.9588,6.8857 3.9588,6.4577 C3.9588,5.8037 4.1668,5.2877 4.3188,4.9107 C4.3728,4.7787 4.4628,4.5577 4.4628,4.4777 C4.4628,4.3977 4.3688,4.1687 4.3188,4.0467 C4.1668,3.6687 3.9588,3.1527 3.9588,2.4987 C3.9588,1.2947 4.7518,-0.0003 6.4928,-0.0003 C7.7238,-0.0003 9.0108,0.5987 9.9578,1.6087 C10.5528,1.0737 11.2558,0.7917 11.9998,0.7917 C12.7448,0.7917 13.4478,1.0737 14.0418,1.6087 C14.9888,0.5997 16.2758,0.0007 17.5068,0.0007 C19.2478,0.0007 20.0408,1.2957 20.0408,2.4997 C20.0408,3.1567 19.8248,3.6917 19.6818,4.0467 C19.6238,4.1887 19.5378,4.4027 19.5378,4.4787 C19.5378,4.5567 19.6238,4.7707 19.6818,4.9117 C19.8328,5.2887 20.0408,5.8057 20.0408,6.4577 C20.0408,6.8867 19.9408,7.3057 19.7498,7.6747 C20.5458,8.6587 21.1578,9.7907 21.5288,10.9597 C22.1788,10.9707 22.7858,11.2217 23.2468,11.6747 Z"
})));
BabyGirl.displayName = "DecorativeIcon";

const BackToSchool = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "22",
  viewBox: "0 0 24 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -1)",
  d: "M10.788,15 C11.277,15 11.524,14.898 11.753,14.785 C11.852,14.736 11.897,14.714 11.999,14.707 C12.101,14.714 12.146,14.736 12.245,14.785 C12.475,14.898 12.721,15 13.21,15 C15.989,15 18,11.187 17.998,8.618 C17.998,6.143 16.843,4.408 15.068,4.071 C15.63,3.411 16,2.551 16,1.5 C16,1.224 15.776,1 15.5,1 C14.236,1 12.951,1.625 12.19,2.732 C11.992,2.142 11.718,1.703 11.422,1.234 C11.275,1 10.966,0.931 10.733,1.078 C10.499,1.225 10.43,1.534 10.577,1.767 C11.057,2.527 11.415,3.106 11.485,4.489 C11.39,4.455 11.296,4.422 11.191,4.381 C10.761,4.211 10.225,4 9.567,4 C7.433,4 5.998,5.856 5.998,8.618 C5.998,11.187 8.01,15 10.788,15 Z M14.957,2.048 C14.79,3.073 14.159,3.791 13.382,4.175 C13.173,4.24 12.978,4.313 12.804,4.381 C12.79,4.387 12.778,4.39 12.764,4.396 C12.69,4.415 12.618,4.438 12.543,4.451 C12.768,3.074 13.829,2.249 14.957,2.048 Z M9.57,5.001 C10.038,5.001 10.439,5.159 10.827,5.312 C11.196,5.457 11.577,5.607 11.991,5.607 L12.011,5.607 C12.425,5.607 12.806,5.458 13.175,5.312 C13.193,5.305 13.212,5.298 13.23,5.291 C13.354,5.251 13.476,5.209 13.597,5.157 C13.857,5.069 14.13,5.001 14.432,5.001 C15.968,5.001 17.001,6.455 17.001,8.619 C17.001,10.991 15.216,14.001 13.211,14.001 C12.916,14.001 12.82,13.954 12.689,13.889 C12.544,13.817 12.346,13.719 12.012,13.707 C11.983,13.704 11.957,13.706 11.932,13.71 C11.632,13.731 11.449,13.822 11.313,13.889 C11.182,13.954 11.086,14.001 10.791,14.001 C8.785,14.001 7.001,10.992 7.001,8.619 C7.001,6.455 8.033,5.001 9.57,5.001 Z M23.931,22.262 C23.912,22.227 23.892,22.193 23.865,22.164 C23.849,22.146 23.829,22.133 23.81,22.118 C23.782,22.095 23.753,22.074 23.72,22.057 C23.697,22.046 23.673,22.038 23.649,22.03 C23.63,22.024 23.613,22.013 23.593,22.009 C23.359,21.759 23,20.518 23,19.5 C23,18.482 23.359,17.241 23.593,16.991 C23.613,16.987 23.63,16.976 23.649,16.97 C23.674,16.962 23.697,16.955 23.72,16.943 C23.754,16.926 23.783,16.905 23.812,16.881 C23.83,16.866 23.849,16.854 23.865,16.836 C23.893,16.806 23.913,16.771 23.933,16.735 C23.943,16.717 23.955,16.703 23.963,16.684 C23.986,16.627 24,16.565 24,16.5 C24,16.224 23.776,16 23.5,16 L2.5,16 C1.122,16 0,17.122 0,18.5 L0,20.5 C0,21.878 1.122,23 2.5,23 L23.5,23 C23.776,23 24,22.776 24,22.5 C24,22.435 23.986,22.373 23.963,22.316 C23.955,22.296 23.942,22.28 23.931,22.262 Z M2.5,19 L22.029,19 C22.009,19.22 22,19.398 22,19.5 C22,19.602 22.009,19.78 22.029,20 L2.5,20 C2.224,20 2,20.224 2,20.5 C2,20.776 2.224,21 2.5,21 L22.177,21 C22.246,21.341 22.34,21.689 22.465,22 L2.5,22 C1.673,22 1,21.327 1,20.5 L1,18.5 C1,17.673 1.673,17 2.5,17 L22.464,17 C22.339,17.311 22.245,17.659 22.176,18 L2.5,18 C2.224,18 2,18.224 2,18.5 C2,18.776 2.224,19 2.5,19 Z"
})));
BackToSchool.displayName = "DecorativeIcon";

const Bank = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M0.536661466,8.04984424 L23.50078,8.04984424 C23.50078,8.04984424 23.50078,8.04984424 23.50078,8.04984424 C23.800312,8.04984424 24,7.85046729 24,7.55140187 C24,7.35202492 23.900156,7.15264798 23.700468,7.0529595 L12.8174727,0.0747663551 C12.6177847,-0.0249221184 12.4180967,-0.0249221184 12.3182527,0.0747663551 L0.336973479,7.0529595 C0.0374414977,7.25233645 -0.0624024961,7.4517134 0.0374414977,7.65109034 C0.137285491,7.85046729 0.336973479,8.04984424 0.536661466,8.04984424 Z M12.5179407,1.17133956 L21.8034321,7.0529595 L2.33385335,7.0529595 L12.5179407,1.17133956 Z M23.50078,20.0124611 L0.536661466,20.0124611 C0.237129485,20.0124611 0.0374414977,20.211838 0.0374414977,20.5109034 L0.0374414977,23.5015576 C0.0374414977,23.8006231 0.237129485,24 0.536661466,24 L23.50078,24 C23.800312,24 24,23.8006231 24,23.5015576 L24,20.5109034 C24,20.211838 23.800312,20.0124611 23.50078,20.0124611 Z M23.0015601,23.0031153 L1.03588144,23.0031153 L1.03588144,21.0093458 L23.0015601,21.0093458 L23.0015601,23.0031153 Z M7.52574103,10.0436137 C7.82527301,10.0436137 8.024961,9.84423676 8.024961,9.54517134 C8.024961,9.24610592 7.82527301,9.04672897 7.52574103,9.04672897 L6.52730109,9.04672897 L3.53198128,9.04672897 L2.53354134,9.04672897 C2.23400936,9.04672897 2.03432137,9.24610592 2.03432137,9.54517134 C2.03432137,9.84423676 2.23400936,10.0436137 2.53354134,10.0436137 L3.03276131,10.0436137 L3.03276131,18.0186916 L2.53354134,18.0186916 C2.23400936,18.0186916 2.03432137,18.2180685 2.03432137,18.517134 C2.03432137,18.8161994 2.23400936,19.0155763 2.53354134,19.0155763 L3.53198128,19.0155763 L6.52730109,19.0155763 L7.52574103,19.0155763 C7.82527301,19.0155763 8.024961,18.8161994 8.024961,18.517134 C8.024961,18.2180685 7.82527301,18.0186916 7.52574103,18.0186916 L7.02652106,18.0186916 L7.02652106,10.0436137 L7.52574103,10.0436137 Z M4.03120125,10.0436137 L6.02808112,10.0436137 L6.02808112,18.0186916 L4.03120125,18.0186916 L4.03120125,10.0436137 Z M14.5148206,10.0436137 C14.8143526,10.0436137 15.0140406,9.84423676 15.0140406,9.54517134 C15.0140406,9.24610592 14.8143526,9.04672897 14.5148206,9.04672897 L13.5163807,9.04672897 L10.5210608,9.04672897 L9.5226209,9.04672897 C9.22308892,9.04672897 9.02340094,9.24610592 9.02340094,9.54517134 C9.02340094,9.84423676 9.22308892,10.0436137 9.5226209,10.0436137 L10.0218409,10.0436137 L10.0218409,18.0186916 L9.5226209,18.0186916 C9.22308892,18.0186916 9.02340094,18.2180685 9.02340094,18.517134 C9.02340094,18.8161994 9.22308892,19.0155763 9.5226209,19.0155763 L10.5210608,19.0155763 L13.5163807,19.0155763 L14.5148206,19.0155763 C14.8143526,19.0155763 15.0140406,18.8161994 15.0140406,18.517134 C15.0140406,18.2180685 14.8143526,18.0186916 14.5148206,18.0186916 L14.0156006,18.0186916 L14.0156006,10.0436137 L14.5148206,10.0436137 Z M11.0202808,10.0436137 L13.0171607,10.0436137 L13.0171607,18.0186916 L11.0202808,18.0186916 L11.0202808,10.0436137 Z M21.5039002,10.0436137 C21.8034321,10.0436137 22.0031201,9.84423676 22.0031201,9.54517134 C22.0031201,9.24610592 21.8034321,9.04672897 21.5039002,9.04672897 L20.5054602,9.04672897 L17.5101404,9.04672897 L16.5117005,9.04672897 C16.2121685,9.04672897 16.0124805,9.24610592 16.0124805,9.54517134 C16.0124805,9.84423676 16.2121685,10.0436137 16.5117005,10.0436137 L17.0109204,10.0436137 L17.0109204,18.0186916 L16.5117005,18.0186916 C16.2121685,18.0186916 16.0124805,18.2180685 16.0124805,18.517134 C16.0124805,18.8161994 16.2121685,19.0155763 16.5117005,19.0155763 L17.5101404,19.0155763 L20.5054602,19.0155763 L21.5039002,19.0155763 C21.8034321,19.0155763 22.0031201,18.8161994 22.0031201,18.517134 C22.0031201,18.2180685 21.8034321,18.0186916 21.5039002,18.0186916 L21.0046802,18.0186916 L21.0046802,10.0436137 L21.5039002,10.0436137 Z M18.0093604,10.0436137 L20.0062402,10.0436137 L20.0062402,18.0186916 L18.0093604,18.0186916 L18.0093604,10.0436137 Z"
})));
Bank.displayName = "DecorativeIcon";

const BatteryCar = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M22.5 21h-21C.673 21 0 20.327 0 19.5v-13C0 5.673.673 5 1.5 5h4a.5.5 0 0 1 .447.276L6.309 6h11.383l.361-.724A.5.5 0 0 1 18.5 5h4c.827 0 1.5.673 1.5 1.5v13c0 .827-.673 1.5-1.5 1.5zM1.5 6a.5.5 0 0 0-.5.5v13a.5.5 0 0 0 .5.5h21a.5.5 0 0 0 .5-.5v-13a.5.5 0 0 0-.5-.5h-3.691l-.361.724A.503.503 0 0 1 18 7H6a.5.5 0 0 1-.447-.276L5.191 6H1.5zM6 14v1.5a.5.5 0 0 1-1 0V14H3.5a.5.5 0 0 1 0-1H5v-1.5a.5.5 0 0 1 1 0V13h1.5a.5.5 0 0 1 0 1H6zm9.5-7a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0-.5.5v1a.5.5 0 0 1-1 0v-1C8 4.673 8.673 4 9.5 4h5c.827 0 1.5.673 1.5 1.5v1a.5.5 0 0 1-.5.5zm-11-1a.5.5 0 0 1-.5-.5V4H3v1.5a.5.5 0 0 1-1 0v-2a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5zm17 0a.5.5 0 0 1-.5-.5V4h-1v1.5a.5.5 0 0 1-1 0v-2a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5zm-1 8h-4a.5.5 0 0 1 0-1h4a.5.5 0 0 1 0 1z",
  fillRule: "nonzero"
})));
BatteryCar.displayName = "DecorativeIcon";

const BatteryCharging = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "13",
  height: "21",
  viewBox: "0 0 13 21"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-6 -2)",
  d: "M12.4997445,20.0003259 C12.4667445,20.0003259 12.4337445,19.9973259 12.3987445,19.9903259 C12.1667445,19.9423259 11.9997445,19.7373259 11.9997445,19.5003259 L11.9997445,15.0003259 L9.4997445,15.0003259 C9.3317445,15.0003259 9.1747445,14.9163259 9.0827445,14.7753259 C8.9897445,14.6343259 8.9747445,14.4573259 9.0397445,14.3033259 L12.0397445,7.30332587 C12.1337445,7.08532587 12.3597445,6.96232587 12.6007445,7.01032587 C12.8327445,7.05832587 12.9997445,7.26332587 12.9997445,7.50032587 L12.9997445,12.0003259 L15.4997445,12.0003259 C15.6677445,12.0003259 15.8247445,12.0843259 15.9167445,12.2253259 C16.0097445,12.3663259 16.0247445,12.5433259 15.9597445,12.6973259 L12.9597445,19.6973259 C12.8797445,19.8833259 12.6967445,20.0003259 12.4997445,20.0003259 Z M10.2577445,14.0003259 L12.4997445,14.0003259 C12.7757445,14.0003259 12.9997445,14.2243259 12.9997445,14.5003259 L12.9997445,17.0643259 L14.7417445,13.0003259 L12.4997445,13.0003259 C12.2237445,13.0003259 11.9997445,12.7763259 11.9997445,12.5003259 L11.9997445,9.93632587 L10.2577445,14.0003259 Z M16.5,23 L8.5,23 C7.121,23 6,21.878 6,20.5 L6,6.5 C6,5.122 7.121,4 8.5,4 L10,4 L10,2.5 C10,2.224 10.224,2 10.5,2 L14.5,2 C14.776,2 15,2.224 15,2.5 L15,4 L16.5,4 C17.879,4 19,5.122 19,6.5 L19,20.5 C19,21.878 17.879,23 16.5,23 Z M8.5,5 C7.673,5 7,5.673 7,6.5 L7,20.5 C7,21.327 7.673,22 8.5,22 L16.5,22 C17.327,22 18,21.327 18,20.5 L18,6.5 C18,5.673 17.327,5 16.5,5 L14.5,5 C14.224,5 14,4.776 14,4.5 L14,3 L11,3 L11,4.5 C11,4.776 10.776,5 10.5,5 L8.5,5 Z"
})));
BatteryCharging.displayName = "DecorativeIcon";

const Bell = props => {
  return /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
    width: "20",
    height: "24",
    viewBox: "0 0 20 24"
  }, /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    transform: "translate(-2)",
    d: "M9.55048897,21 L2.5,21 C2.32,21 2.153,20.903 2.064,20.746 C1.976,20.59 1.978,20.397 2.071,20.243 L3.789,17.381 C4.581,16.06 5,14.548 5,13.007 L5,10.5 C5,7.33564211 7.11197889,4.65406067 10,3.79119235 L10,2 C10,0.897 10.897,0 12,0 C13.103,0 14,0.897 14,2 L14,3.79119235 C16.8880211,4.65406067 19,7.33564211 19,10.5 L19,13.007 C19,14.548 19.419,16.06 20.211,17.381 L21.929,20.243 C22.022,20.397 22.024,20.59 21.936,20.746 C21.847,20.903 21.68,21 21.5,21 L14.451511,21 C14.4849288,21.1636443 14.502,21.3311656 14.502,21.5 C14.5,22.879 13.379,24 12,24 C10.621,24 9.5,22.879 9.5,21.5 C9.5,21.3311656 9.51707117,21.1636443 9.55048897,21 Z M10.5874,21 C10.5308928,21.1596088 10.501,21.3306464 10.501,21.5 C10.501,22.327 11.174,23 12.001,23 C12.828,23 13.501,22.327 13.501,21.5 C13.501,21.3306464 13.4711072,21.1596088 13.4146,21 L10.5874,21 Z M11,3.57125664 C11.3266789,3.52430187 11.6605619,3.5 12,3.5 C12.3394381,3.5 12.6733211,3.52430187 13,3.57125664 L13,2 C13,1.448 12.552,1 12,1 C11.448,1 11,1.448 11,2 L11,3.57125664 Z M3.383,20 L20.617,20 L19.353,17.895 C18.468,16.419 18,14.729 18,13.007 L18,10.5 C18,7.191 15.309,4.5 12,4.5 C8.691,4.5 6,7.191 6,10.5 L6,13.007 C6,14.729 5.532,16.419 4.646,17.895 L3.383,20 Z"
  })));
};
Bell.displayName = "DecorativeIcon";

const Bill = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "16",
  height: "24",
  viewBox: "0 0 16 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-4)",
  d: "M15,18 C14.724,18 14.5,17.776 14.5,17.5 C14.5,17.224 14.724,17 15,17 L15,16.8658249 C14.7014196,16.6927755 14.5,16.3697147 14.5,16 C14.5,15.6302853 14.7014196,15.3072245 15,15.1341751 L15,15 C15,14.724 15.224,14.5 15.5,14.5 C15.776,14.5 16,14.724 16,15 C16.276,15 16.5,15.224 16.5,15.5 C16.5,15.776 16.276,16 16,16 L16,16.1341751 C16.2985804,16.3072245 16.5,16.6302853 16.5,17 C16.5,17.3697147 16.2985804,17.6927755 16,17.8658249 L16,18 C16,18.276 15.776,18.5 15.5,18.5 C15.224,18.5 15,18.276 15,18 Z M19,24 C18.903,24 18.806,23.972 18.723,23.916 L17.5,23.101 L16.277,23.916 C16.109,24.027 15.89,24.027 15.722,23.916 L14.5,23.101 L13.277,23.916 C13.109,24.027 12.89,24.027 12.722,23.916 L11.5,23.101 L10.277,23.916 C10.109,24.027 9.89,24.027 9.722,23.916 L8.5,23.101 L7.277,23.916 C7.124,24.018 6.926,24.028 6.764,23.94 C6.602,23.854 6.5,23.685 6.5,23.5 L6.5,10 L5,10 C4.724,10 4.5,9.776 4.5,9.5 L4.5,2.5 C4.5,1.121 5.622,0 7,0 L17.154,0 C18.447,0 19.5,1.121 19.5,2.5 L19.5,23.5 C19.5,23.685 19.398,23.854 19.236,23.94 C19.162,23.98 19.081,24 19,24 Z M14.5,22 C14.597,22 14.693,22.028 14.777,22.084 L16,22.899 L17.223,22.084 C17.391,21.973 17.61,21.973 17.778,22.084 L18.5,22.565 L18.5,2.5 C18.5,1.673 17.896,1 17.154,1 L7.002,1 C7.322,1.426 7.5,1.947 7.5,2.5 L7.5,22.565 L8.223,22.084 C8.391,21.973 8.61,21.973 8.778,22.084 L10,22.899 L11.223,22.084 C11.391,21.973 11.61,21.973 11.778,22.084 L13.001,22.899 L14.224,22.084 C14.307,22.028 14.403,22 14.5,22 Z M5.5,9 L6.5,9 L6.5,2.5 C6.5,2.066 6.317,1.664 6.001,1.382 C5.694,1.657 5.5,2.057 5.5,2.5 L5.5,9 Z M17,6 L9,6 C8.724,6 8.5,5.776 8.5,5.5 C8.5,5.224 8.724,5 9,5 L17,5 C17.276,5 17.5,5.224 17.5,5.5 C17.5,5.776 17.276,6 17,6 Z M17,9 L9,9 C8.724,9 8.5,8.776 8.5,8.5 C8.5,8.224 8.724,8 9,8 L17,8 C17.276,8 17.5,8.224 17.5,8.5 C17.5,8.776 17.276,9 17,9 Z M17,12 L9,12 C8.724,12 8.5,11.776 8.5,11.5 C8.5,11.224 8.724,11 9,11 L17,11 C17.276,11 17.5,11.224 17.5,11.5 C17.5,11.776 17.276,12 17,12 Z M17,20 L14,20 C13.724,20 13.5,19.776 13.5,19.5 C13.5,19.224 13.724,19 14,19 L17,19 C17.276,19 17.5,19.224 17.5,19.5 C17.5,19.776 17.276,20 17,20 Z"
})));
Bill.displayName = "DecorativeIcon";

const Bookmark = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "18",
  height: "24",
  viewBox: "0 0 18 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-3)",
  d: "M12.0001,11.4941 C12.0831,11.4941 12.1661,11.5151 12.2411,11.5561 L14.6651,12.8911 L14.1951,10.0241 C14.1691,9.8671 14.2201,9.7071 14.3301,9.5941 L16.3311,7.5391 L13.5831,7.1201 C13.4181,7.0951 13.2761,6.9891 13.2061,6.8381 L12.0011,4.2751 L10.8031,6.8381 C10.7321,6.9891 10.5901,7.0951 10.4251,7.1201 L7.6761,7.5391 L9.6781,9.5941 C9.7891,9.7071 9.8391,9.8671 9.8131,10.0241 L9.3431,12.8901 L11.7581,11.5561 C11.8331,11.5151 11.9171,11.4941 12.0001,11.4941 Z M15.3251,14.3261 C15.2421,14.3261 15.1591,14.3051 15.0841,14.2631 L12.0001,12.5651 L8.9251,14.2631 C8.7571,14.3561 8.5511,14.3461 8.3951,14.2341 C8.2381,14.1231 8.1591,13.9341 8.1891,13.7441 L8.7861,10.1111 L6.2821,7.5411 C6.1511,7.4071 6.1061,7.2101 6.1661,7.0331 C6.2251,6.8551 6.3791,6.7261 6.5641,6.6981 L10.0101,6.1721 L11.5471,2.8851 C11.6291,2.7091 11.8061,2.5971 12.0001,2.5971 C12.1941,2.5971 12.3701,2.7081 12.4531,2.8841 L13.9971,6.1721 L17.4431,6.6981 C17.6291,6.7261 17.7821,6.8551 17.8421,7.0331 C17.9011,7.2101 17.8571,7.4071 17.7271,7.5411 L15.2231,10.1111 L15.8181,13.7441 C15.8501,13.9341 15.7701,14.1231 15.6131,14.2341 C15.5271,14.2941 15.4271,14.3261 15.3251,14.3261 Z M5.319,1.105 C4.728,1.105 4.247,1.586 4.247,2.177 L4.247,22.417 C4.247,22.708 4.466,22.825 4.534,22.854 C4.6,22.882 4.835,22.963 5.046,22.761 L10.571,17.503 C11.372,16.736 12.628,16.735 13.432,17.505 L18.955,22.762 C19.163,22.962 19.398,22.882 19.463,22.854 C19.531,22.825 19.753,22.708 19.753,22.417 L19.753,2.177 C19.753,1.586 19.272,1.105 18.681,1.105 L5.319,1.105 Z M19.27,23.895 C18.902,23.895 18.545,23.754 18.264,23.485 L12.74,18.228 C12.325,17.828 11.677,17.83 11.262,18.226 L5.735,23.487 C5.3,23.899 4.688,24.007 4.139,23.773 C3.589,23.536 3.247,23.016 3.247,22.417 L3.247,2.177 C3.247,1.035 4.176,0.105 5.319,0.105 L18.681,0.105 C19.823,0.105 20.753,1.035 20.753,2.177 L20.753,22.417 C20.753,23.018 20.409,23.538 19.856,23.774 C19.663,23.856 19.465,23.895 19.27,23.895 Z"
})));
Bookmark.displayName = "DecorativeIcon";

const Briefcase = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "20",
  viewBox: "0 0 24 20"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -2)",
  d: "M22.5,5 C23.327,5 24,5.673 24,6.5 L24,20.5 C24,21.327 23.327,22 22.5,22 L1.5,22 C0.673,22 0,21.327 0,20.5 L0,6.5 C0,5.673 0.673,5 1.5,5 L8,5 L8,3.5 C8,2.673 8.673,2 9.5,2 L14.5,2 C15.327,2 16,2.673 16,3.5 L16,5 L22.5,5 Z M22.5,21 C22.776,21 23,20.776 23,20.5 L23,12.147 L15.66,14.063 C14.463,14.374 13.231,14.53 12,14.53 C10.769,14.53 9.538,14.374 8.34,14.063 L1,12.147 L1,20.5 C1,20.776 1.224,21 1.5,21 L22.5,21 Z M1.5,6 C1.224,6 1,6.224 1,6.5 L1,11.114 L8.592,13.094 C10.821,13.676 13.178,13.676 15.407,13.094 L23,11.113 L23,6.5 C23,6.224 22.776,6 22.5,6 L15.5,6 L8.5,6 L1.5,6 Z M9,3.5 L9,5 L15,5 L15,3.5 C15,3.224 14.776,3 14.5,3 L9.5,3 C9.224,3 9,3.224 9,3.5 Z M12,9 C13.104,9 14,9.897 14,11 C14,12.103 13.104,13 12,13 C10.897,13 10,12.103 10,11 C10,9.897 10.897,9 12,9 Z M12,12 C12.551,12 13,11.551 13,11 C13,10.449 12.551,10 12,10 C11.449,10 11,10.449 11,11 C11,11.551 11.449,12 12,12 Z"
})));
Briefcase.displayName = "DecorativeIcon";

const Calendar = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M10.0172435,19.2416844 L8.43083844,19.2416844 C8.1549419,19.2416844 7.93102587,19.0177683 7.93102587,18.7418718 C7.93102587,18.4659753 8.1549419,18.2420592 8.43083844,18.2420592 L10.0172435,18.2420592 C10.616019,18.2420592 11.1038361,17.7552418 11.1038361,17.1554667 C11.1038361,16.5556916 10.616019,16.0688742 10.0172435,16.0688742 L9.2245408,16.0688742 C8.94764463,16.0688742 8.72472823,15.8459578 8.72472823,15.5690616 C8.72472823,15.2931651 8.94764463,15.069249 9.2245408,15.069249 L10.0172435,15.069249 C10.616019,15.069249 11.1038361,14.5824316 11.1038361,13.9826565 C11.1038361,13.383881 10.616019,12.896064 10.0172435,12.896064 L8.43083844,12.896064 C8.1549419,12.896064 7.93102587,12.6731476 7.93102587,12.3962514 C7.93102587,12.1203549 8.1549419,11.8964388 8.43083844,11.8964388 L10.0172435,11.8964388 C11.1678121,11.8964388 12.1034612,12.832088 12.1034612,13.9826565 C12.1034612,14.6174185 11.818568,15.1862052 11.370736,15.5690616 C11.818568,15.951918 12.1034612,16.5207047 12.1034612,17.1554667 C12.1034612,18.3050356 11.1678121,19.2416844 10.0172435,19.2416844 Z M15.5691616,19.2416844 C15.2922654,19.2416844 15.069349,19.0177683 15.069349,18.7418718 L15.069349,12.3962514 C15.069349,12.1203549 15.2922654,11.8964388 15.5691616,11.8964388 C15.8450581,11.8964388 16.0689741,12.1203549 16.0689741,12.3962514 L16.0689741,18.7418718 C16.0689741,19.0177683 15.8450581,19.2416844 15.5691616,19.2416844 Z M0.999625141,7.93102587 L23.0003749,7.93102587 L23.0003749,4.4653255 C23.0003749,3.86655004 22.5135574,3.37873298 21.9137823,3.37873298 L19.2417843,3.37873298 L19.2417843,5.25902786 C19.2417843,5.5349244 19.0178683,5.75884043 18.7419718,5.75884043 C18.4650756,5.75884043 18.2421592,5.5349244 18.2421592,5.25902786 L18.2421592,3.37873298 L6.55154317,3.37873298 L6.55154317,5.25902786 C6.55154317,5.5349244 6.32762714,5.75884043 6.0517306,5.75884043 C5.77483444,5.75884043 5.55191803,5.5349244 5.55191803,5.25902786 L5.55191803,3.37873298 L2.08521804,3.37873298 C1.48644258,3.37873298 0.999625141,3.86655004 0.999625141,4.4653255 L0.999625141,7.93102587 Z M0.999625141,8.93065101 L0.999625141,21.9137823 C0.999625141,22.5125578 1.48644258,23.0003749 2.08521804,23.0003749 L21.9137823,23.0003749 C22.5135574,23.0003749 23.0003749,22.5125578 23.0003749,21.9137823 L23.0003749,8.93065101 L0.999625141,8.93065101 Z M21.9137823,24 L2.08521804,24 C0.935649132,24 7.10542736e-15,23.0633512 7.10542736e-15,21.9137823 L7.10542736e-15,4.4653255 C7.10542736e-15,3.31475697 0.935649132,2.37910783 2.08521804,2.37910783 L5.55191803,2.37910783 L5.55191803,0.49981257 C5.55191803,0.223916031 5.77483444,-2.13162821e-14 6.0517306,-2.13162821e-14 C6.32762714,-2.13162821e-14 6.55154317,0.223916031 6.55154317,0.49981257 L6.55154317,2.37910783 L18.2421592,2.37910783 L18.2421592,0.49981257 C18.2421592,0.223916031 18.4650756,-2.13162821e-14 18.7419718,-2.13162821e-14 C19.0178683,-2.13162821e-14 19.2417843,0.223916031 19.2417843,0.49981257 L19.2417843,2.37910783 L21.9137823,2.37910783 C23.0643509,2.37910783 24,3.31475697 24,4.4653255 L24,21.9137823 C24,23.0633512 23.0643509,24 21.9137823,24 Z"
})));
Calendar.displayName = "DecorativeIcon";

const Call$1 = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "22",
  height: "22",
  viewBox: "0 0 22 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-1 -1)",
  d: "M8.78581905,6.9099889 L7.20205393,9.84739195 C7.14517839,9.95326796 7.12855323,10.0722691 7.15567849,10.1833952 C7.99743653,13.6361781 10.669712,16.3084536 14.122495,17.1545867 C14.2327461,17.1948371 14.3578723,17.179087 14.4663733,17.1195864 L17.4046513,15.5349463 C17.9156562,15.2566936 18.5570374,15.3494445 18.9674163,15.7598234 L21.1881875,17.9814696 C21.4366898,18.2369721 21.5740662,18.5686002 21.5740662,18.9168535 C21.5740662,19.2703569 21.4375649,19.6019851 21.1890625,19.8504875 L19.8634248,21.1761251 C19.5991723,21.4412526 19.2202937,21.583879 18.8466651,21.5602538 C10.0799564,20.8191217 3.17964052,13.9223059 2.43763344,5.15997219 C2.40525813,4.78896865 2.5487595,4.40921502 2.82263712,4.14233747 L4.14827477,2.81582481 C4.39590214,2.56819744 4.7275303,2.43169614 5.0827837,2.43169614 C5.43016201,2.43169614 5.76179018,2.56907245 6.01641761,2.81582481 L8.55394184,5.34547396 C8.97132083,5.76372795 9.06494672,6.39198395 8.78581905,6.9099889 L8.78581905,6.9099889 Z M19.6227975,15.1131922 C18.9236659,14.4149356 17.8281554,14.253934 16.9575221,14.7211885 L14.1854956,16.2130777 C11.2218423,15.4246952 8.89869513,13.102423 8.10768758,10.1352697 L9.60045183,7.35624316 C10.0738314,6.4698597 9.91632985,5.39884947 9.20844809,4.69096771 L6.67092386,2.15344348 C5.82304076,1.30556039 4.33465155,1.3064354 3.48676846,2.15344348 L2.16813087,3.47295608 C1.69475135,3.94458559 1.4593741,4.57109157 1.50574954,5.23609792 C2.28450698,14.456936 9.54532631,21.7142553 18.7652893,22.4930127 C18.8204149,22.5008878 18.8746654,22.5008878 18.9297909,22.5008878 C19.5212966,22.5008878 20.1005521,22.2567604 20.5196811,21.8306314 L21.8383187,20.5119938 C22.2653228,20.0841147 22.499825,19.5179843 22.499825,18.9168535 C22.499825,18.3122228 22.2679478,17.7495924 21.8444437,17.3348384 L19.6227975,15.1131922 Z"
})));
Call$1.displayName = "DecorativeIcon";

const CallForward = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "22",
  height: "22",
  viewBox: "0 0 22 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-1 -1)",
  d: "M16.8620267,11.5017 C16.7520267,11.6117 16.5300267,11.6117 16.4200267,11.6117 C16.0890267,11.6117 15.8670267,11.3907 15.8670267,11.0597 C15.8670267,9.1807 14.4300267,7.7437 12.5510267,7.7437 C12.2200267,7.7437 11.9990267,7.5227 11.9990267,7.1907 C11.9990267,6.8597 12.2200267,6.6387 12.5510267,6.6387 C14.9830267,6.6387 16.9720267,8.6277 16.9720267,11.0597 C16.9720267,11.2807 16.8620267,11.3907 16.8620267,11.5017 Z M19.0720267,11.5017 C18.9620267,11.6117 18.7410267,11.6117 18.6310267,11.6117 C18.2990267,11.6117 18.0780267,11.3907 18.0780267,11.0597 C18.0780267,7.9647 15.6460267,5.5337 12.5510267,5.5337 C12.2200267,5.5337 11.9990267,5.3127 11.9990267,4.9807 C11.9990267,4.6487 12.2200267,4.4277 12.5510267,4.4277 C16.1990267,4.4277 19.1830267,7.4127 19.1830267,11.0597 C19.1830267,11.2807 19.0720267,11.3907 19.0720267,11.5017 Z M21.2830267,11.5017 C21.1730267,11.6117 20.9510267,11.6117 20.8410267,11.6117 C20.5090267,11.6117 20.2880267,11.3907 20.2880267,11.0597 C20.2880267,6.7487 16.8620267,3.3227 12.5510267,3.3227 C12.2200267,3.3227 11.9990267,3.1017 11.9990267,2.7707 C11.9990267,2.4387 12.2200267,2.2177 12.5510267,2.2177 C17.4150267,2.2177 21.3930267,6.1967 21.3930267,11.0597 C21.3930267,11.2807 21.2830267,11.3907 21.2830267,11.5017 Z M8.78581905,6.9099889 C9.06494672,6.39198395 8.97132083,5.76372795 8.55394184,5.34547396 L6.01641761,2.81582481 C5.76179018,2.56907245 5.43016201,2.43169614 5.0827837,2.43169614 C4.7275303,2.43169614 4.39590214,2.56819744 4.14827477,2.81582481 L2.82263712,4.14233747 C2.5487595,4.40921502 2.40525813,4.78896865 2.43763344,5.15997219 C3.17964052,13.9223059 10.0799564,20.8191217 18.8466651,21.5602538 C19.2202937,21.583879 19.5991723,21.4412526 19.8634248,21.1761251 L21.1890625,19.8504875 C21.4375649,19.6019851 21.5740662,19.2703569 21.5740662,18.9168535 C21.5740662,18.5686002 21.4366898,18.2369721 21.1881875,17.9814696 L18.9674163,15.7598234 C18.5570374,15.3494445 17.9156562,15.2566936 17.4046513,15.5349463 L14.4663733,17.1195864 C14.3578723,17.179087 14.2327461,17.1948371 14.122495,17.1545867 C10.669712,16.3084536 7.99743653,13.6361781 7.15567849,10.1833952 C7.12855323,10.0722691 7.14517839,9.95326796 7.20205393,9.84739195 L8.78581905,6.9099889 Z M19.6227975,15.1131922 L21.8444437,17.3348384 C22.2679478,17.7495924 22.499825,18.3122228 22.499825,18.9168535 C22.499825,19.5179843 22.2653228,20.0841147 21.8383187,20.5119938 L20.5196811,21.8306314 C20.1005521,22.2567604 19.5212966,22.5008878 18.9297909,22.5008878 C18.8746654,22.5008878 18.8204149,22.5008878 18.7652893,22.4930127 C9.54532631,21.7142553 2.28450698,14.456936 1.50574954,5.23609792 C1.4593741,4.57109157 1.69475135,3.94458559 2.16813087,3.47295608 L3.48676846,2.15344348 C4.33465155,1.3064354 5.82304076,1.30556039 6.67092386,2.15344348 L9.20844809,4.69096771 C9.91632985,5.39884947 10.0738314,6.4698597 9.60045183,7.35624316 L8.10768758,10.1352697 C8.89869513,13.102423 11.2218423,15.4246952 14.1854956,16.2130777 L16.9575221,14.7211885 C17.8281554,14.253934 18.9236659,14.4149356 19.6227975,15.1131922 Z"
})));
CallForward.displayName = "DecorativeIcon";

const CallOut = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "22",
  height: "22",
  viewBox: "0 0 22 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-1 -1)",
  d: "M22.4667497,1.77998992 C22.4921249,1.8517406 22.5,1.89724104 22.5,1.95061655 L22.5,7.69242137 C22.5,7.95404887 22.295248,8.15880082 22.0336205,8.15880082 C21.771118,8.15880082 21.5663661,7.9575489 21.5663661,7.69942144 L21.5663661,3.09337746 L14.4761734,10.1765701 C14.3991727,10.2631959 14.2784215,10.3156964 14.1489203,10.3156964 C14.020294,10.3156964 13.8995429,10.2631959 13.8181671,10.1730701 C13.7324163,10.0873192 13.6825408,9.97006812 13.6825408,9.84581693 C13.6825408,9.72244075 13.7324163,9.60431463 13.8225421,9.51506377 L20.9048598,2.43187114 L16.2996908,2.43187114 C16.0371883,2.43187114 15.8324363,2.22711919 15.8324363,1.96549169 C15.8324363,1.70386419 16.0371883,1.49911224 16.2996908,1.49911224 L22.0336205,1.49911224 C22.1097463,1.49911224 22.1613718,1.51136235 22.2164973,1.53848761 C22.2619977,1.55248774 22.3197483,1.5892381 22.3687487,1.63823856 C22.4124992,1.68286399 22.4404994,1.72748942 22.4667497,1.77998992 Z M8.78581905,6.9099889 C9.06494672,6.39198395 8.97132083,5.76372795 8.55394184,5.34547396 L6.01641761,2.81582481 C5.76179018,2.56907245 5.43016201,2.43169614 5.0827837,2.43169614 C4.7275303,2.43169614 4.39590214,2.56819744 4.14827477,2.81582481 L2.82263712,4.14233747 C2.5487595,4.40921502 2.40525813,4.78896865 2.43763344,5.15997219 C3.17964052,13.9223059 10.0799564,20.8191217 18.8466651,21.5602538 C19.2202937,21.583879 19.5991723,21.4412526 19.8634248,21.1761251 L21.1890625,19.8504875 C21.4375649,19.6019851 21.5740662,19.2703569 21.5740662,18.9168535 C21.5740662,18.5686002 21.4366898,18.2369721 21.1881875,17.9814696 L18.9674163,15.7598234 C18.5570374,15.3494445 17.9156562,15.2566936 17.4046513,15.5349463 L14.4663733,17.1195864 C14.3578723,17.179087 14.2327461,17.1948371 14.122495,17.1545867 C10.669712,16.3084536 7.99743653,13.6361781 7.15567849,10.1833952 C7.12855323,10.0722691 7.14517839,9.95326796 7.20205393,9.84739195 L8.78581905,6.9099889 Z M19.6227975,15.1131922 L21.8444437,17.3348384 C22.2679478,17.7495924 22.499825,18.3122228 22.499825,18.9168535 C22.499825,19.5179843 22.2653228,20.0841147 21.8383187,20.5119938 L20.5196811,21.8306314 C20.1005521,22.2567604 19.5212966,22.5008878 18.9297909,22.5008878 C18.8746654,22.5008878 18.8204149,22.5008878 18.7652893,22.4930127 C9.54532631,21.7142553 2.28450698,14.456936 1.50574954,5.23609792 C1.4593741,4.57109157 1.69475135,3.94458559 2.16813087,3.47295608 L3.48676846,2.15344348 C4.33465155,1.3064354 5.82304076,1.30556039 6.67092386,2.15344348 L9.20844809,4.69096771 C9.91632985,5.39884947 10.0738314,6.4698597 9.60045183,7.35624316 L8.10768758,10.1352697 C8.89869513,13.102423 11.2218423,15.4246952 14.1854956,16.2130777 L16.9575221,14.7211885 C17.8281554,14.253934 18.9236659,14.4149356 19.6227975,15.1131922 Z"
})));
CallOut.displayName = "DecorativeIcon";

const CallReceive = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "22",
  height: "22",
  viewBox: "0 0 22 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-1 -1)",
  d: "M13.7643756,10.2128612 C13.7258159,10.1743014 13.6958249,10.1246021 13.6769735,10.0671909 C13.6572651,10.0312018 13.6444119,9.96950611 13.6444119,9.8949572 L13.6444119,4.28150974 C13.6444119,4.0253014 13.8449227,3.82393365 14.1011311,3.82393365 C14.3573394,3.82393365 14.5578503,4.0253014 14.5578503,4.28150974 L14.5578503,8.78957677 L21.4986112,1.85567097 C21.6794137,1.67486843 21.965613,1.67486843 22.1464155,1.85567097 C22.3280749,2.03733039 22.3280749,2.3218159 22.1472724,2.50347532 L15.2056546,9.438238 L19.7137217,9.438238 C19.9707869,9.438238 20.1712977,9.63874887 20.1712977,9.8949572 C20.1712977,10.1511655 19.9707869,10.3516764 19.7137217,10.3516764 L14.1011311,10.3516764 C14.0282959,10.3516764 13.9666003,10.3388231 13.9134735,10.3122597 C13.8774843,10.2985496 13.8329264,10.2728431 13.7892253,10.2377108 L13.7643756,10.2128612 Z M8.78581905,6.9099889 C9.06494672,6.39198395 8.97132083,5.76372795 8.55394184,5.34547396 L6.01641761,2.81582481 C5.76179018,2.56907245 5.43016201,2.43169614 5.0827837,2.43169614 C4.7275303,2.43169614 4.39590214,2.56819744 4.14827477,2.81582481 L2.82263712,4.14233747 C2.5487595,4.40921502 2.40525813,4.78896865 2.43763344,5.15997219 C3.17964052,13.9223059 10.0799564,20.8191217 18.8466651,21.5602538 C19.2202937,21.583879 19.5991723,21.4412526 19.8634248,21.1761251 L21.1890625,19.8504875 C21.4375649,19.6019851 21.5740662,19.2703569 21.5740662,18.9168535 C21.5740662,18.5686002 21.4366898,18.2369721 21.1881875,17.9814696 L18.9674163,15.7598234 C18.5570374,15.3494445 17.9156562,15.2566936 17.4046513,15.5349463 L14.4663733,17.1195864 C14.3578723,17.179087 14.2327461,17.1948371 14.122495,17.1545867 C10.669712,16.3084536 7.99743653,13.6361781 7.15567849,10.1833952 C7.12855323,10.0722691 7.14517839,9.95326796 7.20205393,9.84739195 L8.78581905,6.9099889 Z M19.6227975,15.1131922 L21.8444437,17.3348384 C22.2679478,17.7495924 22.499825,18.3122228 22.499825,18.9168535 C22.499825,19.5179843 22.2653228,20.0841147 21.8383187,20.5119938 L20.5196811,21.8306314 C20.1005521,22.2567604 19.5212966,22.5008878 18.9297909,22.5008878 C18.8746654,22.5008878 18.8204149,22.5008878 18.7652893,22.4930127 C9.54532631,21.7142553 2.28450698,14.456936 1.50574954,5.23609792 C1.4593741,4.57109157 1.69475135,3.94458559 2.16813087,3.47295608 L3.48676846,2.15344348 C4.33465155,1.3064354 5.82304076,1.30556039 6.67092386,2.15344348 L9.20844809,4.69096771 C9.91632985,5.39884947 10.0738314,6.4698597 9.60045183,7.35624316 L8.10768758,10.1352697 C8.89869513,13.102423 11.2218423,15.4246952 14.1854956,16.2130777 L16.9575221,14.7211885 C17.8281554,14.253934 18.9236659,14.4149356 19.6227975,15.1131922 Z"
})));
CallReceive.displayName = "DecorativeIcon";

const CallTalking = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "22",
  height: "22",
  viewBox: "0 0 22 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-1 -1)",
  d: "M14.2109267,2.60695 C13.9049267,2.60695 13.6579267,2.35895 13.6579267,2.05395 C13.6579267,1.74895 13.9049267,1.50195 14.2109267,1.50195 C18.7819267,1.50195 22.4999267,5.21995 22.4999267,9.79095 C22.4999267,10.09595 22.2519267,10.34395 21.9469267,10.34395 C21.6429267,10.34395 21.3949267,10.09595 21.3949267,9.79095 C21.3949267,5.82995 18.1719267,2.60695 14.2109267,2.60695 Z M14.2109267,7.02785 C13.9049267,7.02785 13.6579267,6.77985 13.6579267,6.47485 C13.6579267,6.16985 13.9049267,5.92285 14.2109267,5.92285 C16.3439267,5.92285 18.0789267,7.65785 18.0789267,9.79085 C18.0789267,10.09585 17.8309267,10.34385 17.5259267,10.34385 C17.2219267,10.34385 16.9739267,10.09585 16.9739267,9.79085 C16.9739267,8.26785 15.7339267,7.02785 14.2109267,7.02785 Z M8.78581905,6.9099889 C9.06494672,6.39198395 8.97132083,5.76372795 8.55394184,5.34547396 L6.01641761,2.81582481 C5.76179018,2.56907245 5.43016201,2.43169614 5.0827837,2.43169614 C4.7275303,2.43169614 4.39590214,2.56819744 4.14827477,2.81582481 L2.82263712,4.14233747 C2.5487595,4.40921502 2.40525813,4.78896865 2.43763344,5.15997219 C3.17964052,13.9223059 10.0799564,20.8191217 18.8466651,21.5602538 C19.2202937,21.583879 19.5991723,21.4412526 19.8634248,21.1761251 L21.1890625,19.8504875 C21.4375649,19.6019851 21.5740662,19.2703569 21.5740662,18.9168535 C21.5740662,18.5686002 21.4366898,18.2369721 21.1881875,17.9814696 L18.9674163,15.7598234 C18.5570374,15.3494445 17.9156562,15.2566936 17.4046513,15.5349463 L14.4663733,17.1195864 C14.3578723,17.179087 14.2327461,17.1948371 14.122495,17.1545867 C10.669712,16.3084536 7.99743653,13.6361781 7.15567849,10.1833952 C7.12855323,10.0722691 7.14517839,9.95326796 7.20205393,9.84739195 L8.78581905,6.9099889 Z M19.6227975,15.1131922 L21.8444437,17.3348384 C22.2679478,17.7495924 22.499825,18.3122228 22.499825,18.9168535 C22.499825,19.5179843 22.2653228,20.0841147 21.8383187,20.5119938 L20.5196811,21.8306314 C20.1005521,22.2567604 19.5212966,22.5008878 18.9297909,22.5008878 C18.8746654,22.5008878 18.8204149,22.5008878 18.7652893,22.4930127 C9.54532631,21.7142553 2.28450698,14.456936 1.50574954,5.23609792 C1.4593741,4.57109157 1.69475135,3.94458559 2.16813087,3.47295608 L3.48676846,2.15344348 C4.33465155,1.3064354 5.82304076,1.30556039 6.67092386,2.15344348 L9.20844809,4.69096771 C9.91632985,5.39884947 10.0738314,6.4698597 9.60045183,7.35624316 L8.10768758,10.1352697 C8.89869513,13.102423 11.2218423,15.4246952 14.1854956,16.2130777 L16.9575221,14.7211885 C17.8281554,14.253934 18.9236659,14.4149356 19.6227975,15.1131922 Z"
})));
CallTalking.displayName = "DecorativeIcon";

const Camera = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "20",
  viewBox: "0 0 24 20"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -2)",
  d: "M12,8.9575 C9.449,8.9575 7.374,11.0335 7.374,13.5835 C7.374,16.1355 9.449,18.2115 12,18.2115 C14.552,18.2115 16.627,16.1355 16.627,13.5835 C16.627,11.0335 14.552,8.9575 12,8.9575 Z M6.334,13.5835 C6.334,10.4595 8.876,7.9185 12,7.9185 C15.124,7.9185 17.666,10.4595 17.666,13.5835 C17.666,16.7085 15.124,19.2505 12,19.2505 C8.876,19.2505 6.334,16.7085 6.334,13.5835 Z M8.5063,14.1377 C8.2193,14.1377 7.9863,13.9057 7.9863,13.6187 C7.9863,11.4057 9.7873,9.6047 12.0003,9.6047 C12.2863,9.6047 12.5193,9.8377 12.5193,10.1247 C12.5193,10.4107 12.2863,10.6437 12.0003,10.6437 C10.3603,10.6437 9.0253,11.9787 9.0253,13.6187 C9.0253,13.9057 8.7923,14.1377 8.5063,14.1377 Z M9.666,3.4155 C9.072,3.4155 8.483,3.8915 8.265,4.5465 L7.942,5.5405 C7.741,6.1635 7.165,6.5825 6.509,6.5825 L2.895,6.5825 C1.872,6.5825 1.039,7.4155 1.039,8.4375 L1.039,18.7305 C1.039,19.7535 1.872,20.5855 2.895,20.5855 L21.105,20.5855 C22.129,20.5855 22.961,19.7535 22.961,18.7305 L22.961,8.4375 C22.961,7.4155 22.129,6.5825 21.105,6.5825 L17.49,6.5825 C16.819,6.5825 16.254,6.1885 16.052,5.5785 L15.73,4.5145 C15.518,3.8785 14.931,3.4155 14.334,3.4155 L9.666,3.4155 Z M21.105,5.5435 C22.701,5.5435 24,6.8415 24,8.4375 L24,18.7305 C24,20.3265 22.701,21.6245 21.105,21.6245 L2.895,21.6245 C1.298,21.6245 0,20.3265 0,18.7305 L0,8.4375 C0,6.8415 1.298,5.5435 2.895,5.5435 L6.509,5.5435 C6.712,5.5435 6.891,5.4135 6.954,5.2205 L7.279,4.2215 C7.64,3.1345 8.622,2.3755 9.666,2.3755 L14.334,2.3755 C15.382,2.3755 16.362,3.1255 16.721,4.1995 L17.042,5.2645 C17.099,5.4355 17.27,5.5435 17.49,5.5435 L21.105,5.5435 Z"
})));
Camera.displayName = "DecorativeIcon";

const Car = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "nonzero",
  d: "M2.042 15.958A2.505 2.505 0 0 1 0 13.5v-2C0 10.122 1.122 9 2.5 9c.458 0 .884-.228 1.139-.609l.851-1.278A2.495 2.495 0 0 1 6.57 6h7.228c.565 0 1.12.195 1.562.548L19.3 9.7c.242.194.545.3.854.3H21c1.949 0 3 1.803 3 3.5 0 1.268-.851 2.259-2.043 2.462A2.505 2.505 0 0 1 19.5 18a2.505 2.505 0 0 1-2.45-2H6.95a2.505 2.505 0 0 1-2.45 2 2.505 2.505 0 0 1-2.458-2.042zm.022-1.023A2.505 2.505 0 0 1 4.5 13c1.207 0 2.217.86 2.45 2h10.1c.233-1.14 1.243-2 2.45-2 1.186 0 2.182.83 2.437 1.94.577-.162 1.063-.65 1.063-1.44 0-1.005-.533-2.5-2-2.5h-.845a2.371 2.371 0 0 1-1.479-.52l-3.94-3.151A1.509 1.509 0 0 0 13.798 7H6.57c-.502 0-.969.25-1.248.668l-.851 1.277A2.364 2.364 0 0 1 2.5 10c-.827 0-1.5.673-1.5 1.5v2c0 .676.45 1.248 1.064 1.435zM4.5 14c-.827 0-1.5.673-1.5 1.5S3.673 17 4.5 17 6 16.327 6 15.5 5.327 14 4.5 14zm15 0c-.827 0-1.5.673-1.5 1.5s.673 1.5 1.5 1.5 1.5-.673 1.5-1.5-.673-1.5-1.5-1.5zm-3-3h-5a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 1 0V10h4.5a.5.5 0 0 1 0 1zm-7 0h-4a.5.5 0 0 1-.447-.723l1-2a.5.5 0 1 1 .895.447L6.309 10H9.5a.5.5 0 0 1 0 1zm4 2h-1a.5.5 0 0 1 0-1h1a.5.5 0 0 1 0 1z"
})));
Car.displayName = "DecorativeIcon";

const CartTeam = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20"
}, /*#__PURE__*/React.createElement("path", {
  d: "M19.982 9.494c-.005-.022-.005-.046-.014-.068a.437.437 0 00-.093-.14l-1.542-1.541V6.25c0-.678-.331-1.277-.835-1.657l.002-.01v-2.5A2.086 2.086 0 0015.417 0H4.583A2.086 2.086 0 002.5 2.083l.002.01c-.504.38-.836.979-.836 1.658v3.994L.122 9.289l-.009.012a.42.42 0 00-.081.122.436.436 0 00-.032.162v9.165C0 19.44.56 20 1.25 20h17.5c.69 0 1.25-.56 1.25-1.25V9.583c0-.031-.012-.06-.018-.089zm-1.649-.57l.244.243h-.244v-.244zM4.583.833h10.834c.689 0 1.25.56 1.25 1.25v2.125a2.085 2.085 0 00-.417-.042h-6.3c-.538 0-1.014-.344-1.185-.854l-.073-.221a2.081 2.081 0 00-1.977-1.425H3.749c-.12 0-.236.016-.35.036.162-.503.628-.87 1.184-.87zM2.5 7.917V3.751c0-.69.561-1.25 1.25-1.25h2.966c.54 0 1.015.343 1.186.854l.073.22A2.081 2.081 0 009.951 5h6.299c.69 0 1.25.56 1.25 1.25v2.917h-15V7.918zm-.833 1.005v.244h-.243l.243-.244zm17.5 9.827c0 .23-.186.417-.416.417H1.25a.417.417 0 01-.417-.417V10h18.334v8.75zM7.5 14.167h5c.92 0 1.667-.748 1.667-1.667 0-.92-.748-1.667-1.667-1.667h-5c-.92 0-1.667.748-1.667 1.667 0 .92.748 1.667 1.667 1.667zm0-2.5h5c.46 0 .833.374.833.833 0 .46-.374.833-.833.833h-5a.835.835 0 01-.833-.833c0-.46.374-.833.833-.833z"
})));
CartTeam.displayName = "DecorativeIcon";

const Channels = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "22",
  viewBox: "0 0 24 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -1)",
  d: "M17.5,17 L0.5,17 C0.224,17 0,16.776 0,16.5 L0,1.5 C0,1.224 0.224,1 0.5,1 L17.5,1 C17.776,1 18,1.224 18,1.5 L18,16.5 C18,16.776 17.776,17 17.5,17 Z M1,16 L17,16 L17,2 L1,2 L1,16 Z M20.5,20 L3.5,20 C3.224,20 3,19.776 3,19.5 L3,17.5 C3,17.224 3.224,17 3.5,17 C3.776,17 4,17.224 4,17.5 L4,19 L20,19 L20,5 L18.5,5 C18.224,5 18,4.776 18,4.5 C18,4.224 18.224,4 18.5,4 L20.5,4 C20.776,4 21,4.224 21,4.5 L21,19.5 C21,19.776 20.776,20 20.5,20 Z M23.5,23 L6.5,23 C6.224,23 6,22.776 6,22.5 L6,20.5 C6,20.224 6.224,20 6.5,20 C6.776,20 7,20.224 7,20.5 L7,22 L23,22 L23,9 L21.5,9 C21.224,9 21,8.776 21,8.5 C21,8.224 21.224,8 21.5,8 L23.5,8 C23.776,8 24,8.224 24,8.5 L24,22.5 C24,22.776 23.776,23 23.5,23 Z"
})));
Channels.displayName = "DecorativeIcon";

const ChartsBar1 = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M1.4365,22.961 L5.1475,22.961 L5.1475,12.124 L1.4365,12.124 L1.4365,22.961 Z M5.6665,11.085 C5.9725,11.085 6.1865,11.298 6.1865,11.604 L6.1865,23.48 C6.1865,23.786 5.9725,24 5.6665,24 L0.9165,24 C0.6095,24 0.3965,23.786 0.3965,23.48 L0.3965,11.604 C0.3965,11.298 0.6095,11.085 0.9165,11.085 L5.6665,11.085 Z M10.1445,22.961 L13.8555,22.961 L13.8555,1.039 L10.1445,1.039 L10.1445,22.961 Z M14.3765,0 C14.6825,0 14.8955,0.213 14.8955,0.52 L14.8955,23.48 C14.8955,23.786 14.6825,24 14.3765,24 L9.6245,24 C9.3195,24 9.1055,23.786 9.1055,23.48 L9.1055,0.52 C9.1055,0.213 9.3195,0 9.6245,0 L14.3765,0 Z M18.8535,22.961 L22.5655,22.961 L22.5655,5.79 L18.8535,5.79 L18.8535,22.961 Z M23.0855,4.75 C23.3915,4.75 23.6035,4.964 23.6035,5.271 L23.6035,23.48 C23.6035,23.786 23.3915,24 23.0855,24 L18.3355,24 C18.0285,24 17.8145,23.786 17.8145,23.48 L17.8145,5.271 C17.8145,4.964 18.0285,4.75 18.3355,4.75 L23.0855,4.75 Z"
})));
ChartsBar1.displayName = "DecorativeIcon";

const ChartsBar2 = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M4.5,24 L1.5,24 C1.224,24 1,23.776 1,23.5 L1,17.5 C1,17.224 1.224,17 1.5,17 L4.5,17 C4.776,17 5,17.224 5,17.5 L5,23.5 C5,23.776 4.776,24 4.5,24 Z M2,23 L4,23 L4,18 L2,18 L2,23 Z M10.5,24 L7.5,24 C7.224,24 7,23.776 7,23.5 L7,12.5 C7,12.224 7.224,12 7.5,12 L10.5,12 C10.776,12 11,12.224 11,12.5 L11,23.5 C11,23.776 10.776,24 10.5,24 Z M8,23 L10,23 L10,13 L8,13 L8,23 Z M16.5,24 L13.5,24 C13.224,24 13,23.776 13,23.5 L13,14.5 C13,14.224 13.224,14 13.5,14 L16.5,14 C16.776,14 17,14.224 17,14.5 L17,23.5 C17,23.776 16.776,24 16.5,24 Z M14,23 L16,23 L16,15 L14,15 L14,23 Z M22.5,24 L19.5,24 C19.224,24 19,23.776 19,23.5 L19,8.5 C19,8.224 19.224,8 19.5,8 L22.5,8 C22.776,8 23,8.224 23,8.5 L23,23.5 C23,23.776 22.776,24 22.5,24 Z M20,23 L22,23 L22,9 L20,9 L20,23 Z M7.79917342,7.59855456 L4.74904694,10.0305652 C4.90889317,10.3178755 5,10.6484762 5,11 C5,12.103 4.103,13 3,13 C1.897,13 1,12.103 1,11 C1,9.897 1.897,9 3,9 C3.38780812,9 3.75015087,9.11088562 4.05699501,9.30262361 L7.17445059,6.81692826 C7.06237367,6.56739018 7,6.29085729 7,6 C7,4.897 7.897,4 9,4 C10.103,4 11,4.897 11,6 C11,6.01667664 10.999795,6.0333062 10.9993872,6.04988627 L13.4424213,6.74659212 C13.8092998,6.29154404 14.3711727,6 15,6 C15.370495,6 15.7177475,6.10120594 16.0155699,6.27743007 L19.2774301,3.01556993 C19.1012059,2.71774752 19,2.37049496 19,2 C19,0.897 19.897,0 21,0 C22.103,0 23,0.897 23,2 C23,3.103 22.103,4 21,4 C20.629505,4 20.2822525,3.89879406 19.9844301,3.72256993 L16.7225699,6.98443007 C16.8987941,7.28225248 17,7.62950504 17,8 C17,9.103 16.103,10 15,10 C13.897,10 13,9.103 13,8 C13,7.88705829 13.0094048,7.77627644 13.0274726,7.66839629 L10.7248367,7.01172927 C10.3769452,7.6026733 9.73409652,8 9,8 C8.54972475,8 8.13377939,7.85051502 7.79917342,7.59855456 Z M3.6907998,10.2775238 C3.51122497,10.1057239 3.26785668,10 3,10 C2.448,10 2,10.449 2,11 C2,11.551 2.448,12 3,12 C3.552,12 4,11.551 4,11 C4,10.7325572 3.89445521,10.4891446 3.72270222,10.309442 C3.71168523,10.2993732 3.70103675,10.2887326 3.6907998,10.2775238 Z M8.23839057,6.64742929 C8.42185973,6.8629766 8.69506079,7 9,7 C9.552,7 10,6.551 10,6 C10,5.449 9.552,5 9,5 C8.448,5 8,5.449 8,6 C8,6.2244842 8.0743612,6.43203794 8.19982084,6.59919562 C8.20674293,6.60686891 8.21347368,6.61480416 8.22,6.623 C8.22641727,6.63101232 8.23254697,6.63915948 8.23839057,6.64742929 Z M20.3131633,2.72624713 C20.4923477,2.89582187 20.7341087,3 21,3 C21.552,3 22,2.551 22,2 C22,1.449 21.552,1 21,1 C20.448,1 20,1.449 20,2 C20,2.2656195 20.1041105,2.50753526 20.2737941,2.6868737 C20.2806628,2.69302583 20.2874013,2.69940127 20.294,2.706 C20.3006119,2.71261195 20.3069997,2.71936416 20.3131633,2.72624713 Z M23.5,24 L0.5,24 C0.224,24 0,23.776 0,23.5 C0,23.224 0.224,23 0.5,23 L23.5,23 C23.776,23 24,23.224 24,23.5 C24,23.776 23.776,24 23.5,24 Z M15,7 C14.448,7 14,7.449 14,8 C14,8.551 14.448,9 15,9 C15.552,9 16,8.551 16,8 C16,7.449 15.552,7 15,7 Z"
})));
ChartsBar2.displayName = "DecorativeIcon";

const ChartsLine = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "23",
  height: "24",
  viewBox: "0 0 23 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -1)",
  d: "M22.56,24.04 L0.48,24.04 C0.21504,24.04 0,23.82496 0,23.56 L0,1.48 C0,1.21504 0.21504,1 0.48,1 C0.74496,1 0.96,1.21504 0.96,1.48 L0.96,23.08 L22.56,23.08 C22.82496,23.08 23.04,23.29504 23.04,23.56 C23.04,23.82496 22.82496,24.04 22.56,24.04 Z M3.36,21.16 C3.27264,21.16 3.18432,21.13696 3.1056,21.08704 C2.88096,20.94688 2.81184,20.65024 2.95296,20.4256 L5.35296,16.5856 C5.43648,16.4512 5.58144,16.36672 5.73888,16.36096 C5.92416,16.35328 6.04896,16.42624 6.144,16.55296 L7.15584,17.90176 L12.54816,8.91424 C12.63072,8.776 12.77568,8.68864 12.936,8.68 C13.07904,8.67712 13.24896,8.74336 13.34496,8.872 L15.79104,12.13312 L22.14624,1.23808 C22.27968,1.00864 22.57344,0.9328 22.80288,1.06528 C23.03136,1.19872 23.10912,1.49248 22.97568,1.72192 L16.25568,13.24192 C16.17504,13.38112 16.03008,13.46944 15.86976,13.47904 C15.71424,13.4848 15.55392,13.4176 15.45696,13.288 L13.00512,10.0192 L7.6128,19.00672 C7.52928,19.144 7.38432,19.23136 7.224,19.24 C7.0848,19.2496 6.91104,19.17664 6.816,19.048 L5.79552,17.68768 L3.76704,20.9344 C3.67584,21.08032 3.51936,21.16 3.36,21.16 Z"
})));
ChartsLine.displayName = "DecorativeIcon";

const Chat1 = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M7.4702,9.7948 C7.8912,9.7948 8.1622,9.5238 8.1622,9.1028 C8.1622,8.6818 7.8912,8.4098 7.4702,8.4098 C7.0492,8.4098 6.7772,8.6818 6.7772,9.1028 C6.7772,9.5238 7.0492,9.7948 7.4702,9.7948 Z M7.4702,7.3458 C8.4382,7.3458 9.2262,8.1338 9.2262,9.1028 C9.2262,10.0708 8.4382,10.8578 7.4702,10.8578 C6.5012,10.8578 5.7142,10.0708 5.7142,9.1028 C5.7142,8.1338 6.5012,7.3458 7.4702,7.3458 Z M12.3672,9.7948 C12.7882,9.7948 13.0602,9.5238 13.0602,9.1028 C13.0602,8.6818 12.7882,8.4098 12.3672,8.4098 C11.9462,8.4098 11.6752,8.6818 11.6752,9.1028 C11.6752,9.5238 11.9462,9.7948 12.3672,9.7948 Z M12.3672,7.3458 C13.3362,7.3458 14.1232,8.1338 14.1232,9.1028 C14.1232,10.0708 13.3362,10.8578 12.3672,10.8578 C11.3992,10.8578 10.6112,10.0708 10.6112,9.1028 C10.6112,8.1338 11.3992,7.3458 12.3672,7.3458 Z M17.2646,9.7948 C17.6856,9.7948 17.9566,9.5238 17.9566,9.1028 C17.9566,8.6818 17.6856,8.4098 17.2646,8.4098 C16.8436,8.4098 16.5726,8.6818 16.5726,9.1028 C16.5726,9.5238 16.8436,9.7948 17.2646,9.7948 Z M17.2646,7.3458 C18.2336,7.3458 19.0206,8.1338 19.0206,9.1028 C19.0206,10.0708 18.2336,10.8578 17.2646,10.8578 C16.2956,10.8578 15.5086,10.0708 15.5086,9.1028 C15.5086,8.1338 16.2956,7.3458 17.2646,7.3458 Z M22.9355,13.8363 L22.9355,3.5523 C22.9355,2.1593 21.7585,0.9823 20.3665,0.9823 L3.6335,1.0643 C2.2405,1.0643 1.0635,2.2403 1.0635,3.6333 L1.0635,13.8363 C1.0635,15.2293 2.2405,16.4063 3.6335,16.4063 L6.2455,16.4063 C6.4585,16.4063 6.5695,16.5163 6.6585,16.6043 C6.7775,16.7243 6.7775,16.9163 6.7775,17.1023 L6.7695,17.1473 L4.9725,21.8613 L11.6375,16.5153 C11.7445,16.4063 11.8685,16.4063 11.9595,16.4063 L20.3665,16.4063 C21.7585,16.4063 22.9355,15.2293 22.9355,13.8363 Z M20.3665,0.0003 C22.3695,0.0003 23.9995,1.6293 23.9995,3.6333 L23.9995,13.8363 C23.9995,15.8403 22.3695,17.4703 20.3665,17.4703 L12.1655,17.4703 L4.0855,23.9183 L3.7965,23.9183 C3.7095,23.9183 3.5915,23.9183 3.4785,23.8153 C3.3795,23.7583 3.3015,23.6583 3.2605,23.5383 C3.2185,23.4103 3.2245,23.2753 3.2775,23.1683 L5.4145,17.3883 L3.6335,17.3883 C1.6295,17.3883 -0.0005,15.7583 -0.0005,13.7553 L-0.0005,3.6333 C-0.0005,1.6643 1.6645,0.0003 3.6335,0.0003 L20.3665,0.0003 Z"
})));
Chat1.displayName = "DecorativeIcon";

const Chat2 = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M20.3281,24 C20.1981,24 20.0701,23.949 19.9741,23.854 L16.1551,20.034 L7.6381,20.034 C6.6551,20.034 5.7661,19.527 5.3181,18.71 C5.1851,18.47 5.2731,18.165 5.5151,18.032 C5.7561,17.898 6.0611,17.987 6.1941,18.23 C6.4621,18.719 7.0291,19.035 7.6381,19.035 L16.3621,19.035 C16.4951,19.035 16.6211,19.088 16.7151,19.182 L19.8281,22.295 L19.8281,19.535 C19.8281,19.259 20.0521,19.035 20.3281,19.035 L21.5171,19.035 C22.3361,19.035 23.0011,18.37 23.0011,17.553 L23.0011,8.431 C23.0011,7.832 22.5141,7.345 21.9141,7.345 L18.7411,7.345 C18.4661,7.345 18.2421,7.122 18.2421,6.845 C18.2421,6.569 18.4661,6.346 18.7411,6.346 L21.9141,6.346 C23.0641,6.346 24.0001,7.281 24.0001,8.431 L24.0001,17.553 C24.0001,18.921 22.8861,20.034 21.5171,20.034 L20.8271,20.034 L20.8271,23.501 C20.8271,23.703 20.7051,23.885 20.5191,23.962 C20.4581,23.987 20.3921,24 20.3281,24 Z M2.0859,1 C1.4869,1 0.9999,1.487 0.9999,2.086 L0.9999,11.604 C0.9999,12.204 1.4869,12.691 2.0859,12.691 L3.6719,12.691 C3.9479,12.691 4.1709,12.914 4.1709,13.19 L4.1709,16.043 L7.8019,12.817 C7.8929,12.736 8.0109,12.691 8.1339,12.691 L15.1729,12.691 C15.9899,12.691 16.6549,12.025 16.6549,11.208 L16.6549,2.086 C16.6549,1.487 16.1679,1 15.5689,1 L2.0859,1 Z M3.6719,17.654 C3.6029,17.654 3.5329,17.64 3.4669,17.611 C3.2879,17.53 3.1719,17.353 3.1719,17.155 L3.1719,13.689 L2.0859,13.689 C0.9359,13.689 -0.0001,12.754 -0.0001,11.604 L-0.0001,2.086 C-0.0001,0.937 0.9359,-1.77635684e-15 2.0859,-1.77635684e-15 L15.5689,-1.77635684e-15 C16.7189,-1.77635684e-15 17.6539,0.937 17.6539,2.086 L17.6539,11.208 C17.6539,12.576 16.5419,13.689 15.1729,13.689 L8.3229,13.689 L4.0039,17.529 C3.9109,17.612 3.7919,17.654 3.6719,17.654 Z"
})));
Chat2.displayName = "DecorativeIcon";

const ChatSupport = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M9.997 21.645l-2.315-3.15-1.169 1.722 1.413.298.162.06 1.908 1.07zm-2.957-4.377c.038-.079.102-.149.19-.198.129-.073.281-.087.417-.051.187-.049.393-.005.532.118.157.14.187.349.075.516l3.747 5.099 3.748-5.1c-.112-.167-.083-.377.075-.517.138-.122.346-.166.532-.117.135-.036.288-.022.416.05.088.05.153.12.19.198l4.856 2.042c.68.286 1.175.806 1.359 1.426l.808 2.719c.04.13.004.269-.095.375-.098.108-.249.17-.409.17h-22.961c-.16 0-.311-.062-.41-.168-.099-.106-.133-.244-.095-.375l.808-2.719c.184-.62.679-1.14 1.359-1.426l4.856-2.043zm9.279 1.225l-2.314 3.149 1.907-1.07.162-.06 1.413-.297-1.169-1.722zm1.854-7.559l-.2-.009c.018.149.028.302.028.456 0 1.229-.572 2.163-1.338 2.205-.066.209-.14.411-.22.609.82-.372 1.467-.908 1.467-1.624 0-.303.225-.551.51-.57-.098-.365-.181-.726-.246-1.066zm-.138-.906c-.023-.218-.035-.415-.035-.585 0-.245.224-.444.5-.444s.5.199.5.444c0 1.436.898 4.613 1.854 5.463.195.173.195.455 0 .628-1.105.983-4.868 1.414-5.293 1.46l-.061.004c-.25 0-.465-.165-.496-.39-.01-.071 0-.141.026-.204-.971 1.008-2.208 1.595-3.529 1.595-1.042 0-2.031-.365-2.879-1.013l-.12.013-.061-.003c-.425-.046-4.188-.477-5.293-1.46-.195-.173-.195-.455 0-.628.956-.851 1.854-4.028 1.854-5.464l.004-.058-.005-.21c0-3.406 2.916-6.176 6.5-6.176s6.5 2.771 6.5 6.176c0 .272-.023.548-.072.847l.107.007zm-1.018.795c-2.988-.456-5.898-2.168-7.27-3.488-.692 2.028-2.947 3.124-3.757 3.461-.04.183-.061.381-.061.584 0 .854.348 1.324.464 1.324.079-.047.176-.073.272-.073l.163.029c.137.053.254.155.291.292.65 2.491 2.411 4.164 4.382 4.164.99 0 1.927-.422 2.697-1.158-.248.027-.469.04-.651.04-.121 0-.233-.041-.323-.111-.211.072-.455.111-.722.111-.869 0-1.5-.42-1.5-1 0-.58.631-1 1.5-1 .784 0 1.374.341 1.482.834.359-.034.794-.107 1.242-.221.276-.497.5-1.054.658-1.659.036-.137.138-.25.276-.303.138-.054.293-.041.42.034.149.026.494-.45.494-1.303 0-.193-.019-.382-.055-.557zm-.011-.912c.045-.263.066-.504.066-.736 0-2.92-2.499-5.294-5.571-5.294-3.073 0-5.571 2.374-5.571 5.294 0 .196.015.397.046.613 1.038-.514 2.951-1.727 2.951-3.693 0-.248.23-.449.512-.449.283 0 .512.201.512.449.136.522 3.393 3.194 7.055 3.816zm1.857 3.461c-.445 1.234-1.894 1.949-3.237 2.313-.123.172-.252.335-.387.49l.201-.063c1.275-.138 3.376-.507 4.343-.978-.348-.457-.659-1.082-.92-1.763zm-13.533-.536c-.295.883-.674 1.724-1.112 2.298.751.366 2.186.669 3.386.852-.539-.669-.973-1.481-1.266-2.401-.412-.023-.768-.303-1.009-.749zm7.908 10.286h9.576l-.646-2.175c-.11-.372-.409-.684-.816-.856l-3.848-1.619 1.228 1.808c.081.119.09.262.027.388s-.194.22-.353.253l-1.993.419-3.176 1.781zm-12.051 0h9.577l-3.176-1.782-1.993-.419c-.158-.033-.288-.127-.353-.253-.064-.126-.054-.27.027-.389l1.228-1.808-3.848 1.619c-.408.172-.705.484-.816.856l-.646 2.175z"
})));
ChatSupport.displayName = "DecorativeIcon";

const Check = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M1.02081528,13.0208153 L23.5208153,13.0208153 C23.7969577,13.0208153 24.0208153,13.2446729 24.0208153,13.5208153 C24.0208153,13.7969577 23.7969577,14.0208153 23.5208153,14.0208153 L0.52081528,14.0208153 C0.244672905,14.0208153 0.0208152802,13.7969577 0.0208152802,13.5208153 L0.0208152802,4.52081528 C0.0208152802,4.24467291 0.244672905,4.02081528 0.52081528,4.02081528 C0.796957655,4.02081528 1.02081528,4.24467291 1.02081528,4.52081528 L1.02081528,13.0208153 Z",
  transform: "rotate(-45 12.02 9.02)"
})));
Check.displayName = "DecorativeIcon";

const Clipboard = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "25",
  viewBox: "0 0 24 25"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M4.9376,3.0654 L4.9376,4.7734 L12.7286,4.7734 L12.7286,3.0654 C12.7286,2.7814 12.4976,2.5514 12.2136,2.5514 L10.4246,2.5514 C10.1586,2.5514 9.9446,2.3364 9.9446,2.0714 C9.9446,1.4584 9.4456,0.9604 8.8336,0.9604 C8.2806,0.9604 7.8206,1.3654 7.7356,1.8954 C7.7576,1.9494 7.7696,2.0084 7.7696,2.0714 C7.7696,2.3364 7.5546,2.5514 7.2896,2.5514 L5.4526,2.5514 C5.1686,2.5514 4.9376,2.7814 4.9376,3.0654 Z M17.1866,17.5014 C17.4516,17.5014 17.6666,17.7164 17.6666,17.9824 L17.6666,21.9594 C17.6666,23.1014 16.7376,24.0294 15.5946,24.0294 L2.0716,24.0294 C0.9286,24.0294 0.0006,23.1014 0.0006,21.9594 L0.0006,5.2534 C0.0006,4.1114 0.9286,3.1824 2.0716,3.1824 L3.9776,3.1824 L3.9776,3.0654 C3.9776,2.2524 4.6386,1.5914 5.4526,1.5914 L6.8186,1.5914 C7.0356,0.6794 7.8556,0.0004 8.8336,0.0004 C9.8096,0.0004 10.6306,0.6794 10.8476,1.5914 L12.2136,1.5914 C13.0266,1.5914 13.6876,2.2524 13.6876,3.0654 L13.6876,3.1824 L15.5946,3.1824 C16.7376,3.1824 17.6666,4.1114 17.6666,5.2534 L17.6666,6.8444 C17.6666,7.1094 17.4516,7.3244 17.1866,7.3244 C16.9216,7.3244 16.7066,7.1094 16.7066,6.8444 L16.7066,5.2534 C16.7066,4.6404 16.2076,4.1424 15.5946,4.1424 L13.6876,4.1424 L13.6876,5.2534 C13.6876,5.5184 13.4736,5.7324 13.2076,5.7324 L4.4576,5.7324 C4.1916,5.7324 3.9776,5.5184 3.9776,5.2534 L3.9776,4.1424 L2.0716,4.1424 C1.4586,4.1424 0.9596,4.6404 0.9596,5.2534 L0.9596,21.9594 C0.9596,22.5714 1.4586,23.0704 2.0716,23.0704 L15.5946,23.0704 C16.2076,23.0704 16.7066,22.5714 16.7066,21.9594 L16.7066,17.9824 C16.7066,17.7164 16.9216,17.5014 17.1866,17.5014 Z M22.6305,9.0981 C23.1795,8.5251 23.1785,7.6101 22.6215,7.0231 C22.0455,6.4261 21.0865,6.4051 20.4845,6.9771 L18.7245,8.7371 L20.8585,10.8711 L22.6305,9.0981 Z M14.2515,17.4841 L20.1795,11.5511 L18.0455,9.4161 L12.1235,15.3371 C12.6105,15.5191 13.0585,15.8001 13.4155,16.1821 C13.7915,16.5331 14.0715,16.9861 14.2515,17.4841 Z M11.4295,16.1311 L10.9235,18.6741 L13.4495,18.1721 C13.3525,17.6711 13.1095,17.2081 12.7375,16.8611 C12.3765,16.4761 11.9215,16.2331 11.4295,16.1311 Z M23.3155,6.3601 C24.2285,7.3231 24.2275,8.8191 23.3165,9.7701 L14.1675,18.9261 C14.1015,18.9941 14.0155,19.0381 13.9225,19.0571 L10.4065,19.7561 C10.3755,19.7631 10.3435,19.7661 10.3125,19.7661 C10.1865,19.7661 10.0645,19.7161 9.9735,19.6251 C9.8595,19.5121 9.8105,19.3501 9.8415,19.1921 L10.5425,15.6761 C10.5605,15.5831 10.6065,15.4971 10.6725,15.4301 L17.6965,8.4071 C17.6985,8.4041 17.7025,8.4011 17.7055,8.3981 C17.7085,8.3941 17.7125,8.3921 17.7155,8.3891 L19.8145,6.2901 C20.8075,5.3461 22.3735,5.3801 23.3155,6.3601 Z"
})));
Clipboard.displayName = "DecorativeIcon";

const CloudDownload = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M9.2233,20.39335 C9.4103,20.19635 9.7563,20.18735 9.9563,20.37935 L11.0483,21.42735 L11.0483,12.40035 C11.0483,12.09435 11.2613,11.88035 11.5673,11.88035 C11.8723,11.88035 12.0863,12.09435 12.0863,12.40035 L12.0863,21.42735 L13.1773,20.37935 C13.3723,20.18935 13.7193,20.19335 13.9103,20.39335 C14.0073,20.49335 14.0583,20.62435 14.0553,20.76335 C14.0523,20.90235 13.9953,21.03135 13.8963,21.12735 L11.9263,23.01935 C11.9033,23.04135 11.8773,23.05535 11.8603,23.06535 L11.8333,23.08135 C11.8153,23.09435 11.7913,23.11235 11.7603,23.12435 C11.7313,23.13635 11.7023,23.14135 11.6803,23.14435 L11.6193,23.02935 L11.6473,23.15135 C11.6043,23.16035 11.5283,23.16135 11.4863,23.15035 L11.4723,23.02135 L11.4533,23.14435 C11.4313,23.14135 11.4033,23.13635 11.3723,23.12435 C11.3423,23.11235 11.3183,23.09435 11.3003,23.08135 L11.2733,23.06435 C11.2553,23.05535 11.2313,23.04135 11.2063,23.01835 L9.2373,21.12635 C9.1373,21.03135 9.0803,20.90235 9.0773,20.76335 C9.0753,20.62335 9.1263,20.49335 9.2233,20.39335 Z M18.8405,6.75865 C21.7335,6.96765 23.9855,9.32165 23.9855,12.15765 C23.9045,15.18265 21.4095,17.64165 18.4225,17.64165 L13.9305,17.64165 C13.6245,17.64165 13.4115,17.42765 13.4115,17.12165 C13.4115,16.81665 13.6245,16.60365 13.9305,16.60365 L18.4225,16.60365 C20.8735,16.60365 22.8675,14.60965 22.8675,12.15765 C22.8675,9.70565 20.8735,7.71165 18.4225,7.71165 C18.1405,7.71165 17.8245,7.52365 17.8245,7.27165 C17.3635,4.20565 14.6385,1.87965 11.4875,1.87965 C7.9065,1.87965 4.9935,4.75865 4.9935,8.29565 C4.9935,8.60865 4.9935,8.83565 5.0695,9.21665 C5.0715,9.33465 5.0715,9.52965 4.9575,9.64465 C4.8405,9.76065 4.6465,9.76065 4.5525,9.76065 L4.4745,9.76065 C2.5875,9.76065 1.0525,11.29565 1.0525,13.18165 C1.0525,15.06865 2.5875,16.60365 4.4745,16.60365 L9.2025,16.60365 C9.5075,16.60365 9.7215,16.81665 9.7215,17.12165 C9.7215,17.42765 9.5075,17.64165 9.2025,17.64165 L4.4745,17.64165 C2.0565,17.64165 0.0145,15.59965 0.0145,13.18165 C0.0145,10.88265 1.6985,9.02965 4.0335,8.73665 L4.0335,8.21665 C3.9965,6.29265 4.7225,4.46965 6.0805,3.08565 C7.4985,1.63865 9.4195,0.84165 11.4875,0.84165 C14.9985,0.84165 18.0755,3.32465 18.8405,6.75865 Z"
})));
CloudDownload.displayName = "DecorativeIcon";

const CloudSync = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "22",
  viewBox: "0 0 24 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -1)",
  d: "M11.9036,15.27935 C11.8866,15.30435 11.8766,15.33235 11.8546,15.35335 L10.3546,16.85335 C10.2566,16.95135 10.1286,17.00035 10.0006,17.00035 C9.8726,17.00035 9.7446,16.95135 9.6466,16.85335 C9.4516,16.65935 9.4516,16.34135 9.6466,16.14635 L10.2936,15.50035 L9.5006,15.50035 C8.1226,15.50035 7.0006,16.62235 7.0006,18.00035 C7.0006,19.37835 8.1226,20.50035 9.5006,20.50035 C9.7766,20.50035 10.0006,20.72335 10.0006,21.00035 C10.0006,21.27635 9.7766,21.50035 9.5006,21.50035 C7.5706,21.50035 6.0006,19.92935 6.0006,18.00035 C6.0006,16.07035 7.5706,14.50035 9.5006,14.50035 L10.2936,14.50035 L9.6476,13.85335 C9.4526,13.65935 9.4526,13.34235 9.6476,13.14635 C9.8416,12.95235 10.1596,12.95235 10.3546,13.14635 L11.8546,14.64635 C11.8586,14.65135 11.8596,14.65735 11.8636,14.66135 C11.9036,14.70535 11.9386,14.75435 11.9616,14.80835 C12.0126,14.93135 12.0126,15.07035 11.9616,15.19235 C11.9476,15.22535 11.9236,15.25135 11.9036,15.27935 Z M13.5003,14.50005 C15.4303,14.50005 17.0003,16.07005 17.0003,18.00005 C17.0003,19.93005 15.4303,21.50005 13.5003,21.50005 L12.7073,21.50005 L13.3543,22.14605 C13.5483,22.34105 13.5483,22.65805 13.3543,22.85405 C13.2563,22.95105 13.1283,23.00005 13.0003,23.00005 C12.8723,23.00005 12.7443,22.95105 12.6463,22.85405 L11.1463,21.35405 C11.1243,21.33205 11.1143,21.30505 11.0973,21.27905 C11.0773,21.25105 11.0533,21.22605 11.0393,21.19205 C10.9883,21.07005 10.9883,20.93205 11.0393,20.80905 C11.0623,20.75405 11.0963,20.70505 11.1363,20.66105 C11.1413,20.65705 11.1423,20.65105 11.1463,20.64605 L12.6463,19.14605 C12.8413,18.95205 13.1583,18.95205 13.3543,19.14605 C13.5483,19.34205 13.5483,19.65905 13.3543,19.85405 L12.7073,20.50005 L13.5003,20.50005 C14.8783,20.50005 16.0003,19.37805 16.0003,18.00005 C16.0003,16.62205 14.8783,15.50005 13.5003,15.50005 C13.2243,15.50005 13.0003,15.27605 13.0003,15.00005 C13.0003,14.72405 13.2243,14.50005 13.5003,14.50005 Z M18.846,7.02295 C21.758,7.23195 24,9.60895 24,12.49995 C24,15.53295 21.534,17.99995 18.5,17.99995 C18.224,17.99995 18,17.77595 18,17.49995 C18,17.22395 18.224,16.99995 18.5,16.99995 C20.982,16.99995 23,14.98095 23,12.49995 C23,10.01895 20.982,7.99995 18.5,7.99995 C18.223,7.97295 17.962,7.82895 17.927,7.57795 C17.474,4.39795 14.711,1.99995 11.5,1.99995 C7.916,1.99995 5,4.91595 5,8.49995 C5,8.77995 5.024,9.07795 5.076,9.43795 C5.097,9.58295 5.053,9.72995 4.956,9.83995 C4.858,9.94895 4.7,9.99595 4.573,10.00895 C4.55,10.00895 4.49,10.00295 4.467,9.99895 C2.57,9.99995 1,11.56995 1,13.49995 C1,15.42995 2.57,16.99995 4.5,16.99995 C4.776,16.99995 5,17.22395 5,17.49995 C5,17.77595 4.776,17.99995 4.5,17.99995 C2.019,17.99995 1.73472348e-18,15.98095 1.73472348e-18,13.49995 C1.73472348e-18,11.17995 1.765,9.26495 4.022,9.02495 C4.007,8.84195 4,8.66895 4,8.49995 C4,4.36395 7.365,0.99995 11.5,0.99995 C15.066,0.99995 18.152,3.56095 18.846,7.02295 Z"
})));
CloudSync.displayName = "DecorativeIcon";

const CloudUpload = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M13.9098,14.64535 C13.7228,14.84235 13.3768,14.85135 13.1768,14.65935 L12.0848,13.61135 L12.0848,22.63835 C12.0848,22.94435 11.8718,23.15835 11.5658,23.15835 C11.2608,23.15835 11.0468,22.94435 11.0468,22.63835 L11.0468,13.61135 L9.9548,14.65935 C9.7608,14.84935 9.4128,14.84535 9.2218,14.64535 C9.1258,14.54535 9.0748,14.41435 9.0768,14.27535 C9.0798,14.13635 9.1368,14.00735 9.2368,13.91135 L11.2068,12.01935 C11.2298,11.99735 11.2558,11.98235 11.2728,11.97335 L11.2998,11.95635 C11.3178,11.94335 11.3418,11.92635 11.3728,11.91435 C11.4018,11.90135 11.4308,11.89735 11.4528,11.89435 L11.5138,12.00935 L11.4858,11.88735 C11.5288,11.87835 11.6048,11.87735 11.6468,11.88835 L11.6608,12.01735 L11.6798,11.89435 C11.7018,11.89735 11.7298,11.90135 11.7608,11.91435 C11.7908,11.92635 11.8148,11.94335 11.8328,11.95635 L11.8598,11.97435 C11.8778,11.98335 11.9018,11.99635 11.9268,12.02035 L13.8958,13.91235 C13.9958,14.00735 14.0528,14.13635 14.0558,14.27535 C14.0578,14.41535 14.0068,14.54535 13.9098,14.64535 Z M18.8405,6.75865 C21.7335,6.96765 23.9855,9.32165 23.9855,12.15765 C23.9045,15.18265 21.4095,17.64165 18.4225,17.64165 L13.9305,17.64165 C13.6245,17.64165 13.4115,17.42765 13.4115,17.12165 C13.4115,16.81665 13.6245,16.60365 13.9305,16.60365 L18.4225,16.60365 C20.8735,16.60365 22.8675,14.60965 22.8675,12.15765 C22.8675,9.70565 20.8735,7.71165 18.4225,7.71165 C18.1405,7.71165 17.8245,7.52365 17.8245,7.27165 C17.3635,4.20565 14.6385,1.87965 11.4875,1.87965 C7.9065,1.87965 4.9925,4.75865 4.9925,8.29565 C4.9925,8.60865 4.9925,8.83565 5.0695,9.21665 C5.0715,9.33465 5.0715,9.52965 4.9565,9.64465 C4.8405,9.76065 4.6455,9.76065 4.5525,9.76065 L4.4735,9.76065 C2.5875,9.76065 1.0525,11.29565 1.0525,13.18165 C1.0525,15.06865 2.5875,16.60365 4.4735,16.60365 L9.2015,16.60365 C9.5075,16.60365 9.7205,16.81665 9.7205,17.12165 C9.7205,17.42765 9.5075,17.64165 9.2015,17.64165 L4.4735,17.64165 C2.0565,17.64165 0.0145,15.59965 0.0145,13.18165 C0.0145,10.88265 1.6975,9.02965 4.0335,8.73665 L4.0335,8.21665 C3.9955,6.29265 4.7225,4.46965 6.0795,3.08565 C7.4985,1.63865 9.4185,0.84165 11.4875,0.84165 C14.9985,0.84165 18.0755,3.32465 18.8405,6.75865 Z"
})));
CloudUpload.displayName = "DecorativeIcon";

const Collaboration = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M12,23.4782609 C9.7053913,23.4782609 7.46817391,22.6758261 5.69947826,21.2191304 C5.47721739,21.0354783 5.44486957,20.7078261 5.62852174,20.4845217 C5.81113043,20.2633043 6.13982609,20.2288696 6.36313043,20.4146087 C7.94504348,21.717913 9.94747826,22.4347826 12,22.4347826 C14.0546087,22.4347826 16.058087,21.7168696 17.64,20.4114783 C17.8633043,20.2267826 18.1909565,20.2591304 18.3746087,20.4813913 C18.5582609,20.7036522 18.5269565,21.0323478 18.3046957,21.216 C16.5349565,22.6747826 14.2966957,23.4782609 12,23.4782609 Z M21.1346087,16.2772174 C21.093913,16.2772174 21.0532174,16.2730435 21.0125217,16.2626087 C20.7318261,16.1958261 20.5586087,15.914087 20.6264348,15.6333913 C20.7881739,14.9624348 20.8695652,14.2664348 20.8695652,13.5652174 C20.8695652,9.81286957 18.4946087,6.45286957 14.9603478,5.20173913 C14.6890435,5.10469565 14.5471304,4.80730435 14.6431304,4.53495652 C14.7391304,4.26365217 15.0354783,4.12173913 15.3088696,4.21669565 C19.2594783,5.616 21.9130435,9.37147826 21.9130435,13.5652174 C21.9130435,14.3478261 21.8222609,15.1252174 21.6417391,15.8765217 C21.5843478,16.1154783 21.3704348,16.2772174 21.1346087,16.2772174 Z M2.86434783,16.274087 C2.62852174,16.274087 2.4146087,16.1133913 2.35721739,15.8733913 C2.17773913,15.12 2.08695652,14.3436522 2.08695652,13.5652174 C2.08695652,9.34852174 4.7613913,5.58469565 8.74226087,4.19895652 C9.01252174,4.10608696 9.312,4.248 9.40591304,4.5213913 C9.50086957,4.79373913 9.35791304,5.09113043 9.08556522,5.18608696 C5.52313043,6.42365217 3.13043478,9.792 3.13043478,13.5652174 C3.13043478,14.2622609 3.21182609,14.9582609 3.37147826,15.6302609 C3.43826087,15.912 3.26504348,16.1926957 2.98434783,16.2594783 C2.94469565,16.269913 2.904,16.274087 2.86434783,16.274087 Z M20.3478261,22.4347826 C18.333913,22.4347826 16.6956522,20.7965217 16.6956522,18.7826087 C16.6956522,16.7686957 18.333913,15.1304348 20.3478261,15.1304348 C22.3617391,15.1304348 24,16.7686957 24,18.7826087 C24,20.7965217 22.3617391,22.4347826 20.3478261,22.4347826 Z M20.3478261,16.173913 C18.909913,16.173913 17.7391304,17.3436522 17.7391304,18.7826087 C17.7391304,20.2215652 18.909913,21.3913043 20.3478261,21.3913043 C21.7857391,21.3913043 22.9565217,20.2215652 22.9565217,18.7826087 C22.9565217,17.3436522 21.7857391,16.173913 20.3478261,16.173913 Z M12,7.82608696 C9.98608696,7.82608696 8.34782609,6.18782609 8.34782609,4.17391304 C8.34782609,2.16 9.98608696,0.52173913 12,0.52173913 C14.013913,0.52173913 15.6521739,2.16 15.6521739,4.17391304 C15.6521739,6.18782609 14.013913,7.82608696 12,7.82608696 Z M12,1.56521739 C10.562087,1.56521739 9.39130435,2.73495652 9.39130435,4.17391304 C9.39130435,5.61286957 10.562087,6.7826087 12,6.7826087 C13.437913,6.7826087 14.6086957,5.61286957 14.6086957,4.17391304 C14.6086957,2.73495652 13.437913,1.56521739 12,1.56521739 Z M3.65217391,22.4347826 C1.63826087,22.4347826 0,20.7965217 0,18.7826087 C0,16.7686957 1.63826087,15.1304348 3.65217391,15.1304348 C5.66608696,15.1304348 7.30434783,16.7686957 7.30434783,18.7826087 C7.30434783,20.7965217 5.66608696,22.4347826 3.65217391,22.4347826 Z M3.65217391,16.173913 C2.21426087,16.173913 1.04347826,17.3436522 1.04347826,18.7826087 C1.04347826,20.2215652 2.21426087,21.3913043 3.65217391,21.3913043 C5.09008696,21.3913043 6.26086957,20.2215652 6.26086957,18.7826087 C6.26086957,17.3436522 5.09008696,16.173913 3.65217391,16.173913 Z"
})));
Collaboration.displayName = "DecorativeIcon";

const Compass = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M12,22.9336 C18.029,22.9336 22.934,18.0296 22.934,11.9996 C22.934,5.9716 18.029,1.0666 12,1.0666 C5.972,1.0666 1.066,5.9716 1.066,11.9996 C1.066,18.0296 5.972,22.9336 12,22.9336 Z M12,-0.0004 C18.616,-0.0004 24,5.3836 24,11.9996 C24,18.6166 18.616,23.9996 12,23.9996 C5.383,23.9996 0,18.6166 0,11.9996 C0,5.3836 5.383,-0.0004 12,-0.0004 Z M12,20.4766 C16.674,20.4766 20.477,16.6736 20.477,11.9996 C20.477,7.3266 16.674,3.5236 12,3.5236 C7.326,3.5236 3.524,7.3266 3.524,11.9996 C3.524,16.6736 7.326,20.4766 12,20.4766 Z M12,2.4576 C17.263,2.4576 21.543,6.7376 21.543,11.9996 C21.543,17.2626 17.263,21.5426 12,21.5426 C6.738,21.5426 2.458,17.2626 2.458,11.9996 C2.458,6.7376 6.738,2.4576 12,2.4576 Z M12,12.2856 C12.158,12.2856 12.286,12.1576 12.286,11.9996 C12.286,11.8426 12.158,11.7146 12,11.7146 C11.842,11.7146 11.714,11.8426 11.714,11.9996 C11.714,12.1576 11.842,12.2856 12,12.2856 Z M12,13.3526 C11.254,13.3526 10.648,12.7456 10.648,11.9996 C10.648,11.2546 11.254,10.6476 12,10.6476 C12.746,10.6476 13.353,11.2546 13.353,11.9996 C13.353,12.7456 12.746,13.3526 12,13.3526 Z M15.8984,8.1006 L10.4404,10.4406 L8.1004,15.8986 L13.5594,13.5596 L15.8984,8.1006 Z M16.7054,6.5966 C16.9034,6.5086 17.1344,6.5516 17.2914,6.7086 C17.4464,6.8646 17.4904,7.0946 17.4044,7.2956 L14.4564,14.1756 C14.4014,14.3006 14.3014,14.4006 14.1764,14.4556 L7.2944,17.4056 C7.2284,17.4326 7.1554,17.4476 7.0854,17.4476 C6.9434,17.4476 6.8104,17.3916 6.7094,17.2926 C6.5524,17.1356 6.5084,16.9066 6.5954,16.7046 L9.5444,9.8246 C9.5964,9.7006 9.6954,9.6006 9.8234,9.5446 L16.7054,6.5966 Z"
})));
Compass.displayName = "DecorativeIcon";

const ComputerNetwork = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M1.014 10c.085 1.462.538 2.844 1.294 4.038l.191-.038h2.15c-.382-1.233-.601-2.591-.643-4h-2.993zm0-1h2.993c.042-1.45.263-2.804.628-4h-2.135l-.186-.036c-.748 1.181-1.213 2.558-1.299 4.036zm2.01-5h1.964c.388-.957.876-1.78 1.44-2.426-1.328.517-2.496 1.358-3.404 2.426zm9.548-2.426c.564.646 1.053 1.469 1.44 2.426h1.964c-.908-1.068-2.076-1.909-3.404-2.426zm4.114 3.39l-.186.036h-2.135c.365 1.196.586 2.55.628 4h2.993c-.086-1.477-.551-2.855-1.299-4.036zm2.301 4.036h2.513c1.379 0 2.5 1.122 2.5 2.5v8c0 1.378-1.121 2.5-2.5 2.5h-6.5v1h3.5c.276 0 .5.224.5.5s-.224.5-.5.5h-8c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h3.5v-1h-6.5c-1.379 0-2.5-1.122-2.5-2.5v-1.641c-3.092-1.665-5-4.838-5-8.359 0-5.238 4.262-9.5 9.5-9.5 5.07 0 9.226 3.993 9.487 9zm-13.987 7.702v-1.702h-1.982c.561.657 1.226 1.232 1.982 1.702zm1 .832v.46599999999999997h17v-6.5c0-.827-.673-1.5-1.5-1.5h-14c-.827 0-1.5.673-1.5 1.5v6.034zm-.935-6.603c.08-.343.231-.658.436-.931h-.493c.01.314.029.624.057.931zm-.057-1.931h1.492c.112 0 .216.037.3.1.222-.065.457-.1.7-.1h1.5v-4h-3.294c-.4 1.18-.651 2.548-.698 4zm1.092-5h2.899v-2.945c-1.143.251-2.172 1.351-2.899 2.945zm3.899-2.945v2.945h2.899c-.728-1.595-1.757-2.694-2.899-2.945zm3.294 3.945h-3.294v4h3.992c-.047-1.452-.298-2.82-.698-4zm9.706 14h-17v.5c0 .827.673 1.5 1.5 1.5h14c.827 0 1.5-.673 1.5-1.5v-.5z"
})));
ComputerNetwork.displayName = "DecorativeIcon";

const Contract = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "20",
  height: "24",
  viewBox: "0 0 20 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-2)",
  d: "M17.5,6 L11.5,6 C11.224,6 11,6.224 11,6.5 C11,6.776 11.224,7 11.5,7 L17.5,7 C17.776,7 18,6.776 18,6.5 C18,6.224 17.776,6 17.5,6 Z M22,16.5 C22,15.122 20.878,14 19.5,14 C18.122,14 17,15.122 17,16.5 C17,17.31 17.394,18.025 17.994,18.482 L17.01,23.401 C16.973,23.589 17.046,23.781 17.197,23.897 C17.349,24.014 17.554,24.032 17.724,23.947 L19.5,23.059 L21.276,23.947 C21.347,23.982 21.424,24 21.5,24 C21.607,24 21.715,23.965 21.802,23.897 C21.954,23.78 22.027,23.589 21.989,23.401 L21.005,18.483 C21.606,18.025 22,17.311 22,16.5 Z M19.723,22.052 C19.583,21.982 19.417,21.982 19.276,22.052 L18.191,22.595 L18.924,18.926 C19.11,18.971 19.301,19 19.5,19 C19.699,19 19.889,18.971 20.075,18.927 L20.808,22.595 L19.723,22.052 Z M19.5,18 C18.673,18 18,17.327 18,16.5 C18,15.673 18.673,15 19.5,15 C20.327,15 21,15.673 21,16.5 C21,17.327 20.327,18 19.5,18 Z M15.5,21 L3,21 L3,7 L8.5,7 C8.776,7 9,6.776 9,6.5 L9,1 L19,1 L19,12.5 C19,12.776 19.224,13 19.5,13 C19.776,13 20,12.776 20,12.5 L20,0.5 C20,0.224 19.776,0 19.5,0 L8.5,0 C8.433,0 8.368,0.014 8.307,0.039 C8.278,0.051 8.256,0.073 8.23,0.09 C8.202,0.108 8.17,0.122 8.146,0.146 L2.146,6.146 C2.123,6.169 2.11,6.2 2.092,6.227 C2.074,6.254 2.051,6.277 2.039,6.307 C2.014,6.368 2,6.433 2,6.5 L2,21.5 C2,21.776 2.224,22 2.5,22 L15.5,22 C15.776,22 16,21.776 16,21.5 C16,21.224 15.776,21 15.5,21 Z M8,1.707 L8,6 L3.707,6 L8,1.707 Z M17.5,10 L4.5,10 C4.224,10 4,10.224 4,10.5 C4,10.776 4.224,11 4.5,11 L17.5,11 C17.776,11 18,10.776 18,10.5 C18,10.224 17.776,10 17.5,10 Z M15.5,14 L4.5,14 C4.224,14 4,14.224 4,14.5 C4,14.776 4.224,15 4.5,15 L15.5,15 C15.776,15 16,14.776 16,14.5 C16,14.224 15.776,14 15.5,14 Z M8.5,19 C8.776,19 9,18.776 9,18.5 C9,18.224 8.776,18 8.5,18 L4.5,18 C4.224,18 4,18.224 4,18.5 C4,18.776 4.224,19 4.5,19 L8.5,19 Z"
})));
Contract.displayName = "DecorativeIcon";

const CreditCard = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "16",
  viewBox: "0 0 24 16"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -4)",
  d: "M23,7 L23,6.5 C23,5.673 22.327,5 21.5,5 L2.5,5 C1.673,5 1,5.673 1,6.5 L1,7 L23,7 Z M23,11 L1,11 L1,17.5 C1,18.327 1.673,19 2.5,19 L21.5,19 C22.327,19 23,18.327 23,17.5 L23,11 Z M21.5,20 L2.5,20 C1.122,20 0,18.878 0,17.5 L0,6.5 C0,5.122 1.122,4 2.5,4 L21.5,4 C22.878,4 24,5.122 24,6.5 L24,17.5 C24,18.878 22.878,20 21.5,20 Z M1,10 L23,10 L23,8 L1,8 L1,10 Z M9.5,15 L3.5,15 C3.224,15 3,14.776 3,14.5 C3,14.224 3.224,14 3.5,14 L9.5,14 C9.776,14 10,14.224 10,14.5 C10,14.776 9.776,15 9.5,15 Z M9.5,17 L3.5,17 C3.224,17 3,16.776 3,16.5 C3,16.224 3.224,16 3.5,16 L9.5,16 C9.776,16 10,16.224 10,16.5 C10,16.776 9.776,17 9.5,17 Z M19.5,17 L18.5,17 C17.673,17 17,16.327 17,15.5 L17,14.5 C17,13.673 17.673,13 18.5,13 L19.5,13 C20.327,13 21,13.673 21,14.5 L21,15.5 C21,16.327 20.327,17 19.5,17 Z M18.5,14 C18.224,14 18,14.224 18,14.5 L18,15.5 C18,15.776 18.224,16 18.5,16 L19.5,16 C19.776,16 20,15.776 20,15.5 L20,14.5 C20,14.224 19.776,14 19.5,14 L18.5,14 Z"
})));
CreditCard.displayName = "DecorativeIcon";

const Cronometer = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "20",
  height: "24",
  viewBox: "0 0 20 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-2)",
  d: "M13.0707296,3.415 L13.0707296,4.824 C12.7167296,4.785 12.3617296,4.765 12.0057296,4.765 C11.6507296,4.765 11.2947296,4.785 10.9417296,4.824 L10.9417296,3.415 L13.0707296,3.415 Z M19.4057296,14.378 C19.4057296,14.665 19.6387296,14.897 19.9247296,14.897 L20.5637296,14.897 C20.4937296,16.071 20.2007296,17.185 19.6877296,18.212 L19.1237296,17.887 C19.0027296,17.818 18.8647296,17.802 18.7287296,17.836 C18.5947296,17.871 18.4827296,17.957 18.4137296,18.078 C18.3427296,18.198 18.3267296,18.339 18.3617296,18.473 C18.3987296,18.607 18.4847296,18.719 18.6047296,18.789 L19.1677296,19.111 C18.8417296,19.602 18.4757296,20.053 18.0777296,20.45 C17.6787296,20.85 17.2287296,21.215 16.7387296,21.538 L16.4167296,20.977 C16.2717296,20.728 15.9537296,20.645 15.7057296,20.785 C15.4577296,20.929 15.3717296,21.246 15.5147296,21.495 L15.8407296,22.061 C14.8127296,22.572 13.6987296,22.866 12.5257296,22.936 L12.5257296,22.297 C12.5257296,22.01 12.2927296,21.777 12.0057296,21.777 C11.7187296,21.777 11.4867296,22.01 11.4867296,22.297 L11.4867296,22.936 C10.3137296,22.866 9.19972957,22.572 8.17272957,22.061 L8.49672957,21.495 C8.56572957,21.375 8.58472957,21.234 8.54872957,21.101 C8.51172957,20.967 8.42572957,20.855 8.30572957,20.785 C8.18472957,20.715 8.04572957,20.697 7.91072957,20.733 C7.77672957,20.769 7.66472957,20.856 7.59572957,20.977 L7.27372957,21.538 C6.78272957,21.216 6.33272957,20.851 5.93372957,20.45 C5.53472957,20.051 5.16872957,19.602 4.84572957,19.111 L5.40672957,18.789 C5.52772957,18.719 5.61372957,18.607 5.64972957,18.473 C5.68572957,18.338 5.66772957,18.199 5.59872957,18.078 C5.52872957,17.958 5.41672957,17.871 5.28272957,17.836 C5.14772957,17.798 5.00872957,17.816 4.88872957,17.887 L4.32372957,18.213 C3.81172957,17.184 3.51772957,16.07 3.44772957,14.897 L4.08672957,14.897 C4.37372957,14.897 4.60672957,14.665 4.60672957,14.378 C4.60672957,14.092 4.37372957,13.858 4.08672957,13.858 L3.44772957,13.858 C3.51772957,12.686 3.81172957,11.572 4.32372957,10.544 L4.88872957,10.869 C5.12672957,11.006 5.46072957,10.916 5.59872957,10.677 C5.66772957,10.557 5.68572957,10.417 5.64972957,10.283 C5.61272957,10.148 5.52772957,10.037 5.40672957,9.968 L4.84572957,9.645 C5.16872957,9.155 5.53472957,8.705 5.93372957,8.306 C6.33472957,7.905 6.78372957,7.54 7.27372957,7.218 L7.59572957,7.778 C7.73272957,8.019 8.06572957,8.106 8.30572957,7.971 C8.42572957,7.901 8.51172957,7.79 8.54872957,7.655 C8.58472957,7.521 8.56572957,7.381 8.49672957,7.261 L8.17272957,6.696 C9.19972957,6.184 10.3137296,5.89 11.4867296,5.821 L11.4867296,6.459 C11.4867296,6.746 11.7187296,6.978 12.0057296,6.978 C12.2927296,6.978 12.5257296,6.746 12.5257296,6.459 L12.5257296,5.821 C13.6987296,5.89 14.8117296,6.184 15.8407296,6.696 L15.5147296,7.261 C15.4447296,7.381 15.4267296,7.521 15.4637296,7.656 C15.5007296,7.79 15.5867296,7.901 15.7057296,7.971 C15.9417296,8.106 16.2767296,8.02 16.4167296,7.779 L16.7387296,7.218 C17.2277296,7.54 17.6777296,7.906 18.0777296,8.306 C18.4767296,8.705 18.8417296,9.155 19.1677296,9.645 L18.6047296,9.968 C18.4847296,10.037 18.3977296,10.149 18.3617296,10.283 C18.3267296,10.417 18.3427296,10.557 18.4137296,10.677 C18.5507296,10.918 18.8877296,11.003 19.1237296,10.869 L19.6877296,10.544 C20.2007296,11.572 20.4937296,12.685 20.5637296,13.858 L19.9247296,13.858 C19.6387296,13.858 19.4057296,14.092 19.4057296,14.378 L19.4057296,14.378 Z M8.96272957,2.375 L15.0497296,2.375 L15.0497296,1.039 L8.96272957,1.039 L8.96272957,2.375 Z M18.9767296,7.746 C22.5537296,11.505 22.4907296,17.507 18.8127296,21.186 C16.9977296,23.001 14.5797296,24 12.0057296,24 C9.43172957,24 7.01372957,23.001 5.19872957,21.186 C1.44572957,17.432 1.44572957,11.324 5.19872957,7.571 C6.48972957,6.281 8.11372957,5.391 9.90272957,4.993 L9.90272957,3.415 L8.44272957,3.415 C8.15072957,3.415 7.92272957,3.187 7.92272957,2.895 L7.92272957,0.519 C7.92272957,0.228 8.15072957,0 8.44272957,0 L15.5697296,0 C15.8617296,0 16.0897296,0.228 16.0897296,0.519 L16.0897296,2.895 C16.0897296,3.187 15.8617296,3.415 15.5697296,3.415 L14.1097296,3.415 L14.1097296,4.994 C15.6167296,5.329 17.0317296,6.033 18.2167296,7.036 L19.0397296,6.213 L18.8117296,5.987 C18.6097296,5.785 18.6097296,5.455 18.8117296,5.252 C19.0137296,5.05 19.3437296,5.048 19.5477296,5.252 L20.7357296,6.44 C20.9377296,6.642 20.9377296,6.972 20.7357296,7.175 C20.5377296,7.371 20.1967296,7.37 20.0007296,7.175 L19.7737296,6.948 L18.9767296,7.746 Z M12.5257296,13.7529 L12.5257296,9.2309 C12.5257296,8.9389 12.2967296,8.7109 12.0057296,8.7109 C11.7137296,8.7109 11.4857296,8.9389 11.4857296,9.2309 L11.4857296,13.9819 C11.4857296,14.1279 11.5487296,14.2729 11.6527296,14.3669 L16.0087296,18.3269 C16.1067296,18.4149 16.2287296,18.4609 16.3607296,18.4609 C16.5127296,18.4609 16.6457296,18.4029 16.7457296,18.2939 C16.8397296,18.1899 16.8897296,18.0559 16.8847296,17.9189 C16.8797296,17.7799 16.8197296,17.6519 16.7137296,17.5569 L12.5257296,13.7529 Z"
})));
Cronometer.displayName = "DecorativeIcon";

const CssActivations = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20"
}, /*#__PURE__*/React.createElement("path", {
  transform: "translate(4)",
  d: "M10.4166667,0 C11.565,0 12.5,0.935 12.5,2.08333333 L12.5,2.08333333 L12.5,17.9166667 C12.5,19.065 11.565,20 10.4166667,20 L10.4166667,20 L2.08333333,20 C0.935,20 0,19.065 0,17.9166667 L0,17.9166667 L0,2.08333333 C0,0.935 0.935,0 2.08333333,0 L2.08333333,0 Z M11.6666667,15.8333333 L0.833333333,15.8333333 L0.833333333,17.9166667 C0.833333333,18.6058333 1.39416667,19.1666667 2.08333333,19.1666667 L2.08333333,19.1666667 L10.4166667,19.1666667 C11.1058333,19.1666667 11.6666667,18.6058333 11.6666667,17.9166667 L11.6666667,17.9166667 L11.6666667,15.8333333 Z M6.25,16.6666667 C6.71,16.6666667 7.08333333,17.04 7.08333333,17.5 C7.08333333,17.96 6.71,18.3333333 6.25,18.3333333 C5.79,18.3333333 5.41666667,17.96 5.41666667,17.5 C5.41666667,17.04 5.79,16.6666667 6.25,16.6666667 Z M11.6666667,4.16666667 L0.833333333,4.16666667 L0.833333333,15 L11.6666667,15 L11.6666667,4.16666667 Z M9.02424516,7.12604165 C9.19230069,6.95798612 9.46477255,6.95798612 9.63282808,7.12604165 C9.80088362,7.29409719 9.80088362,7.56656904 9.63282808,7.73462458 L9.63282808,7.73462458 L5.39349432,11.9739583 C5.22543878,12.1420139 4.95296692,12.1420139 4.78491139,11.9739583 L4.78491139,11.9739583 L3.12604165,10.3150886 C2.95798612,10.1470331 2.95798612,9.87456122 3.12604165,9.70650568 C3.29409719,9.53845015 3.56656904,9.53845015 3.73462458,9.70650568 L3.73462458,9.70650568 L5.089,11.061 Z M10.4166667,0.833333333 L2.08333333,0.833333333 C1.39416667,0.833333333 0.833333333,1.39416667 0.833333333,2.08333333 L0.833333333,2.08333333 L0.833333333,3.33333333 L11.6666667,3.33333333 L11.6666667,2.08333333 C11.6666667,1.39416667 11.1058333,0.833333333 10.4166667,0.833333333 L10.4166667,0.833333333 Z M9.6,1.66666667 C9.83,1.66666667 10.0166667,1.85333333 10.0166667,2.08333333 C10.0166667,2.31333333 9.83,2.5 9.6,2.5 C9.37,2.5 9.17916667,2.31333333 9.17916667,2.08333333 C9.17916667,1.85333333 9.36166667,1.66666667 9.59166667,1.66666667 L9.59166667,1.66666667 Z M7.08333333,1.66666667 C7.31333333,1.66666667 7.5,1.85333333 7.5,2.08333333 C7.5,2.31333333 7.31333333,2.5 7.08333333,2.5 L7.08333333,2.5 L5.41666667,2.5 C5.18666667,2.5 5,2.31333333 5,2.08333333 C5,1.85333333 5.18666667,1.66666667 5.41666667,1.66666667 L5.41666667,1.66666667 Z"
})));
CssActivations.displayName = "DecorativeIcon";

const DataLimit = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M16.9519,14.1982 C16.9579,14.3362 16.9089,14.4692 16.8149,14.5692 C16.6269,14.7712 16.2809,14.7872 16.0809,14.5962 L14.8939,13.5032 L14.8939,22.6882 C14.8939,22.9952 14.6809,23.2082 14.3759,23.2082 C14.0689,23.2082 13.8549,22.9952 13.8549,22.6882 L13.8549,13.5712 L12.7629,14.6652 C12.5669,14.8592 12.2239,14.8592 12.0279,14.6652 C11.8259,14.4622 11.8259,14.1312 12.0279,13.9272 L14.0079,11.9492 C14.0309,11.9252 14.0569,11.9102 14.0759,11.9002 L14.1029,11.8822 C14.1189,11.8702 14.1409,11.8532 14.1699,11.8412 C14.2039,11.8262 14.2359,11.8212 14.2629,11.8172 C14.3139,11.8052 14.3409,11.7992 14.3729,11.7992 C14.4019,11.7992 14.4289,11.8042 14.4509,11.8092 L14.4699,11.9382 L14.4849,11.8152 C14.5049,11.8182 14.5319,11.8222 14.5609,11.8332 C14.5919,11.8442 14.6169,11.8622 14.6389,11.8762 L14.6659,11.8932 C14.6809,11.9022 14.7049,11.9142 14.7279,11.9362 L16.7859,13.8352 C16.8889,13.9292 16.9469,14.0582 16.9519,14.1982 Z M11.2366,20.3418 C11.4396,20.1408 11.7686,20.1408 11.9716,20.3418 C12.0696,20.4408 12.1236,20.5708 12.1236,20.7088 C12.1236,20.8488 12.0696,20.9788 11.9716,21.0768 L9.9916,23.0568 C9.8936,23.1548 9.7636,23.2078 9.6246,23.2078 C9.4866,23.2078 9.3556,23.1548 9.2576,23.0568 L7.2786,21.0768 C7.1796,20.9788 7.1256,20.8488 7.1256,20.7088 C7.1256,20.5708 7.1796,20.4408 7.2786,20.3418 C7.4806,20.1408 7.8096,20.1408 8.0126,20.3418 L9.1056,21.4338 L9.1056,12.3958 C9.1056,12.0898 9.3186,11.8768 9.6246,11.8768 C9.9306,11.8768 10.1446,12.0898 10.1446,12.3958 L10.1446,21.4338 L11.2366,20.3418 Z M18.91,6.7358 C21.818,6.9438 24,9.2248 24,12.0788 C23.919,15.1608 21.448,17.6658 18.492,17.6658 L17.225,17.6658 C16.92,17.6658 16.706,17.4518 16.706,17.1468 C16.706,16.8398 16.92,16.6268 17.225,16.6268 L18.492,16.6268 C20.912,16.6268 22.882,14.5858 22.882,12.0788 C22.882,9.6178 20.953,7.6898 18.492,7.6898 C18.21,7.6898 17.893,7.5018 17.893,7.2498 C17.43,4.1688 14.69,1.8308 11.525,1.8308 C7.926,1.8308 4.997,4.7238 4.997,8.2788 C4.997,8.5938 4.997,8.8208 5.075,9.2048 C5.077,9.3228 5.077,9.5178 4.961,9.6328 C4.847,9.7488 4.651,9.7488 4.557,9.7488 L4.478,9.7488 C2.582,9.7488 1.039,11.2918 1.039,13.1878 C1.039,15.0838 2.582,16.6268 4.478,16.6268 L6.774,16.6268 C7.08,16.6268 7.294,16.8398 7.294,17.1468 C7.294,17.4518 7.08,17.6658 6.774,17.6658 L4.478,17.6658 C2.051,17.6658 4.54747351e-13,15.6138 4.54747351e-13,13.1878 C4.54747351e-13,10.8788 1.691,9.0168 4.038,8.7228 L4.038,8.1998 C4,6.2668 4.73,4.4348 6.093,3.0448 C7.518,1.5918 9.447,0.7918 11.525,0.7918 C15.052,0.7918 18.142,3.2858 18.91,6.7358 Z"
})));
DataLimit.displayName = "DecorativeIcon";

const Deals = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M19.5068,6.0258 C19.9288,5.6028 19.9288,4.9158 19.5068,4.4928 C19.2948,4.2808 19.0178,4.1748 18.7398,4.1748 C18.4628,4.1748 18.1858,4.2808 17.9738,4.4928 C17.5508,4.9158 17.5508,5.6028 17.9738,6.0258 C18.3978,6.4478 19.0828,6.4478 19.5068,6.0258 Z M17.2638,3.7828 C18.0768,2.9678 19.4028,2.9678 20.2158,3.7828 C21.0298,4.5968 21.0298,5.9218 20.2158,6.7348 C19.8098,7.1428 19.2748,7.3458 18.7398,7.3458 C18.2058,7.3458 17.6708,7.1428 17.2638,6.7348 C16.4488,5.9218 16.4488,4.5968 17.2638,3.7828 Z M22.997,10.5 L22.997,2.503 C22.994,1.679 22.32,1.006 21.496,1.003 L13.5,1.003 L13.489,1.003 C13.099,1.003 12.721,1.163 12.45,1.441 C12.408,1.483 12.38,1.509 12.353,1.543 L1.433,12.457 C1.159,12.723 1.004,13.096 1.004,13.499 C1.004,13.901 1.16,14.273 1.442,14.549 L9.444,22.554 C9.721,22.837 10.1,22.997 10.489,22.997 L10.497,22.997 C10.855,22.989 11.276,22.839 11.551,22.558 L22.554,11.555 C22.841,11.275 22.997,10.902 22.997,10.5 Z M21.498,0 C22.873,0.004 23.995,1.125 24,2.5 L24,2.501 L24,10.5 C24,11.175 23.736,11.803 23.259,12.269 L12.265,23.264 C11.809,23.73 11.168,24 10.51,24 L10.483,24 C9.831,24 9.191,23.73 8.73,23.26 L0.737,15.264 C0.264,14.803 0,14.174 0,13.499 C0,12.822 0.264,12.194 0.743,11.729 L0.891,11.592 L11.605,0.876 C11.62,0.853 11.672,0.799 11.739,0.733 C12.189,0.27 12.829,0 13.486,0 L13.503,0 L21.498,0 Z"
})));
Deals.displayName = "DecorativeIcon";

const Delivery = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "20",
  viewBox: "0 0 24 20"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -2)",
  d: "M23.9714658,13.332 L21.9454658,7.659 C21.5914658,6.667 20.6444658,6 19.5914658,6 L16.0004658,6 L16.0004658,4.5 C16.0004658,3.122 14.8784658,2 13.5004658,2 L2.50046581,2 C1.12246581,2 0.00046581459,3.122 0.00046581459,4.5 L0.00046581459,18.5 C0.00046581459,19.327 0.674465815,20 1.50046581,20 L3.05146581,20 C3.28346581,21.139 4.29446581,22 5.50046581,22 C6.70646581,22 7.71746581,21.139 7.94946581,20 L17.0504658,20 C17.2824658,21.139 18.2934658,22 19.4994658,22 C20.7054658,22 21.7164658,21.139 21.9484658,20 L22.5004658,20 C23.3274658,20 24.0004658,19.327 23.9994658,18.5 L23.9994658,13.5 C24.0004658,13.443 23.9904658,13.386 23.9714658,13.332 Z M1.00046581,4.5 C1.00046581,3.673 1.67446581,3 2.50046581,3 L13.5004658,3 C14.3284658,3 15.0004658,3.673 15.0004658,4.5 L15.0004658,15 L1.00046581,15 L1.00046581,4.5 Z M5.50046581,21 C4.67446581,21 4.00046581,20.327 4.00046581,19.5 C4.00046581,18.673 4.67446581,18 5.50046581,18 C6.32846581,18 7.00046581,18.673 7.00046581,19.5 C7.00046581,20.327 6.32846581,21 5.50046581,21 Z M19.5004658,21 C18.6734658,21 18.0004658,20.327 18.0004658,19.5 C18.0004658,18.673 18.6734658,18 19.5004658,18 C20.3274658,18 21.0004658,18.673 21.0004658,19.5 C21.0004658,20.327 20.3284658,21 19.5004658,21 Z M23.0004658,18.5 C23.0004658,18.776 22.7764658,19 22.5004658,19 L21.9504658,19 C21.7184658,17.861 20.7074658,17 19.5014658,17 C18.2954658,17 17.2844658,17.861 17.0524658,19 L7.95046581,19 C7.71846581,17.861 6.70746581,17 5.50146581,17 C4.29546581,17 3.28446581,17.861 3.05246581,19 L1.50046581,19 C1.22446581,19 1.00046581,18.776 1.00046581,18.5 L1.00046581,16 L15.5004658,16 C15.7764658,16 16.0004658,15.776 16.0004658,15.5 L16.0004658,7 L19.5904658,7 C20.2224658,7 20.7904658,7.4 21.0034658,7.995 L23.0004658,13.586 L23.0004658,18.5 Z M18.0004658,12 L18.0004658,8.5 C18.0004658,8.224 17.7764658,8 17.5004658,8 C17.2244658,8 17.0004658,8.224 17.0004658,8.5 L17.0004658,12.5 C17.0004658,12.776 17.2244658,13 17.5004658,13 L21.0004658,13 C21.2764658,13 21.5004658,12.776 21.5004658,12.5 C21.5004658,12.224 21.2764658,12 21.0004658,12 L18.0004658,12 Z"
})));
Delivery.displayName = "DecorativeIcon";

const Devices = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M12.9946,6.6162 C12.9946,6.0292 13.4006,5.5532 13.9006,5.5532 L22.0556,5.5532 C22.5546,5.5532 22.9606,6.0292 22.9606,6.6162 L22.9606,6.8882 L12.9946,6.8882 L12.9946,6.6162 Z M12.9946,20.6652 L22.9606,20.6652 L22.9606,7.9282 L12.9946,7.9282 L12.9946,20.6652 Z M12.9946,21.7032 L22.9606,21.7032 L22.9606,21.9762 C22.9606,22.4652 22.6496,22.9612 22.0556,22.9612 L13.9006,22.9612 C13.4006,22.9612 12.9946,22.4832 12.9946,21.8962 L12.9946,21.7032 Z M22.0556,4.5132 C23.1266,4.5132 23.9996,5.4562 23.9996,6.6162 L23.9996,21.9762 C23.9996,23.1302 23.1636,24.0002 22.0556,24.0002 L13.9006,24.0002 C13.3466,24.0002 12.8486,23.7452 12.4946,23.3432 C12.5056,23.3872 12.5196,23.4292 12.5196,23.4802 C12.5196,23.7862 12.3056,24.0002 11.9996,24.0002 L2.1026,24.0002 C0.9236,24.0002 -0.0004,23.0762 -0.0004,21.8962 L-0.0004,2.1032 C-0.0004,0.9242 0.9236,0.0002 2.1026,0.0002 L15.5626,0.0002 C16.7416,0.0002 17.6656,0.9242 17.6656,2.1032 L17.6656,3.6862 C17.6656,3.9922 17.4526,4.2062 17.1466,4.2062 C16.8396,4.2062 16.6266,3.9922 16.6266,3.6862 L16.6266,2.1032 C16.6266,1.5362 16.1296,1.0392 15.5626,1.0392 L2.1026,1.0392 C1.5366,1.0392 1.0386,1.5362 1.0386,2.1032 L1.0386,21.8962 C1.0386,22.4642 1.5366,22.9612 2.1026,22.9612 L11.9996,22.9612 C12.1046,22.9612 12.1936,22.9932 12.2716,23.0392 C12.0736,22.7102 11.9556,22.3182 11.9556,21.8962 L11.9556,6.6162 C11.9556,5.4562 12.8276,4.5132 13.9006,4.5132 L22.0556,4.5132 Z M18.7295,5.7007 L17.9385,5.7007 C17.6515,5.7007 17.4175,5.9337 17.4175,6.2207 C17.4175,6.5067 17.6515,6.7397 17.9385,6.7397 L18.7295,6.7397 C19.0165,6.7397 19.2505,6.5067 19.2505,6.2207 C19.2505,5.9337 19.0165,5.7007 18.7295,5.7007 Z M15.5625,4.2061 C15.2565,4.2061 15.0435,3.9931 15.0435,3.6861 L15.0435,2.6231 L2.6225,2.6231 L2.6225,19.7941 L10.8125,19.7941 C11.1185,19.7941 11.3325,20.0081 11.3325,20.3131 C11.3325,20.6191 11.1185,20.8331 10.8125,20.8331 L2.1035,20.8331 C1.7975,20.8331 1.5835,20.6191 1.5835,20.3131 L1.5835,2.1031 C1.5835,1.7971 1.7975,1.5831 2.1035,1.5831 L15.5625,1.5831 C15.8695,1.5831 16.0825,1.7971 16.0825,2.1031 L16.0825,3.6861 C16.0825,3.9931 15.8695,4.2061 15.5625,4.2061 Z M8.1855,21.249 C8.5415,20.895 9.1235,20.893 9.4805,21.249 C9.8365,21.607 9.8365,22.186 9.4805,22.545 C9.3025,22.723 9.0675,22.811 8.8335,22.811 C8.5985,22.811 8.3645,22.723 8.1855,22.545 C7.8295,22.186 7.8295,21.607 8.1855,21.249 Z"
})));
Devices.displayName = "DecorativeIcon";

const Diagram = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M1.4385,22.958 L8.3135,22.958 L8.3135,16.083 L1.4385,16.083 L1.4385,22.958 Z M8.5635,7.917 L15.4385,7.917 L15.4385,1.042 L8.5635,1.042 L8.5635,7.917 Z M15.6875,22.958 L22.5615,22.958 L22.5615,16.083 L15.6875,16.083 L15.6875,22.958 Z M23.0835,15.041 L19.6455,15.041 L19.6455,14.374 C19.6455,12.949 18.5715,11.875 17.1465,11.875 L12.5215,11.875 L12.5215,8.958 L15.9595,8.958 C16.2665,8.958 16.4795,8.744 16.4795,8.438 L16.4795,0.521 C16.4795,0.214 16.2665,0 15.9595,0 L8.0425,0 C7.7355,0 7.5215,0.214 7.5215,0.521 L7.5215,8.438 C7.5215,8.744 7.7355,8.958 8.0425,8.958 L11.4795,8.958 L11.4795,11.875 L6.8545,11.875 C5.4295,11.875 4.3545,12.949 4.3545,14.374 L4.3545,15.041 L0.9175,15.041 C0.6105,15.041 0.3965,15.255 0.3965,15.562 L0.3965,23.479 C0.3965,23.786 0.6105,24 0.9175,24 L8.8335,24 C9.1405,24 9.3545,23.786 9.3545,23.479 L9.3545,15.562 C9.3545,15.255 9.1405,15.041 8.8335,15.041 L5.3965,15.041 L5.3965,14.374 C5.3965,13.571 6.0505,12.917 6.8545,12.917 L17.1465,12.917 C17.9495,12.917 18.6035,13.571 18.6035,14.374 L18.6035,15.041 L15.1675,15.041 C14.8605,15.041 14.6455,15.255 14.6455,15.562 L14.6455,23.479 C14.6455,23.786 14.8605,24 15.1675,24 L23.0835,24 C23.3905,24 23.6035,23.786 23.6035,23.479 L23.6035,15.562 C23.6035,15.255 23.3905,15.041 23.0835,15.041 L23.0835,15.041 Z"
})));
Diagram.displayName = "DecorativeIcon";

const Diamond = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M7.99 5.75h8.02l-2.45-3.833h-3.12L7.99 5.75zm.078 1L12 21.346 15.932 6.75H8.068zm13.387-1l-4.773-3.833H14.46l2.41 3.77c.013.02.023.041.032.063h4.553zm.313 1h-5.053L13.01 20.496 21.768 6.75zm-19.223-1h4.553a.376.376 0 0 1 .033-.063l2.409-3.77H7.318L2.545 5.75zm-.313 1l8.755 13.743L7.285 6.75H2.232zM13.67 1h3.157a.38.38 0 0 1 .235.082l5.793 4.631a.39.39 0 0 1 .083.515l-10.62 16.596a.378.378 0 0 1-.636 0L1.062 6.228a.39.39 0 0 1 .083-.515l5.793-4.631A.379.379 0 0 1 7.173 1h6.497z",
  fillRule: "nonzero"
})));
Diamond.displayName = "DecorativeIcon";

const Direction = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "22",
  height: "24",
  viewBox: "0 0 22 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-1)",
  d: "M17.0135,2.895 C17.0135,2.728 17.0135,2.606 16.8985,2.491 L15.4465,1.04 L21.5155,1.04 L21.5155,7.109 L20.0655,5.658 C19.9645,5.558 19.8345,5.503 19.7005,5.503 L19.6995,5.503 C19.5645,5.503 19.4355,5.559 19.3355,5.658 L13.0005,11.992 L12.9665,12.029 L12.9655,12.08 C12.9655,12.1 12.9445,12.162 12.9315,12.199 C12.9085,12.27 12.8865,12.336 12.8865,12.396 L12.8865,22.961 L9.1735,22.961 L9.0965,10.707 L16.8195,3.3 C16.9055,3.212 17.0135,3.105 17.0135,2.895 L17.0135,2.895 Z M8.6615,9.695 L2.6545,3.687 L5.0925,1.249 L11.1525,7.309 L8.6615,9.695 Z M22.1155,0 L14.1985,0 C13.8875,0 13.7775,0.133 13.6915,0.38 C13.5815,0.533 13.6855,0.817 13.7925,0.924 L15.7625,2.893 L11.8975,6.596 L5.4175,0.116 L5.3855,0.093 C5.1945,-0.002 4.8945,-0.012 4.6885,0.195 L1.5215,3.362 C1.3135,3.57 1.3135,3.883 1.5215,4.091 L8.1355,10.706 L8.1355,23.481 C8.1355,23.787 8.3495,24 8.6555,24 L13.4065,24 C13.6125,24 13.8905,23.817 13.9915,23.615 L14.0045,12.685 L19.8195,6.871 L21.7905,8.842 C21.9125,8.964 22.1275,9.046 22.3285,8.944 C22.5175,8.851 22.6345,8.656 22.6345,8.437 L22.6345,0.52 C22.6345,0.214 22.4205,0 22.1155,0 L22.1155,0 Z"
})));
Direction.displayName = "DecorativeIcon";

const Document = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "18",
  height: "24",
  viewBox: "0 0 18 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-3)",
  d: "M20.5,24 L3.5,24 C3.224,24 3,23.776 3,23.5 L3,6.5 C3,6.367 3.053,6.24 3.146,6.146 L9.146,0.146 C9.24,0.053 9.367,0 9.5,0 L20.5,0 C20.776,0 21,0.224 21,0.5 L21,23.5 C21,23.776 20.776,24 20.5,24 Z M4,7 L4,23 L20,23 L20,1 L10,1 L10,6.5 C10,6.776 9.776,7 9.5,7 L4,7 Z M4.707,6 L9,6 L9,1.707 L4.707,6 Z M17.5,6 L12.5,6 C12.224,6 12,5.776 12,5.5 C12,5.224 12.224,5 12.5,5 L17.5,5 C17.776,5 18,5.224 18,5.5 C18,5.776 17.776,6 17.5,6 Z M17.5,9 L6.5,9 C6.224,9 6,8.776 6,8.5 C6,8.224 6.224,8 6.5,8 L17.5,8 C17.776,8 18,8.224 18,8.5 C18,8.776 17.776,9 17.5,9 Z M17.5,12 L6.5,12 C6.224,12 6,11.776 6,11.5 C6,11.224 6.224,11 6.5,11 L17.5,11 C17.776,11 18,11.224 18,11.5 C18,11.776 17.776,12 17.5,12 Z M17.5,15 L6.5,15 C6.224,15 6,14.776 6,14.5 C6,14.224 6.224,14 6.5,14 L17.5,14 C17.776,14 18,14.224 18,14.5 C18,14.776 17.776,15 17.5,15 Z M17.5,18 L6.5,18 C6.224,18 6,17.776 6,17.5 C6,17.224 6.224,17 6.5,17 L17.5,17 C17.776,17 18,17.224 18,17.5 C18,17.776 17.776,18 17.5,18 Z M17.5,21 L6.5,21 C6.224,21 6,20.776 6,20.5 C6,20.224 6.224,20 6.5,20 L17.5,20 C17.776,20 18,20.224 18,20.5 C18,20.776 17.776,21 17.5,21 Z"
})));
Document.displayName = "DecorativeIcon";

const Donate = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M1.485 11.993c.944.057 4.086.298 4.871 1.044a.458.458 0 01.141.374 9.36 9.36 0 01-.034.327l-.024.172 7.95 1.771c1.281.322 1.957.945 2.138 1.98l.027.187 2.971-.744a2.993 2.993 0 013.426 1.581.46.46 0 01-.155.59l-.065.035-5.04 2.3c-2.395.981-3.484 1.39-4.413 1.39-.531 0-1.01-.134-1.65-.369l-.249-.093-6.568-2.195c-.093.3-.156.491-.168.528a.457.457 0 01-.351.31l-.084.008h-2.75a.459.459 0 01-.45-.377L1 20.73v-8.278a.457.457 0 01.485-.458zm12.693 4.584l-7.894-1.76c-.273 1.4-.732 3.06-1.096 4.29l-.107.356 6.605 2.21c1.608.612 1.776.673 5.343-.787l.296-.122 4.544-2.072a2.077 2.077 0 00-1.96-.73l-.162.033-3.512.881h-.005l-1.229.31a3.193 3.193 0 01-1.2.069l-.207-.035-3.977-.799a.458.458 0 01-.359-.54.457.457 0 01.457-.37l.082.008 3.975.8c.265.053.54.057.807.014l.198-.04.88-.22c-.052-.787-.415-1.19-1.296-1.446l-.183-.05-7.894-1.76zM1.915 12.945v7.324h1.958c.341-1.08 1.44-4.658 1.683-6.672-.578-.28-2.168-.536-3.64-.652zM17.771 1.042c1.412.24 2.477 1.609 2.477 3.185 0 .831-.258 1.55-.732 2.113l-.135.149-4.302 4.487a.46.46 0 01-.59.059l-.07-.06-4.302-4.486a3.118 3.118 0 01-.868-2.176c0-1.662 1.067-3.031 2.48-3.271a2.924 2.924 0 012.386.655c.252.214.465.465.635.744.169-.28.382-.53.635-.744a2.916 2.916 0 012.386-.655zm-5.541.877c-.115 0-.232.01-.348.03-.978.165-1.716 1.145-1.716 2.278 0 .586.176 1.094.488 1.484l.123.14 3.972 4.142 3.973-4.142c.388-.404.61-.964.61-1.538 0-1.218-.738-2.2-1.715-2.363a1.988 1.988 0 00-1.641.449 2.203 2.203 0 00-.77 1.689.459.459 0 11-.916 0c0-.66-.28-1.275-.767-1.69a1.99 1.99 0 00-1.293-.48z"
})));
Donate.displayName = "DecorativeIcon";

const Download = props => {
  return /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
    width: "24",
    height: "24",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    d: "M23.505,15.8693 C23.778,15.8693 24,16.0903 24,16.3633 L24,21.9183 C24,23.0663 23.067,24.0003 21.918,24.0003 L2.082,24.0003 C0.934,24.0003 -9.09494702e-13,23.0663 -9.09494702e-13,21.9183 L-9.09494702e-13,16.3633 C-9.09494702e-13,16.0903 0.221,15.8693 0.495,15.8693 C0.769,15.8693 0.99,16.0903 0.99,16.3633 L0.99,21.9183 C0.99,22.5203 1.48,23.0113 2.082,23.0113 L21.918,23.0113 C22.521,23.0113 23.011,22.5203 23.011,21.9183 L23.011,16.3633 C23.011,16.0903 23.232,15.8693 23.505,15.8693 Z M11.6642,16.7277 L6.5062,11.9667 C6.3062,11.7817 6.2932,11.4687 6.4792,11.2677 C6.6642,11.0667 6.9772,11.0547 7.1782,11.2397 L11.5052,15.2337 L11.5052,0.4947 C11.5052,0.2217 11.7262,-0.0003 12.0002,-0.0003 C12.2732,-0.0003 12.4952,0.2217 12.4952,0.4947 L12.4952,15.2337 L16.8222,11.2397 C17.0212,11.0547 17.3362,11.0687 17.5202,11.2677 C17.7062,11.4687 17.6932,11.7817 17.4922,11.9667 L12.3362,16.7277 C12.3132,16.7487 12.2862,16.7587 12.2602,16.7747 C12.2352,16.7897 12.2122,16.8107 12.1852,16.8217 C12.1252,16.8457 12.0632,16.8587 12.0002,16.8587 C11.9372,16.8587 11.8752,16.8457 11.8152,16.8217 C11.7882,16.8107 11.7652,16.7897 11.7402,16.7747 C11.7142,16.7587 11.6872,16.7487 11.6642,16.7277 Z"
  })));
};
Download.displayName = "DecorativeIcon";

const Email = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "18",
  viewBox: "0 0 24 18"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -3)",
  d: "M2.103,4.206 L21.896,4.206 C22.483,4.206 22.961,4.684 22.961,5.27 L22.961,6.554 L12.778,12.46 C12.299,12.737 11.702,12.737 11.223,12.461 L1.039,6.554 L1.039,5.27 C1.039,4.684 1.517,4.206 2.103,4.206 M13.298,13.36 L22.961,7.756 L22.961,18.729 C22.961,19.316 22.483,19.794 21.896,19.794 L2.103,19.794 C1.517,19.794 1.039,19.316 1.039,18.729 L1.039,7.756 L10.703,13.361 C11.492,13.815 12.51,13.813 13.298,13.36 M21.896,3.167 L2.103,3.167 C0.943,3.167 0,4.11 0,5.27 L0,18.729 C0,19.89 0.943,20.833 2.103,20.833 L21.896,20.833 C23.057,20.833 24,19.89 24,18.729 L24,5.27 C24,4.11 23.057,3.167 21.896,3.167"
})));
Email.displayName = "DecorativeIcon";

const Escalations = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20"
}, /*#__PURE__*/React.createElement("path", {
  transform: "translate(1)",
  d: "M4.474 1.892c.74 0 1.342.602 1.342 1.342 0 1.048.164 2.075.487 3.053a1.351 1.351 0 01-.332 1.37L4.553 9.541c1.166 2.198 2.583 3.614 4.798 4.796l1.93-1.457c.313-.319.853-.445 1.327-.281.973.321 2 .485 3.049.485.74 0 1.342.602 1.342 1.342v3.123c.001.74-.601 1.343-1.341 1.343C7.025 18.892 0 11.867 0 3.234c0-.74.602-1.342 1.342-1.342zm0 .894H1.342c-.246 0-.447.2-.447.448 0 8.14 6.623 14.763 14.763 14.763.246 0 .447-.2.447-.448v-3.122a.448.448 0 00-.447-.448c-1.144 0-2.266-.178-3.336-.532a.446.446 0 00-.455.107l-2.203 1.67a.445.445 0 01-.473.04c-2.627-1.344-4.238-2.957-5.564-5.563a.447.447 0 01.041-.473l1.628-2.156c.165-.17.207-.343.155-.508a10.65 10.65 0 01-.53-3.33.448.448 0 00-.447-.448zm13.992 4.65a.438.438 0 11.49.729l-3.92 2.63a.44.44 0 01-.676-.28h.001l-.099-.853-2.378 1.378a.438.438 0 01-.6-.16.439.439 0 01.16-.6l2.85-1.651a.44.44 0 01.651.295l.151.773zm-3.982-4.364a.44.44 0 01.781.4l-2.152 4.2a.438.438 0 01-.727.083l-.5-.698-1.411 2.359a.44.44 0 01-.754-.451l1.692-2.827a.439.439 0 01.713-.057l.506.603zM10.984 0l.075.004.079.019a.437.437 0 01.304.398l-.004.08-.661 4.672a.439.439 0 01-.66.316l-.7-.496-.564 2.69a.439.439 0 01-.86-.18l.675-3.224a.44.44 0 01.655-.287l.666.478.579-4.093a.439.439 0 01.34-.367l.077-.01z"
})));
Escalations.displayName = "DecorativeIcon";

const FavouriteNetwork = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M6.843 17h4.157v-5h-4.994c.047 1.814.349 3.524.836 5zm.374 1c.917 2.182 2.273 3.681 3.783 3.955v-3.955h-3.783zm-4.658-1h3.207c-.449-1.489-.718-3.184-.76-5h-3.994c.086 1.827.641 3.533 1.547 5zm.7 1c1.264 1.599 2.982 2.823 4.958 3.475-.847-.86-1.568-2.049-2.112-3.475h-2.847zm17.182-12h-3.207c.449 1.489.718 3.184.76 5h3.994c-.086-1.827-.641-3.533-1.547-5zm-.7-1c-1.264-1.599-2.982-2.823-4.958-3.475.847.86 1.568 2.049 2.112 3.475h2.847zm-3.584 1h-4.157v5h4.994c-.047-1.814-.349-3.524-.837-5zm-.374-1c-.918-2.182-2.273-3.681-3.783-3.955v3.955h3.783zm-8.94 1c-.488 1.476-.79 3.186-.837 5h4.994v-5h-4.157zm.374-1h3.783v-3.955c-1.51.274-2.866 1.773-3.783 3.955zm-4.658 1c-.906 1.467-1.461 3.173-1.547 5h3.994c.042-1.816.311-3.511.76-5h-3.207zm.7-1h2.847c.543-1.426 1.265-2.615 2.112-3.475-1.976.652-3.695 1.876-4.958 3.475zm18.728 7h-9.987v4.216h3.767l1.258-3.872c.134-.412.817-.412.951 0l1.258 3.872h4.071c.217 0 .409.14.476.346.067.206-.006.432-.182.559l-3.298 2.397 1.178 3.834c.063.206-.013.43-.188.555-.088.062-.19.093-.291.093-.104 0-.208-.032-.295-.097l-3.205-2.349-3.205 2.349c-.173.128-.41.129-.585.004-.176-.125-.251-.349-.188-.555l1.178-3.834-2.7-1.962v4.431c.22-.011.437-.029.654-.053.266-.028.521.168.551.443.03.275-.168.521-.443.551-.445.048-.857.072-1.262.072-6.341 0-11.5-5.159-11.5-11.5s5.158-11.5 11.5-11.5 11.5 5.159 11.5 11.5c0 .405-.023.818-.072 1.262-.03.274-.281.473-.551.443-.275-.03-.473-.277-.443-.551.024-.216.042-.434.053-.654zm-4.487 8.434c.104 0 .208.032.295.097l2.284 1.674-.84-2.734c-.063-.205.011-.426.184-.551l2.342-1.702h-2.896c-.217 0-.409-.14-.476-.346l-.895-2.753-.895 2.753c-.067.206-.259.346-.476.346h-2.896l2.342 1.702c.173.125.247.347.184.551l-.84 2.734 2.284-1.674c.091-.064.195-.097.299-.097z"
})));
FavouriteNetwork.displayName = "DecorativeIcon";

const Files = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "20",
  height: "24",
  viewBox: "0 0 20 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-2)",
  d: "M20.5,23 L6.5,23 L6.5,21 L18,21 C18.276,21 18.5,20.776 18.5,20.5 L18.5,4 L20.5,4 L20.5,23 Z M3.5,7 L9,7 C9.276,7 9.5,6.776 9.5,6.5 L9.5,1 L17.5,1 L17.5,20 L3.5,20 L3.5,7 Z M8.5,1.707 L8.5,6 L4.207,6 L8.5,1.707 Z M21,3 L18.5,3 L18.5,0.5 C18.5,0.224 18.276,0 18,0 L9,0 C8.933,0 8.868,0.014 8.807,0.039 C8.778,0.051 8.756,0.073 8.73,0.09 C8.702,0.108 8.67,0.122 8.646,0.146 L2.646,6.146 C2.623,6.169 2.61,6.2 2.592,6.227 C2.574,6.254 2.552,6.277 2.539,6.307 C2.514,6.368 2.5,6.433 2.5,6.5 L2.5,20.5 C2.5,20.776 2.724,21 3,21 L5.5,21 L5.5,23.5 C5.5,23.776 5.724,24 6,24 L21,24 C21.276,24 21.5,23.776 21.5,23.5 L21.5,3.5 C21.5,3.224 21.276,3 21,3 L21,3 Z"
})));
Files.displayName = "DecorativeIcon";

const Fingerprint = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "18",
  height: "24",
  viewBox: "0 0 18 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-3)",
  d: "M17.0000832,2 C16.9310832,2 16.8600832,1.985 16.7930832,1.955 C15.4010832,1.321 13.7890832,1 12.0000832,1 C10.1990832,1 8.5870832,1.321 7.2090832,1.954 C6.9580832,2.069 6.6610832,1.96 6.5460832,1.709 C6.4310832,1.458 6.5410832,1.161 6.7910832,1.046 C8.3010832,0.352 10.0530832,0 12.0000832,0 C13.9330832,0 15.6850832,0.352 17.2070832,1.045 C17.4580832,1.159 17.5690832,1.456 17.4550832,1.707 C17.3720832,1.892 17.1900832,2 17.0000832,2 Z M5.0000832,6 C4.8740832,6 4.7470832,5.952 4.6490832,5.855 C4.4530832,5.662 4.4510832,5.345 4.6450832,5.148 C6.6790832,3.089 9.2220832,2 11.9980832,2 C14.7850832,2 17.3300832,3.089 19.3570832,5.149 C19.5510832,5.345 19.5480832,5.663 19.3510832,5.856 C19.1540832,6.049 18.8370832,6.046 18.6440832,5.85 C16.8090832,3.985 14.5100832,3 11.9980832,3 C9.4950832,3 7.1990832,3.986 5.3560832,5.852 C5.2580832,5.95 5.1290832,6 5.0000832,6 Z M19.9980832,13 C19.7220832,13 19.4980832,12.776 19.4980832,12.5 C19.4980832,8.364 16.1340832,5 11.9980832,5 C11.3680832,5 10.7420832,5.078 10.1400832,5.231 C9.8700832,5.3 9.5990832,5.139 9.5310832,4.87 C9.4630832,4.603 9.6240832,4.331 9.8920832,4.263 C10.5760832,4.088 11.2840832,4 11.9980832,4 C16.6850832,4 20.4980832,7.813 20.4980832,12.5 C20.4980832,12.776 20.2740832,13 19.9980832,13 Z M4.0000832,13 C3.9980832,13 3.9950832,13 3.9920832,13 C3.7160832,12.995 3.4950832,12.769 3.5000832,12.492 C3.5360832,10.213 4.4130832,8.092 5.9700832,6.518 C6.4970832,5.984 7.0900832,5.523 7.7300832,5.148 C7.9670832,5.009 8.2740832,5.088 8.4140832,5.327 C8.5530832,5.565 8.4730832,5.872 8.2350832,6.012 C7.6710832,6.342 7.1480832,6.749 6.6810832,7.222 C5.3060832,8.611 4.5320832,10.489 4.5000832,12.508 C4.4960832,12.781 4.2730832,13 4.0000832,13 Z M4.7190832,17.5 C4.6360832,17.5 4.5520832,17.479 4.4740832,17.436 C4.2330832,17.301 4.1480832,16.996 4.2830832,16.755 L4.5640832,16.255 C5.1660832,15.015 5.5020832,13.725 5.4990832,12.65 C5.4990832,10.828 6.1710832,9.16 7.3920832,7.925 C8.6180832,6.684 10.2540832,6 11.9980832,6 C13.8750832,6 15.6610832,6.813 16.8980832,8.232 C17.0790832,8.441 17.0580832,8.756 16.8500832,8.938 C16.6420832,9.118 16.3270832,9.098 16.1440832,8.89 C15.0970832,7.688 13.5850832,7 11.9980832,7 C10.5240832,7 9.1410832,7.578 8.1030832,8.628 C7.0690832,9.674 6.4990832,11.093 6.4990832,12.623 C6.5030832,13.889 6.1400832,15.297 5.4500832,16.719 L5.1550832,17.245 C5.0630832,17.408 4.8940832,17.5 4.7190832,17.5 Z M18.9480832,18.91 C18.7340832,18.91 18.5350832,18.771 18.4690832,18.556 L17.8970832,16.672 C17.5490832,15.091 17.5200832,13.648 17.5030832,12.785 L17.4970832,12.513 C17.4970832,11.873 17.3920832,11.257 17.1840832,10.67 C17.0920832,10.409 17.2280832,10.124 17.4880832,10.031 C17.7490832,9.94 18.0350832,10.076 18.1260832,10.336 C18.3720832,11.03 18.4970832,11.759 18.4970832,12.5 L18.5030832,12.766 C18.5200832,13.591 18.5470832,14.973 18.8640832,16.419 L19.4270832,18.265 C19.5070832,18.53 19.3580832,18.809 19.0940832,18.889 C19.0450832,18.903 18.9960832,18.91 18.9480832,18.91 Z M17.4900832,21.222 C17.2770832,21.222 17.0790832,21.085 17.0120832,20.87 L16.5500832,19.386 C15.7180832,16.789 15.5330832,13.965 15.4970832,12.513 C15.4970832,10.571 13.9270832,9 11.9970832,9 C10.0680832,9 8.4990832,10.602 8.4990832,12.57 C8.5020832,13.396 8.3390832,16.299 6.1140832,19.508 C5.9560832,19.734 5.6430832,19.789 5.4180832,19.634 C5.1910832,19.477 5.1340832,19.165 5.2920832,18.938 C7.4030832,15.893 7.5000832,13.113 7.4990832,12.587 C7.4990832,10.05 9.5170832,8 11.9980832,8 C14.4790832,8 16.4980832,10.019 16.4980832,12.5 C16.5260832,13.613 16.6800832,16.511 17.5040832,19.085 L17.9680832,20.573 C18.0500832,20.837 17.9030832,21.117 17.6390832,21.199 C17.5890832,21.215 17.5400832,21.222 17.4900832,21.222 Z M10.0070832,24 C9.9010832,24 9.7940832,23.966 9.7020832,23.896 C9.4830832,23.727 9.4430832,23.414 9.6110832,23.195 C13.5150832,18.123 13.5110832,13.071 13.4980832,12.511 C13.4980832,11.672 12.8240832,10.999 11.9970832,10.999 C11.1700832,10.999 10.4970832,11.672 10.4970832,12.499 C10.5030832,12.66 10.6250832,16.937 7.2320832,21.353 C7.0640832,21.572 6.7510832,21.613 6.5310832,21.445 C6.3120832,21.277 6.2710832,20.963 6.4390832,20.744 C9.6140832,16.611 9.5040832,12.683 9.4980832,12.517 C9.4980832,11.12 10.6190832,9.998 11.9980832,9.998 C13.3770832,9.998 14.4980832,11.119 14.4980832,12.498 C14.5130832,13.08 14.5240832,18.451 10.4040832,23.803 C10.3060832,23.933 10.1570832,24 10.0070832,24 Z M11.8340832,14.998 C11.8080832,14.998 11.7810832,14.996 11.7540832,14.992 C11.4820832,14.948 11.2960832,14.691 11.3400832,14.419 C11.5260832,13.26 11.4980832,12.529 11.4980832,12.522 C11.4860832,12.247 11.7000832,12.013 11.9760832,12.001 C12.2600832,12.01 12.4850832,12.201 12.4970832,12.478 C12.4980832,12.511 12.5320832,13.308 12.3280832,14.578 C12.2880832,14.823 12.0760832,14.998 11.8340832,14.998 Z M8.1950832,23.053 C8.0860832,23.053 7.9750832,23.017 7.8830832,22.944 C7.6670832,22.771 7.6320832,22.457 7.8040832,22.241 C9.2280832,20.46 10.2670832,18.485 10.8930832,16.373 C10.9720832,16.108 11.2510832,15.96 11.5150832,16.035 C11.7800832,16.113 11.9310832,16.391 11.8520832,16.656 C11.1890832,18.893 10.0900832,20.982 8.5850832,22.866 C8.4870832,22.988 8.3420832,23.053 8.1950832,23.053 Z M12.3730832,24 C12.2810832,24 12.1880832,23.975 12.1050832,23.922 C11.8720832,23.775 11.8030832,23.465 11.9510832,23.232 C13.2280832,21.222 14.3420832,18.604 14.3530832,18.578 C14.4350832,18.384 14.6210832,18.25 14.8420832,18.274 C15.0530832,18.286 15.2330832,18.429 15.2930832,18.632 C15.2940832,18.634 15.5180832,19.394 15.7580832,20.111 L16.3600832,22.028 C16.4430832,22.291 16.2960832,22.572 16.0330832,22.655 C15.7680832,22.739 15.4880832,22.59 15.4060832,22.327 L14.8070832,20.42 C14.7800832,20.341 14.7540832,20.26 14.7270832,20.18 C14.2690832,21.154 13.5680832,22.552 12.7940832,23.77 C12.7000832,23.918 12.5380832,24 12.3730832,24 Z"
})));
Fingerprint.displayName = "DecorativeIcon";

const Firewall = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "22",
  height: "24",
  viewBox: "0 0 22 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-1)",
  d: "M21.773,3.937 L21.773,14.533 C21.773,18.009 16.007,21.71 12,22.955 C7.992,21.71 2.226,18.009 2.226,14.533 L2.226,3.937 L12,1.044 L21.773,3.937 Z M22.407,3.014 C22.619,3.118 22.812,3.312 22.812,3.528 L22.812,14.533 C22.812,18.968 15.844,22.884 12.114,23.995 L12.097,24 L11.885,23.995 C8.155,22.884 1.188,18.968 1.188,14.533 L1.188,3.528 C1.188,3.387 1.24,3.131 1.588,3.015 L11.92,0 L12.114,0.005 L22.407,3.014 Z M6.7823,11.2788 C6.5743,11.0708 6.2603,11.0708 6.0533,11.2788 C5.8453,11.4868 5.8453,11.7998 6.0533,12.0078 L10.0113,15.9678 C10.1273,16.0818 10.3223,16.0818 10.4163,16.0818 C10.5203,16.0818 10.6623,16.0818 10.7083,15.9728 C10.7143,15.9598 10.7203,15.9378 10.7193,15.9088 L17.7873,8.8408 C17.8873,8.7408 17.9433,8.6118 17.9433,8.4758 C17.9433,8.3408 17.8873,8.2118 17.7873,8.1118 C17.5793,7.9048 17.2683,7.9038 17.0583,8.1118 L10.3363,14.8338 L6.7823,11.2788 Z"
})));
Firewall.displayName = "DecorativeIcon";

const Flag = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "18",
  height: "24",
  viewBox: "0 0 18 24"
}, /*#__PURE__*/React.createElement("path", {
  transform: "translate(-3)",
  d: "M4,24 C3.724,24 3.5,23.776 3.5,23.5 L3.5,0.5 C3.5,0.224 3.724,0 4,0 C4.276,0 4.5,0.224 4.5,0.5 L4.5,23.5 C4.5,23.776 4.276,24 4,24 Z M13.5,3 L13.5,6.5 C13.5,6.776 13.276,7 13,7 C12.724,7 12.5,6.776 12.5,6.5 L12.5,2.5 L12.5,1.5 C12.5,1.224 12.276,1 12,1 L4,1 C3.724,1 3.5,0.776 3.5,0.5 C3.5,0.224 3.724,0 4,0 L12,0 C12.827,0 13.5,0.673 13.5,1.5 L13.5,2 L20,2 C20.276,2 20.5,2.224 20.5,2.5 L20.5,13.5 C20.5,13.776 20.276,14 20,14 L14,14 C13.173,14 12.5,13.327 12.5,12.5 C12.5,12.224 12.276,12 12,12 L4,12 C3.724,12 3.5,11.776 3.5,11.5 C3.5,11.224 3.724,11 4,11 L12,11 C12.827,11 13.5,11.673 13.5,12.5 C13.5,12.776 13.724,13 14,13 L19.5,13 L19.5,3 L13.5,3 Z"
})));
Flag.displayName = "DecorativeIcon";

const Gift = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M23.0045,10.0225 C23.0045,10.6235 22.5145,11.1125 21.9125,11.1125 L21.1205,11.1125 L2.0865,11.1125 C1.4845,11.1125 0.9955,10.6235 0.9955,10.0225 L0.9955,6.8495 C0.9955,6.2485 1.4845,5.7595 2.0865,5.7595 L10.2475,5.7595 C9.4005,6.2025 8.4815,6.7305 7.9495,7.1875 C7.7415,7.3655 7.7175,7.6785 7.8955,7.8855 C7.9935,8.0005 8.1325,8.0595 8.2725,8.0595 C8.3865,8.0595 8.5015,8.0205 8.5945,7.9395 C9.3475,7.2945 11.0815,6.4305 11.9995,5.9945 C12.9185,6.4305 14.6515,7.2935 15.4045,7.9395 C15.4975,8.0205 15.6125,8.0595 15.7275,8.0595 C15.8665,8.0595 16.0065,8.0005 16.1045,7.8855 C16.2815,7.6785 16.2585,7.3655 16.0495,7.1875 C15.5185,6.7305 14.6005,6.2025 13.7525,5.7595 L21.9125,5.7595 C22.5145,5.7595 23.0045,6.2485 23.0045,6.8495 L23.0045,10.0225 Z M20.6245,21.9185 C20.6245,22.5195 20.1345,23.0075 19.5335,23.0075 L3.6725,23.0075 C3.0705,23.0075 2.5815,22.5195 2.5815,21.9185 L2.5815,12.1045 L20.6245,12.1045 L20.6245,21.9185 Z M7.7505,3.4855 C7.1495,2.8845 7.1495,2.0125 7.7505,1.4105 C8.0225,1.1395 8.3855,0.9905 8.7765,0.9905 C8.7875,0.9905 8.7975,0.9905 8.8075,0.9905 C9.1945,0.9985 9.5655,1.1515 9.8245,1.4105 C10.2175,1.8035 10.6775,3.3415 10.9655,4.6265 C9.6805,4.3385 8.1435,3.8785 7.7505,3.4855 L7.7505,3.4855 Z M14.1735,1.4105 C14.6765,0.9095 15.6295,0.7915 16.2495,1.4105 C16.8505,2.0125 16.8505,2.8845 16.2495,3.4855 C15.8565,3.8785 14.3185,4.3385 13.0335,4.6265 C13.3215,3.3415 13.7805,1.8035 14.1735,1.4105 L14.1735,1.4105 Z M21.9125,4.7685 L15.9965,4.7685 C16.3995,4.5925 16.7385,4.3975 16.9495,4.1865 C17.9415,3.1955 17.9405,1.7005 16.9495,0.7095 C16.0115,-0.2315 14.4175,-0.2335 13.4735,0.7095 C12.7535,1.4295 12.2185,3.6605 11.9995,4.7135 C11.7805,3.6605 11.2455,1.4295 10.5255,0.7095 C10.0875,0.2715 9.4685,0.0125 8.8265,-0.0005 C8.1835,0.0065 7.5205,0.2385 7.0495,0.7095 C6.0585,1.7005 6.0585,3.1955 7.0495,4.1865 C7.2605,4.3975 7.6005,4.5925 8.0035,4.7685 L2.0865,4.7685 C0.9385,4.7685 0.0045,5.7015 0.0045,6.8495 L0.0045,10.0225 C0.0045,10.9995 0.6815,11.8215 1.5905,12.0445 L1.5905,21.9185 C1.5905,23.0665 2.5245,24.0005 3.6725,24.0005 L19.5335,24.0005 C20.6825,24.0005 21.6155,23.0665 21.6155,21.9185 L21.6155,12.1045 L21.9125,12.1045 C23.0615,12.1045 23.9955,11.1705 23.9955,10.0225 L23.9955,6.8495 C23.9955,5.7015 23.0615,4.7685 21.9125,4.7685 L21.9125,4.7685 Z"
})));
Gift.displayName = "DecorativeIcon";

const Globe1 = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M21.032806,18.2709198 C21.277824,16.8575263 21.3602386,15.1618172 21.095,14.793 C20.944,14.584 20.193,14.444 19.696,14.353 C19.133,14.249 18.6,14.15 18.238,13.926 C18.03,13.798 17.854,13.583 17.67,13.355 C17.563,13.223 17.383,13.002 17.304,12.959 C17.083,12.869 16.52,12.94 16.063,12.996 C15.402,13.079 14.78,13.156 14.31,12.962 C13.41,12.588 10.421,10.799 11.039,9.309 C11.304,8.673 12.069,8.84 12.63,8.961 C12.832,9.005 13.172,9.082 13.279,9.056 C13.659,8.815 14.024,7.789 14.317,6.965 C14.561,6.278 14.792,5.629 15.095,5.209 C15.222,5.033 15.423,4.891 15.636,4.74 C15.716,4.684 15.827,4.605 15.913,4.536 C15.738,4.467 15.38,4.359 15.168,4.295 C14.797,4.184 14.446,4.078 14.207,3.906 C14.033,3.781 13.891,3.585 13.739,3.377 C13.681,3.299 13.602,3.189 13.531,3.105 C13.491,3.162 13.451,3.225 13.42,3.272 C13.21,3.596 12.949,4 12.5,4 C11.809,4 11.178,3.027 11.038,2.692 C10.8591398,2.26115438 10.9136621,1.61938567 10.9632238,1.04845976 C9.13059364,1.220601 7.42717917,1.84433157 5.96574004,2.80689176 C6.33871202,2.84952122 6.69885552,2.92150283 6.905,3.207 C7.277,3.724 7.165,4.527 7.056,5.305 C7,5.71 6.936,6.17 6.986,6.385 C7.09,6.824 7.578,7.754 7.905,8.208 C8.334,8.802 9.29,9.5 10.301,10.238 C12.12,11.564 14,12.937 14,14.5 C14,14.949 13.596,15.21 13.271,15.42 C13.198,15.467 13.088,15.538 13.018,15.593 C13.143,15.926 13.864,16.432 14.356,16.778 C15.059,17.271 15.724,17.736 15.961,18.309 C16.216,18.924 16.142,20.103 15.978,20.645 C15.8219289,21.1619163 15.2621547,21.9823757 14.7626527,22.6486751 C17.3389839,21.9797488 19.5515171,20.398015 21.032806,18.2709198 Z M22.261394,15.9636558 C22.7383105,14.733333 23,13.3966269 23,12 C23,5.935 18.065,1 12,1 C11.9903558,1 11.9807145,1.00001248 11.9710761,1.00003742 C11.9678438,1.03771588 11.9644627,1.07608605 11.961,1.115 C11.929,1.483 11.875,2.1 11.962,2.309 C12.042,2.502 12.275,2.8 12.441,2.938 C12.489,2.871 12.543,2.789 12.581,2.729 C12.79,2.404 13.051,2 13.5,2 C13.973,2 14.277,2.418 14.547,2.787 C14.625,2.894 14.743,3.056 14.793,3.095 C14.895,3.168 15.206,3.262 15.455,3.337 C16.127,3.539 16.888,3.767 16.993,4.42 C17.079,4.947 16.598,5.285 16.212,5.558 C16.106,5.633 15.943,5.747 15.903,5.796 C15.685,6.099 15.468,6.71 15.257,7.301 C14.876,8.373 14.482,9.482 13.762,9.926 C13.398,10.152 12.92,10.049 12.415,9.939 C12.288,9.911 12.104,9.871 11.966,9.853 C12.137,10.39 13.581,11.58 14.691,12.04 C14.916,12.133 15.481,12.061 15.938,12.006 C16.598,11.923 17.222,11.846 17.691,12.04 C17.986,12.163 18.218,12.449 18.444,12.725 C18.545,12.849 18.697,13.036 18.762,13.077 C18.965,13.202 19.45,13.292 19.876,13.371 C20.685,13.52 21.52,13.675 21.905,14.21 C22.1740332,14.5832937 22.2616862,15.2506405 22.261394,15.9636558 Z M11.3735522,0.0161486407 C11.4139446,0.00561012503 11.4563211,0 11.5,0 C11.5287517,0 11.556939,0.00243083605 11.5843676,0.00709806622 C11.7223407,0.00237887026 11.8608977,0 12,0 C18.617,0 24,5.383 24,12 C24,14.4679914 23.2511594,16.7643184 21.9687519,18.6737073 C21.9396129,18.7532754 21.8912159,18.8221111 21.8300337,18.8757758 C19.6577592,21.9721553 16.0613114,24 12,24 C5.383,24 0,18.617 0,12 C0,5.59310433 5.04658293,0.343088346 11.3735522,0.0161486407 Z M13.2728164,22.9267967 C13.9140994,22.1462151 14.8634995,20.8752517 15.021,20.354 C15.144,19.947 15.173,19.018 15.038,18.69 C14.912,18.386 14.286,17.947 13.782,17.595 C12.906,16.981 12,16.346 12,15.5 C12,15.051 12.404,14.79 12.729,14.58 C12.807,14.53 12.926,14.453 12.995,14.397 C12.884,13.359 11.131,12.08 9.713,11.045 C8.635,10.258 7.616,9.515 7.096,8.792 C6.742,8.305 6.16,7.24 6.014,6.614 C5.92,6.217 5.991,5.707 6.066,5.167 C6.128,4.724 6.231,3.983 6.094,3.793 C6.092,3.824 5.84,3.798 5.688,3.783 C5.45541042,3.76000238 5.14141102,3.72880914 4.89464378,3.60931639 C2.51366501,5.62871609 1,8.64106104 1,12 C1,18.065 5.935,23 12,23 C12.4304165,23 12.855142,22.9751456 13.2728164,22.9267967 Z"
})));
Globe1.displayName = "DecorativeIcon";

const Globe2 = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M12,24 C5.38330435,24 -4.4408921e-14,18.6166957 -4.4408921e-14,12 C-4.4408921e-14,5.38330435 5.38330435,0 12,0 C18.6166957,0 24,5.38330435 24,12 C24,18.6166957 18.6166957,24 12,24 Z M12,1.04347826 C5.95826087,1.04347826 1.04347826,5.95826087 1.04347826,12 C1.04347826,18.0417391 5.95826087,22.9565217 12,22.9565217 C18.0417391,22.9565217 22.9565217,18.0417391 22.9565217,12 C22.9565217,5.95826087 18.0417391,1.04347826 12,1.04347826 Z M12.5217391,12.5217391 L12.5217391,17.7391304 L16.8593428,17.7391304 C17.3683252,16.1988372 17.6831738,14.4141867 17.7323571,12.5217391 L12.5217391,12.5217391 Z M11.4782609,12.5217391 L6.26764293,12.5217391 C6.31682621,14.4141867 6.63167479,16.1988372 7.14065717,17.7391304 L11.4782609,17.7391304 L11.4782609,12.5217391 Z M12.5217391,22.9092956 C14.0973755,22.6233291 15.5119511,21.059328 16.4693479,18.7826087 L12.5217391,18.7826087 L12.5217391,22.9092956 Z M11.4782609,22.9092956 L11.4782609,18.7826087 L7.53065208,18.7826087 C8.48804887,21.059328 9.90262449,22.6233291 11.4782609,22.9092956 Z M12.5217391,11.4782609 L17.7323571,11.4782609 C17.6831738,9.58581327 17.3683252,7.80116279 16.8593428,6.26086957 L12.5217391,6.26086957 L12.5217391,11.4782609 Z M11.4782609,11.4782609 L11.4782609,6.26086957 L7.14065717,6.26086957 C6.63167479,7.80116279 6.31682621,9.58581327 6.26764293,11.4782609 L11.4782609,11.4782609 Z M12.5217391,1.09070443 L12.5217391,5.2173913 L16.4693479,5.2173913 C15.5119511,2.94067197 14.0973755,1.3766709 12.5217391,1.09070443 Z M11.4782609,1.09070443 C9.90262449,1.3766709 8.48804887,2.94067197 7.53065208,5.2173913 L11.4782609,5.2173913 L11.4782609,1.09070443 Z M17.9832884,17.7391304 L21.6208696,17.7391304 C21.9088696,17.7391304 22.1426087,17.9728696 22.1426087,18.2608696 C22.1426087,18.5488696 21.909913,18.7826087 21.621913,18.7826087 L17.6284232,18.7826087 C16.4198794,21.9532212 14.3699709,24 12,24 C9.63002908,24 7.58012056,21.9532212 6.37157681,18.7826087 L2.37808696,18.7826087 C2.09008696,18.7826087 1.85634783,18.5488696 1.85634783,18.2608696 C1.85634783,17.9728696 2.09008696,17.7391304 2.37808696,17.7391304 L6.01671161,17.7391304 C5.54817268,16.1851644 5.26711643,14.4166142 5.22339394,12.5217391 L0.52173913,12.5217391 C0.23373913,12.5217391 -4.4408921e-14,12.288 -4.4408921e-14,12 C-4.4408921e-14,11.712 0.23373913,11.4782609 0.52173913,11.4782609 L5.22339394,11.4782609 C5.26711643,9.5833858 5.54817268,7.81483558 6.01671161,6.26086957 L2.37808696,6.26086957 C2.09008696,6.26086957 1.85634783,6.02713043 1.85634783,5.73913043 C1.85634783,5.45113043 2.09008696,5.2173913 2.37808696,5.2173913 L6.37157681,5.2173913 C7.58012056,2.04677877 9.63002908,0 12,0 C14.3699709,0 16.4198794,2.04677877 17.6284232,5.2173913 L21.6208696,5.2173913 C21.9088696,5.2173913 22.1426087,5.45113043 22.1426087,5.73913043 C22.1426087,6.02713043 21.909913,6.26086957 21.621913,6.26086957 L17.9832884,6.26086957 C18.4518273,7.81483558 18.7328836,9.5833858 18.7766061,11.4782609 L23.4782609,11.4782609 C23.7662609,11.4782609 24,11.712 24,12 C24,12.288 23.7662609,12.5217391 23.4782609,12.5217391 L18.7766061,12.5217391 C18.7328836,14.4166142 18.4518273,16.1851644 17.9832884,17.7391304 Z"
})));
Globe2.displayName = "DecorativeIcon";

const HeadBoth = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "18",
  viewBox: "0 0 24 18"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -3)",
  d: "M20.74125,16.2205989 C22.66025,16.6895989 24.00025,18.3735989 24.00025,20.3165989 C24.00025,20.6055989 23.76625,20.8405989 23.47925,20.8405989 L19.52025,20.8405989 C19.23325,20.8405989 19.00025,20.6065989 19.00025,20.3195989 C19.00025,20.0325989 19.23325,19.7985989 19.52025,19.7985989 L22.91525,19.7985989 C22.70525,18.5445989 21.76825,17.5455989 20.49325,17.2325989 L17.45425,16.4885989 C17.26625,16.4425989 17.12125,16.2975989 17.07325,16.1115989 L16.75825,14.8765989 C16.72125,14.7325989 16.74825,14.5785989 16.83025,14.4565989 C16.91425,14.3325989 17.04625,14.2505989 17.19125,14.2315989 C18.31925,14.0765989 19.14925,13.8245989 19.68025,13.6225989 C19.21325,12.9325989 18.53225,11.4625989 18.53225,8.75359888 C18.53225,7.60559888 18.40325,4.93759888 17.20825,4.93759888 L16.84025,4.93759888 C16.70125,4.93759888 16.57125,4.88459888 16.47425,4.78759888 C16.01925,4.34359888 15.89725,4.22359888 15.22125,4.20459888 C15.04825,4.24059888 14.84725,4.15659888 14.73225,3.98159888 C14.62525,3.82159888 14.61325,3.60759888 14.70625,3.43859888 C14.81225,3.24159888 14.99425,3.13959888 15.18025,3.16259888 C16.12525,3.17659888 16.51725,3.39059888 17.04925,3.89559888 L17.20825,3.89559888 C18.77725,3.89559888 19.57325,5.53059888 19.57325,8.75359888 C19.57325,12.3265989 20.82725,13.3865989 20.84025,13.3975989 C20.97825,13.4985989 21.05725,13.6655989 21.04825,13.8425989 C21.03925,14.0175989 20.94225,14.1755989 20.78925,14.2635989 C20.74925,14.2865989 19.79325,14.8385989 17.90825,15.1725989 L18.00525,15.5495989 L20.74125,16.2205989 Z M6.92775,16.1101989 C6.87975,16.2971989 6.73375,16.4411989 6.54775,16.4871989 L3.50575,17.2311989 C2.23075,17.5461989 1.29375,18.5461989 1.08475,19.7981989 L16.92575,19.7981989 C16.71575,18.5451989 15.77975,17.5461989 14.50375,17.2321989 L11.46375,16.4881989 C11.27675,16.4431989 11.13175,16.2981989 11.08375,16.1121989 L10.73675,14.7541989 C10.68775,14.5631989 10.74875,14.3641989 10.89675,14.2331989 C11.64975,13.5721989 12.14675,12.5891989 12.22575,11.6041989 C12.24775,11.3301989 12.47075,11.1241989 12.74375,11.1241989 C12.88075,11.1241989 12.98175,11.0521989 12.99575,10.9451989 L13.18075,9.50119888 C13.18775,9.44619888 13.17175,9.39519888 13.13375,9.35219888 C13.09275,9.30419888 13.03275,9.27719888 12.96575,9.27619888 C12.82675,9.27619888 12.69075,9.21619888 12.59375,9.11319888 C12.49675,9.00819888 12.44575,8.86919888 12.45275,8.72919888 L12.54275,6.92019888 C12.54875,6.79019888 12.60375,6.66819888 12.69775,6.57519888 L13.06675,6.21319888 C13.27875,5.99119888 13.41875,5.69619888 12.99775,5.06719888 C12.62075,4.50119888 11.92975,4.21419888 10.94575,4.21419888 C10.21275,4.21419888 9.35575,4.28919888 8.56575,4.84319888 C8.48075,4.90219888 8.37675,4.93619888 8.27175,4.93719888 C5.67875,4.96219888 5.46775,5.86219888 5.46775,6.94619888 C5.46775,7.27219888 5.58175,8.25919888 5.63775,8.68619888 C5.65775,8.83519888 5.61175,8.98519888 5.51075,9.09719888 C5.41275,9.21019888 5.27075,9.27419888 5.12075,9.27419888 C4.96375,9.27419888 4.90875,9.31119888 4.87675,9.34819888 C4.85575,9.37319888 4.82075,9.42519888 4.82975,9.49919888 L5.01275,10.9451989 C5.02575,11.0471989 5.11875,11.1231989 5.22875,11.1231989 L5.34975,11.1231989 C5.62075,11.1231989 5.84775,11.3341989 5.86875,11.6031989 C5.94775,12.5581989 6.42175,13.5221989 7.13675,14.1801989 C7.27875,14.3101989 7.33675,14.5061989 7.28875,14.6921989 L6.92775,16.1101989 Z M14.75375,16.2201989 C16.67075,16.6911989 18.01075,18.3761989 18.01075,20.3171989 C18.01075,20.6061989 17.77775,20.8401989 17.49075,20.8401989 L0.52075,20.8401989 C0.23375,20.8401989 -0.000249999999,20.6061989 -0.000249999999,20.3191989 C-0.000249999999,18.3761989 1.33975,16.6911989 3.25775,16.2211989 L5.99675,15.5511989 L6.20675,14.7271989 C5.53375,14.0191989 5.05675,13.0771989 4.88675,12.1201989 C4.40575,11.9851989 4.04575,11.5761989 3.98175,11.0791989 L3.79775,9.63219888 C3.75275,9.28219888 3.86175,8.92819888 4.09675,8.66219888 C4.21975,8.52119888 4.37375,8.40919888 4.54775,8.33519888 C4.46775,7.65119888 4.42775,7.18419888 4.42775,6.94719888 C4.42775,5.56919888 4.84675,3.97919888 8.10475,3.90019888 C9.23275,3.17319888 10.43175,3.17319888 10.94675,3.17319888 C12.29975,3.17319888 13.28175,3.61619888 13.86475,4.48919888 C14.64675,5.65719888 14.26475,6.47019888 13.80675,6.94619888 L13.57275,7.17619888 L13.51475,8.36019888 C13.66675,8.43219888 13.80575,8.53819888 13.91875,8.66719888 C14.15175,8.93219888 14.25975,9.28419888 14.21475,9.63219888 L14.03075,11.0781989 C13.97075,11.5411989 13.65375,11.9301989 13.21275,12.0901989 C13.04275,13.0901989 12.53975,14.0681989 11.82175,14.7921989 L12.01575,15.5501989 L14.75375,16.2201989 Z"
})));
HeadBoth.displayName = "DecorativeIcon";

const HeadFemale = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M19.7817727,19.7818978 C19.4796311,20.0840394 19.1614819,20.3591684 18.8343286,20.6192903 L15.8929498,19.33869 C15.7518837,19.2606534 15.6648429,19.1646084 15.596811,19.0695639 C16.8914179,18.8674691 18.1550102,18.4922933 19.353572,17.9270283 C19.5106456,17.8539941 19.6146944,17.7029232 19.6357042,17.5308426 C19.6547131,17.3587619 19.5816789,17.1866813 19.4466156,17.0796311 C19.4286072,17.0656245 17.7368141,15.6699703 17.7368141,10.9677661 C17.7368141,5.96442082 16.1710802,4.9139284 14.856464,4.9139284 L14.6093481,4.9139284 C13.9680475,4.23160857 12.9735814,3.87043927 12.0001251,3.96148194 C10.4674066,3.96148194 6.26243552,5.62226043 6.26243552,10.9677661 C6.26243552,15.6699703 4.56964202,17.0656245 4.55863686,17.0746287 C4.41757074,17.179678 4.34253556,17.3507582 4.36054401,17.5258402 C4.37855245,17.7009223 4.4866031,17.8529936 4.64567766,17.9270283 C5.84924183,18.4932937 7.11483508,18.8694701 8.41244333,19.0715648 C8.35241519,19.1606065 8.27437861,19.2486478 8.15032046,19.3176802 L5.16592153,20.6192903 C4.83876817,20.3591684 4.52061904,20.0840394 4.21747694,19.7818978 C-0.0735344693,15.4908864 -0.0735344693,8.50861341 4.21747694,4.217602 C6.36348288,2.07259653 9.18180397,1.00009379 12.0001251,1.00009379 C14.8184461,1.00009379 17.6357668,2.07259653 19.7817727,4.217602 C24.0727841,8.50861341 24.0727841,15.4908864 19.7817727,19.7818978 M6.11836798,21.2936064 L8.59252775,20.2141004 C9.31586681,19.8119118 9.53096764,19.1345943 9.55397843,18.743411 C9.5549789,18.7344068 9.55998124,18.7274035 9.56098171,18.7193997 C9.56198218,18.7133969 9.55898077,18.7073941 9.55898077,18.7013913 C9.55998124,18.6903861 9.56398312,18.6753791 9.56398312,18.6653744 C9.56398312,18.6403627 9.55297796,18.6193528 9.54997655,18.5943411 C9.54497421,18.5613256 9.5419728,18.5283101 9.52996717,18.4972956 C9.51896201,18.4672815 9.50295451,18.4402689 9.48694701,18.4142567 C9.46993903,18.3852431 9.454932,18.3582304 9.43292168,18.3342192 C9.41191183,18.3102079 9.38690011,18.2931999 9.36188839,18.2731906 C9.33587619,18.2541816 9.31186494,18.2341723 9.28185087,18.2191652 C9.25283727,18.2051587 9.22082226,18.1981554 9.18880725,18.1901516 C9.164796,18.1831484 9.14478662,18.1711427 9.11877443,18.1681413 C7.94322339,18.0380804 6.79468501,17.7449429 5.6921682,17.2957324 C6.31746131,16.4503361 7.26290449,14.5744568 7.26290449,10.9677661 C7.26290449,6.00544005 11.2207597,4.96195091 12.0451462,4.95994998 C12.8145068,4.88691574 13.5708613,5.19005784 13.9850555,5.72130686 C14.0801,5.84336408 14.225168,5.91439737 14.3802407,5.91439737 L14.856464,5.91439737 C16.4922307,5.91439737 16.7363452,9.08088166 16.7363452,10.9677661 C16.7363452,14.5754572 17.6817883,16.4503361 18.306081,17.2957324 C17.2065656,17.7449429 16.0560263,18.0380804 14.8814757,18.1681413 C14.8554635,18.1711427 14.8364546,18.1831484 14.8114429,18.1901516 C14.7794279,18.1981554 14.7474128,18.2051587 14.7173988,18.2191652 C14.6883852,18.2341723 14.6653744,18.2541816 14.6393622,18.2721901 C14.61335,18.2921995 14.5883383,18.3102079 14.566328,18.3352196 C14.5453181,18.3582304 14.5303111,18.3852431 14.5133031,18.4122557 C14.4972956,18.4402689 14.4802876,18.4662811 14.4692825,18.4972956 C14.4582773,18.5283101 14.4552759,18.5613256 14.4502736,18.5943411 C14.4462717,18.6193528 14.4352665,18.6393622 14.4352665,18.6653744 C14.4352665,18.6753791 14.4392684,18.6903861 14.4402689,18.7003908 C14.4402689,18.7073941 14.4372675,18.7133969 14.4382679,18.7193997 C14.4392684,18.7284039 14.4442708,18.7354072 14.4462717,18.7444114 C14.4692825,19.1355948 14.6863842,19.8139128 15.4497421,20.2341097 L17.8808817,21.2946068 C14.3012037,23.5586681 9.69804596,23.5576677 6.11836798,21.2936064 M20.4891043,3.51027044 C15.80791,-1.1699234 8.19234016,-1.1699234 3.51014538,3.51027044 C-1.17004846,8.19146475 -1.17004846,15.808035 3.51014538,20.4892293 C5.85124277,22.8303267 8.92568391,23.9998749 12.0001251,23.9998749 C15.0745662,23.9998749 18.1480069,22.8303267 20.4891043,20.4892293 C25.1702986,15.808035 25.1702986,8.19146475 20.4891043,3.51027044"
})));
HeadFemale.displayName = "DecorativeIcon";

const HeadMale = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M19.25,20.195 L16.382,18.95 C15.465,18.576 15.035,17.136 14.937,16.571 C15.585,15.979 16.258,15.048 16.258,14.155 C16.258,13.903 16.319,13.803 16.345,13.772 C16.49,13.725 16.609,13.616 16.667,13.473 C16.687,13.425 17.155,12.287 17.155,11.516 C17.155,11.476 17.15,11.434 17.139,11.387 C17.086,11.176 16.945,10.899 16.706,10.724 L16.706,8.437 C16.706,6.953 16.229,6.378 15.795,6.054 C15.671,5.25 14.778,3.958 12.148,3.958 C9.324,3.958 7.59,6.567 7.59,8.437 L7.59,10.724 C7.352,10.898 7.211,11.175 7.157,11.387 C7.146,11.431 7.141,11.473 7.141,11.516 C7.141,12.263 7.579,13.351 7.628,13.472 C7.695,13.636 7.808,13.738 7.936,13.764 C7.937,13.765 8.039,13.833 8.039,14.155 C8.039,15.047 8.711,15.978 9.359,16.571 C9.261,17.136 8.831,18.576 7.92,18.948 L4.75,20.197 C2.392,18.11 1.042,15.127 1.042,12 C1.042,5.957 5.958,1.041 12,1.041 C18.042,1.041 22.958,5.957 22.958,12 C22.958,15.126 21.607,18.108 19.25,20.195 L19.25,20.195 Z M8.308,19.915 C9.897,19.265 10.427,16.924 10.427,16.354 C10.427,16.195 10.356,16.048 10.233,15.948 C9.675,15.497 9.081,14.715 9.081,14.155 C9.081,13.413 8.749,13.058 8.526,12.904 C8.374,12.491 8.21,11.947 8.187,11.596 C8.187,11.594 8.188,11.593 8.189,11.591 C8.44,11.553 8.632,11.337 8.632,11.076 L8.632,8.437 C8.632,7.036 10.002,5 12.149,5 C14.016,5 14.666,5.749 14.76,6.169 C14.742,6.235 14.736,6.296 14.742,6.351 C14.772,6.633 14.982,6.765 15.098,6.838 C15.281,6.951 15.665,7.189 15.665,8.438 L15.665,11.077 C15.665,11.349 15.851,11.559 16.105,11.589 C16.106,11.592 16.108,11.596 16.11,11.599 C16.087,11.948 15.924,12.492 15.771,12.905 C15.579,13.039 15.217,13.392 15.217,14.155 C15.217,14.715 14.623,15.497 14.063,15.95 C13.941,16.05 13.871,16.198 13.871,16.354 C13.871,16.925 14.398,19.265 15.979,19.91 L18.324,20.928 C16.458,22.257 14.275,22.958 12,22.958 C9.733,22.958 7.559,22.262 5.697,20.944 L8.308,19.915 Z M12,0 C5.383,0 0,5.383 0,12 C0,18.617 5.383,24 12,24 C18.617,24 24,18.617 24,12 C24,5.383 18.617,0 12,0 L12,0 Z"
})));
HeadMale.displayName = "DecorativeIcon";

const Headset = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M21.908,16.2455 C21.019,19.0825 19.81,21.9485 19.8,21.9745 C19.775,22.0285 19.749,22.0845 19.717,22.1355 C19.323,22.7925 18.467,23.0075 17.81,22.6125 L16.242,21.6715 C15.649,21.3165 15.405,20.6025 15.659,19.9785 L17.523,15.8875 C17.74,15.3565 18.243,15.0145 18.805,15.0145 C18.969,15.0145 19.13,15.0445 19.278,15.0995 L21.908,16.2455 Z M6.485,15.9095 L8.33,19.9565 C8.589,20.5965 8.348,21.3165 7.758,21.6715 L6.19,22.6125 C6.138,22.6425 6.084,22.6715 6.03,22.6955 C5.692,22.8455 5.314,22.8505 4.967,22.7155 C4.622,22.5805 4.351,22.3205 4.204,21.9835 C4.153,21.8625 2.959,19.0165 2.093,16.2455 L4.697,15.1095 C5.395,14.8445 6.197,15.1975 6.485,15.9095 L6.485,15.9095 Z M12,-0.0005 C5.383,-0.0005 4.54747351e-13,5.3825 4.54747351e-13,11.9995 C4.54747351e-13,15.0725 2.985,22.1525 3.113,22.4535 C3.388,23.0845 3.893,23.5705 4.533,23.8215 C4.836,23.9395 5.153,24.0005 5.474,24.0005 C5.83,24.0005 6.178,23.9275 6.508,23.7835 C6.61,23.7375 6.708,23.6865 6.801,23.6325 L8.37,22.6905 C9.465,22.0315 9.908,20.6865 9.422,19.4875 L7.576,15.4405 C7.054,14.1505 5.565,13.5095 4.248,14.0115 L1.753,15.0975 C1.378,13.7475 1.188,12.7065 1.188,11.9995 C1.188,6.0375 6.038,1.1875 12,1.1875 C17.962,1.1875 22.811,6.0375 22.811,11.9995 C22.811,12.7065 22.622,13.7475 22.247,15.0975 L19.724,13.9985 C18.406,13.4965 16.959,14.1245 16.433,15.4175 L14.568,19.5095 C14.087,20.6935 14.533,22.0315 15.63,22.6905 L17.199,23.6325 C18.419,24.3625 20.007,23.9665 20.737,22.7455 C20.793,22.6515 20.842,22.5565 20.89,22.4475 C20.947,22.3115 22.299,19.1035 23.191,16.1055 C23.197,16.0925 23.201,16.0775 23.204,16.0645 C23.732,14.2865 24,12.9185 24,11.9995 C24,5.3825 18.617,-0.0005 12,-0.0005 L12,-0.0005 Z"
})));
Headset.displayName = "DecorativeIcon";

const Heart = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "22",
  viewBox: "0 0 24 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -1)",
  d: "M17,1 C15.106,1 13.314,1.76 12,3.103 C10.686,1.76 8.894,1 7,1 C3.14,1 0,4.14 0,8 C0,9.742 0.703,11.447 2.032,12.93 C4.319,15.48 11.573,22.779 11.646,22.852 C11.739,22.947 11.867,23 12,23 C12.133,23 12.261,22.947 12.355,22.854 C12.428,22.781 19.682,15.482 21.969,12.931 C23.297,11.448 24,9.744 24,8 C24,4.141 20.86,1 17,1 Z M21.224,12.262 C19.245,14.47 13.489,20.289 12,21.79 C10.51,20.289 4.755,14.47 2.776,12.263 C1.966,11.357 1,9.885 1,8 C1,4.69 3.691,2 7,2 C8.788,2 10.47,2.79 11.615,4.168 C11.805,4.397 12.195,4.397 12.384,4.168 C13.53,2.789 15.212,2 17,2 C20.309,2 23,4.691 23,8 C23,9.885 22.034,11.357 21.224,12.262 Z"
})));
Heart.displayName = "DecorativeIcon";

const Heartbeat = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M23.48,10.7048 C23.766,10.7048 24,10.9378 24,11.2248 C24,11.5108 23.766,11.7438 23.48,11.7438 L14.993,11.7438 C14.823,11.7438 14.664,11.6608 14.567,11.5208 L12.979,9.2388 L10.914,16.1248 C10.855,16.3208 10.685,16.4648 10.482,16.4898 C10.464,16.4928 10.439,16.4948 10.416,16.4948 C10.237,16.4948 10.067,16.3998 9.973,16.2468 L7.219,11.7438 L0.519,11.7438 C0.232,11.7438 0,11.5108 0,11.2248 C0,10.9378 0.232,10.7048 0.519,10.7048 L7.51,10.7048 C7.692,10.7048 7.857,10.7978 7.954,10.9528 L10.252,14.7118 L12.294,7.9078 C12.351,7.7188 12.514,7.5758 12.709,7.5438 C12.908,7.5148 13.103,7.5948 13.217,7.7618 L15.264,10.7048 L23.48,10.7048 Z M20.6343,12.072 L20.7133,11.981 L21.5173,12.641 L21.4333,12.737 C21.3133,12.877 21.2143,12.989 21.1013,13.103 L12.3673,21.852 C12.2693,21.951 12.1383,22.005 11.9993,22.005 C11.8603,22.005 11.7303,21.951 11.6323,21.853 L2.8993,13.103 C2.7873,12.992 2.6913,12.883 2.5893,12.764 C2.3873,12.531 2.4083,12.199 2.6243,12.011 C2.8423,11.822 3.1623,11.84 3.3503,12.055 C3.4533,12.175 3.5373,12.272 3.6343,12.37 L11.9993,20.751 L20.3643,12.369 C20.4613,12.273 20.5453,12.175 20.6343,12.072 Z M1.4536,10.47 C1.3326,10.399 1.2456,10.286 1.2106,10.15 C1.0686,9.598 0.9966,9.046 0.9966,8.508 C1.0056,4.917 3.9276,1.995 7.5106,1.995 C9.1866,1.995 10.7756,2.636 11.9976,3.801 C13.2126,2.636 14.8026,1.995 16.4886,1.995 C20.0806,2.004 23.0026,4.926 23.0026,8.508 C23.0026,9.045 22.9296,9.597 22.7876,10.151 C22.7166,10.424 22.4286,10.594 22.1546,10.524 C21.8786,10.452 21.7106,10.169 21.7816,9.891 C21.9016,9.424 21.9636,8.958 21.9636,8.508 C21.9636,5.497 19.5076,3.042 16.4876,3.034 C14.9196,3.034 13.4266,3.712 12.3906,4.892 C12.1936,5.117 11.8076,5.117 11.6106,4.895 C10.5636,3.713 9.0696,3.034 7.5106,3.034 C4.4986,3.034 2.0436,5.491 2.0366,8.51 C2.0366,8.959 2.0966,9.424 2.2176,9.891 C2.2526,10.026 2.2326,10.166 2.1616,10.285 C2.0916,10.405 1.9786,10.49 1.8446,10.524 C1.8016,10.535 1.7576,10.541 1.7136,10.541 C1.6236,10.541 1.5346,10.517 1.4536,10.47 Z"
})));
Heartbeat.displayName = "DecorativeIcon";

const Helpdesk = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20"
}, /*#__PURE__*/React.createElement("path", {
  d: "M15.4166667,0 C17.4841667,0 19.1666667,1.6825 19.1666667,3.75 L19.1666667,3.75 L19.1666667,10.4166667 C19.1666667,10.6466667 18.98,10.8333333 18.75,10.8333333 C18.52,10.8333333 18.3333333,10.6466667 18.3333333,10.4166667 L18.3333333,10.4166667 L18.3333333,3.75 C18.3333333,2.14166667 17.025,0.833333333 15.4166667,0.833333333 L15.4166667,0.833333333 L3.75,0.833333333 C2.14166667,0.833333333 0.833333333,2.14166667 0.833333333,3.75 L0.833333333,3.75 L0.833333333,18.4325 L4.26333333,14.3166667 C4.3425,14.2216667 4.46,14.1666667 4.58333333,14.1666667 L4.58333333,14.1666667 L9.58333333,14.1666667 C9.81333333,14.1666667 10,14.3533333 10,14.5833333 C10,14.8133333 9.81333333,15 9.58333333,15 L9.58333333,15 L4.77833333,15 L0.736666667,19.85 C0.655833333,19.9475 0.538333333,20 0.416666667,20 C0.369166667,20 0.320833333,19.9916667 0.275,19.975 C0.11,19.915 0,19.7583333 0,19.5833333 L0,19.5833333 L0,3.75 C0,1.6825 1.6825,0 3.75,0 L3.75,0 Z M15.4166667,10.8333333 C17.9441667,10.8333333 20,12.8891667 20,15.4166667 C20,17.9441667 17.9441667,20 15.4166667,20 C12.8891667,20 10.8333333,17.9441667 10.8333333,15.4166667 C10.8333333,12.8891667 12.8891667,10.8333333 15.4166667,10.8333333 Z M15.4166667,11.6666667 C13.3491667,11.6666667 11.6666667,13.3491667 11.6666667,15.4166667 C11.6666667,17.4841667 13.3491667,19.1666667 15.4166667,19.1666667 C17.4841667,19.1666667 19.1666667,17.4841667 19.1666667,15.4166667 C19.1666667,13.3491667 17.4841667,11.6666667 15.4166667,11.6666667 Z M15.125,17.625 C15.275,17.4666667 15.5583333,17.4666667 15.7083333,17.625 C15.7916667,17.7 15.8333333,17.8083333 15.8333333,17.9166667 C15.8333333,18.025 15.7916667,18.1333333 15.7083333,18.2083333 C15.6333333,18.2916667 15.525,18.3333333 15.4166667,18.3333333 C15.3083333,18.3333333 15.2,18.2916667 15.125,18.2083333 C15.05,18.1416667 15,18.0333333 15,17.9166667 C15,17.8 15.0416667,17.7 15.125,17.625 Z M15.4158333,12.5 C16.565,12.5 17.5,13.2475 17.5,14.1666667 C17.5,14.9625 16.94,15.4966667 15.8341667,15.7566667 L15.8341667,15.7566667 L15.8333333,16.25 C15.8333333,16.4808333 15.6466667,16.6666667 15.4166667,16.6666667 C15.1858333,16.6666667 15,16.4791667 15,16.25 L15,16.25 L15.0008333,15.4166667 C15.0008333,15.2191667 15.14,15.0491667 15.3333333,15.0091667 L15.3333333,15.0091667 L15.4241667,14.9916667 C16.2716667,14.835 16.6666667,14.5725 16.6666667,14.1666667 C16.6666667,13.715 16.0933333,13.3333333 15.4158333,13.3333333 C14.7633333,13.3333333 14.2016667,13.6866667 14.1658333,14.1216667 C14.1466667,14.3508333 13.9475,14.53 13.7158333,14.5016667 C13.4866667,14.4825 13.3166667,14.2808333 13.3358333,14.0516667 C13.4091667,13.1675 14.3041667,12.5 15.4158333,12.5 Z M5.41666667,6.66666667 C6.10583333,6.66666667 6.66666667,7.2275 6.66666667,7.91666667 C6.66666667,8.60583333 6.10583333,9.16666667 5.41666667,9.16666667 C4.7275,9.16666667 4.16666667,8.60583333 4.16666667,7.91666667 C4.16666667,7.2275 4.7275,6.66666667 5.41666667,6.66666667 Z M9.58333333,6.66666667 C10.2725,6.66666667 10.8333333,7.2275 10.8333333,7.91666667 C10.8333333,8.60583333 10.2725,9.16666667 9.58333333,9.16666667 C8.89416667,9.16666667 8.33333333,8.60583333 8.33333333,7.91666667 C8.33333333,7.2275 8.89416667,6.66666667 9.58333333,6.66666667 Z M13.75,6.66666667 C14.4391667,6.66666667 15,7.2275 15,7.91666667 C15,8.60583333 14.4391667,9.16666667 13.75,9.16666667 C13.0608333,9.16666667 12.5,8.60583333 12.5,7.91666667 C12.5,7.2275 13.0608333,6.66666667 13.75,6.66666667 Z M5.41666667,7.5 C5.18666667,7.5 5,7.68666667 5,7.91666667 C5,8.14666667 5.18666667,8.33333333 5.41666667,8.33333333 C5.64666667,8.33333333 5.83333333,8.14666667 5.83333333,7.91666667 C5.83333333,7.68666667 5.64666667,7.5 5.41666667,7.5 Z M9.58333333,7.5 C9.35333333,7.5 9.16666667,7.68666667 9.16666667,7.91666667 C9.16666667,8.14666667 9.35333333,8.33333333 9.58333333,8.33333333 C9.81333333,8.33333333 10,8.14666667 10,7.91666667 C10,7.68666667 9.81333333,7.5 9.58333333,7.5 Z M13.75,7.5 C13.52,7.5 13.3333333,7.68666667 13.3333333,7.91666667 C13.3333333,8.14666667 13.52,8.33333333 13.75,8.33333333 C13.98,8.33333333 14.1666667,8.14666667 14.1666667,7.91666667 C14.1666667,7.68666667 13.98,7.5 13.75,7.5 Z"
})));
Helpdesk.displayName = "DecorativeIcon";

const Home = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M8.9565,19.002 L15.0435,19.002 L15.0435,12.915 L8.9565,12.915 L8.9565,19.002 Z M15.5625,11.876 C15.8685,11.876 16.0815,12.09 16.0815,12.396 L16.0815,19.521 C16.0815,19.828 15.8685,20.041 15.5625,20.041 L8.4365,20.041 C8.1305,20.041 7.9165,19.828 7.9165,19.521 L7.9165,12.396 C7.9165,12.09 8.1305,11.876 8.4365,11.876 L15.5625,11.876 Z M20.313,11.085 L20.437,11.085 L20.437,11.164 L22.231,11.164 L19.873,8.805 L19.873,8.754 C19.873,8.734 19.851,8.672 19.839,8.635 C19.816,8.564 19.793,8.497 19.793,8.437 L19.793,1.039 L16.874,1.039 L16.874,4.399 C16.874,4.633 16.736,4.816 16.496,4.905 C16.343,5.013 16.058,4.911 15.95,4.804 L12.465,1.24 C12.373,1.119 12.239,1.053 12.077,1.041 C11.878,1.032 11.672,1.102 11.533,1.241 L1.766,11.085 L3.686,11.085 C3.992,11.085 4.206,11.298 4.206,11.604 L4.206,22.961 L19.793,22.961 L19.793,11.604 C19.793,11.298 20.007,11.085 20.313,11.085 Z M23.907,11.232 C24,11.417 24,11.601 24,11.762 L23.986,11.817 C23.892,12.006 23.698,12.124 23.48,12.124 L20.833,12.124 L20.833,23.481 C20.833,23.786 20.619,24 20.313,24 L3.686,24 C3.38,24 3.167,23.786 3.167,23.481 L3.167,12.124 L0.519,12.124 C0.301,12.124 0.107,12.006 0.013,11.817 L0,11.762 C0,11.601 0,11.417 0.092,11.232 L0.115,11.2 L10.724,0.512 C11.406,-0.17 12.514,-0.17 13.196,0.511 L15.834,3.15 L15.834,0.52 C15.834,0.213 16.048,0 16.355,0 L20.313,0 C20.619,0 20.833,0.213 20.833,0.52 L20.833,8.227 L23.907,11.232 Z"
})));
Home.displayName = "DecorativeIcon";

const Warranty$1 = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M12.4815,12.4674499 L11.1965,12.4674499 C10.7445,12.4674499 10.3485,12.8634499 10.3485,13.3144499 L10.3485,15.3594499 L9.1895,15.3594499 C9.1525,15.3544499 9.0765,15.2774499 9.0715,15.2434499 L9.0715,11.0664499 C9.0715,10.7814499 8.8455,10.5494499 8.5635,10.5394499 L11.9965,7.22244992 L15.3715,10.5394499 C15.0825,10.5404499 14.8475,10.7764499 14.8475,11.0664499 L14.8475,15.2424499 C14.8425,15.2784499 14.7665,15.3554499 14.7315,15.3594499 L13.3295,15.3594499 L13.3295,13.3144499 C13.3295,12.8634499 12.9335,12.4674499 12.4815,12.4674499 L12.4815,12.4674499 Z M12.3695,6.11144992 L17.0285,10.6904499 C17.1815,10.8414499 17.2275,11.0674499 17.1475,11.2654499 C17.0645,11.4644499 16.8725,11.5924499 16.6585,11.5924499 L15.9005,11.5924499 L15.9005,15.2434499 C15.9005,15.8544499 15.3435,16.4124499 14.7315,16.4124499 L12.8025,16.4124499 C12.5125,16.4124499 12.2765,16.1754499 12.2765,15.8854499 L12.2765,13.5204499 L11.4015,13.5204499 L11.4015,15.8854499 C11.4015,16.1754499 11.1655,16.4124499 10.8755,16.4124499 L9.1875,16.4124499 C8.5755,16.4124499 8.0185,15.8544499 8.0185,15.2434499 L8.0185,11.5924499 L7.2595,11.5924499 C7.0445,11.5924499 6.8525,11.4634499 6.7715,11.2624499 C6.6905,11.0634499 6.7385,10.8374499 6.8945,10.6874499 L11.6335,6.10844992 C11.8365,5.91144992 12.1665,5.91044992 12.3695,6.11144992 Z M20.7115,4.55874992 C20.7115,4.01374992 20.3075,3.66674992 19.9285,3.52574992 L12.3295,0.966749917 C12.2255,0.941749917 12.1105,0.927749917 11.9995,0.927749917 C11.8825,0.927749917 11.7645,0.942749917 11.6455,0.972749917 L4.0535,3.53174992 C3.5525,3.69874992 3.2875,4.05374992 3.2875,4.55874992 L3.2875,14.5197499 C3.2875,20.1357499 10.9465,22.7207499 11.9995,23.0487499 C13.0525,22.7207499 20.7115,20.1357499 20.7115,14.5197499 L20.7115,4.55874992 Z M20.2805,2.53274992 C21.1845,2.87174992 21.7655,3.66574992 21.7655,4.55874992 L21.7655,14.5197499 C21.7655,21.3467499 12.5335,23.9957499 12.1415,24.1057499 C12.0955,24.1187499 12.0475,24.1247499 11.9995,24.1247499 C11.9515,24.1247499 11.9035,24.1187499 11.8575,24.1057499 C11.4655,23.9957499 2.2345,21.3467499 2.2345,14.5197499 L2.2345,4.55874992 C2.2345,3.59974992 2.7895,2.84274992 3.7185,2.53274992 L11.3495,-0.0372500833 C11.7845,-0.149250083 12.1945,-0.154250083 12.6095,-0.0492500833 C12.6215,-0.0462500833 12.6355,-0.0422500833 12.6495,-0.0372500833 L20.2805,2.53274992 Z"
})));
Warranty$1.displayName = "DecorativeIcon";

const IdTag = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "18",
  viewBox: "0 0 24 18"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -3)",
  d: "M6.9858,8.5725 C6.4078,9.1505 6.4078,10.0915 6.9858,10.6695 C7.5648,11.2485 8.5058,11.2475 9.0828,10.6695 C9.3628,10.3895 9.5178,10.0165 9.5178,9.6205 C9.5178,9.2245 9.3628,8.8525 9.0828,8.5725 C8.7938,8.2835 8.4138,8.1385 8.0338,8.1385 C7.6548,8.1385 7.2748,8.2835 6.9858,8.5725 Z M8.0348,12.1025 C7.3988,12.1025 6.7628,11.8605 6.2788,11.3765 C5.3108,10.4085 5.3108,8.8335 6.2788,7.8655 C7.2468,6.8985 8.8228,6.8975 9.7898,7.8655 C10.2588,8.3345 10.5178,8.9575 10.5178,9.6205 C10.5178,10.2845 10.2588,10.9075 9.7898,11.3765 C9.3058,11.8605 8.6708,12.1025 8.0348,12.1025 Z M10.0171,12.6897 C11.1671,12.6897 12.1031,13.6257 12.1031,14.7757 L12.1031,16.3627 C12.1031,16.6387 11.8801,16.8627 11.6031,16.8627 C11.3271,16.8627 11.1031,16.6387 11.1031,16.3627 L11.1031,14.7757 C11.1031,14.1767 10.6161,13.6897 10.0171,13.6897 L6.0521,13.6897 C5.4531,13.6897 4.9651,14.1767 4.9651,14.7757 L4.9651,16.3627 C4.9651,16.6387 4.7421,16.8627 4.4651,16.8627 C4.1891,16.8627 3.9651,16.6387 3.9651,16.3627 L3.9651,14.7757 C3.9651,13.6257 4.9011,12.6897 6.0521,12.6897 L10.0171,12.6897 Z M19.5342,7.1379 C19.8102,7.1379 20.0342,7.3619 20.0342,7.6379 C20.0342,7.9139 19.8102,8.1379 19.5342,8.1379 L14.7752,8.1379 C14.4992,8.1379 14.2752,7.9139 14.2752,7.6379 C14.2752,7.3619 14.4992,7.1379 14.7752,7.1379 L19.5342,7.1379 Z M19.5342,11.1038 C19.8102,11.1038 20.0342,11.3278 20.0342,11.6038 C20.0342,11.8798 19.8102,12.1038 19.5342,12.1038 L14.7752,12.1038 C14.4992,12.1038 14.2752,11.8798 14.2752,11.6038 C14.2752,11.3278 14.4992,11.1038 14.7752,11.1038 L19.5342,11.1038 Z M19.5342,15.0696 C19.8102,15.0696 20.0342,15.2936 20.0342,15.5696 C20.0342,15.8456 19.8102,16.0696 19.5342,16.0696 L14.7752,16.0696 C14.4992,16.0696 14.2752,15.8456 14.2752,15.5696 C14.2752,15.2936 14.4992,15.0696 14.7752,15.0696 L19.5342,15.0696 Z M23,18.7415 L23,5.2595 C23,4.6595 22.513,4.1725 21.914,4.1725 L2.086,4.1725 C1.487,4.1725 1,4.6595 1,5.2595 L1,18.7415 C1,19.3405 1.487,19.8275 2.086,19.8275 L21.914,19.8275 C22.513,19.8275 23,19.3405 23,18.7415 Z M21.914,3.1725 C23.064,3.1725 24,4.1085 24,5.2595 L24,18.7415 C24,19.8915 23.064,20.8275 21.914,20.8275 L2.086,20.8275 C0.936,20.8275 0,19.8915 0,18.7415 L0,5.2595 C0,4.1085 0.936,3.1725 2.086,3.1725 L21.914,3.1725 Z"
})));
IdTag.displayName = "DecorativeIcon";

const Infinite = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "12",
  viewBox: "0 0 24 12"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -6)",
  d: "M18.5,16.6555 C15.631,16.6555 14.127,14.4295 12.591,12.0005 C14.127,9.5705 15.631,7.3445 18.5,7.3445 C20.981,7.3445 23,9.4335 23,12.0005 C23,14.5675 20.981,16.6555 18.5,16.6555 M5.5,16.6555 C3.019,16.6555 1,14.5675 1,12.0005 C1,9.4335 3.019,7.3445 5.5,7.3445 C8.369,7.3445 9.873,9.5705 11.409,12.0005 C9.873,14.4295 8.369,16.6555 5.5,16.6555 M18.5,6.3445 C15.271,6.3445 13.55,8.6435 12,11.0665 C10.45,8.6435 8.729,6.3445 5.5,6.3445 C2.467,6.3445 0,8.8825 0,12.0005 C0,15.1185 2.467,17.6555 5.5,17.6555 C8.729,17.6555 10.45,15.3565 12,12.9345 C13.55,15.3565 15.271,17.6555 18.5,17.6555 C21.532,17.6555 24,15.1185 24,12.0005 C24,8.8825 21.532,6.3445 18.5,6.3445"
})));
Infinite.displayName = "DecorativeIcon";

const Information = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M13.5049,17.418 C13.7909,17.418 14.0239,17.651 14.0239,17.939 C14.0239,18.226 13.7909,18.458 13.5049,18.458 L10.4959,18.458 C10.2089,18.458 9.9759,18.226 9.9759,17.939 C9.9759,17.651 10.2089,17.418 10.4959,17.418 L11.4809,17.418 L11.4809,10.246 L10.8629,10.863 C10.6599,11.066 10.3319,11.066 10.1289,10.863 C10.0299,10.765 9.9759,10.634 9.9759,10.496 C9.9759,10.357 10.0299,10.227 10.1289,10.128 L11.6329,8.624 C11.7829,8.475 12.0049,8.43 12.1999,8.512 C12.3939,8.592 12.5199,8.78 12.5199,8.991 L12.5199,17.418 L13.5049,17.418 Z M12,6.8184 C11.786,6.8184 11.571,6.7364 11.409,6.5744 C11.083,6.2484 11.083,5.7174 11.409,5.3914 C11.734,5.0654 12.265,5.0654 12.591,5.3914 C12.917,5.7174 12.917,6.2484 12.591,6.5744 C12.429,6.7364 12.214,6.8184 12,6.8184 Z M12,22.9609 C14.928,22.9609 17.68,21.8199 19.751,19.7499 C21.82,17.6799 22.961,14.9279 22.961,11.9999 C22.961,9.0729 21.82,6.3199 19.75,4.2499 C17.679,2.1799 14.927,1.0389 12,1.0389 C9.072,1.0389 6.32,2.1799 4.25,4.2499 C2.18,6.3199 1.039,9.0719 1.039,11.9999 C1.039,14.9269 2.18,17.6789 4.25,19.7509 C6.32,21.8199 9.073,22.9609 12,22.9609 Z M20.484,3.5149 C22.752,5.7809 24,8.7939 24,11.9999 C24,15.2059 22.752,18.2189 20.486,20.4859 C18.219,22.7519 15.206,23.9999 12,23.9999 C8.794,23.9999 5.781,22.7519 3.515,20.4859 C1.248,18.2189 0,15.2049 0,11.9999 C0,8.7949 1.248,5.7819 3.515,3.5149 C5.782,1.2479 8.795,-0.0001 12,-0.0001 C15.205,-0.0001 18.219,1.2479 20.484,3.5149 Z"
})));
Information.displayName = "DecorativeIcon";

const Internet = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "17",
  viewBox: "0 0 24 17"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -4)",
  d: "M15.809,16.364 C15.697,16.364 15.584,16.327 15.492,16.25 C13.531,14.639 10.471,14.639 8.51,16.25 C8.297,16.427 7.982,16.395 7.807,16.182 C7.631,15.969 7.661,15.654 7.875,15.479 C9.032,14.525 10.498,14 12,14 C13.502,14 14.968,14.525 16.126,15.479 C16.34,15.654 16.37,15.969 16.194,16.182 C16.096,16.302 15.952,16.364 15.809,16.364 Z M19.432,12.906 C19.311,12.906 19.19,12.862 19.094,12.774 C17.145,10.985 14.626,10 12,10 C9.374,10 6.855,10.985 4.906,12.774 C4.705,12.96 4.387,12.948 4.2,12.744 C4.013,12.541 4.026,12.224 4.23,12.038 C6.363,10.079 9.123,9 12,9 C14.877,9 17.637,10.079 19.77,12.038 C19.974,12.225 19.987,12.541 19.8,12.744 C19.701,12.852 19.566,12.906 19.432,12.906 Z M23,9.417 C22.876,9.417 22.752,9.371 22.655,9.279 C19.756,6.52 15.972,5 12,5 C8.026,5 4.242,6.515 1.344,9.264 C1.145,9.453 0.827,9.447 0.638,9.245 C0.448,9.045 0.455,8.728 0.657,8.539 C3.74,5.612 7.769,4 12,4 C16.229,4 20.258,5.617 23.345,8.555 C23.545,8.745 23.553,9.062 23.363,9.262 C23.264,9.365 23.132,9.417 23,9.417 Z M12,21 C11.173,21 10.5,20.327 10.5,19.5 C10.5,18.673 11.173,18 12,18 C12.827,18 13.5,18.673 13.5,19.5 C13.5,20.327 12.827,21 12,21 Z M12,19 C11.725,19 11.5,19.225 11.5,19.5 C11.5,19.775 11.725,20 12,20 C12.275,20 12.5,19.775 12.5,19.5 C12.5,19.225 12.275,19 12,19 Z"
})));
Internet.displayName = "DecorativeIcon";

const Invisible = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "18",
  viewBox: "0 0 24 18"
}, /*#__PURE__*/React.createElement("path", {
  transform: "translate(0 -3)",
  d: "M3.5000431,20.999625 C3.3720431,20.999625 3.2440431,20.950625 3.1460431,20.853625 C2.9510431,20.658625 2.9510431,20.341625 3.1460431,20.146625 L20.1460431,3.146625 C20.3410431,2.951625 20.6580431,2.951625 20.8530431,3.146625 C21.0480431,3.341625 21.0480431,3.658625 20.8530431,3.853625 L3.8530431,20.853625 C3.7560431,20.950625 3.6280431,20.999625 3.5000431,20.999625 Z M4.9530431,16.718625 C4.8570431,16.718625 4.7620431,16.691625 4.6770431,16.634625 C1.8120431,14.731625 0.159043098,12.384625 0.0900430984,12.285625 C-0.0399569016,12.098625 -0.0279569016,11.848625 0.118043098,11.676625 C0.349043098,11.403625 5.8390431,4.999625 12.0000431,4.999625 C13.0390431,4.999625 14.1430431,5.192625 15.2810431,5.575625 C15.5430431,5.663625 15.6830431,5.946625 15.5950431,6.208625 C15.5080431,6.471625 15.2240431,6.616625 14.9620431,6.522625 C13.9280431,6.175625 12.9310431,5.999625 12.0000431,5.999625 C7.0190431,5.999625 2.2970431,10.776625 1.1460431,12.026625 C1.6850431,12.713625 3.1250431,14.402625 5.2290431,15.801625 C5.4590431,15.953625 5.5220431,16.264625 5.3690431,16.493625 C5.2730431,16.640625 5.1140431,16.718625 4.9530431,16.718625 Z M12.0000431,15.999625 C10.9310431,15.999625 9.9260431,15.583625 9.1720431,14.827625 C8.9770431,14.632625 8.9770431,14.314625 9.1720431,14.120625 C9.3670431,13.925625 9.6840431,13.925625 9.8790431,14.120625 C10.4450431,14.687625 11.1980431,14.999625 12.0000431,14.999625 C13.6540431,14.999625 15.0000431,13.653625 15.0000431,11.999625 C15.0000431,11.197625 14.6870431,10.444625 14.1210431,9.878625 C13.9260431,9.684625 13.9260431,9.366625 14.1210431,9.171625 C14.3160431,8.976625 14.6330431,8.976625 14.8280431,9.171625 C15.5840431,9.925625 16.0000431,10.930625 16.0000431,11.999625 C16.0000431,14.205625 14.2060431,15.999625 12.0000431,15.999625 Z M8.5610431,13.109625 C8.3240431,13.109625 8.1130431,12.938625 8.0700431,12.696625 C8.0290431,12.469625 8.0000431,12.237625 8.0000431,11.999625 C8.0000431,9.793625 9.7940431,7.999625 12.0000431,7.999625 C12.2380431,7.999625 12.4700431,8.028625 12.6970431,8.068625 C12.9680431,8.116625 13.1500431,8.376625 13.1020431,8.647625 C13.0540431,8.918625 12.7890431,9.106625 12.5230431,9.052625 C12.3530431,9.022625 12.1800431,8.999625 12.0000431,8.999625 C10.3460431,8.999625 9.0000431,10.345625 9.0000431,11.999625 C9.0000431,12.179625 9.0230431,12.352625 9.0540431,12.522625 C9.1020431,12.793625 8.9200431,13.053625 8.6490431,13.101625 C8.6190431,13.107625 8.5900431,13.109625 8.5610431,13.109625 Z M12.0000431,18.999625 C10.1710431,18.999625 8.3330431,18.561625 6.5380431,17.694625 C6.2890431,17.574625 6.1840431,17.275625 6.3050431,17.027625 C6.4250431,16.778625 6.7260431,16.673625 6.9720431,16.794625 C8.6310431,17.594625 10.3220431,17.999625 12.0000431,17.999625 C16.9450431,17.999625 21.6360431,13.290625 22.8280431,11.999625 C22.0430431,11.151625 19.7470431,8.829625 16.8730431,7.341625 C16.6270431,7.214625 16.5310431,6.912625 16.6580431,6.667625 C16.7850431,6.421625 17.0900431,6.325625 17.3320431,6.452625 C21.0630431,8.385625 23.7680431,11.542625 23.8810431,11.676625 C24.0390431,11.863625 24.0400431,12.136625 23.8820431,12.322625 C23.6510431,12.595625 18.1610431,18.999625 12.0000431,18.999625 Z"
})));
Invisible.displayName = "DecorativeIcon";

const Key = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "13",
  height: "24",
  viewBox: "0 0 13 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-6)",
  d: "M12.5,24 C12.372,24 12.244,23.951 12.146,23.854 L10.146,21.854 C10.053,21.76 10,21.633 10,21.5 L10,19.707 L9.146,18.853 C8.951,18.658 8.951,18.341 9.146,18.146 L10,17.293 L10,16.707 L9.146,15.853 C8.951,15.658 8.951,15.341 9.146,15.146 L10,14.293 L10,13 L9.5,13 C9.224,13 9,12.776 9,12.5 L9,11.972 C7.143,10.781 6,8.71 6,6.5 C6,2.916 8.916,0 12.5,0 C16.084,0 19,2.916 19,6.5 C19,8.71 17.857,10.781 16,11.972 L16,12.5 C16,12.776 15.776,13 15.5,13 L15,13 L15,21.5 C15,21.633 14.947,21.76 14.854,21.854 L12.854,23.854 C12.756,23.951 12.628,24 12.5,24 Z M11,21.293 L12.5,22.793 L14,21.293 L14,12.5 C14,12.224 14.224,12 14.5,12 L15,12 L15,11.691 C15,11.513 15.095,11.348 15.249,11.258 C16.946,10.275 18,8.452 18,6.5 C18,3.467 15.532,1 12.5,1 C9.468,1 7,3.467 7,6.5 C7,8.452 8.054,10.275 9.751,11.258 C9.905,11.348 10,11.513 10,11.691 L10,12 L10.5,12 C10.776,12 11,12.224 11,12.5 L11,14.5 C11,14.633 10.947,14.76 10.854,14.854 L10.207,15.5 L10.853,16.146 C10.947,16.24 11,16.367 11,16.5 L11,17.5 C11,17.633 10.947,17.76 10.854,17.854 L10.207,18.5 L10.853,19.146 C10.947,19.24 11,19.367 11,19.5 L11,21.293 Z M12.5,7 C11.121,7 10,5.878 10,4.5 C10,3.122 11.121,2 12.5,2 C13.879,2 15,3.122 15,4.5 C15,5.878 13.879,7 12.5,7 Z M12.5,3 C11.673,3 11,3.673 11,4.5 C11,5.327 11.673,6 12.5,6 C13.327,6 14,5.327 14,4.5 C14,3.673 13.327,3 12.5,3 Z M12.5,21 C12.224,21 12,20.776 12,20.5 L12,13.5 C12,13.224 12.224,13 12.5,13 C12.776,13 13,13.224 13,13.5 L13,20.5 C13,20.776 12.776,21 12.5,21 Z"
})));
Key.displayName = "DecorativeIcon";

const Laptop = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "18",
  viewBox: "0 0 24 18"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -3)",
  d: "M23.5,16.5 L22,16.5 L22,5 C22,4.173 21.327,3.5 20.5,3.5 L3.5,3.5 C2.673,3.5 2,4.173 2,5 L2,16.5 L0.5,16.5 C0.224,16.5 0,16.724 0,17 L0,18 C0,19.378 1.122,20.5 2.5,20.5 L21.5,20.5 C22.878,20.5 24,19.378 24,18 L24,17 C24,16.724 23.776,16.5 23.5,16.5 Z M3,5 C3,4.724 3.224,4.5 3.5,4.5 L20.5,4.5 C20.776,4.5 21,4.724 21,5 L21,16.5 L16,16.5 C15.867,16.5 15.74,16.553 15.648,16.646 L14.794,17.5 L9.208,17.5 L8.354,16.646 C8.26,16.553 8.133,16.5 8,16.5 L3,16.5 L3,5 Z M23,18 C23,18.827 22.327,19.5 21.5,19.5 L2.5,19.5 C1.673,19.5 1,18.827 1,18 L1,17.5 L7.793,17.5 L8.646,18.354 C8.74,18.447 8.867,18.5 9,18.5 L15,18.5 C15.133,18.5 15.26,18.447 15.353,18.354 L16.207,17.5 L23,17.5 L23,18 Z"
})));
Laptop.displayName = "DecorativeIcon";

const Layers = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "22",
  viewBox: "0 0 24 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -1)",
  d: "M12,14.5 C11.921,14.5 11.841,14.481 11.769,14.443 L0.269,8.443 C0.104,8.357 0,8.187 0,8 C0,7.813 0.104,7.643 0.269,7.557 L11.769,1.557 C11.914,1.481 12.087,1.481 12.232,1.557 L23.732,7.557 C23.896,7.643 24,7.813 24,8 C24,8.187 23.896,8.357 23.731,8.443 L12.231,14.443 C12.159,14.481 12.079,14.5 12,14.5 Z M1.581,8 L12,13.437 L22.419,8 L12,2.563 L1.581,8 Z M12,18.5 C11.921,18.5 11.841,18.4806902 11.769,18.4420705 L0.269,12.34423 C0.104,12.2568277 0,12.0840555 0,11.8940062 C0,11.7039568 0.104,11.5311847 0.269,11.4437823 L1.941,10.5575628 C2.185,10.4305245 2.488,10.5230084 2.616,10.7730198 C2.744,11.022015 2.649,11.3289396 2.404,11.4590269 L1.581,11.8940062 L12,17.4196659 L22.419,11.8940062 L21.597,11.4580106 C21.352,11.3279233 21.257,11.0209987 21.385,10.7720035 C21.513,10.5230084 21.816,10.4295081 22.06,10.5565465 L23.732,11.442766 C23.896,11.5311847 24,11.7039568 24,11.8940062 C24,12.0840555 23.896,12.2568277 23.731,12.34423 L12.231,18.4420705 C12.159,18.4806902 12.079,18.5 12,18.5 Z M12,22.5 C11.921,22.5 11.841,22.4806902 11.769,22.4420705 L0.269,16.34423 C0.104,16.2568277 0,16.0840555 0,15.8940062 C0,15.7039568 0.104,15.5311847 0.269,15.4437823 L1.941,14.5575628 C2.185,14.4295081 2.488,14.5240247 2.616,14.7730198 C2.744,15.022015 2.649,15.3289396 2.404,15.4590269 L1.581,15.8940062 L12,21.4196659 L22.419,15.8940062 L21.597,15.4580106 C21.352,15.3279233 21.257,15.0209987 21.385,14.7720035 C21.513,14.5230084 21.816,14.4295081 22.06,14.5565465 L23.732,15.442766 C23.896,15.5311847 24,15.7039568 24,15.8940062 C24,16.0840555 23.896,16.2568277 23.731,16.34423 L12.231,22.4420705 C12.159,22.4806902 12.079,22.5 12,22.5 Z"
})));
Layers.displayName = "DecorativeIcon";

const Lifesaver = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M12,24 C5.383,24 0,18.617 0,12 C0,5.383 5.383,0 12,0 C18.617,0 24,5.383 24,12 C24,18.617 18.617,24 12,24 Z M12,1 C5.935,1 1,5.935 1,12 C1,18.065 5.935,23 12,23 C18.065,23 23,18.065 23,12 C23,5.935 18.065,1 12,1 Z M12,7 C9.243,7 7,9.243 7,12 C7,14.757 9.243,17 12,17 C14.757,17 17,14.757 17,12 C17,9.243 14.757,7 12,7 Z M17.7960593,10.4459879 C17.9290623,10.9417858 18,11.4627473 18,12 C18,12.5375375 17.928987,13.0587665 17.7958477,13.5548006 L22.06,17.818 C22.255,18.013 22.255,18.33 22.06,18.525 C21.963,18.622 21.835,18.671 21.707,18.671 C21.579,18.671 21.451,18.622 21.353,18.525 L17.4136327,14.586513 C16.8215534,15.8210691 15.8193667,16.822918 14.584566,17.414566 L18.524,21.354 C18.719,21.549 18.719,21.866 18.524,22.061 C18.427,22.158 18.299,22.207 18.171,22.207 C18.043,22.207 17.915,22.158 17.817,22.061 L13.5524721,17.7964721 C13.0571355,17.9292091 12.5366965,18 12,18 C11.4627473,18 10.9417857,17.9290622 10.4459877,17.7960592 L6.182,22.061 C6.085,22.158 5.957,22.207 5.829,22.207 C5.701,22.207 5.573,22.158 5.475,22.061 C5.28,21.866 5.28,21.549 5.475,21.354 L9.41416282,17.4139567 C8.17972026,16.8221223 7.17787771,15.8202797 6.58604328,14.5858372 L2.646,18.525 C2.549,18.622 2.421,18.671 2.293,18.671 C2.165,18.671 2.037,18.622 1.939,18.525 C1.744,18.33 1.744,18.013 1.939,17.818 L6.20394079,13.5540123 C6.07093776,13.0582143 6,12.5372527 6,12 C6,11.4630321 6.07086256,10.9423381 6.20372931,10.4467763 L1.939,6.183 C1.744,5.988 1.744,5.671 1.939,5.476 C2.134,5.281 2.451,5.281 2.646,5.476 L6.58571922,9.41483884 C7.17742984,8.18025738 8.17921683,7.17826388 9.4136488,6.58628975 L5.476,2.646 C5.281,2.451 5.281,2.134 5.476,1.939 C5.671,1.744 5.988,1.744 6.183,1.939 L10.4467763,6.20372931 C10.9423381,6.07086256 11.4630321,6 12,6 C12.5372527,6 13.0582142,6.07093774 13.5540121,6.20394075 L17.817,1.94 C18.012,1.745 18.329,1.745 18.524,1.94 C18.719,2.135 18.719,2.452 18.524,2.647 L14.585837,6.58604321 C15.8202797,7.17787765 16.8221224,8.17972029 17.4139568,9.41416297 L21.353,5.476 C21.548,5.281 21.865,5.281 22.06,5.476 C22.255,5.671 22.255,5.988 22.06,6.183 L17.7960593,10.4459879 Z"
})));
Lifesaver.displayName = "DecorativeIcon";

const Lightbulb = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "16",
  height: "24",
  viewBox: "0 0 16 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-4)",
  d: "M13.768,18 L10.232,18 C9.088,18 8.109,17.187 7.851,16.023 C7.706,15.367 7.458,14.8 7.093,14.291 C6.903,14.025 6.704,13.758 6.503,13.488 C5.33,11.91 4,10.123 4,8 C4,3.589 7.589,0 12,0 C16.411,0 20,3.589 20,8 C20,10.123 18.67,11.91 17.497,13.488 C17.296,13.758 17.097,14.025 16.907,14.291 C16.542,14.801 16.294,15.367 16.149,16.023 C15.891,17.188 14.912,18 13.768,18 Z M12,1 C8.14,1 5,4.141 5,8 C5,9.792 6.172,11.367 7.306,12.891 C7.511,13.166 7.713,13.439 7.907,13.709 C8.345,14.322 8.656,15.027 8.828,15.807 C8.983,16.51 9.561,17 10.232,17 L13.768,17 C14.439,17 15.017,16.51 15.172,15.807 C15.344,15.028 15.654,14.323 16.093,13.709 C16.287,13.438 16.489,13.166 16.694,12.891 C17.828,11.367 19,9.792 19,8 C19,4.141 15.86,1 12,1 Z M14.5,20 L9.5,20 C9.224,20 9,19.776 9,19.5 C9,19.224 9.224,19 9.5,19 L14.5,19 C14.776,19 15,19.224 15,19.5 C15,19.776 14.776,20 14.5,20 Z M14.5,22 L9.5,22 C9.224,22 9,21.776 9,21.5 C9,21.224 9.224,21 9.5,21 L14.5,21 C14.776,21 15,21.224 15,21.5 C15,21.776 14.776,22 14.5,22 Z M13.5,24 L10.5,24 C10.224,24 10,23.776 10,23.5 C10,23.224 10.224,23 10.5,23 L13.5,23 C13.776,23 14,23.224 14,23.5 C14,23.776 13.776,24 13.5,24 Z"
})));
Lightbulb.displayName = "DecorativeIcon";

const LocationAdd = props => {
  return /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
    width: "18",
    height: "24",
    viewBox: "0 0 18 24"
  }, /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    transform: "translate(-3)",
    d: "M12.5,9 L12.5,10.5 C12.5,10.776 12.276,11 12,11 C11.724,11 11.5,10.776 11.5,10.5 L11.5,9 L10,9 C9.724,9 9.5,8.776 9.5,8.5 C9.5,8.224 9.724,8 10,8 L11.5,8 L11.5,6.5 C11.5,6.224 11.724,6 12,6 C12.276,6 12.5,6.224 12.5,6.5 L12.5,8 L14,8 C14.276,8 14.5,8.224 14.5,8.5 C14.5,8.776 14.276,9 14,9 L12.5,9 Z M12,24 C11.884,24 11.767,23.959 11.673,23.878 C11.339,23.59 3.5,16.718 3.5,8.5 C3.5,3.813 7.313,0 12,0 C16.687,0 20.5,3.813 20.5,8.5 C20.5,16.718 12.661,23.59 12.327,23.878 C12.233,23.959 12.116,24 12,24 Z M12,1 C7.864,1 4.5,4.364 4.5,8.5 C4.5,15.342 10.516,21.426 12,22.822 C13.483,21.425 19.5,15.334 19.5,8.5 C19.5,4.364 16.136,1 12,1 Z M12,14 C8.968,14 6.5,11.533 6.5,8.5 C6.5,5.467 8.968,3 12,3 C15.032,3 17.5,5.467 17.5,8.5 C17.5,11.533 15.032,14 12,14 Z M12,4 C9.519,4 7.5,6.019 7.5,8.5 C7.5,10.981 9.519,13 12,13 C14.481,13 16.5,10.981 16.5,8.5 C16.5,6.019 14.481,4 12,4 Z"
  })));
};
LocationAdd.displayName = "DecorativeIcon";

const LocationHome = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "18",
  height: "24",
  viewBox: "0 0 18 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-3)",
  d: "M12,24 C11.883,24 11.767,23.959 11.673,23.878 C11.339,23.59 3.5,16.718 3.5,8.5 C3.5,3.813 7.313,0 12,0 C16.687,0 20.5,3.813 20.5,8.5 C20.5,16.718 12.661,23.59 12.327,23.878 C12.233,23.959 12.117,24 12,24 Z M12,1 C7.864,1 4.5,4.364 4.5,8.5 C4.5,15.342 10.516,21.426 12,22.822 C13.483,21.425 19.5,15.334 19.5,8.5 C19.5,4.364 16.136,1 12,1 Z M15,13 L13,13 C12.724,13 12.5,12.776 12.5,12.5 L12.5,10 L11.5,10 L11.5,12.5 C11.5,12.776 11.276,13 11,13 L9,13 C8.724,13 8.5,12.776 8.5,12.5 L8.5,9 L8,9 C7.798,9 7.615,8.878 7.538,8.691 C7.46,8.504 7.503,8.29 7.646,8.146 L11.646,4.146 C11.841,3.951 12.158,3.951 12.353,4.146 L16.353,8.146 C16.496,8.289 16.539,8.504 16.461,8.691 C16.385,8.878 16.202,9 16,9 L15.5,9 L15.5,12.5 C15.5,12.776 15.276,13 15,13 Z M13.5,12 L14.5,12 L14.5,8.5 C14.5,8.286 14.635,8.103 14.825,8.032 L12,5.207 L9.175,8.032 C9.365,8.103 9.5,8.286 9.5,8.5 L9.5,12 L10.5,12 L10.5,9.5 C10.5,9.224 10.724,9 11,9 L13,9 C13.276,9 13.5,9.224 13.5,9.5 L13.5,12 Z"
})));
LocationHome.displayName = "DecorativeIcon";

const LocationMap = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M11.9998303,11 C10.0698303,11 8.49983029,9.43 8.49983029,7.5 C8.49983029,5.57 10.0698303,4 11.9998303,4 C13.9298303,4 15.4998303,5.57 15.4998303,7.5 C15.4998303,9.43 13.9298303,11 11.9998303,11 Z M11.9998303,5 C10.6208303,5 9.49983029,6.121 9.49983029,7.5 C9.49983029,8.879 10.6208303,10 11.9998303,10 C13.3788303,10 14.4998303,8.879 14.4998303,7.5 C14.4998303,6.121 13.3788303,5 11.9998303,5 Z M22.9998303,24 L0.999830289,24 C0.814830289,24 0.645830289,23.898 0.559830289,23.736 C0.471830289,23.573 0.481830289,23.376 0.583830289,23.222 L4.58383029,17.222 C4.67683029,17.084 4.83283029,17 4.99983029,17 L9.84983029,17 C10.1258303,17 10.3498303,17.224 10.3498303,17.5 C10.3498303,17.776 10.1258303,18 9.84983029,18 L5.26783029,18 L1.93483029,23 L22.0658303,23 L18.7328303,18 L14.1498303,18 C13.8738303,18 13.6498303,17.776 13.6498303,17.5 C13.6498303,17.224 13.8738303,17 14.1498303,17 L18.9998303,17 C19.1668303,17 19.3228303,17.084 19.4158303,17.223 L23.4158303,23.223 C23.5188303,23.376 23.5278303,23.574 23.4398303,23.737 C23.3538303,23.898 23.1848303,24 22.9998303,24 Z M11.9998303,21 C11.8448303,21 11.6978303,20.928 11.6038303,20.804 C11.3128303,20.426 4.49983029,11.49 4.49983029,7.5 C4.49983029,3.364 7.86383029,2.84217094e-14 11.9998303,2.84217094e-14 C16.1358303,2.84217094e-14 19.4998303,3.364 19.4998303,7.5 C19.4998303,11.49 12.6868303,20.426 12.3958303,20.804 C12.3018303,20.928 12.1548303,21 11.9998303,21 Z M11.9998303,1 C8.41583029,1 5.49983029,3.916 5.49983029,7.5 C5.49983029,10.636 10.5318303,17.678 11.9998303,19.665 C13.4678303,17.678 18.4998303,10.636 18.4998303,7.5 C18.4998303,3.916 15.5838303,1 11.9998303,1 Z"
})));
LocationMap.displayName = "DecorativeIcon";

const LocationRegular = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "18",
  height: "24",
  viewBox: "0 0 18 24"
}, /*#__PURE__*/React.createElement("path", {
  transform: "translate(-3)",
  d: "M12,14 C8.968,14 6.5,11.533 6.5,8.5 C6.5,5.467 8.968,3 12,3 C15.032,3 17.5,5.467 17.5,8.5 C17.5,11.533 15.032,14 12,14 Z M12,4 C9.519,4 7.5,6.019 7.5,8.5 C7.5,10.981 9.519,13 12,13 C14.481,13 16.5,10.981 16.5,8.5 C16.5,6.019 14.481,4 12,4 Z M12,14 C8.968,14 6.5,11.533 6.5,8.5 C6.5,5.467 8.968,3 12,3 C15.032,3 17.5,5.467 17.5,8.5 C17.5,11.533 15.032,14 12,14 Z M12,4 C9.519,4 7.5,6.019 7.5,8.5 C7.5,10.981 9.519,13 12,13 C14.481,13 16.5,10.981 16.5,8.5 C16.5,6.019 14.481,4 12,4 Z M12,24 C11.884,24 11.767,23.959 11.673,23.878 C11.339,23.59 3.5,16.718 3.5,8.5 C3.5,3.813 7.313,0 12,0 C16.687,0 20.5,3.813 20.5,8.5 C20.5,16.718 12.661,23.59 12.327,23.878 C12.233,23.959 12.116,24 12,24 Z M12,1 C7.864,1 4.5,4.364 4.5,8.5 C4.5,15.342 10.516,21.426 12,22.822 C13.483,21.425 19.5,15.334 19.5,8.5 C19.5,4.364 16.136,1 12,1 Z"
})));
LocationRegular.displayName = "DecorativeIcon";

const LocationRemove = props => {
  return /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
    width: "18",
    height: "24",
    viewBox: "0 0 18 24"
  }, /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    transform: "translate(-3)",
    d: "M11.9995,9.2075 L10.353,10.854 C10.256,10.951 10.128,11 10,11 C9.872,11 9.744,10.951 9.646,10.854 C9.451,10.659 9.451,10.342 9.646,10.147 L11.2925,8.5005 L9.646,6.854 C9.451,6.659 9.451,6.342 9.646,6.147 C9.841,5.952 10.158,5.952 10.353,6.147 L11.9995,7.7935 L13.646,6.147 C13.841,5.952 14.158,5.952 14.353,6.147 C14.548,6.342 14.548,6.659 14.353,6.854 L12.7065,8.5005 L14.353,10.147 C14.548,10.342 14.548,10.659 14.353,10.854 C14.256,10.951 14.128,11 14,11 C13.872,11 13.744,10.951 13.646,10.854 L11.9995,9.2075 Z M12,24 C11.884,24 11.767,23.959 11.673,23.878 C11.339,23.59 3.5,16.718 3.5,8.5 C3.5,3.813 7.313,0 12,0 C16.687,0 20.5,3.813 20.5,8.5 C20.5,16.718 12.661,23.59 12.327,23.878 C12.233,23.959 12.116,24 12,24 Z M12,1 C7.864,1 4.5,4.364 4.5,8.5 C4.5,15.342 10.516,21.426 12,22.822 C13.483,21.425 19.5,15.334 19.5,8.5 C19.5,4.364 16.136,1 12,1 Z M12,14 C8.968,14 6.5,11.533 6.5,8.5 C6.5,5.467 8.968,3 12,3 C15.032,3 17.5,5.467 17.5,8.5 C17.5,11.533 15.032,14 12,14 Z M12,4 C9.519,4 7.5,6.019 7.5,8.5 C7.5,10.981 9.519,13 12,13 C14.481,13 16.5,10.981 16.5,8.5 C16.5,6.019 14.481,4 12,4 Z"
  })));
};
LocationRemove.displayName = "DecorativeIcon";

const LocationVerified = props => {
  return /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
    width: "18",
    height: "24",
    viewBox: "0 0 18 24"
  }, /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    transform: "translate(-3)",
    d: "M12,24 C11.884,24 11.767,23.959 11.673,23.878 C11.339,23.59 3.5,16.718 3.5,8.5 C3.5,3.813 7.313,0 12,0 C16.687,0 20.5,3.813 20.5,8.5 C20.5,16.718 12.661,23.59 12.327,23.878 C12.233,23.959 12.116,24 12,24 Z M12,1 C7.864,1 4.5,4.364 4.5,8.5 C4.5,15.342 10.516,21.426 12,22.822 C13.483,21.425 19.5,15.334 19.5,8.5 C19.5,4.364 16.136,1 12,1 Z M12,14 C8.968,14 6.5,11.533 6.5,8.5 C6.5,5.467 8.968,3 12,3 C15.032,3 17.5,5.467 17.5,8.5 C17.5,11.533 15.032,14 12,14 Z M12,4 C9.519,4 7.5,6.019 7.5,8.5 C7.5,10.981 9.519,13 12,13 C14.481,13 16.5,10.981 16.5,8.5 C16.5,6.019 14.481,4 12,4 Z M11,11 C10.872,11 10.744,10.951 10.646,10.854 L8.646,8.854 C8.451,8.659 8.451,8.342 8.646,8.147 C8.841,7.952 9.158,7.952 9.353,8.147 L11,9.793 L14.646,6.147 C14.841,5.952 15.158,5.952 15.353,6.147 C15.548,6.342 15.548,6.659 15.353,6.854 L11.353,10.854 C11.256,10.951 11.128,11 11,11 Z"
  })));
};
LocationVerified.displayName = "DecorativeIcon";

const LockClosed = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "18",
  height: "24",
  viewBox: "0 0 18 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-3)",
  d: "M12.6348,16.3315 C12.9848,15.9815 12.9848,15.4125 12.6348,15.0615 C12.4658,14.8925 12.2398,14.7995 11.9998,14.7995 C11.7598,14.7995 11.5338,14.8925 11.3648,15.0605 C11.0148,15.4125 11.0148,15.9815 11.3648,16.3315 C11.6878,16.6535 12.3128,16.6525 12.6348,16.3325 L12.6348,16.3315 Z M11.9988,13.7765 C12.5208,13.7765 13.0198,13.9775 13.3688,14.3275 C13.7348,14.6915 13.9358,15.1785 13.9358,15.6965 C13.9358,16.2155 13.7348,16.7015 13.3678,17.0665 C13.1338,17.3015 12.8418,17.4725 12.5198,17.5605 L12.5198,19.9405 C12.5198,20.2275 12.2868,20.4605 11.9998,20.4605 C11.7138,20.4605 11.4808,20.2275 11.4808,19.9405 L11.4808,17.5605 C11.1578,17.4715 10.8648,17.3015 10.6308,17.0655 C10.2648,16.7015 10.0638,16.2155 10.0638,15.6965 C10.0638,15.1785 10.2648,14.6915 10.6308,14.3265 C10.9798,13.9775 11.4788,13.7765 11.9988,13.7765 Z M19.794,21.896 L19.794,12.395 C19.794,11.809 19.316,11.332 18.73,11.332 L5.271,11.332 C4.684,11.332 4.206,11.809 4.206,12.395 L4.206,21.896 C4.206,22.483 4.684,22.96 5.271,22.96 L18.73,22.96 C19.316,22.96 19.794,22.483 19.794,21.896 Z M6.582,6.457 L6.582,10.292 L17.419,10.292 L17.419,6.457 C17.419,3.469 14.988,1.039 12,1.039 C9.012,1.039 6.582,3.469 6.582,6.457 Z M18.73,10.292 C19.89,10.292 20.833,11.235 20.833,12.395 L20.833,21.896 C20.833,23.056 19.89,24 18.73,24 L5.271,24 C4.11,24 3.167,23.056 3.167,21.896 L3.167,12.395 C3.167,11.235 4.11,10.292 5.271,10.292 L5.543,10.292 L5.543,6.457 C5.543,2.896 8.44,0 12,0 C15.561,0 18.458,2.896 18.458,6.457 L18.458,10.292 L18.73,10.292 Z"
})));
LockClosed.displayName = "DecorativeIcon";

const LockOpened = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "18",
  height: "24",
  viewBox: "0 0 18 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-3)",
  d: "M12.6348,16.3315 L12.6348,16.3325 C12.3128,16.6525 11.6878,16.6535 11.3648,16.3315 C11.0148,15.9815 11.0148,15.4125 11.3648,15.0605 C11.5338,14.8925 11.7598,14.7995 11.9998,14.7995 C12.2398,14.7995 12.4658,14.8925 12.6348,15.0615 C12.9848,15.4125 12.9848,15.9815 12.6348,16.3315 M11.9988,13.7765 C12.5208,13.7765 13.0198,13.9775 13.3688,14.3275 C13.7348,14.6915 13.9358,15.1785 13.9358,15.6965 C13.9358,16.2155 13.7348,16.7015 13.3678,17.0665 C13.1338,17.3015 12.8418,17.4725 12.5198,17.5605 L12.5198,19.9405 C12.5198,20.2275 12.2868,20.4605 11.9998,20.4605 C11.7138,20.4605 11.4808,20.2275 11.4808,19.9405 L11.4808,17.5605 C11.1578,17.4715 10.8648,17.3015 10.6308,17.0655 C10.2648,16.7015 10.0638,16.2155 10.0638,15.6965 C10.0638,15.1785 10.2648,14.6915 10.6308,14.3265 C10.9798,13.9775 11.4788,13.7765 11.9988,13.7765 Z M19.794,21.896 L19.794,12.395 C19.794,11.809 19.316,11.332 18.73,11.332 L5.271,11.332 C4.684,11.332 4.206,11.809 4.206,12.395 L4.206,21.896 C4.206,22.483 4.684,22.96 5.271,22.96 L18.73,22.96 C19.316,22.96 19.794,22.483 19.794,21.896 Z M18.73,10.292 C19.89,10.292 20.833,11.235 20.833,12.395 L20.833,21.896 C20.833,23.056 19.89,24 18.73,24 L5.271,24 C4.11,24 3.167,23.056 3.167,21.896 L3.167,12.395 C3.167,11.235 4.11,10.292 5.271,10.292 L5.543,10.292 L5.543,6.457 C5.543,2.896 8.44,0 12,0 C15.561,0 18.458,2.896 18.458,6.457 C18.458,6.749 18.231,6.977 17.939,6.977 C17.647,6.977 17.418,6.749 17.418,6.457 C17.418,3.469 14.987,1.039 12,1.039 C9.012,1.039 6.582,3.469 6.582,6.457 L6.582,10.292 L18.73,10.292 Z"
})));
LockOpened.displayName = "DecorativeIcon";

const Login$1 = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "25px",
  height: "26px",
  viewBox: "0 0 25 26",
  version: "1.1"
}, /*#__PURE__*/React.createElement("g", {
  id: "MVP-1",
  stroke: "none",
  strokeWidth: "1",
  fill: "none",
  fillRule: "evenodd"
}, /*#__PURE__*/React.createElement("g", {
  id: "XL-RA_Mobility-Services-w.Banner",
  transform: "translate(-749.000000, -500.000000)",
  fill: "#4B286D"
}, /*#__PURE__*/React.createElement("g", {
  id: "Group-5-Copy",
  transform: "translate(136.000000, 455.000000)"
}, /*#__PURE__*/React.createElement("g", {
  id: "Group",
  transform: "translate(614.000000, 46.000000)"
}, /*#__PURE__*/React.createElement("path", {
  d: "M16.0005,23.0001 L23.0005,23.0001 L23.0005,18.0001 L16.0005,18.0001 L16.0005,23.0001 Z M23.5005,24.0001 L15.5005,24.0001 C15.2235,24.0001 15.0005,23.7761 15.0005,23.5001 L15.0005,17.5001 C15.0005,17.2241 15.2235,17.0001 15.5005,17.0001 L23.5005,17.0001 C23.7765,17.0001 24.0005,17.2241 24.0005,17.5001 L24.0005,23.5001 C24.0005,23.7761 23.7765,24.0001 23.5005,24.0001 L23.5005,24.0001 Z",
  id: "Fill-3184"
}), /*#__PURE__*/React.createElement("path", {
  d: "M19.5,22 C19.224,22 19,21.776 19,21.5 L19,20 C19,19.724 19.224,19.5 19.5,19.5 C19.776,19.5 20,19.724 20,20 L20,21.5 C20,21.776 19.776,22 19.5,22",
  id: "Fill-3185"
}), /*#__PURE__*/React.createElement("path", {
  d: "M19.5,19.999 L19.5,20 L20,20 L19.5,19.999 Z M19.5,21 C18.949,21 18.5,20.552 18.5,20 C18.5,19.448 18.949,19 19.5,19 C20.051,19 20.5,19.448 20.5,20 C20.5,20.552 20.051,21 19.5,21 L19.5,21 Z",
  id: "Fill-3186"
}), /*#__PURE__*/React.createElement("path", {
  d: "M13.5,24 L0.5,24 C0.224,24 0,23.776 0,23.5 L0,21.098 C0,21.057 0.005,21.016 0.015,20.977 C0.276,19.933 0.686,18.911 1.904,18.505 L6.342,17.025 C7.385,16.59 7.873,14.863 7.978,14.208 C7.213,13.506 6.5,12.449 6.5,11.5 C6.5,11.146 6.395,11 6.339,10.973 C6.184,10.934 6.095,10.835 6.036,10.686 C5.981,10.549 5.5,9.322 5.5,8.5 C5.5,8.459 5.505,8.418 5.515,8.379 C5.57,8.159 5.723,7.839 6,7.651 L6,5 C6,2.912 7.902,0 11,0 C14.06,0 14.892,1.569 14.99,2.345 C15.508,2.729 16,3.389 16,5 L16,7.651 C16.277,7.839 16.43,8.159 16.485,8.379 C16.495,8.418 16.5,8.459 16.5,8.5 C16.5,9.322 16.019,10.549 15.964,10.686 C15.905,10.835 15.777,10.946 15.621,10.985 C15.605,11 15.5,11.146 15.5,11.5 C15.5,12.449 14.788,13.505 14.024,14.207 C14.064,14.448 14.156,14.857 14.334,15.321 C14.432,15.579 14.303,15.868 14.045,15.967 C13.787,16.064 13.498,15.937 13.399,15.679 C13.14,14.999 13,14.307 13,14 C13,13.851 13.066,13.71 13.182,13.614 C13.837,13.073 14.5,12.173 14.5,11.5 C14.5,10.753 14.809,10.339 15.101,10.143 C15.245,9.751 15.474,9.039 15.498,8.575 C15.481,8.536 15.457,8.495 15.441,8.481 C15.165,8.481 15,8.276 15,8 L15,5 C15,3.528 14.527,3.229 14.325,3.1 C14.204,3.022 14.001,2.894 13.97,2.619 C13.964,2.56 13.973,2.492 13.993,2.424 C13.921,2.027 13.321,1 11,1 C8.558,1 7,3.369 7,5 L7,8 C7,8.276 6.776,8.5 6.5,8.5 C6.524,8.5 6.515,8.534 6.502,8.572 C6.525,9.038 6.755,9.751 6.899,10.143 C7.191,10.338 7.5,10.753 7.5,11.5 C7.5,12.173 8.163,13.073 8.818,13.614 C8.934,13.71 9,13.851 9,14 C9,14.635 8.423,17.24 6.692,17.962 L2.221,19.454 C1.512,19.69 1.231,20.259 1,21.16 L1,23 L13.5,23 C13.776,23 14,23.224 14,23.5 C14,23.776 13.776,24 13.5,24",
  id: "Fill-3187",
  stroke: "#4B286D",
  strokeWidth: "0.25"
}), /*#__PURE__*/React.createElement("path", {
  d: "M22.5,18 C22.224,18 22,17.776 22,17.5 L22,16.5 C22,15.121 20.878,14 19.5,14 C18.122,14 17,15.121 17,16.5 L17,17.5 C17,17.776 16.776,18 16.5,18 C16.224,18 16,17.776 16,17.5 L16,16.5 C16,14.57 17.57,13 19.5,13 C21.43,13 23,14.57 23,16.5 L23,17.5 C23,17.776 22.776,18 22.5,18",
  id: "Fill-3188"
})))))));
Login$1.displayName = "DecorativeIcon";

const LoginForm = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M10.6709,4.3261 C9.9379,5.0591 9.9379,6.2511 10.6709,6.9841 C11.4039,7.7161 12.5959,7.7161 13.3289,6.9841 C14.0619,6.2511 14.0619,5.0591 13.3289,4.3261 C12.9629,3.9601 12.4819,3.7761 11.9999,3.7761 C11.5189,3.7761 11.0379,3.9601 10.6709,4.3261 Z M11.9999,8.5331 C11.2629,8.5331 10.5249,8.2521 9.9639,7.6911 C8.8409,6.5681 8.8409,4.7421 9.9639,3.6191 C11.0869,2.4961 12.9129,2.4961 14.0359,3.6191 C15.1579,4.7421 15.1579,6.5681 14.0359,7.6911 C13.4749,8.2521 12.7369,8.5331 11.9999,8.5331 Z M6.8447,14.0858 C6.5687,14.0858 6.3447,13.8618 6.3447,13.5858 L6.3447,11.9998 C6.3447,10.3848 7.6097,9.1208 9.2237,9.1208 L14.7757,9.1208 C16.3907,9.1208 17.6557,10.3848 17.6557,11.9998 L17.6557,13.5858 C17.6557,13.8618 17.4317,14.0858 17.1557,14.0858 C16.8787,14.0858 16.6557,13.8618 16.6557,13.5858 L16.6557,11.9998 C16.6557,10.9288 15.8467,10.1208 14.7757,10.1208 L9.2237,10.1208 C8.1527,10.1208 7.3447,10.9288 7.3447,11.9998 L7.3447,13.5858 C7.3447,13.8618 7.1207,14.0858 6.8447,14.0858 Z M20.2246,19.1376 L20.2246,16.7586 C20.2246,16.1596 19.7376,15.6726 19.1376,15.6726 L4.8626,15.6726 C4.2636,15.6726 3.7756,16.1596 3.7756,16.7586 L3.7756,19.1376 C3.7756,19.7376 4.2636,20.2246 4.8626,20.2246 L19.1376,20.2246 C19.7376,20.2246 20.2246,19.7376 20.2246,19.1376 Z M19.1376,14.6726 C20.2876,14.6726 21.2246,15.6086 21.2246,16.7586 L21.2246,19.1376 C21.2246,20.2876 20.2876,21.2246 19.1376,21.2246 L4.8626,21.2246 C3.7116,21.2246 2.7756,20.2876 2.7756,19.1376 L2.7756,16.7586 C2.7756,15.6086 3.7116,14.6726 4.8626,14.6726 L19.1376,14.6726 Z M7.5947,16.4052 C7.7897,16.6002 7.7897,16.9172 7.5947,17.1122 L6.7587,17.9482 L7.5947,18.7842 C7.7897,18.9792 7.7897,19.2962 7.5947,19.4912 C7.4967,19.5892 7.3687,19.6372 7.2407,19.6372 C7.1137,19.6372 6.9857,19.5892 6.8877,19.4912 L6.0517,18.6552 L5.2157,19.4912 C5.1177,19.5892 4.9907,19.6372 4.8627,19.6372 C4.7347,19.6372 4.6067,19.5892 4.5087,19.4912 C4.3137,19.2962 4.3137,18.9792 4.5087,18.7842 L5.3447,17.9482 L4.5087,17.1122 C4.3137,16.9172 4.3137,16.6002 4.5087,16.4052 C4.7037,16.2102 5.0207,16.2102 5.2157,16.4052 L6.0517,17.2412 L6.8877,16.4052 C7.0827,16.2102 7.3997,16.2102 7.5947,16.4052 Z M11.5605,16.4052 C11.7555,16.6002 11.7555,16.9172 11.5605,17.1122 L10.7245,17.9482 L11.5605,18.7842 C11.7555,18.9792 11.7555,19.2962 11.5605,19.4912 C11.4625,19.5892 11.3345,19.6372 11.2065,19.6372 C11.0795,19.6372 10.9515,19.5892 10.8535,19.4912 L10.0175,18.6552 L9.1815,19.4912 C9.0835,19.5892 8.9555,19.6372 8.8275,19.6372 C8.6995,19.6372 8.5715,19.5892 8.4745,19.4912 C8.2785,19.2962 8.2785,18.9792 8.4745,18.7842 L9.3105,17.9482 L8.4745,17.1122 C8.2785,16.9172 8.2785,16.6002 8.4745,16.4052 C8.6695,16.2102 8.9855,16.2102 9.1815,16.4052 L10.0175,17.2412 L10.8535,16.4052 C11.0485,16.2102 11.3655,16.2102 11.5605,16.4052 Z M15.5264,16.4052 C15.7214,16.6002 15.7214,16.9172 15.5264,17.1122 L14.6904,17.9482 L15.5264,18.7842 C15.7214,18.9792 15.7214,19.2962 15.5264,19.4912 C15.4284,19.5892 15.3004,19.6372 15.1724,19.6372 C15.0454,19.6372 14.9174,19.5892 14.8194,19.4912 L13.9824,18.6552 L13.1464,19.4912 C13.0484,19.5892 12.9214,19.6372 12.7934,19.6372 C12.6654,19.6372 12.5374,19.5892 12.4394,19.4912 C12.2444,19.2962 12.2444,18.9792 12.4394,18.7842 L13.2754,17.9482 L12.4394,17.1122 C12.2444,16.9172 12.2444,16.6002 12.4394,16.4052 C12.6344,16.2102 12.9514,16.2102 13.1464,16.4052 L13.9824,17.2412 L14.8194,16.4052 C15.0144,16.2102 15.3314,16.2102 15.5264,16.4052 Z M19.4912,16.4052 C19.6862,16.6002 19.6862,16.9172 19.4912,17.1122 L18.6552,17.9482 L19.4912,18.7842 C19.6862,18.9792 19.6862,19.2962 19.4912,19.4912 C19.3932,19.5892 19.2652,19.6372 19.1372,19.6372 C19.0102,19.6372 18.8822,19.5892 18.7842,19.4912 L17.9482,18.6552 L17.1122,19.4912 C17.0142,19.5892 16.8872,19.6372 16.7592,19.6372 C16.6312,19.6372 16.5032,19.5892 16.4052,19.4912 C16.2102,19.2962 16.2102,18.9792 16.4052,18.7842 L17.2412,17.9482 L16.4052,17.1122 C16.2102,16.9172 16.2102,16.6002 16.4052,16.4052 C16.6002,16.2102 16.9172,16.2102 17.1122,16.4052 L17.9482,17.2412 L18.7842,16.4052 C18.9792,16.2102 19.2962,16.2102 19.4912,16.4052 Z M23,21.914 L23,2.086 C23,1.487 22.513,1 21.914,1 L2.086,1 C1.487,1 1,1.487 1,2.086 L1,21.914 C1,22.513 1.487,23 2.086,23 L21.914,23 C22.513,23 23,22.513 23,21.914 Z M21.914,-2.84217094e-14 C23.064,-2.84217094e-14 24,0.936 24,2.086 L24,21.914 C24,23.064 23.064,24 21.914,24 L2.086,24 C0.936,24 0,23.064 0,21.914 L0,2.086 C0,0.936 0.936,-2.84217094e-14 2.086,-2.84217094e-14 L21.914,-2.84217094e-14 Z"
})));
LoginForm.displayName = "DecorativeIcon";

const Map$1 = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "20",
  viewBox: "0 0 24 20"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -2)",
  d: "M1,5.979875 L1,20.747875 L7.138,18.019875 L7.138,3.251875 L1,5.979875 Z M16.862,5.979875 L16.862,20.747875 L23,18.019875 L23,3.251875 L16.862,5.979875 Z M8.138,17.993875 L15.862,20.803875 L15.862,6.004875 L8.138,3.196875 L8.138,17.993875 Z M16.362,22.017875 C16.298,22.017875 16.236,22.005875 16.181,21.982875 L7.656,18.883875 L0.703,21.974875 C0.549,22.041875 0.37,22.027875 0.228,21.936875 C0.085,21.844875 0,21.686875 0,21.517875 L0,5.654875 C0,5.457875 0.116,5.278875 0.297,5.197875 L7.425,2.029875 C7.487,2.000875 7.556,1.983875 7.628,1.982875 C7.634,1.981875 7.642,1.981875 7.649,1.982875 C7.709,1.983875 7.766,1.995875 7.819,2.016875 L16.344,5.115875 L23.297,2.025875 C23.451,1.956875 23.631,1.970875 23.772,2.062875 C23.914,2.155875 24,2.312875 24,2.482875 L24,18.344875 C24,18.541875 23.884,18.721875 23.703,18.801875 L16.575,21.969875 C16.511,22.000875 16.438,22.017875 16.362,22.017875 L16.362,22.017875 Z"
})));
Map$1.displayName = "DecorativeIcon";

const Medical = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M21.914,3.965 C23.064,3.965 24,4.901 24,6.052 L24,21.121 C24,22.271 23.064,23.207 21.914,23.207 L2.086,23.207 C0.936,23.207 0,22.271 0,21.121 L0,6.052 C0,4.901 0.936,3.965 2.086,3.965 L7.138,3.965 L7.138,2.879 C7.138,1.729 8.074,0.793 9.224,0.793 L14.775,0.793 C15.926,0.793 16.862,1.729 16.862,2.879 L16.862,3.965 L21.914,3.965 Z M23,21.121 L23,6.052 C23,5.453 22.513,4.965 21.914,4.965 L2.086,4.965 C1.487,4.965 1,5.453 1,6.052 L1,21.121 C1,21.72 1.487,22.207 2.086,22.207 L21.914,22.207 C22.513,22.207 23,21.72 23,21.121 Z M8.138,2.879 L8.138,3.965 L15.862,3.965 L15.862,2.879 C15.862,2.28 15.375,1.793 14.775,1.793 L9.224,1.793 C8.625,1.793 8.138,2.28 8.138,2.879 Z M15.8525,17.4383 C16.8815,16.4093 17.4485,15.0423 17.4485,13.5853 C17.4485,12.1303 16.8815,10.7623 15.8525,9.7333 C14.8235,8.7043 13.4555,8.1373 11.9995,8.1373 C10.5445,8.1373 9.1765,8.7043 8.1475,9.7333 C7.1185,10.7623 6.5515,12.1303 6.5515,13.5853 C6.5515,15.0423 7.1185,16.4103 8.1475,17.4383 C9.1765,18.4673 10.5445,19.0343 11.9995,19.0343 C13.4555,19.0343 14.8235,18.4673 15.8525,17.4383 Z M11.9995,7.1373 C13.7225,7.1373 15.3415,7.8083 16.5595,9.0263 C17.7775,10.2443 18.4485,11.8633 18.4485,13.5853 C18.4485,15.3083 17.7775,16.9273 16.5595,18.1453 C15.3415,19.3633 13.7225,20.0343 11.9995,20.0343 C10.2775,20.0343 8.6585,19.3633 7.4405,18.1453 C6.2225,16.9273 5.5515,15.3083 5.5515,13.5853 C5.5515,11.8633 6.2225,10.2443 7.4405,9.0263 C8.6585,7.8083 10.2775,7.1373 11.9995,7.1373 Z M14.7754,13.0858 C15.0514,13.0858 15.2754,13.3098 15.2754,13.5858 C15.2754,13.8618 15.0514,14.0858 14.7754,14.0858 L12.5004,14.0858 L12.5004,16.3618 C12.5004,16.6388 12.2764,16.8618 12.0004,16.8618 C11.7234,16.8618 11.5004,16.6388 11.5004,16.3618 L11.5004,14.0858 L9.2244,14.0858 C8.9474,14.0858 8.7244,13.8618 8.7244,13.5858 C8.7244,13.3098 8.9474,13.0858 9.2244,13.0858 L11.5004,13.0858 L11.5004,10.8108 C11.5004,10.5338 11.7234,10.3108 12.0004,10.3108 C12.2764,10.3108 12.5004,10.5338 12.5004,10.8108 L12.5004,13.0858 L14.7754,13.0858 Z"
})));
Medical.displayName = "DecorativeIcon";

const Messaging = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "18",
  viewBox: "0 0 24 18"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -4)",
  d: "M17,11.5 L17,8.5 C17,6.019 14.981,4 12.5,4 L4.5,4 C2.019,4 0,6.019 0,8.5 L0,11.5 C0,13.981 2.019,16 4.5,16 L5,16 L5,18.5 C5,18.702 5.122,18.885 5.309,18.962 C5.37,18.988 5.436,19 5.5,19 C5.63,19 5.758,18.949 5.853,18.854 L8.707,16 L12.5,16 C14.981,16 17,13.981 17,11.5 Z M8.5,15 C8.367,15 8.24,15.053 8.146,15.147 L6,17.293 L6,15.5 C6,15.224 5.776,15 5.5,15 L4.5,15 C2.57,15 1,13.43 1,11.5 L1,8.5 C1,6.57 2.57,5 4.5,5 L12.5,5 C14.43,5 16,6.57 16,8.5 L16,11.5 C16,13.43 14.43,15 12.5,15 L8.5,15 Z M19.5,7 L18.549,7 C18.273,7 18.049,7.224 18.049,7.5 C18.049,7.776 18.273,8 18.549,8 L19.5,8 C21.43,8 23,9.57 23,11.5 L23,14.5 C23,16.43 21.43,18 19.5,18 L18.5,18 C18.224,18 18,18.224 18,18.5 L18,20.293 L15.854,18.146 C15.76,18.053 15.633,18 15.5,18 L11.5,18 C10.782,18 10.089,17.777 9.494,17.355 C9.271,17.196 8.958,17.248 8.797,17.473 C8.638,17.698 8.69,18.01 8.916,18.17 C9.681,18.713 10.574,19 11.5,19 L15.293,19 L18.146,21.854 C18.242,21.949 18.37,22 18.5,22 C18.564,22 18.63,21.988 18.691,21.962 C18.878,21.885 19,21.702 19,21.5 L19,19 L19.5,19 C21.981,19 24,16.981 24,14.5 L24,11.5 C24,9.019 21.981,7 19.5,7 Z M10.75,8 L6.25,8 C5.008,8 4,8.224 4,8.5 C4,8.776 5.008,9 6.25,9 L10.75,9 C11.992,9 13,8.776 13,8.5 C13,8.224 11.992,8 10.75,8 Z M10.75,10 L6.25,10 C5.008,10 4,10.224 4,10.5 C4,10.776 5.008,11 6.25,11 L10.75,11 C11.992,11 13,10.776 13,10.5 C13,10.224 11.992,10 10.75,10 Z M7,12 L5,12 C4.448,12 4,12.224 4,12.5 C4,12.776 4.448,13 5,13 L7,13 C7.552,13 8,12.776 8,12.5 C8,12.224 7.552,12 7,12 Z"
})));
Messaging.displayName = "DecorativeIcon";

const Microphone = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24px",
  height: "24px",
  viewBox: "0 0 24 24",
  version: "1.1"
}, /*#__PURE__*/React.createElement("g", {
  id: "[WIP]-Amazon-Alexa-Integration---Sprint-1---May-2021",
  stroke: "none",
  strokeWidth: "1",
  fill: "none",
  fillRule: "evenodd"
}, /*#__PURE__*/React.createElement("g", {
  id: "Artboard",
  transform: "translate(-1208.000000, -170.000000)"
}, /*#__PURE__*/React.createElement("g", {
  id: "microphone-copy-2",
  transform: "translate(1208.000000, 170.000000)"
}, /*#__PURE__*/React.createElement("rect", {
  id: "Rectangle",
  x: "0",
  y: "0",
  width: "24",
  height: "24"
}), /*#__PURE__*/React.createElement("g", {
  id: "mic",
  transform: "translate(5.250000, 0.000000)",
  fill: "#4B286D",
  fillRule: "nonzero"
}, /*#__PURE__*/React.createElement("path", {
  d: "M10.75,23 C11.0261424,23 11.25,23.2238576 11.25,23.5 C11.25,23.7454599 11.0731248,23.9496084 10.8398756,23.9919443 L10.75,24 L2.75,24 C2.47385763,24 2.25,23.7761424 2.25,23.5 C2.25,23.2545401 2.42687516,23.0503916 2.66012437,23.0080557 L2.75,23 L10.75,23 Z",
  id: "Stroke-633"
}), /*#__PURE__*/React.createElement("path", {
  d: "M8.35,0 L5.15,0 C3.54825763,0 2.25,1.29825763 2.25,2.9 L2.25,14.1 C2.25,15.7017424 3.54825763,17 5.15,17 L8.35,17 C9.95174237,17 11.25,15.7017424 11.25,14.1 L11.25,2.9 C11.25,1.29825763 9.95174237,0 8.35,0 Z M5.15,1 L8.35,1 C9.39945763,1 10.25,1.85054237 10.25,2.9 L10.25,14.1 C10.25,15.1494576 9.39945763,16 8.35,16 L5.15,16 C4.10054237,16 3.25,15.1494576 3.25,14.1 L3.25,2.9 C3.25,1.85054237 4.10054237,1 5.15,1 Z",
  id: "Stroke-634"
}), /*#__PURE__*/React.createElement("path", {
  d: "M13,9 C13.2454599,9 13.4496084,9.17687516 13.4919443,9.41012437 L13.5,9.5 L13.5,14.4090909 C13.5,16.8669105 11.6430597,18.8818569 9.30157422,18.9949903 L9.09375,19 L4.40625,19 C2.03744901,19 0.112828719,17.0552771 0.0047841317,14.6247709 L0,14.4090909 L0,9.5 C0,9.22385763 0.223857625,9 0.5,9 C0.745459889,9 0.94960837,9.17687516 0.991944331,9.41012437 L1,9.5 L1,14.4090909 C1,16.3307194 2.4303159,17.8927045 4.2198846,17.9947017 L4.40625,18 L9.09375,18 C10.9068212,18 12.3975728,16.5020692 12.4949417,14.606552 L12.5,14.4090909 L12.5,9.5 C12.5,9.22385763 12.7238576,9 13,9 Z",
  id: "Stroke-635"
}), /*#__PURE__*/React.createElement("path", {
  d: "M6.75,18 C6.99545989,18 7.19960837,18.1768752 7.24194433,18.4101244 L7.25,18.5 L7.25,23.5 C7.25,23.7761424 7.02614237,24 6.75,24 C6.50454011,24 6.30039163,23.8231248 6.25805567,23.5898756 L6.25,23.5 L6.25,18.5 C6.25,18.2238576 6.47385763,18 6.75,18 Z",
  id: "Stroke-636"
})))))));
Microphone.displayName = "DecorativeIcon";

const Mobility = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "14",
  height: "24",
  viewBox: "0 0 14 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-5)",
  d: "M18,18 L18,5 L6,5 L6,18 L18,18 Z M18,19 L6,19 L6,20.5 C6,21.878 7.122,23 8.5,23 L15.5,23 C16.878,23 18,21.878 18,20.5 L18,19 Z M18,4 L18,3.5 C18,2.122 16.878,1 15.5,1 L8.5,1 C7.122,1 6,2.122 6,3.5 L6,4 L18,4 Z M15.5,24 L8.5,24 C6.57,24 5,22.43 5,20.5 L5,3.5 C5,1.57 6.57,0 8.5,0 L15.5,0 C17.43,0 19,1.57 19,3.5 L19,20.5 C19,22.43 17.43,24 15.5,24 Z M12.7071064,20.2928936 C13.0976312,20.6834184 13.0976312,21.3165856 12.7071064,21.7071064 C12.3165816,22.0976312 11.6834144,22.0976312 11.2928936,21.7071064 C10.9023688,21.3165816 10.9023688,20.6834144 11.2928936,20.2928936 C11.6834184,19.9023688 12.3165856,19.9023688 12.7071064,20.2928936 Z M13.5,3 L10.5,3 C10.224,3 10,2.776 10,2.5 C10,2.224 10.224,2 10.5,2 L13.5,2 C13.776,2 14,2.224 14,2.5 C14,2.776 13.776,3 13.5,3 Z M15.5024876,3 C15.2278607,3 15,2.776 15,2.5 C15,2.224 15.2179104,2 15.4925373,2 L15.5024876,2 C15.7771144,2 16,2.224 16,2.5 C16,2.776 15.7771144,3 15.5024876,3 Z"
})));
Mobility.displayName = "DecorativeIcon";

const Movie = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M4.924 9.885l.026.115h18.55c.276 0 .5.224.5.5v3c0 .276-.224.5-.5.5h-.5v9.5c0 .276-.224.5-.5.5h-19c-.276 0-.5-.224-.5-.5v-9.5h-.5c-.276 0-.5-.224-.5-.5v-.55c-1.139-.232-2-1.243-2-2.45 0-1.023.619-1.905 1.501-2.292l-.354-.354c-.122-.122-.173-.297-.134-.465.038-.167.16-.304.322-.361l20-7c.125-.044.265-.036.385.023s.212.164.254.291l1 3c.087.262-.054.545-.316.632l-14.98 4.993-.038.013-2.716.905zm-.441-.906l1.89-.63-1.992-1.328-1.965.688.3.3c.718.062 1.35.428 1.767.97zm-1.969.021h-.028c-.821.007-1.487.677-1.487 1.5 0 .827.673 1.5 1.5 1.5s1.5-.673 1.5-1.5c0-.822-.665-1.492-1.486-1.5zm-.514 3.95c.162.033.329.05.5.05.313 0 .612-.058.889-.163.333-.127.632-.324.88-.572.262-.262.466-.581.591-.938l.091-.328h2.343l-2 2h-1.793zm4.707.05h2.586l2-2h-2.586l-2 2zm4 0h2.586l2-2h-2.586l-2 2zm4 0h2.586l2-2h-2.586l-2 2zm4 0h2.586l1.707-1.707v-.293h-2.293l-2 2zm-14.707 1v9h18v-9h-18zm16.5 8h-6c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h6c.276 0 .5.224.5.5s-.224.5-.5.5zm0-3h-6c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h6c.276 0 .5.224.5.5s-.224.5-.5.5zm-9 3h-6c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h6c.276 0 .5.224.5.5s-.224.5-.5.5zm9-6h-6c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h6c.276 0 .5.224.5.5s-.224.5-.5.5zm-9 4c-.276 0-.5-.224-.5-.5v-.5h-1.5c-.161 0-.312-.077-.406-.208-.094-.13-.12-.298-.068-.451l1-3c.087-.262.368-.403.632-.316.262.087.403.37.316.632l-.78 2.343h1.306c.276 0 .5.224.5.5v1c0 .276-.224.5-.5.5zm-5 0h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1c.276 0 .5-.224.5-.5s-.224-.5-.5-.5h-1c-.276 0-.5-.224-.5-.5v-2c0-.276.224-.5.5-.5h2c.276 0 .5.224.5.5s-.224.5-.5.5h-1.5v1h.5c.827 0 1.5.673 1.5 1.5s-.673 1.5-1.5 1.5zm16.5-7.293l-.293.293h.293v-.293zm-5.13-8.19l-2.287-1.357-.057-.039-2.377.832 2.101 1.247.152.139 2.468-.823zm1.254-.418l2.744-.915-.682-2.044-4.431 1.551 2.334 1.385.035.023zm-4.924 1.641l-2.285-1.356-2.407.843 2.241 1.33 2.451-.817zm-3.706 1.235l-2.219-1.317-2.712.949 2.011 1.341 2.92-.973z"
})));
Movie.displayName = "DecorativeIcon";

const Music = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "22",
  height: "24",
  viewBox: "0 0 22 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-1)",
  d: "M8.49953443,9.85258853 L8.49953443,20.9592434 C8.51490897,21.3533949 8.40511466,21.7556568 8.1735842,22.1402839 C7.69565717,22.9351626 6.73780341,23.5750649 5.61197529,23.8510227 C5.20103803,23.9520073 4.79709971,24 4.41315832,24 C2.9893757,24 1.82855293,23.3431003 1.5575943,22.2732636 C1.42861399,21.7613418 1.52159979,21.2204244 1.82855293,20.7105022 C2.30647996,19.9156236 3.26433372,19.2757213 4.39016184,18.9997634 C5.58628666,18.7060001 6.72478848,18.860928 7.49968709,19.3445362 L7.49968709,9.51617231 C7.4993214,9.50520117 7.499324,9.4942572 7.49968709,9.48335664 L7.49968709,5.78578086 C7.49968709,5.15387734 7.89962603,4.58596405 8.49553505,4.37299656 L20.4937032,0.0876508273 C20.9516333,-0.0773239851 21.4635551,-0.00633482338 21.8624942,0.274622281 C22.2594336,0.555579386 22.4973973,1.01450932 22.4973973,1.50043513 L22.4973973,4.48204961 C22.4979076,4.49505667 22.4979034,4.50802553 22.4973973,4.52092942 L22.4973973,17.5029919 C22.4973973,17.5653153 22.4859738,17.6249869 22.4651079,17.6800255 C22.5581351,18.1613934 22.4580772,18.6645811 22.1714471,19.1407419 C21.69352,19.9356205 20.7356663,20.5755228 19.6098382,20.8514807 C19.1989009,20.9524653 18.7949626,21.000458 18.4110212,21.000458 C16.9872386,21.000458 15.8264158,20.3435582 15.5554572,19.2737216 C15.4264769,18.7617997 15.5194627,18.2208823 15.8264158,17.7109602 C16.3043428,16.9160815 17.2621966,16.2761792 18.3880247,16.0002214 C19.582961,15.7058258 20.7221903,15.860928 21.49755,16.3447874 L21.49755,5.21044013 L8.49953443,9.85258853 Z M8.49953443,8.79075065 L21.49755,4.14860225 L21.49755,1.50043513 C21.49755,1.33546032 21.4205617,1.18748291 21.2855823,1.09149756 C21.1506029,0.995512219 20.9836284,0.974515425 20.8286521,1.02850718 L8.83048391,5.31385291 C8.63251413,5.38584192 8.49953443,5.57481307 8.49953443,5.78578086 L8.49953443,8.79075065 Z M7.49968709,20.9945528 C7.49742801,20.9381234 7.48953941,20.8805799 7.4746909,20.8224851 C7.32171426,20.2225767 6.53583424,19.8526332 5.57998018,19.8526332 C5.27502674,19.8526332 4.95307589,19.8906274 4.6281255,19.9706152 C3.76825678,20.181583 3.02437036,20.6625096 2.68542211,21.2254236 C2.56943981,21.4183941 2.44745844,21.7153488 2.52744623,22.028301 C2.7274157,22.8201801 4.03121664,23.2121203 5.37401163,22.880171 C6.23388034,22.6692032 6.97776677,22.1882766 7.31671502,21.6253625 C7.40677402,21.475523 7.50045007,21.2629878 7.5003781,21.0289497 C7.49991934,21.0201768 7.49968709,21.0113442 7.49968709,21.0024577 L7.49968709,20.9945528 Z M19.577843,16.8530912 C19.2728896,16.8530912 18.9509388,16.8910854 18.6259884,16.9710731 C17.7661197,17.1820409 17.0222332,17.6629675 16.683285,18.2258816 C16.5673027,18.4188521 16.4453213,18.7158068 16.5253091,19.028759 C16.7252786,19.8206381 18.0290795,20.2125782 19.3718745,19.8806289 C20.2317432,19.6696611 20.9756296,19.1887346 21.3145779,18.6258205 C21.4305602,18.43285 21.5525416,18.1358953 21.4725538,17.8229431 C21.3195771,17.2230347 20.5336971,16.8530912 19.577843,16.8530912 Z"
})));
Music.displayName = "DecorativeIcon";

const Networking = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M13.585,12.6577 C14.964,12.6577 16.086,13.7797 16.086,15.1587 L16.086,16.3477 C16.086,16.6347 15.854,16.8677 15.566,16.8677 C15.279,16.8677 15.046,16.6347 15.046,16.3477 L15.046,15.1587 C15.046,14.3527 14.391,13.6977 13.585,13.6977 L10.415,13.6977 C9.609,13.6977 8.954,14.3527 8.954,15.1587 L8.954,16.3477 C8.954,16.6347 8.72,16.8677 8.434,16.8677 C8.147,16.8677 7.914,16.6347 7.914,16.3477 L7.914,15.1587 C7.914,13.7797 9.036,12.6577 10.415,12.6577 L13.585,12.6577 Z M4.3155,8.267 C4.5915,7.991 4.7435,7.624 4.7435,7.234 C4.7435,6.844 4.5915,6.476 4.3155,6.201 C4.0395,5.925 3.6725,5.772 3.2825,5.772 C2.8925,5.772 2.5255,5.925 2.2495,6.201 C1.9735,6.477 1.8215,6.844 1.8215,7.234 C1.8215,7.624 1.9735,7.991 2.2495,8.267 C2.5115,8.529 2.8885,8.68 3.2825,8.68 C3.6765,8.68 4.0535,8.529 4.3155,8.267 Z M3.2825,15.283 C2.8925,15.283 2.5255,15.434 2.2495,15.71 C1.6795,16.28 1.6795,17.206 2.2495,17.776 C2.5115,18.038 2.8885,18.19 3.2825,18.19 C3.6765,18.19 4.0535,18.038 4.3155,17.777 C4.5905,17.501 4.7425,17.134 4.7425,16.743 C4.7425,16.352 4.5905,15.985 4.3155,15.71 C4.0405,15.434 3.6735,15.283 3.2825,15.283 Z M18.3295,17.455 C18.0645,16.568 18.2975,15.626 18.9505,14.975 C19.2905,14.634 19.7195,14.403 20.1975,14.302 L20.1975,9.675 C19.7195,9.575 19.2915,9.344 18.9495,9.002 C18.4765,8.53 18.2165,7.902 18.2165,7.234 C18.2165,7.002 18.2535,6.769 18.3285,6.523 L13.8915,4.103 C13.8525,4.153 13.8135,4.202 13.7685,4.247 C13.2955,4.72 12.6685,4.98 12.0005,4.98 C11.3315,4.98 10.7045,4.72 10.2315,4.247 C10.1865,4.202 10.1475,4.153 10.1075,4.103 L5.6715,6.522 C5.7475,6.769 5.7835,7.002 5.7835,7.234 C5.7835,7.903 5.5235,8.531 5.0515,9.002 C4.7095,9.344 4.2795,9.575 3.8025,9.675 L3.8025,14.322 C4.2905,14.419 4.7205,14.644 5.0515,14.976 C5.7025,15.626 5.9355,16.568 5.6705,17.455 L10.1085,19.875 C10.1465,19.825 10.1855,19.776 10.2315,19.73 C11.1755,18.788 12.8275,18.788 13.7675,19.729 C13.8145,19.776 13.8535,19.825 13.8915,19.875 L18.3295,17.455 Z M19.6835,15.71 C19.1145,16.28 19.1145,17.206 19.6845,17.776 C20.2535,18.347 21.1825,18.346 21.7505,17.776 C22.3205,17.206 22.3205,16.28 21.7505,15.71 C21.4755,15.435 21.1085,15.284 20.7175,15.284 C20.3275,15.284 19.9605,15.435 19.6835,15.71 Z M19.6845,8.267 C20.2535,8.837 21.1825,8.835 21.7505,8.267 C22.0265,7.991 22.1785,7.624 22.1785,7.234 C22.1785,6.844 22.0265,6.477 21.7505,6.201 C21.4755,5.925 21.1085,5.773 20.7175,5.773 C20.3275,5.773 19.9605,5.925 19.6835,6.201 C19.4085,6.476 19.2555,6.843 19.2555,7.234 C19.2555,7.624 19.4085,7.991 19.6845,8.267 Z M12.0005,1.017 C11.6095,1.017 11.2425,1.17 10.9665,1.446 C10.6915,1.722 10.5385,2.089 10.5385,2.479 C10.5385,2.869 10.6915,3.236 10.9665,3.512 C11.5175,4.062 12.4835,4.062 13.0345,3.512 C13.3095,3.235 13.4615,2.869 13.4615,2.479 C13.4615,2.089 13.3095,1.722 13.0335,1.446 C12.7575,1.17 12.3905,1.017 12.0005,1.017 Z M13.0345,22.531 L13.0335,22.531 C13.3085,22.256 13.4605,21.889 13.4605,21.498 C13.4605,21.108 13.3085,20.741 13.0335,20.466 C12.7575,20.189 12.3905,20.038 12.0005,20.038 C11.6095,20.038 11.2425,20.189 10.9665,20.466 C10.6915,20.741 10.5395,21.108 10.5395,21.498 C10.5395,21.889 10.6915,22.256 10.9665,22.531 C11.5175,23.083 12.4835,23.082 13.0345,22.531 Z M21.2375,14.302 C21.7155,14.403 22.1455,14.634 22.4865,14.976 C23.4615,15.951 23.4615,17.538 22.4865,18.512 C22.0145,18.983 21.3865,19.244 20.7175,19.244 C20.0475,19.244 19.4205,18.983 18.9495,18.511 C18.9035,18.466 18.8645,18.416 18.8265,18.368 L14.3875,20.788 C14.6525,21.675 14.4195,22.617 13.7685,23.268 C13.2955,23.741 12.6675,24 12.0005,24 C11.3325,24 10.7045,23.741 10.2315,23.268 C9.5805,22.616 9.3485,21.674 9.6125,20.788 L5.1745,18.368 C5.1365,18.416 5.0975,18.466 5.0515,18.511 C4.5785,18.985 3.9495,19.246 3.2825,19.246 C2.6155,19.246 1.9875,18.985 1.5145,18.512 C0.5395,17.538 0.5395,15.951 1.5145,14.975 C1.8455,14.644 2.2755,14.419 2.7625,14.322 L2.7625,9.675 C2.2855,9.575 1.8555,9.344 1.5145,9.002 C1.0415,8.531 0.7815,7.903 0.7815,7.234 C0.7815,6.565 1.0415,5.937 1.5145,5.466 C1.9655,5.014 2.6095,4.755 3.2825,4.755 C3.9555,4.755 4.6005,5.014 5.0515,5.466 C5.0965,5.511 5.1355,5.56 5.1745,5.61 L9.6105,3.19 C9.5355,2.944 9.4985,2.711 9.4985,2.479 C9.4985,1.811 9.7585,1.183 10.2315,0.71 C10.6825,0.259 11.3265,0 12.0005,0 C12.6735,0 13.3175,0.259 13.7685,0.71 C14.2415,1.183 14.5015,1.811 14.5015,2.479 C14.5015,2.71 14.4645,2.944 14.3885,3.19 L18.8255,5.61 C18.8645,5.559 18.9035,5.511 18.9505,5.465 C19.4205,4.994 20.0485,4.734 20.7175,4.734 C21.3865,4.734 22.0145,4.994 22.4865,5.466 C22.9595,5.938 23.2185,6.566 23.2185,7.234 C23.2185,7.901 22.9595,8.529 22.4865,9.002 C22.1455,9.343 21.7145,9.574 21.2375,9.675 L21.2375,14.302 Z M12.0001,8.1499 C11.6101,8.1499 11.2431,8.3019 10.9671,8.5779 C10.6911,8.8539 10.5391,9.2209 10.5391,9.6109 C10.5391,10.0019 10.6911,10.3689 10.9671,10.6449 C11.5171,11.1959 12.4841,11.1939 13.0341,10.6449 C13.3101,10.3679 13.4611,10.0009 13.4611,9.6109 C13.4611,9.2219 13.3101,8.8549 13.0331,8.5779 C12.7571,8.3019 12.3901,8.1499 12.0001,8.1499 Z M12.0001,12.1129 C11.3321,12.1129 10.7041,11.8519 10.2311,11.3789 C9.7591,10.9079 9.4991,10.2799 9.4991,9.6109 C9.4991,8.9429 9.7591,8.3159 10.2311,7.8429 C10.6821,7.3919 11.3271,7.1329 12.0001,7.1329 C12.6731,7.1329 13.3171,7.3919 13.7691,7.8429 C14.2411,8.3149 14.5011,8.9429 14.5011,9.6109 C14.5011,10.2799 14.2411,10.9079 13.7681,11.3789 C13.2961,11.8519 12.6681,12.1129 12.0001,12.1129 Z"
})));
Networking.displayName = "DecorativeIcon";

const News = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "19",
  viewBox: "0 0 24 19"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -3)",
  d: "M2.5,22 C1.121,22 0,20.879 0,19.5 L0,8.5 C0,7.2921932 0.859947661,6.28230478 2,6.05017771 L2,5.5 C2,4.121 3.121,3 4.5,3 L21.5,3 C22.879,3 24,4.121 24,5.5 L24,19.5 C24,20.879 22.879,22 21.5,22 L2.5,22 Z M2.5,21 L21.5,21 C22.327,21 23,20.327 23,19.5 L23,5.5 C23,4.673 22.327,4 21.5,4 L4.5,4 C3.673,4 3,4.673 3,5.5 L3,19.5 C3,19.776 2.776,20 2.5,20 C2.224,20 2,19.776 2,19.5 L2,7.08570362 C1.41802114,7.29210597 1,7.8482259 1,8.5 L1,19.5 C1,20.327 1.673,21 2.5,21 Z M12.5,19 L4.5,19 C4.224,19 4,18.776 4,18.5 L4,12.5 C4,12.224 4.224,12 4.5,12 L12.5,12 C12.776,12 13,12.224 13,12.5 L13,18.5 C13,18.776 12.776,19 12.5,19 Z M5,18 L12,18 L12,13 L5,13 L5,18 Z M21.5,13 L14.5,13 C14.224,13 14,12.776 14,12.5 C14,12.224 14.224,12 14.5,12 L21.5,12 C21.776,12 22,12.224 22,12.5 C22,12.776 21.776,13 21.5,13 Z M21.5,16 L14.5,16 C14.224,16 14,15.776 14,15.5 C14,15.224 14.224,15 14.5,15 L21.5,15 C21.776,15 22,15.224 22,15.5 C22,15.776 21.776,16 21.5,16 Z M21.5,19 L14.5,19 C14.224,19 14,18.776 14,18.5 C14,18.224 14.224,18 14.5,18 L21.5,18 C21.776,18 22,18.224 22,18.5 C22,18.776 21.776,19 21.5,19 Z M21.5,10 L4.5,10 C4.224,10 4,9.776 4,9.5 C4,9.224 4.224,9 4.5,9 L21.5,9 C21.776,9 22,9.224 22,9.5 C22,9.776 21.776,10 21.5,10 Z M21.5,7 L4.5,7 C4.224,7 4,6.776 4,6.5 C4,6.224 4.224,6 4.5,6 L21.5,6 C21.776,6 22,6.224 22,6.5 C22,6.776 21.776,7 21.5,7 Z"
})));
News.displayName = "DecorativeIcon";

const NextGenFirewall = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M23.1996555,11.2001934 L17.7317381,11.2001934 C17.8981356,10.5826027 18.0005341,9.91701278 18.0005341,9.19942363 C18.0005341,5.99467205 15.223776,2.68032213 15.1061778,2.54112423 C15.0013794,2.41792609 14.830982,2.36912683 14.6789843,2.41872608 C14.5245866,2.46832533 14.4157882,2.60512326 14.4021884,2.76672082 L14.165392,5.60667791 C13.5510013,4.02830176 12.443018,1.7819357 10.6758447,0.109160974 C10.5454467,-0.0140371645 10.3502497,-0.0348368503 10.195052,0.0563617718 C10.0406543,0.14916037 9.96705545,0.332357602 10.0142547,0.505154991 C10.4326484,2.03953181 9.92545608,4.51229445 9.44946327,6.25306814 C9.3150653,5.26908301 9.06546907,4.32429729 8.60147608,4.05390137 C8.47747795,3.98270245 8.32468026,3.98190246 8.20068214,4.05310138 C8.07668401,4.1251003 7.99988517,4.2570983 7.99988517,4.40029614 C7.99988517,5.17548443 7.62469084,5.91467326 7.19109739,6.77066032 C6.63270583,7.87304367 5.99991539,9.1218248 5.99991539,10.8001994 C5.99991539,10.9401973 6.01671514,11.0673954 6.02631499,11.2001934 L0.799993956,11.2001934 C0.579197292,11.2001934 0.4,11.3793907 0.4,11.6001874 L0.4,23.600006 C0.4,23.8208027 0.579197292,24 0.799993956,24 L23.1996555,24 C23.4204522,24 23.5996495,23.8208027 23.5996495,23.600006 L23.5996495,11.6001874 C23.5996495,11.3793907 23.4204522,11.2001934 23.1996555,11.2001934 L23.1996555,11.2001934 Z M19.5997099,12.0001813 L19.5997099,15.200133 L15.0597785,15.200133 C15.9701647,14.5233432 16.9077506,13.4345596 17.473342,12.0001813 L19.5997099,12.0001813 Z M8.39987913,19.2000725 L15.5997703,19.2000725 L15.5997703,16.0001209 L8.39987913,16.0001209 L8.39987913,19.2000725 Z M7.90468661,7.13225486 C8.14628296,6.65706204 8.37987943,6.196269 8.54787689,5.72587611 C8.68307485,6.42506555 8.78227335,7.40985067 8.79987308,8.4066356 C8.80307304,8.5986327 8.94387091,8.76183024 9.13346804,8.79382975 C9.32866509,8.82342931 9.50946236,8.71863089 9.57586136,8.53703363 C9.64546031,8.34663651 11.055039,4.45389533 10.9622404,1.58753864 C13.1302077,4.20269912 14.0021945,7.65704693 14.0117943,7.69544635 C14.0581936,7.88504349 14.2197912,8.01064159 14.431788,7.99864177 C14.626985,7.983442 14.7813827,7.82824434 14.7981825,7.63304729 L15.1117777,3.87870402 C15.9101657,5.02188675 17.1997462,7.18105412 17.1997462,9.20022361 C17.1997462,13.0065661 14.163792,15.200133 13.1998066,15.200133 L10.4750478,15.200133 C10.0670539,15.0873347 6.7999033,14.0833498 6.7999033,10.7993995 C6.7999033,9.31302191 7.36149482,8.20423866 7.90468661,7.13225486 L7.90468661,7.13225486 Z M4.39993956,12.0001813 L6.14311323,12.0001813 C6.51430762,13.5905573 7.5806915,14.599342 8.54947687,15.200133 L4.39993956,15.200133 L4.39993956,12.0001813 Z M1.19998791,15.200133 L3.59995165,15.200133 L3.59995165,12.0001813 L1.19998791,12.0001813 L1.19998791,15.200133 Z M1.19998791,19.2000725 L7.59989121,19.2000725 L7.59989121,16.0001209 L1.19998791,16.0001209 L1.19998791,19.2000725 Z M1.19998791,23.2000121 L3.59995165,23.2000121 L3.59995165,20.0000604 L1.19998791,20.0000604 L1.19998791,23.2000121 Z M4.39993956,23.2000121 L11.5998308,23.2000121 L11.5998308,20.0000604 L4.39993956,20.0000604 L4.39993956,23.2000121 Z M12.3998187,23.2000121 L19.5997099,23.2000121 L19.5997099,20.0000604 L12.3998187,20.0000604 L12.3998187,23.2000121 Z M20.3996978,23.2000121 L22.7996616,23.2000121 L22.7996616,20.0000604 L20.3996978,20.0000604 L20.3996978,23.2000121 Z M16.3997583,19.2000725 L22.7996616,19.2000725 L22.7996616,16.0001209 L16.3997583,16.0001209 L16.3997583,19.2000725 Z M20.3996978,15.200133 L22.7996616,15.200133 L22.7996616,12.0001813 L20.3996978,12.0001813 L20.3996978,15.200133 Z"
})));
NextGenFirewall.displayName = "DecorativeIcon";

const NoContract = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "50",
  height: "52",
  viewBox: "0 0 50 52"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M40,30c2.8,0,5,2.2,5,5c0,1.6-0.8,3-2,4l0,0l2,9.8c0.1,0.4-0.1,0.8-0.4,1 C44.4,49.9,44.2,50,44,50c-0.2,0-0.3,0-0.4-0.1l0,0L40,48.1l-3.6,1.8c-0.3,0.2-0.8,0.1-1.1-0.1c-0.3-0.2-0.4-0.6-0.4-1l0,0l2-9.8 c-1.2-0.9-2-2.3-2-4C35,32.2,37.2,30,40,30z M38.8,39.9l-1.5,7.3l2.2-1.1c0.3-0.1,0.6-0.1,0.9,0l0,0l2.2,1.1l-1.5-7.3 C40.8,39.9,40.4,40,40,40S39.2,39.9,38.8,39.9L38.8,39.9z M10.2,44H32c0.6,0,1,0.4,1,1s-0.4,1-1,1l0,0H8.2L10.2,44z M40,2 c0.6,0,1,0.4,1,1l0,0l0,1.8l-2,2L39,4H19v11c0,0.6-0.4,1-1,1l0,0H7l0,22.8l-2,2L5,15c0-0.1,0-0.2,0-0.3l0-0.1c0-0.1,0.1-0.1,0.1-0.2 c0-0.1,0.1-0.1,0.1-0.2l0,0l12-12c0,0,0,0,0.1,0l0.1-0.1l0,0l0.1-0.1l0,0l0.1,0C17.7,2,17.9,2,18,2l0,0H40z M18,38c0.6,0,1,0.4,1,1 s-0.4,1-1,1l0,0h-3.8l2-2H18z M40,32c-1.7,0-3,1.3-3,3s1.3,3,3,3s3-1.3,3-3S41.7,32,40,32z M15.8,30l-2,2H10c-0.5,0-0.9-0.4-1-0.9 L9,31c0-0.6,0.4-1,1-1l0,0H15.8z M32,30c0.6,0,1,0.4,1,1s-0.4,1-1,1l0,0h-9.8l2-2H32z M41,13.2L41,27c0,0.6-0.4,1-1,1s-1-0.4-1-1 l0,0l0-11.8L41,13.2z M23.8,22l-2,2H10c-0.5,0-0.9-0.4-1-0.9L9,23c0-0.6,0.4-1,1-1l0,0H23.8z M36,22c0.6,0,1,0.4,1,1s-0.4,1-1,1l0,0 h-5.8l2-2H36z M31.8,14l-2,2H24c-0.5,0-0.9-0.4-1-0.9l0-0.1c0-0.6,0.4-1,1-1l0,0H31.8z M17,5.4L8.4,14H17V5.4z M3,47.7c0.2,0,0.7,0,0.9-0.2L47.5,3.9c0.4-0.4,0.4-1.1,0-1.5c-0.4-0.4-1.1-0.4-1.5,0L2.3,46 c-0.4,0.4-0.4,1.1,0,1.5C2.3,47.7,2.8,47.7,3,47.7z"
})));
NoContract.displayName = "DecorativeIcon";

const Office = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "19",
  height: "24",
  viewBox: "0 0 19 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-3)",
  d: "M7.51234959,19 L9.51783829,19 C9.79459574,19 10.0192105,18.776 10.0192105,18.5 L10.0192105,16.5 C10.0192105,16.224 9.79459574,16 9.51783829,16 L7.51234959,16 C7.23559215,16 7.01097741,16.224 7.01097741,16.5 L7.01097741,18.5 C7.01097741,18.776 7.23559215,19 7.51234959,19 Z M8.01372176,17 L9.01646612,17 L9.01646612,18 L8.01372176,18 L8.01372176,17 Z M7.51234959,15 L9.51783829,15 C9.79459574,15 10.0192105,14.776 10.0192105,14.5 L10.0192105,12.5 C10.0192105,12.224 9.79459574,12 9.51783829,12 L7.51234959,12 C7.23559215,12 7.01097741,12.224 7.01097741,12.5 L7.01097741,14.5 C7.01097741,14.776 7.23559215,15 7.51234959,15 Z M8.01372176,13 L9.01646612,13 L9.01646612,14 L8.01372176,14 L8.01372176,13 Z M7.51234959,11 L9.51783829,11 C9.79459574,11 10.0192105,10.776 10.0192105,10.5 L10.0192105,8.5 C10.0192105,8.224 9.79459574,8 9.51783829,8 L7.51234959,8 C7.23559215,8 7.01097741,8.224 7.01097741,8.5 L7.01097741,10.5 C7.01097741,10.776 7.23559215,11 7.51234959,11 Z M8.01372176,9 L9.01646612,9 L9.01646612,10 L8.01372176,10 L8.01372176,9 Z M7.51234959,7 L9.51783829,7 C9.79459574,7 10.0192105,6.776 10.0192105,6.5 L10.0192105,4.5 C10.0192105,4.224 9.79459574,4 9.51783829,4 L7.51234959,4 C7.23559215,4 7.01097741,4.224 7.01097741,4.5 L7.01097741,6.5 C7.01097741,6.776 7.23559215,7 7.51234959,7 Z M8.01372176,5 L9.01646612,5 L9.01646612,6 L8.01372176,6 L8.01372176,5 Z M11.523327,7 L13.5288157,7 C13.8055731,7 14.0301879,6.776 14.0301879,6.5 L14.0301879,4.5 C14.0301879,4.224 13.8055731,4 13.5288157,4 L11.523327,4 C11.2465696,4 11.0219548,4.224 11.0219548,4.5 L11.0219548,6.5 C11.0219548,6.776 11.2465696,7 11.523327,7 Z M12.0246992,5 L13.0274435,5 L13.0274435,6 L12.0246992,6 L12.0246992,5 Z M15.5343044,11 L17.5397931,11 C17.8165506,11 18.0411653,10.776 18.0411653,10.5 L18.0411653,8.5 C18.0411653,8.224 17.8165506,8 17.5397931,8 L15.5343044,8 C15.257547,8 15.0329322,8.224 15.0329322,8.5 L15.0329322,10.5 C15.0329322,10.776 15.257547,11 15.5343044,11 Z M16.0356766,9 L17.0384209,9 L17.0384209,10 L16.0356766,10 L16.0356766,9 Z M15.5343044,7 L17.5397931,7 C17.8165506,7 18.0411653,6.776 18.0411653,6.5 L18.0411653,4.5 C18.0411653,4.224 17.8165506,4 17.5397931,4 L15.5343044,4 C15.257547,4 15.0329322,4.224 15.0329322,4.5 L15.0329322,6.5 C15.0329322,6.776 15.257547,7 15.5343044,7 Z M16.0356766,5 L17.0384209,5 L17.0384209,6 L16.0356766,6 L16.0356766,5 Z M21.4986278,23 L20.046654,23 L20.046654,2.5 C20.046654,2.224 19.8220393,2 19.5452818,2 L18.0411653,2 L18.0411653,0.5 C18.0411653,0.224 17.8165506,0 17.5397931,0 L7.51234959,0 C7.23559215,0 7.01097741,0.224 7.01097741,0.5 L7.01097741,2 L5.50686088,2 C5.23010344,2 5.00548871,2.224 5.00548871,2.5 L5.00548871,23 L3.50137218,23 C3.22461474,23 3,23.224 3,23.5 C3,23.776 3.22461474,24 3.50137218,24 L9.51783829,24 C9.79459574,24 10.0192105,23.776 10.0192105,23.5 L10.0192105,21 L15.0329322,21 L15.0329322,23.5 C15.0329322,23.776 15.257547,24 15.5343044,24 L21.4986278,24 C21.7753853,24 22,23.776 22,23.5 C22,23.224 21.7753853,23 21.4986278,23 Z M8.01372176,1 L17.0384209,1 L17.0384209,2 L8.01372176,2 L8.01372176,1 Z M19.0439096,23 L16.0356766,23 L16.0356766,20.5 C16.0356766,20.224 15.8110619,20 15.5343044,20 L9.51783829,20 C9.24108085,20 9.01646612,20.224 9.01646612,20.5 L9.01646612,23 L6.00823306,23 L6.00823306,3 L19.0439096,3 L19.0439096,23 Z M15.5343044,15 L17.5397931,15 C17.8165506,15 18.0411653,14.776 18.0411653,14.5 L18.0411653,12.5 C18.0411653,12.224 17.8165506,12 17.5397931,12 L15.5343044,12 C15.257547,12 15.0329322,12.224 15.0329322,12.5 L15.0329322,14.5 C15.0329322,14.776 15.257547,15 15.5343044,15 Z M16.0356766,13 L17.0384209,13 L17.0384209,14 L16.0356766,14 L16.0356766,13 Z M11.523327,19 L13.5288157,19 C13.8055731,19 14.0301879,18.776 14.0301879,18.5 L14.0301879,16.5 C14.0301879,16.224 13.8055731,16 13.5288157,16 L11.523327,16 C11.2465696,16 11.0219548,16.224 11.0219548,16.5 L11.0219548,18.5 C11.0219548,18.776 11.2465696,19 11.523327,19 Z M12.0246992,17 L13.0274435,17 L13.0274435,18 L12.0246992,18 L12.0246992,17 Z M11.523327,15 L13.5288157,15 C13.8055731,15 14.0301879,14.776 14.0301879,14.5 L14.0301879,12.5 C14.0301879,12.224 13.8055731,12 13.5288157,12 L11.523327,12 C11.2465696,12 11.0219548,12.224 11.0219548,12.5 L11.0219548,14.5 C11.0219548,14.776 11.2465696,15 11.523327,15 Z M12.0246992,13 L13.0274435,13 L13.0274435,14 L12.0246992,14 L12.0246992,13 Z M15.5343044,19 L17.5397931,19 C17.8165506,19 18.0411653,18.776 18.0411653,18.5 L18.0411653,16.5 C18.0411653,16.224 17.8165506,16 17.5397931,16 L15.5343044,16 C15.257547,16 15.0329322,16.224 15.0329322,16.5 L15.0329322,18.5 C15.0329322,18.776 15.257547,19 15.5343044,19 Z M16.0356766,17 L17.0384209,17 L17.0384209,18 L16.0356766,18 L16.0356766,17 Z M11.523327,11 L13.5288157,11 C13.8055731,11 14.0301879,10.776 14.0301879,10.5 L14.0301879,8.5 C14.0301879,8.224 13.8055731,8 13.5288157,8 L11.523327,8 C11.2465696,8 11.0219548,8.224 11.0219548,8.5 L11.0219548,10.5 C11.0219548,10.776 11.2465696,11 11.523327,11 Z M12.0246992,9 L13.0274435,9 L13.0274435,10 L12.0246992,10 L12.0246992,9 Z"
})));
Office.displayName = "DecorativeIcon";

const Offices = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M13.12 5.906h.805v-.804h-.804v.804zm1.206-1.709c.202 0 .403.201.403.402v1.71a.43.43 0 0 1-.403.402h-1.708c-.201 0-.403-.2-.403-.403V4.6c0-.2.202-.402.403-.402h1.708zm1.811 1.71h.805v-.805h-.805v.804zm1.206-1.71c.201 0 .402.201.402.402v1.71a.432.432 0 0 1-.402.402h-1.709c-.2 0-.403-.2-.403-.403V4.6c0-.2.202-.402.403-.402h1.709zm1.81 1.71h.805v-.805h-.804v.804zm1.206-1.71c.202 0 .403.201.403.402v1.71a.432.432 0 0 1-.403.402h-1.708c-.201 0-.403-.2-.403-.403V4.6c0-.2.202-.402.403-.402h1.708zM4.164 14.074h.805v-.804h-.805v.804zm1.207-1.709c.2 0 .402.201.402.403v1.709c0 .202-.202.403-.402.403h-1.71c-.2 0-.402-.201-.402-.403v-1.71c0-.2.202-.402.402-.402h1.71zm1.81 1.71h.804v-.805h-.804v.804zm1.207-1.71c.2 0 .402.201.402.403v1.709c0 .202-.202.403-.402.403h-1.71c-.2 0-.402-.201-.402-.403v-1.71c0-.2.201-.402.401-.402h1.71zm1.81 1.71h.804v-.805h-.804v.804zm1.206-1.71c.2 0 .402.201.402.403v1.709c0 .202-.202.403-.402.403h-1.71c-.2 0-.401-.201-.401-.403v-1.71c0-.2.2-.402.4-.402h1.711zm-7.24 5.832h.805v-.804h-.805v.804zm1.207-1.71c.2 0 .402.202.402.403v1.708c0 .201-.202.403-.402.403h-1.71c-.2 0-.402-.202-.402-.403V16.89c0-.2.202-.403.402-.403h1.71zm1.81 1.71h.804v-.804h-.804v.804zm1.207-1.71c.2 0 .402.202.402.403v1.708c0 .201-.202.403-.402.403h-1.71c-.2 0-.402-.202-.402-.403V16.89c0-.2.201-.403.401-.403h1.71zm1.81 1.71h.804v-.804h-.804v.804zm1.206-1.71c.2 0 .402.202.402.403v1.708c0 .201-.202.403-.402.403h-1.71c-.2 0-.401-.202-.401-.403V16.89c0-.2.2-.403.4-.403h1.711zm-7.24 5.831h.805v-.804h-.805v.804zm1.207-1.709c.2 0 .402.201.402.402v1.71c0 .201-.202.401-.402.401h-1.71c-.2 0-.402-.2-.402-.4v-1.71c0-.202.202-.403.402-.403h1.71zm1.81 1.71h.804v-.805h-.804v.804zm1.207-1.71c.2 0 .402.201.402.402v1.71c0 .201-.202.401-.402.401h-1.71c-.2 0-.402-.2-.402-.4v-1.71c0-.202.201-.403.401-.403h1.71zm1.81 1.71h.804v-.805h-.804v.804zm1.206-1.71c.2 0 .402.201.402.402v1.71c0 .201-.202.401-.402.401h-1.71c-.2 0-.401-.2-.401-.4v-1.71c0-.202.2-.403.4-.403h1.711zm4.733-10.706h.805V9.1h-.805v.804zm1.206-1.61c.201 0 .402.202.402.403v1.71c0 .2-.201.401-.402.401h-1.709c-.2 0-.403-.2-.403-.4V8.695c0-.201.202-.402.403-.402h1.709zm1.81 1.61h.805V9.1h-.804v.804zm1.206-1.61c.202 0 .403.202.403.403v1.71c0 .2-.201.401-.403.401h-1.708c-.201 0-.403-.2-.403-.4V8.695c0-.201.202-.402.403-.402h1.708zM16.137 14h.805v-.804h-.805V14zm1.206-1.61c.201 0 .402.202.402.404v1.709c0 .2-.201.4-.402.4h-1.709c-.2 0-.403-.2-.403-.4v-1.71c0-.201.202-.402.403-.402h1.709zm1.81 1.61h.805v-.804h-.804V14zm1.206-1.61c.202 0 .403.202.403.404v1.709c0 .2-.201.4-.403.4h-1.708c-.201 0-.403-.2-.403-.4v-1.71c0-.201.202-.402.403-.402h1.708zm-4.222 5.706h.805v-.804h-.805v.804zm1.206-1.609c.201 0 .402.202.402.403v1.708a.432.432 0 0 1-.402.403h-1.709c-.2 0-.403-.202-.403-.403V16.89c0-.2.202-.403.403-.403h1.709zm1.81 1.609h.805v-.804h-.804v.804zm1.206-1.609c.202 0 .403.202.403.403v1.708a.432.432 0 0 1-.403.403h-1.708c-.201 0-.403-.202-.403-.403V16.89c0-.2.202-.403.403-.403h1.708zm-4.222 5.705h.805v-.804h-.805v.804zm1.206-1.607c.201 0 .402.201.402.401v1.71c0 .2-.201.402-.402.402h-1.709c-.2 0-.403-.202-.403-.403v-1.709c0-.2.202-.401.403-.401h1.709zm1.81 1.607h.805v-.804h-.804v.804zm1.206-1.607c.202 0 .403.201.403.401v1.71c0 .2-.201.402-.403.402h-1.708c-.201 0-.403-.202-.403-.403v-1.709c0-.2.202-.401.403-.401h1.708zM13.095 1.649h6.737v-.644h-6.737v.644zm-8.928 8.617h6.737v-.643H4.167v.643zm18.18-8.617c.36 0 .653.292.653.653v21.195a.503.503 0 0 1-1.006 0V2.654H10.933v5.964h.323c.361 0 .654.293.654.653v.995h1.508c.36 0 .654.293.654.654v12.577a.503.503 0 0 1-1.006 0V11.272H2.006v12.225a.503.503 0 0 1-1.006 0V10.92c0-.361.294-.654.654-.654h1.508v-.995c0-.36.292-.653.653-.653h6.112V2.302c0-.36.294-.653.654-.653h1.508V.653c0-.36.294-.653.654-.653h7.44c.361 0 .655.293.655.653v.996h1.508z",
  fillRule: "evenodd"
})));
Offices.displayName = "DecorativeIcon";

const OnDemand = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M12,23.5 C5.659,23.5 0.5,18.341 0.5,12 C0.5,5.659 5.659,0.5 12,0.5 C18.341,0.5 23.5,5.659 23.5,12 C23.5,18.341 18.341,23.5 12,23.5 Z M12,1.5 C6.21,1.5 1.5,6.21 1.5,12 C1.5,17.79 6.21,22.5 12,22.5 C17.79,22.5 22.5,17.79 22.5,12 C22.5,6.21 17.79,1.5 12,1.5 Z M8,18.5 C7.915,18.5 7.83,18.479 7.753,18.435 C7.597,18.346 7.5,18.18 7.5,18 L7.5,6 C7.5,5.82 7.597,5.654 7.753,5.565 C7.91,5.476 8.102,5.478 8.257,5.571 L18.257,11.571 C18.407,11.661 18.5,11.824 18.5,12 C18.5,12.176 18.408,12.338 18.257,12.429 L8.257,18.429 C8.178,18.476 8.089,18.5 8,18.5 Z M8.5,6.883 L8.5,17.116 L17.028,12 L8.5,6.883 Z"
})));
OnDemand.displayName = "DecorativeIcon";

const OnTheGo = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "14",
  height: "24",
  viewBox: "0 0 14 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "rotate(90 9.5 9.5)",
  d: "M4.62467904,5.00667929 L18.4181126,5.00667929 C18.4447593,5.00228554 18.4721142,5 18.5,5 C18.5278858,5 18.5552407,5.00228554 18.5818874,5.00667929 L20.5,5.00667929 C22.43,5.00667929 24,6.57593026 24,8.50500947 L24,15.5016698 C24,17.430749 22.43,19 20.5,19 L3.5,19 C1.57,19 2.31886714e-14,17.430749 2.33068499e-14,15.5016698 L2.37354762e-14,8.50500947 C2.38536547e-14,6.57593026 1.57,5.00667929 3.5,5.00667929 L4.46090414,5.00667929 C4.48755087,5.00228554 4.51490582,5 4.54279159,5 C4.57067736,5 4.59803231,5.00228554 4.62467904,5.00667929 Z M5.04279159,6.0062022 L5.04279159,18.0004771 L18,18.0004771 L18,6.0062022 L5.04279159,6.0062022 Z M4.04279159,6.0062022 L3.5,6.0062022 C2.122,6.0062022 1,7.1276669 1,8.50500947 L1,15.5016698 C1,16.8790124 2.122,18.0004771 3.5,18.0004771 L4.04279159,18.0004771 L4.04279159,6.0062022 Z M19,6.0062022 L19,18.0004771 L20.5,18.0004771 C21.878,18.0004771 23,16.8790124 23,15.5016698 L23,8.50500947 C23,7.1276669 21.878,6.0062022 20.5,6.0062022 L19,6.0062022 Z M2.005,10.5689213 C2.005,10.2930529 2.229,10.0691598 2.505,10.0691598 C2.781,10.0691598 3.005,10.2930529 3.005,10.5689213 L3.005,13.56749 C3.005,13.8433583 2.781,14.0672514 2.505,14.0672514 C2.229,14.0672514 2.005,13.8433583 2.005,13.56749 L2.005,10.5689213 Z M21,13.0091987 C20.4477153,13.0091987 20,12.5616971 20,12.0096758 C20,11.4576545 20.4477153,11.0101529 21,11.0101529 C21.5522847,11.0101529 22,11.4576545 22,12.0096758 C22,12.5616971 21.5522847,13.0091987 21,13.0091987 Z M14.4997808,14.0165208 L8.49978078,14.0165208 C8.29778078,14.0165208 8.11478078,13.894579 8.03778078,13.7076682 C7.96078078,13.5207575 8.00378078,13.30586 8.14578078,13.1629283 L11.1457808,9.16483658 C11.3407808,8.96992961 11.6577808,8.96992961 11.8527808,9.16483658 L14.8527808,13.1629283 C14.9957808,13.30586 15.0387808,13.5207575 14.9607808,13.7076682 C14.8827808,13.894579 14.7017808,14.0165208 14.4997808,14.0165208 Z M9.70678078,13.0169979 L13.2927808,13.0169979 L11.4997808,10.2253304 L9.70678078,13.0169979 Z M2.505,8.3734526 C2.229,8.3734526 2,8.14955947 2,7.87369114 C2,7.59782282 2.219,7.37392969 2.495,7.37392969 L2.505,7.37392969 C2.781,7.37392969 3.005,7.59782282 3.005,7.87369114 C3.005,8.14955947 2.781,8.3734526 2.505,8.3734526 Z"
})));
OnTheGo.displayName = "DecorativeIcon";

const Paperless = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  viewBox: "0 0 20.87 23.95"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-2.23 -0.04)",
  d: "M23.06,1.31a1.1,1.1,0,0,0-.89-1C21.71.27,11-1.44,4.89,4.12a8.36,8.36,0,0,0-2.66,6.26,10,10,0,0,0,2.49,6.46,29.65,29.65,0,0,0-2.45,6.54.5.5,0,0,0,.38.6h.11a.49.49,0,0,0,.48-.39,29.62,29.62,0,0,1,2.22-6,9.81,9.81,0,0,0,6.69,2.73,8.28,8.28,0,0,0,5.64-2.14C23.84,12.64,23.09,1.77,23.06,1.31ZM17.11,17.45c-3,2.8-8,2.42-11.17-.77a20.12,20.12,0,0,1,1.51-2.33A20.6,20.6,0,0,1,13.82,8.8a.5.5,0,0,0-.44-.9,21.34,21.34,0,0,0-6.72,5.84A20.57,20.57,0,0,0,5.24,15.9a8.88,8.88,0,0,1-2-5.52A7.39,7.39,0,0,1,5.57,4.86C9,1.68,14.21,1,17.82,1a27.42,27.42,0,0,1,4.19.3l0,0,0,0C22.09,1.83,22.81,12.23,17.11,17.45Z"
})));
Paperless.displayName = "DecorativeIcon";

const Passport = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "18",
  height: "24",
  viewBox: "0 0 18 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-3)",
  d: "M16.3629,16.6611 C16.6369,16.6611 16.8589,16.8831 16.8589,17.1571 C16.8589,17.4311 16.6369,17.6521 16.3629,17.6521 L7.6359,17.6521 C7.3619,17.6521 7.1399,17.4311 7.1399,17.1571 C7.1399,16.8831 7.3619,16.6611 7.6359,16.6611 L16.3629,16.6611 Z M19.8345,21.918 L19.8345,2.083 C19.8345,1.481 19.3445,0.992 18.7425,0.992 L5.2555,0.992 C4.6545,0.992 4.1655,1.481 4.1655,2.083 L4.1655,21.918 C4.1655,22.519 4.6545,23.008 5.2555,23.008 L18.7425,23.008 C19.3445,23.008 19.8345,22.519 19.8345,21.918 Z M18.7425,0 C19.8925,0 20.8265,0.934 20.8265,2.083 L20.8265,21.918 C20.8265,23.066 19.8925,24 18.7425,24 L5.2555,24 C4.1075,24 3.1735,23.066 3.1735,21.918 L3.1735,2.083 C3.1735,0.934 4.1075,0 5.2555,0 L18.7425,0 Z M15.857,12.6836 C16.269,12.2716 16.577,11.7996 16.83,11.3066 L14.63,11.3066 C14.337,12.3336 13.855,13.2876 13.225,14.1246 C14.189,13.9046 15.107,13.4336 15.857,12.6836 Z M7.17,11.3066 C7.422,11.7996 7.73,12.2716 8.143,12.6836 C8.892,13.4336 9.811,13.9046 10.774,14.1246 C10.145,13.2876 9.662,12.3336 9.369,11.3066 L7.17,11.3066 Z M6.779,7.3386 C6.503,8.3136 6.503,9.3396 6.779,10.3136 L9.147,10.3136 C9.066,9.8276 9.024,9.3296 9.024,8.8266 C9.024,8.3236 9.066,7.8266 9.147,7.3386 L6.779,7.3386 Z M8.143,4.9696 C7.73,5.3816 7.422,5.8536 7.17,6.3476 L9.369,6.3476 C9.663,5.3166 10.147,4.3616 10.779,3.5216 C9.79,3.7466 8.878,4.2346 8.143,4.9696 Z M13.594,6.3476 C13.259,5.3146 12.718,4.3686 12,3.5836 C11.281,4.3686 10.74,5.3156 10.406,6.3476 L13.594,6.3476 Z M10.154,10.3136 L13.845,10.3136 C13.937,9.8296 13.983,9.3306 13.983,8.8266 C13.983,8.3226 13.937,7.8246 13.845,7.3386 L10.154,7.3386 C10.063,7.8246 10.016,8.3226 10.016,8.8266 C10.016,9.3306 10.063,9.8296 10.154,10.3136 Z M10.406,11.3066 C10.74,12.3386 11.281,13.2846 12,14.0696 C12.718,13.2846 13.259,12.3376 13.594,11.3066 L10.406,11.3066 Z M14.853,7.3386 C14.933,7.8266 14.975,8.3236 14.975,8.8266 C14.975,9.3296 14.933,9.8276 14.853,10.3136 L17.22,10.3136 C17.497,9.3396 17.497,8.3136 17.22,7.3386 L14.853,7.3386 Z M16.83,6.3476 C16.577,5.8536 16.269,5.3816 15.857,4.9696 C15.122,4.2346 14.21,3.7476 13.22,3.5216 C13.853,4.3616 14.337,5.3166 14.63,6.3476 L16.83,6.3476 Z M12.018,2.3846 C13.663,2.3886 15.306,3.0166 16.558,4.2676 C19.071,6.7816 19.071,10.8716 16.558,13.3846 C15.306,14.6366 13.662,15.2646 12.017,15.2696 C12.011,15.2696 12.005,15.2726 12,15.2726 C11.994,15.2726 11.988,15.2696 11.982,15.2696 C10.337,15.2646 8.694,14.6366 7.441,13.3846 C4.928,10.8716 4.928,6.7816 7.441,4.2676 C8.693,3.0166 10.336,2.3896 11.981,2.3846 C11.987,2.3836 11.993,2.3796 12,2.3796 C12.006,2.3796 12.012,2.3836 12.018,2.3846 Z M14.7769,19.835 C15.0499,19.835 15.2719,20.057 15.2719,20.331 C15.2719,20.606 15.0499,20.827 14.7769,20.827 L9.2229,20.827 C8.9479,20.827 8.7269,20.606 8.7269,20.331 C8.7269,20.057 8.9479,19.835 9.2229,19.835 L14.7769,19.835 Z"
})));
Passport.displayName = "DecorativeIcon";

const Phone = props => {
  return /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
    width: "16",
    height: "24",
    viewBox: "0 0 16 24"
  }, /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    transform: "translate(-4)",
    d: "M12.508704,1.509408 C12.773664,1.509408 12.988704,1.724448 12.988704,1.989408 C12.988704,2.254368 12.773664,2.469408 12.508704,2.469408 L11.475744,2.469408 C11.209824,2.469408 10.995744,2.254368 10.995744,1.989408 C10.995744,1.724448 11.209824,1.509408 11.475744,1.509408 L12.508704,1.509408 Z M18.68592,3.0192 L18.68592,2.46624 C18.68592,1.62144 18.02544,0.96 17.18064,0.96 L6.82032,0.96 C5.97552,0.96 5.31408,1.62144 5.31408,2.46624 L5.31408,3.0192 L18.68592,3.0192 Z M5.31408,20.25888 L18.68592,20.25888 L18.68592,3.9792 L5.31408,3.9792 L5.31408,20.25888 Z M18.68592,21.53376 L18.68592,21.21888 L5.31408,21.21888 L5.31408,21.53376 C5.31408,22.37856 5.97552,23.04 6.82032,23.04 L17.10096,23.04 C17.97456,23.04 18.68592,22.36416 18.68592,21.53376 Z M17.18064,0 C18.56304,0 19.64592,1.08288 19.64592,2.46624 L19.64592,21.53376 C19.64592,22.89408 18.50448,24 17.10096,24 L6.82032,24 C5.43696,24 4.35408,22.91616 4.35408,21.53376 L4.35408,2.46624 C4.35408,1.08288 5.43696,0 6.82032,0 L17.18064,0 Z"
  })));
};
Phone.displayName = "DecorativeIcon";

const PhoneBusiness = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M16.5,13 L15.5,13 C15.224,13 15,13.224 15,13.5 C15,13.776 15.224,14 15.5,14 L16.5,14 C16.776,14 17,13.776 17,13.5 C17,13.224 16.776,13 16.5,13 Z M16.5,16 L15.5,16 C15.224,16 15,16.224 15,16.5 C15,16.776 15.224,17 15.5,17 L16.5,17 C16.776,17 17,16.776 17,16.5 C17,16.224 16.776,16 16.5,16 Z M16.5,19 L15.5,19 C15.224,19 15,19.224 15,19.5 C15,19.776 15.224,20 15.5,20 L16.5,20 C16.776,20 17,19.776 17,19.5 C17,19.224 16.776,19 16.5,19 Z M11.5,17 L12.5,17 C12.776,17 13,16.776 13,16.5 C13,16.224 12.776,16 12.5,16 L11.5,16 C11.224,16 11,16.224 11,16.5 C11,16.776 11.224,17 11.5,17 Z M23.5,4 L8.908,4 C8.757,3.576 8.424,3.243 8,3.092 L8,0.5 C8,0.224 7.776,0 7.5,0 C7.224,0 7,0.224 7,0.5 L7,3 L4.5,3 C3.849,3 3.299,3.419 3.092,4 L0.5,4 C0.224,4 0,4.224 0,4.5 L0,22.5 C0,22.776 0.224,23 0.5,23 L3.092,23 C3.299,23.581 3.849,24 4.5,24 L7.5,24 C8.151,24 8.701,23.581 8.908,23 L23.5,23 C23.776,23 24,22.776 24,22.5 L24,4.5 C24,4.224 23.776,4 23.5,4 Z M3.158,19.066 C3.055,19.273 3,19.505 3,19.736 L3,22 L1,22 L1,5 L3,5 L3,7.264 C3,7.496 3.055,7.728 3.158,7.935 L3.947,9.513 C3.981,9.582 4,9.659 4,9.736 L4,17.264 C4,17.341 3.981,17.418 3.947,17.488 L3.158,19.066 Z M8,22.5 C8,22.776 7.775,23 7.5,23 L4.5,23 C4.225,23 4,22.776 4,22.5 L4,19.736 C4,19.659 4.019,19.582 4.053,19.512 L4.842,17.934 C4.945,17.727 5,17.495 5,17.264 L5,9.736 C5,9.504 4.945,9.272 4.842,9.065 L4.053,7.487 C4.019,7.418 4,7.341 4,7.264 L4,4.5 C4,4.224 4.225,4 4.5,4 L7.5,4 C7.775,4 8,4.224 8,4.5 L8,7.264 C8,7.341 7.981,7.418 7.947,7.488 L7.158,9.066 C7.055,9.273 7,9.505 7,9.736 L7,17.264 C7,17.496 7.055,17.728 7.158,17.935 L7.947,19.513 C7.981,19.582 8,19.659 8,19.736 L8,22.5 Z M23,22 L9,22 L9,19.736 C9,19.504 8.945,19.272 8.842,19.065 L8.053,17.487 C8.019,17.418 8,17.341 8,17.264 L8,9.736 C8,9.659 8.019,9.582 8.053,9.513 L8.842,7.934 C8.945,7.727 9,7.495 9,7.264 L9,5 L23,5 L23,22 Z M11.5,11 L20.5,11 C20.776,11 21,10.776 21,10.5 L21,7.5 C21,7.224 20.776,7 20.5,7 L11.5,7 C11.224,7 11,7.224 11,7.5 L11,10.5 C11,10.776 11.224,11 11.5,11 Z M12,8 L20,8 L20,10 L12,10 L12,8 Z M11.5,14 L12.5,14 C12.776,14 13,13.776 13,13.5 C13,13.224 12.776,13 12.5,13 L11.5,13 C11.224,13 11,13.224 11,13.5 C11,13.776 11.224,14 11.5,14 Z M11.5,20 L12.5,20 C12.776,20 13,19.776 13,19.5 C13,19.224 12.776,19 12.5,19 L11.5,19 C11.224,19 11,19.224 11,19.5 C11,19.776 11.224,20 11.5,20 Z M20.5,16 L19.5,16 C19.224,16 19,16.224 19,16.5 C19,16.776 19.224,17 19.5,17 L20.5,17 C20.776,17 21,16.776 21,16.5 C21,16.224 20.776,16 20.5,16 Z M20.5,13 L19.5,13 C19.224,13 19,13.224 19,13.5 C19,13.776 19.224,14 19.5,14 L20.5,14 C20.776,14 21,13.776 21,13.5 C21,13.224 20.776,13 20.5,13 Z M20.5,19 L19.5,19 C19.224,19 19,19.224 19,19.5 C19,19.776 19.224,20 19.5,20 L20.5,20 C20.776,20 21,19.776 21,19.5 C21,19.224 20.776,19 20.5,19 Z"
})));
PhoneBusiness.displayName = "DecorativeIcon";

const PhoneHome = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M7,15.3430449 L7,4.26190476 C7,3.01514286 8.02,2 9.27272727,2 L14,2 L14,1.5 C14,0.673 14.673,5.32907052e-15 15.5,5.32907052e-15 C16.327,5.32907052e-15 17,0.673 17,1.5 L17,2.31421586 C17.041299,2.4874104 17,2.75511064 17,3.16845703 L17,15.3437378 C17.2554035,15.1548534 17.5558722,15.0373547 17.874,15.0091872 C18.372,14.964233 19.829,15.1320619 20.181,15.4837033 L21.268,17.5675589 C21.74,18.0390781 22,18.6654394 22,19.332759 L22,21.5025465 C22,22.8801419 20.879,24 19.5,24 L4.5,24 C3.121,24 2,22.8801419 2,21.5025465 L2,19.332759 C2,18.6074985 2.308,17.991127 3.029,17.2698624 L3.822,15.4807064 C4.174,15.1290649 5.641,14.962235 6.125,15.0071892 C6.4434471,15.035998 6.74419972,15.1535652 7,15.3430449 Z M7,16.8465382 C6.86010586,16.6999309 6.72687854,16.5348043 6.599,16.3488212 C6.461,16.1490249 6.255,16.0221543 6.034,16.0011757 C5.845,15.9991777 4.68,16.03614 4.53,16.1869862 L3.736,17.9761422 C3.089,18.6234822 3,19.011087 3,19.332759 L3,21.5025465 C3,22.3287041 3.673,23.0010186 4.5,23.0010186 L19.5,23.0010186 C20.327,23.0010186 21,22.3287041 21,21.5025465 L21,19.332759 C21,18.9381613 20.84,18.5525545 20.561,18.2728397 L19.474,16.1889842 C19.297,16.0121645 18.096,15.9891879 17.966,16.0021747 C17.744,16.0231533 17.538,16.1480259 17.402,16.3478222 C17.2737952,16.5342273 17.1402372,16.6996938 17,16.8465719 L17,18.7380952 C17,19.9848571 15.98,21 14.7272727,21 L9.27272727,21 C8.02,21 7,19.9848571 7,18.7380952 L7,16.8465382 Z M14.5833334,3 L9.33333333,3 C8.59822222,3 8,3.60215789 8,4.34210526 L8,18.6578947 C8,19.3978421 8.59822222,20 9.33333333,20 L14.6666667,20 C15.4017778,20 16,19.3978421 16,18.6578947 L16,4.34210526 C16,3.45304247 16,3.11469712 15.8395948,3 L14.5833334,3 Z M14,15 L10,15 C9.724,15 9.5,14.776 9.5,14.5 C9.5,14.224 9.724,14 10,14 L14,14 C14.276,14 14.5,14.224 14.5,14.5 C14.5,14.776 14.276,15 14,15 Z M14,13 L10,13 C9.724,13 9.5,12.776 9.5,12.5 C9.5,12.224 9.724,12 10,12 L14,12 C14.276,12 14.5,12.224 14.5,12.5 C14.5,12.776 14.276,13 14,13 Z M14,17 L10,17 C9.724,17 9.5,16.776 9.5,16.5 C9.5,16.224 9.724,16 10,16 L14,16 C14.276,16 14.5,16.224 14.5,16.5 C14.5,16.776 14.276,17 14,17 Z M15,2 L16,2 L16,1.5 C16,1.224 15.776,1 15.5,1 C15.224,1 15,1.224 15,1.5 L15,2 Z M14.5,10 L9.5,10 C9.224,10 9,9.776 9,9.5 L9,5.5 C9,5.224 9.224,5 9.5,5 L14.5,5 C14.776,5 15,5.224 15,5.5 L15,9.5 C15,9.776 14.776,10 14.5,10 Z M10,9 L14,9 L14,6 L10,6 L10,9 Z"
})));
PhoneHome.displayName = "DecorativeIcon";

const PhoneReception = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "20",
  height: "24",
  viewBox: "0 0 20 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-4)",
  d: "M13.1343199,2 L11.1343199,2 C10.8583199,2 10.6343199,2.224 10.6343199,2.5 C10.6343199,2.776 10.8583199,3 11.1343199,3 L13.1343199,3 C13.4103199,3 13.6343199,2.776 13.6343199,2.5 C13.6343199,2.224 13.4103199,2 13.1343199,2 Z M16.1393199,2 L16.1293199,2 C15.8533199,2 15.6343199,2.224 15.6343199,2.5 C15.6343199,2.776 15.8633199,3 16.1393199,3 C16.4153199,3 16.6393199,2.776 16.6393199,2.5 C16.6393199,2.224 16.4153199,2 16.1393199,2 Z M12.6343199,22 C13.1863199,22 13.6343199,21.552 13.6343199,21 C13.6343199,20.448 13.1863199,20 12.6343199,20 C12.0823199,20 11.6343199,20.448 11.6343199,21 C11.6343199,21.552 12.0813199,22 12.6343199,22 Z M19.1343199,16.5 C18.8583199,16.5 18.6343199,16.724 18.6343199,17 L18.6343199,18 L5.6343199,18 L5.6343199,5 L18.6343199,5 L18.6343199,6 C18.6343199,6.276 18.8583199,6.5 19.1343199,6.5 C19.4103199,6.5 19.6343199,6.276 19.6343199,6 L19.6343199,3.5 C19.6343199,1.57 18.0643199,0 16.1343199,0 L8.1343199,0 C6.2043199,0 4.6343199,1.57 4.6343199,3.5 L4.6343199,20.5 C4.6343199,22.43 6.2043199,24 8.1343199,24 L16.1343199,24 C18.0643199,24 19.6343199,22.43 19.6343199,20.5 L19.6343199,17 C19.6343199,16.724 19.4103199,16.5 19.1343199,16.5 Z M5.6343199,3.5 C5.6343199,2.122 6.7553199,1 8.1343199,1 L16.1343199,1 C17.5133199,1 18.6343199,2.122 18.6343199,3.5 L18.6343199,4 L5.6343199,4 L5.6343199,3.5 Z M18.7493199,20.5 C18.7493199,21.878 17.6283199,23 16.2493199,23 L8.2493199,23 C6.8703199,23 5.7493199,21.878 5.7493199,20.5 L5.7493199,19 L18.7493199,19 L18.7493199,20.5 Z M11.3343199,16 L8.9343199,16 C8.7687199,16 8.6343199,15.9004444 8.6343199,15.7777778 L8.6343199,12.2222222 C8.6343199,12.0995556 8.7687199,12 8.9343199,12 L11.3343199,12 C11.4999199,12 11.6343199,12.0995556 11.6343199,12.2222222 L11.6343199,15.7777778 C11.6343199,15.9004444 11.4999199,16 11.3343199,16 Z M9.67704451,15.0494385 L10.6797301,15.0083008 L10.658856,12.9541016 L9.65617049,12.9952393 L9.67704451,15.0494385 Z M15.3343199,16 L12.9343199,16 C12.7687199,16 12.6343199,15.904 12.6343199,15.7857143 L12.6343199,10.2142857 C12.6343199,10.096 12.7687199,10 12.9343199,10 L15.3343199,10 C15.4999199,10 15.6343199,10.096 15.6343199,10.2142857 L15.6343199,15.7857143 C15.6343199,15.904 15.4999199,16 15.3343199,16 Z M13.6582457,14.979248 L14.6337095,14.9908447 L14.6278502,10.9630127 L13.6268736,10.9616699 L13.6582457,14.979248 Z M19.3343199,16 L16.9343199,16 C16.7687199,16 16.6343199,15.9056842 16.6343199,15.7894737 L16.6343199,8.21052632 C16.6343199,8.09431579 16.7687199,8 16.9343199,8 L19.3343199,8 C19.4999199,8 19.6343199,8.09431579 19.6343199,8.21052632 L19.6343199,15.7894737 C19.6343199,15.9056842 19.4999199,16 19.3343199,16 Z M17.6191832,14.9798584 L18.67265,15.0361328 L18.5889342,9.00305176 L17.6851011,8.94055176 L17.6191832,14.9798584 Z M23.3343199,16 L20.9343199,16 C20.7687199,16 20.6343199,15.9066667 20.6343199,15.7916667 L20.6343199,6.20833333 C20.6343199,6.09333333 20.7687199,6 20.9343199,6 L23.3343199,6 C23.4999199,6 23.6343199,6.09333333 23.6343199,6.20833333 L23.6343199,15.7916667 C23.6343199,15.9066667 23.4999199,16 23.3343199,16 Z M21.6091734,14.9622803 L22.5931822,15.0394287 L22.6189146,7.0456543 L21.6349058,6.96850586 L21.6091734,14.9622803 Z"
})));
PhoneReception.displayName = "DecorativeIcon";

const Photo = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "20",
  viewBox: "0 0 24 20"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -2)",
  d: "M6.05184,6.846048 C5.61984,7.279008 5.61984,7.981728 6.05184,8.414688 C6.48384,8.846688 7.18848,8.846688 7.62048,8.414688 C8.05248,7.981728 8.05248,7.279008 7.62048,6.846048 C7.40448,6.630048 7.12032,6.521568 6.83616,6.521568 C6.552,6.521568 6.26784,6.630048 6.05184,6.846048 Z M6.83616,9.698208 C6.30624,9.698208 5.77632,9.496608 5.37312,9.093408 C4.56672,8.286048 4.56672,6.973728 5.37312,6.167328 C6.17952,5.359968 7.4928,5.359968 8.2992,6.167328 C9.1056,6.973728 9.1056,8.286048 8.2992,9.093408 C7.896,9.496608 7.36608,9.698208 6.83616,9.698208 Z M21.9312,20.6568 C22.54272,20.6568 23.04,20.15856 23.04,19.548 L23.04,18.25104 L17.58528,10.84464 C17.31264,10.47696 16.89504,10.25232 16.43616,10.22832 C15.96384,10.21488 15.53088,10.3896 15.22176,10.73232 L11.18592,15.23856 C11.0976,15.33648 10.9728,15.39504 10.84128,15.39792 C10.71936,15.40176 10.58208,15.35088 10.48896,15.25776 L8.45472,13.22352 C7.89024,12.66384 7.00128,12.6264 6.3888,13.14096 L0.96,17.75568 L0.96,19.548 C0.96,20.15856 1.45728,20.6568 2.06976,20.6568 L21.9312,20.6568 Z M2.06976,3.3432 C1.45728,3.3432 0.96,3.84048 0.96,4.452 L0.96,16.4952 L5.7696,12.40752 C6.76512,11.57136 8.20896,11.62992 9.13152,12.54288 L10.8096,14.22 L14.50848,10.09008 C15.0144,9.5304 15.72672,9.22896 16.48512,9.27024 C17.232,9.30768 17.91456,9.6744 18.35712,10.27632 L23.04,16.63344 L23.04,4.452 C23.04,3.84048 22.54272,3.3432 21.9312,3.3432 L2.06976,3.3432 Z M21.9312,2.3832 C23.07168,2.3832 24,3.31152 24,4.452 L24,19.548 C24,20.68848 23.07168,21.6168 21.9312,21.6168 L2.06976,21.6168 C0.92832,21.6168 4.54747351e-13,20.68848 4.54747351e-13,19.548 L4.54747351e-13,4.452 C4.54747351e-13,3.31152 0.92832,2.3832 2.06976,2.3832 L21.9312,2.3832 Z"
})));
Photo.displayName = "DecorativeIcon";

const Photos = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M23.9229,16.83385 C24.2369,17.98185 23.5709,19.17485 22.4329,19.51185 C22.4119,19.52085 22.3929,19.52685 22.3719,19.53285 L7.4589,23.52985 C7.2679,23.58185 7.0719,23.60785 6.8789,23.60785 C6.5019,23.60785 6.1299,23.51085 5.7929,23.31785 C5.2989,23.03585 4.9409,22.58385 4.7809,22.03985 C4.7729,22.02085 4.7659,21.99885 4.7599,21.97885 L4.0379,19.26585 C3.9669,18.99785 4.1259,18.72485 4.3929,18.65285 C4.6579,18.57985 4.9339,18.74085 5.0049,19.00785 L5.7159,21.68085 C5.7229,21.69785 5.7289,21.71585 5.7339,21.73385 C5.8169,22.03885 6.0139,22.29285 6.2889,22.44985 C6.5659,22.60785 6.8889,22.64985 7.1969,22.56385 L22.0789,18.57585 C22.0949,18.56985 22.1109,18.56485 22.1259,18.56085 L22.1249,18.55985 C22.4299,18.47685 22.6849,18.27685 22.8429,17.99885 C22.9999,17.72185 23.0409,17.39985 22.9569,17.09585 L22.0279,13.60985 C21.9569,13.34385 22.1159,13.06885 22.3829,12.99785 C22.6529,12.92285 22.9249,13.08685 22.9949,13.35285 L23.9229,16.83385 Z M4.4907,4.88365 C4.0667,5.30765 4.0667,5.99665 4.4907,6.42065 C4.9147,6.84365 5.6037,6.84265 6.0277,6.42065 C6.4507,5.99665 6.4507,5.30765 6.0277,4.88365 C5.8157,4.67165 5.5367,4.56565 5.2597,4.56565 C4.9807,4.56565 4.7027,4.67165 4.4907,4.88365 Z M5.2587,7.73765 C4.7247,7.73765 4.1907,7.53365 3.7837,7.12765 C2.9697,6.31365 2.9697,4.98965 3.7837,4.17665 C4.5977,3.36265 5.9217,3.36365 6.7347,4.17665 C7.5477,4.98965 7.5477,6.31365 6.7347,7.12765 C6.3277,7.53365 5.7937,7.73765 5.2587,7.73765 Z M1,15.36115 C1,15.85515 1.402,16.25715 1.896,16.25715 L18.935,16.25715 C19.412,16.25715 19.796,15.87915 19.82,15.40715 C19.82,15.40615 19.818,15.40515 19.817,15.40415 L15.065,8.95415 C14.849,8.66015 14.515,8.48215 14.149,8.46315 C13.786,8.44215 13.429,8.59115 13.182,8.86615 L9.725,12.72815 C9.633,12.83015 9.503,12.89015 9.365,12.89415 C9.228,12.90015 9.095,12.84415 8.998,12.74715 L7.261,11.00215 C6.811,10.55715 6.1,10.52815 5.612,10.93715 L1,14.86215 L1,15.36115 Z M1.896,1.39215 C1.402,1.39215 1,1.79415 1,2.28815 L1,13.54915 L4.967,10.17315 C5.856,9.42815 7.145,9.48215 7.967,10.29315 L9.333,11.66615 L12.438,8.19715 C12.888,7.69815 13.532,7.42715 14.198,7.46515 C14.865,7.49815 15.475,7.82415 15.87,8.36115 L19.83,13.73515 L19.83,2.28815 C19.83,1.79415 19.429,1.39215 18.935,1.39215 L1.896,1.39215 Z M20.83,15.36115 C20.83,16.40615 19.979,17.25715 18.935,17.25715 L1.896,17.25715 C0.851,17.25715 -7.46069873e-14,16.40615 -7.46069873e-14,15.36115 L-7.46069873e-14,2.28815 C-7.46069873e-14,1.24315 0.851,0.39215 1.896,0.39215 L18.935,0.39215 C19.979,0.39215 20.83,1.24315 20.83,2.28815 L20.83,15.36115 Z"
})));
Photos.displayName = "DecorativeIcon";

const PikTV = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M22.5,2 L1.5,2 C0.673,2 0,2.673 0,3.5 L0,17.5 C0,18.327 0.673,19 1.5,19 L10,19 L10,20.077 L4.418,21.007 C4.146,21.052 3.962,21.31 4.007,21.582 C4.048,21.827 4.26,22 4.5,22 C4.527,22 4.554,21.998 4.582,21.993 L10.54,21 L13.459,21 L19.417,21.993 C19.445,21.998 19.473,22 19.5,22 C19.741,22 19.953,21.827 19.992,21.582 C20.038,21.31 19.853,21.052 19.581,21.007 L14,20.077 L14,19 L22.5,19 C23.327,19 24,18.327 24,17.5 L24,3.5 C24,2.673 23.327,2 22.5,2 Z M13,20 L11,20 L11,19 L13,19 L13,20 Z M23,17.5 C23,17.776 22.776,18 22.5,18 L1.5,18 C1.224,18 1,17.776 1,17.5 L1,3.5 C1,3.224 1.224,3 1.5,3 L22.5,3 C22.776,3 23,3.224 23,3.5 L23,17.5 Z M10,14.5 C10.097,14.5 10.193,14.472 10.277,14.416 L16.277,10.416 C16.416,10.323 16.5,10.167 16.5,10 C16.5,9.833 16.416,9.677 16.278,9.584 L10.278,5.584 C10.123,5.481 9.927,5.472 9.764,5.559 C9.602,5.646 9.5,5.815 9.5,6 L9.5,14 C9.5,14.185 9.602,14.354 9.764,14.441 C9.838,14.48 9.919,14.5 10,14.5 Z M10.5,6.934 L15.099,10 L10.5,13.066 L10.5,6.934 Z"
})));
PikTV.displayName = "DecorativeIcon";

const PiggyBank = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "20",
  viewBox: "0 0 24 20"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -2)",
  d: "M24,12.1220534 L23.8752203,14.7164062 L23.393718,14.6884875 C22.9889858,14.66502 22.6181359,14.5320342 22.2601545,14.3062667 C21.8901368,16.0084654 21.0085155,17.3543306 19.6025671,18.3053302 L19.6025671,21.4151367 C19.6005228,21.4820279 19.6005228,21.4820279 19.5971128,21.5173465 C19.5960721,21.528707 19.5960721,21.528707 19.5958583,21.5314906 L19.5628853,22 L13.8152666,22 L13.7813762,21.5326179 C13.7779639,21.4866822 13.7762759,21.4548068 13.7762759,21.4151367 L13.7762759,19.9782315 C13.7002051,19.9815556 13.5997719,19.9825589 13.4527747,19.9825589 C12.8269631,19.9825589 12.2498872,19.9714328 11.7093551,19.9480351 L11.7093551,21.4151367 C11.7086901,21.4614448 11.7086901,21.4614448 11.7073087,21.4922679 C11.7067852,21.5042159 11.7067852,21.5042159 11.7064842,21.5122541 L11.6898409,22 L5.9037222,22 L5.88707891,21.5122541 C5.88696256,21.5094685 5.88696256,21.5094685 5.88613125,21.4958545 C5.88422324,21.4662328 5.88422324,21.4662328 5.88317288,21.4151367 L5.88317288,18.7439679 C4.73718564,18.1536967 3.89358165,17.3204474 3.34346829,16.2092361 L2.04635298,16.2092361 C0.919585595,16.2092361 0,15.2409021 0,14.0537529 L0,11.0999564 C0,9.91338154 0.919912253,8.94372682 2.04635298,8.94372682 L3.020379,8.94372682 C3.17054712,8.41905254 3.35915448,7.91499202 3.58463505,7.43498726 L4.13610633,3.80522406 C4.32693178,2.55929827 5.41748156,2.01264475 6.45466634,2.64312207 L7.54453616,3.30601799 C9.18765427,2.44503022 11.1775949,2 13.4527747,2 C17.9977103,2 21.0929387,4.56958948 22.099739,8.91648372 C22.5498072,8.96194781 22.9142659,9.18173151 23.2301742,9.53540624 C23.4994341,9.84775098 23.681464,10.2301463 23.7571386,10.6398861 C23.8129163,10.88897 23.8413457,11.1097889 23.8413457,11.3315479 C23.8413457,11.6044592 23.797053,11.8642512 23.6994331,12.1069053 C23.6974386,12.1119627 23.695417,12.1170122 23.6933684,12.1220534 L24,12.1220534 Z M22.9221014,12.9048706 C22.8354481,12.8434236 22.748235,12.7671337 22.6596628,12.6774819 L22.2977937,12.3112016 L22.6610129,11.9464081 C22.7267288,11.8804073 22.7812437,11.7982898 22.813972,11.7153337 C22.8594744,11.6022133 22.8810579,11.4756186 22.8810579,11.3315479 C22.8810579,11.1953784 22.8623719,11.0502396 22.8186079,10.8531626 C22.7726475,10.6055034 22.6706644,10.3912647 22.5251738,10.222374 C22.3466744,10.0225955 22.1706149,9.92436179 21.944406,9.91977551 C21.9170659,9.9194398 21.878068,9.92479296 21.8272362,9.93704304 L21.3488752,10.0523245 L21.249908,9.54588821 C20.4415745,5.40947193 17.6857608,3.0118494 13.4527747,3.0118494 C11.2164585,3.0118494 9.29808899,3.46504846 7.75668997,4.32878477 L7.52170686,4.4604596 L7.29120726,4.3202619 L5.97469802,3.51951615 C5.52008696,3.24317007 5.16786133,3.41972816 5.08422434,3.9658031 L4.52118238,7.67172665 L4.47557375,7.82001099 C4.21148172,8.37044661 4.00156449,8.9581142 3.84898619,9.57687919 L3.7556051,9.95557622 L2.04635298,9.95557622 C1.45034195,9.95557622 0.960287852,10.472129 0.960287852,11.0999564 L0.960287852,14.0537529 C0.960287852,14.6819263 1.44979868,15.1973867 2.04635298,15.1973867 L3.95308964,15.1973867 L4.08087794,15.4944396 C4.56250732,16.6140208 5.36789352,17.410009 6.55562637,17.9570649 L6.84346073,18.089638 L6.84346073,20.9881506 L10.7490672,20.9881506 L10.7490672,18.8808932 L11.2567328,18.9116053 C11.9211845,18.9518026 12.6441865,18.9707095 13.4527747,18.9707095 C13.7075098,18.9707095 13.7671698,18.9677715 13.7888421,18.9630655 C13.9284077,18.9327597 13.9870846,18.9235907 14.2193677,18.9046467 L14.7365638,18.8624665 L14.7365638,20.9881506 L18.6422792,20.9881506 L18.6422792,17.7332386 L18.8789264,17.5865161 C20.3961368,16.6458374 21.2328482,15.2339655 21.4465862,13.3280826 L21.5628131,12.2916976 L22.2629967,13.0297858 C22.3771343,13.1501023 22.4957233,13.2558469 22.6179649,13.3459757 C22.7368171,13.4327161 22.8532755,13.5027326 22.9695193,13.5558424 L22.9982886,12.9576865 C22.9726465,12.9410494 22.9472073,12.9234172 22.9221014,12.9048706 Z M5.99950744,11 C5.4474606,11 5,10.5520118 5,9.99991794 C5,9.44716759 5.4474606,9 5.99950744,9 C6.55166375,9 7,9.44716759 7,9.99991794 C7,10.5520118 6.55166375,11 5.99950744,11 Z M16.4737023,6.95007735 C15.5084255,6.57565748 14.3954806,6.36540043 13.1194091,6.36540043 C11.7968463,6.36540043 10.5747629,6.59058833 9.46576971,7 L9,5.72096882 C10.2743281,5.25160403 11.6615139,5 13.1381956,5 C14.5616446,5 15.848351,5.23414641 17,5.67977497 L16.4737023,6.95007735 Z"
})));
PiggyBank.displayName = "DecorativeIcon";

const Play = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "22",
  viewBox: "0 0 24 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -1)",
  d: "M15.4068645,11.9219613 L9.75421935,15.7144774 L9.75421935,8.20273548 L15.4068645,11.9219613 Z M9.55809032,6.84428387 L16.6610581,11.5761548 C16.7622194,11.6742194 16.8768,11.7867355 16.8768,12.0004129 C16.8768,12.2130581 16.7622194,12.3255742 16.6796387,12.4081548 L9.53847742,17.1720258 C9.44247742,17.2731871 9.31963871,17.2731871 9.22983226,17.2731871 C9.17512258,17.2731871 9.03576774,17.2731871 8.97383226,17.1792516 C8.8128,17.1307355 8.7044129,16.9645419 8.7044129,16.7477677 L8.7044129,7.25202581 C8.7044129,6.99396129 8.85925161,6.80609032 9.07189677,6.80609032 C9.1204129,6.80609032 9.16892903,6.7968 9.21331613,6.78854194 C9.32376774,6.76892903 9.46105806,6.74621935 9.55809032,6.84428387 Z M22.9501935,7.2516129 C22.9501935,4.96206452 21.0157419,3.0276129 18.7261935,3.0276129 L5.27277419,3.0276129 C2.98322581,3.0276129 1.04877419,4.96206452 1.04877419,7.2516129 L1.04877419,16.7483871 C1.04877419,19.0369032 2.98322581,20.9723871 5.27277419,20.9723871 L18.7261935,20.9723871 C21.0157419,20.9723871 22.9501935,19.0369032 22.9501935,16.7483871 L22.9501935,7.2516129 Z M18.7261935,1.97883871 C21.6340645,1.97883871 24,4.34374194 24,7.2516129 L24,16.7483871 C24,19.6552258 21.6340645,22.0211613 18.7261935,22.0211613 L5.27277419,22.0211613 C2.36490323,22.0211613 -9.09494702e-13,19.6552258 -9.09494702e-13,16.7483871 L-9.09494702e-13,7.2516129 C-9.09494702e-13,4.34374194 2.36490323,1.97883871 5.27277419,1.97883871 L18.7261935,1.97883871 Z"
})));
Play.displayName = "DecorativeIcon";

const Preference = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M4.0459,4.0459 C3.1589,4.9329 3.1589,6.3779 4.0459,7.2649 C4.9339,8.1519 6.3769,8.1519 7.2649,7.2649 C8.1519,6.3779 8.1519,4.9329 7.2649,4.0459 C6.8209,3.6019 6.2379,3.3799 5.6549,3.3799 C5.0719,3.3799 4.4899,3.6019 4.0459,4.0459 Z M5.6549,8.9299 C4.8169,8.9299 3.9779,8.6099 3.3389,7.9719 C2.0619,6.6939 2.0619,4.6159 3.3389,3.3389 C4.6159,2.0619 6.6939,2.0619 7.9719,3.3389 C9.2489,4.6159 9.2489,6.6939 7.9719,7.9719 C7.3329,8.6099 6.4939,8.9299 5.6549,8.9299 Z M19.9541,19.9541 C20.8421,19.0661 20.8421,17.6231 19.9541,16.7351 C19.5111,16.2921 18.9281,16.0701 18.3451,16.0701 C17.7621,16.0701 17.1791,16.2921 16.7351,16.7351 C15.8481,17.6231 15.8481,19.0661 16.7351,19.9541 C17.6221,20.8411 19.0671,20.8411 19.9541,19.9541 Z M16.0281,16.0281 C17.3061,14.7511 19.3841,14.7511 20.6611,16.0281 C21.9381,17.3061 21.9381,19.3841 20.6611,20.6611 C20.0221,21.3001 19.1831,21.6191 18.3451,21.6191 C17.5061,21.6191 16.6671,21.3001 16.0281,20.6611 C14.7511,19.3841 14.7511,17.3061 16.0281,16.0281 Z M18.3447,23 C20.9117,23 22.9997,20.912 22.9997,18.345 C22.9997,15.777 20.9117,13.689 18.3447,13.689 L5.6557,13.689 C3.0887,13.689 0.9997,15.777 0.9997,18.345 C0.9997,20.912 3.0887,23 5.6557,23 L18.3447,23 Z M18.3447,12.689 C21.4627,12.689 23.9997,15.227 23.9997,18.345 C23.9997,21.463 21.4627,24 18.3447,24 L5.6557,24 C2.5367,24 -0.0003,21.463 -0.0003,18.345 C-0.0003,15.227 2.5367,12.689 5.6557,12.689 L18.3447,12.689 Z M5.6553,1 C3.0883,1 1.0003,3.088 1.0003,5.655 C1.0003,8.222 3.0883,10.311 5.6553,10.311 L18.3443,10.311 C20.9123,10.311 23.0003,8.222 23.0003,5.655 C23.0003,3.088 20.9123,1 18.3443,1 L5.6553,1 Z M5.6553,11.311 C2.5373,11.311 0.0003,8.773 0.0003,5.655 C0.0003,2.537 2.5373,-7.10542736e-15 5.6553,-7.10542736e-15 L18.3443,-7.10542736e-15 C21.4633,-7.10542736e-15 24.0003,2.537 24.0003,5.655 C24.0003,8.773 21.4633,11.311 18.3443,11.311 L5.6553,11.311 Z"
})));
Preference.displayName = "DecorativeIcon";

const PrivateCloud = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "22",
  viewBox: "0 0 24 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -1)",
  d: "M15.5,16 L15,16 L15,15.5 C15,13.57 13.43,12 11.5,12 C9.57,12 8,13.57 8,15.5 L8,16 L7.5,16 C7.224,16 7,16.224 7,16.5 L7,22.5 C7,22.776 7.224,23 7.5,23 L15.5,23 C15.776,23 16,22.776 16,22.5 L16,16.5 C16,16.224 15.776,16 15.5,16 Z M9,15.5 C9,14.122 10.121,13 11.5,13 C12.879,13 14,14.122 14,15.5 L14,16 L9,16 L9,15.5 Z M15,22 L8,22 L8,17 L8.5,17 L14.5,17 L15,17 L15,22 Z M18.5,18 C18.224,18 18,17.776 18,17.5 C18,17.224 18.224,17 18.5,17 C20.981,17 23,14.981 23,12.5 C23,10.019 20.981,8 18.5,8 C18.223,7.973 17.962,7.829 17.927,7.578 C17.474,4.398 14.711,2 11.5,2 C7.916,2 5,4.916 5,8.5 C5,8.78 5.024,9.078 5.076,9.438 C5.097,9.583 5.053,9.73 4.956,9.84 C4.858,9.949 4.7,9.996 4.572,10.009 C4.55,10.009 4.489,10.003 4.467,9.999 C2.57,10 1,11.57 1,13.5 C1,15.43 2.57,17 4.5,17 C4.776,17 5,17.224 5,17.5 C5,17.776 4.776,18 4.5,18 C2.019,18 1.73472348e-18,15.981 1.73472348e-18,13.5 C1.73472348e-18,11.18 1.765,9.265 4.022,9.025 C4.007,8.842 4,8.669 4,8.5 C4,4.364 7.364,1 11.5,1 C15.065,1 18.151,3.561 18.846,7.023 C21.758,7.232 24,9.609 24,12.5 C24,15.533 21.533,18 18.5,18 Z"
})));
PrivateCloud.displayName = "DecorativeIcon";

const ProactiveAssurance = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20"
}, /*#__PURE__*/React.createElement("path", {
  d: "M.44 9.167c.86.05 3.715.27 4.43.946.092.087.138.212.128.339a8.6 8.6 0 01-.053.451l7.228 1.606c1.234.308 1.85.922 1.969 1.964l2.7-.675a2.723 2.723 0 013.115 1.432.42.42 0 01-.2.567l-4.584 2.083c-2.175.89-3.165 1.26-4.01 1.26-.543 0-1.026-.152-1.727-.417l-5.97-1.99-.153.48a.416.416 0 01-.396.287h-2.5A.417.417 0 010 17.083v-7.5c0-.115.047-.225.13-.304a.428.428 0 01.31-.112zm4.364 2.56c-.273 1.393-.75 3.076-1.093 4.21l6.004 2.001c1.502.567 1.623.613 5.127-.823l4.13-1.878c-.46-.558-1.2-.811-1.929-.63l-3.192.798h-.004l-1.118.28a2.922 2.922 0 01-1.278.03l-3.616-.723a.416.416 0 01-.327-.49.411.411 0 01.49-.327l3.615.723c.302.06.618.054.914-.021l.8-.2c-.051-.761-.422-1.124-1.345-1.355zM.833 10.03v6.637h1.78c.31-.98 1.309-4.221 1.53-6.046-.525-.255-1.971-.485-3.31-.59zM15.55 0c.458 0 .837.344.893.787L16.45.9l-.001 2.6h2.601c.42 0 .774.289.872.679l.021.108.007.113v2.5a.901.901 0 01-.787.893l-.113.007h-2.601l.001 2.6c0 .42-.289.774-.679.872l-.108.021-.113.007h-2.5a.901.901 0 01-.893-.787l-.007-.113-.001-2.6H9.55a.901.901 0 01-.872-.679l-.021-.108L8.65 6.9V4.4c0-.458.344-.837.787-.893L9.55 3.5h2.599L12.15.9c0-.42.289-.774.679-.872l.108-.021L13.05 0h2.5zm0 .8h-2.5a.1.1 0 00-.092.061L12.95.9v3a.4.4 0 01-.32.392l-.08.008h-3a.1.1 0 00-.092.061L9.45 4.4v2.5a.1.1 0 00.061.092L9.55 7h3a.4.4 0 01.392.32l.008.08v3a.1.1 0 00.061.092l.039.008h2.5a.1.1 0 00.092-.061l.008-.039v-3a.4.4 0 01.32-.392L16.05 7h3a.1.1 0 00.092-.061l.008-.039V4.4a.1.1 0 00-.061-.092L19.05 4.3h-3a.4.4 0 01-.392-.32l-.008-.08v-3a.1.1 0 00-.1-.1z"
})));
ProactiveAssurance.displayName = "DecorativeIcon";

const Radar = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M20.485,3.515 C20.284,3.314 19.931,3.313 19.728,3.515 C19.521,3.723 19.521,4.062 19.728,4.271 C21.794,6.335 22.93,9.08 22.93,12 C22.93,18.028 18.027,22.931 12,22.931 C5.972,22.931 1.068,18.028 1.068,12 C1.068,6.133 5.625,1.362 11.465,1.082 L11.465,3.303 C6.863,3.583 3.276,7.381 3.276,12 C3.276,16.811 7.189,20.725 12,20.725 C16.81,20.725 20.724,16.811 20.724,12 C20.724,9.67 19.817,7.48 18.17,5.831 C18.068,5.73 17.933,5.675 17.791,5.675 L17.79,5.675 C17.647,5.675 17.513,5.731 17.414,5.831 C17.312,5.932 17.256,6.066 17.256,6.209 C17.256,6.352 17.312,6.486 17.413,6.587 C18.859,8.033 19.655,9.955 19.655,12 C19.655,16.221 16.22,19.656 12,19.656 C7.778,19.656 4.344,16.221 4.344,12 C4.344,7.976 7.462,4.652 11.465,4.374 L11.465,6.583 C8.7,6.854 6.551,9.212 6.551,12 C6.551,15.004 8.995,17.449 12,17.449 C15.004,17.449 17.448,15.004 17.448,12 C17.448,10.545 16.881,9.177 15.852,8.148 C15.651,7.947 15.298,7.946 15.095,8.148 C14.888,8.356 14.888,8.695 15.096,8.904 C15.923,9.73 16.379,10.83 16.379,12 C16.379,14.414 14.414,16.379 12,16.379 C9.585,16.379 7.62,14.414 7.62,12 C7.62,9.804 9.298,7.922 11.465,7.656 L11.465,10.763 C10.972,10.975 10.646,11.462 10.646,12 C10.646,12.746 11.254,13.354 12,13.354 C12.746,13.354 13.353,12.746 13.353,12 C13.353,11.462 13.027,10.975 12.534,10.763 L12.534,0.535 C12.534,0.24 12.295,1.0658141e-14 12,1.0658141e-14 C5.383,1.0658141e-14 9.09494702e-13,5.384 9.09494702e-13,12 C9.09494702e-13,18.618 5.383,24 12,24 C18.617,24 24,18.618 24,12 C24,8.795 22.752,5.781 20.485,3.515"
})));
Radar.displayName = "DecorativeIcon";

const Receipt = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "22",
  viewBox: "0 0 24 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -1)",
  d: "M16.2031,14.6725 C16.4791,14.6725 16.7031,14.8965 16.7031,15.1725 C16.7031,15.4485 16.4791,15.6725 16.2031,15.6725 L10.0171,15.6725 C9.7411,15.6725 9.5171,15.4485 9.5171,15.1725 C9.5171,14.8965 9.7411,14.6725 10.0171,14.6725 L16.2031,14.6725 Z M16.2031,11.4997 C16.4791,11.4997 16.7031,11.7237 16.7031,11.9997 C16.7031,12.2757 16.4791,12.4997 16.2031,12.4997 L10.0171,12.4997 C9.7411,12.4997 9.5171,12.2757 9.5171,11.9997 C9.5171,11.7237 9.7411,11.4997 10.0171,11.4997 L16.2031,11.4997 Z M16.2031,17.8444 C16.4791,17.8444 16.7031,18.0684 16.7031,18.3444 C16.7031,18.6204 16.4791,18.8444 16.2031,18.8444 L10.0171,18.8444 C9.7411,18.8444 9.5171,18.6204 9.5171,18.3444 C9.5171,18.0684 9.7411,17.8444 10.0171,17.8444 L16.2031,17.8444 Z M10.517,8.3272 L19.827,8.3272 L19.827,5.3622 L10.517,5.3622 L10.517,8.3272 Z M20.327,4.3622 C20.604,4.3622 20.827,4.5852 20.827,4.8622 L20.827,8.8272 C20.827,9.1032 20.604,9.3272 20.327,9.3272 L10.017,9.3272 C9.741,9.3272 9.517,9.1032 9.517,8.8272 L9.517,4.8622 C9.517,4.5852 9.741,4.3622 10.017,4.3622 L20.327,4.3622 Z M20.3271,11.4997 C20.6031,11.4997 20.8271,11.7237 20.8271,11.9997 C20.8271,12.2757 20.6031,12.4997 20.3271,12.4997 L17.8691,12.4997 C17.5931,12.4997 17.3691,12.2757 17.3691,11.9997 C17.3691,11.7237 17.5931,11.4997 17.8691,11.4997 L20.3271,11.4997 Z M20.3271,14.6725 C20.6031,14.6725 20.8271,14.8965 20.8271,15.1725 C20.8271,15.4485 20.6031,15.6725 20.3271,15.6725 L17.8691,15.6725 C17.5931,15.6725 17.3691,15.4485 17.3691,15.1725 C17.3691,14.8965 17.5931,14.6725 17.8691,14.6725 L20.3271,14.6725 Z M20.3271,17.8444 C20.6031,17.8444 20.8271,18.0684 20.8271,18.3444 C20.8271,18.6204 20.6031,18.8444 20.3271,18.8444 L17.8691,18.8444 C17.5931,18.8444 17.3691,18.6204 17.3691,18.3444 C17.3691,18.0684 17.5931,17.8444 17.8691,17.8444 L20.3271,17.8444 Z M23,19.2965 L23,3.6715 C23,2.8405 22.349,2.1895 21.518,2.1895 L8.828,2.1895 C7.996,2.1895 7.345,2.8405 7.345,3.6715 L7.345,19.1375 C7.345,20.2005 6.915,21.1455 6.215,21.8105 L20.486,21.8105 C21.872,21.8105 23,20.6825 23,19.2965 Z M3.672,21.8105 C5.345,21.8105 6.345,20.4505 6.345,19.1375 L6.345,12.4995 L1,12.4995 L1,19.2165 C1,20.6705 2.174,21.8105 3.672,21.8105 Z M21.518,1.1895 C22.909,1.1895 24,2.2795 24,3.6715 L24,19.2965 C24,21.2335 22.424,22.8105 20.486,22.8105 L3.672,22.8105 C1.613,22.8105 0,21.2325 0,19.2165 L0,11.9995 C0,11.7235 0.224,11.4995 0.5,11.4995 L6.345,11.4995 L6.345,3.6715 C6.345,2.2795 7.436,1.1895 8.828,1.1895 L21.518,1.1895 Z"
})));
Receipt.displayName = "DecorativeIcon";

const Record = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "10",
  viewBox: "0 0 24 10"
}, /*#__PURE__*/React.createElement("path", {
  transform: "translate(0 -7)",
  d: "M19,17 L5,17 C4.724,17 4.5,16.776 4.5,16.5 C4.5,16.224 4.724,16 5,16 L19,16 C19.276,16 19.5,16.224 19.5,16.5 C19.5,16.776 19.276,17 19,17 Z M5,17 C2.243,17 0,14.757 0,12 C0,9.243 2.243,7 5,7 C7.757,7 10,9.243 10,12 C10,14.757 7.757,17 5,17 Z M5,8 C2.794,8 1,9.794 1,12 C1,14.206 2.794,16 5,16 C7.206,16 9,14.206 9,12 C9,9.794 7.206,8 5,8 Z M19,17 C16.243,17 14,14.757 14,12 C14,9.243 16.243,7 19,7 C21.757,7 24,9.243 24,12 C24,14.757 21.757,17 19,17 Z M19,8 C16.794,8 15,9.794 15,12 C15,14.206 16.794,16 19,16 C21.206,16 23,14.206 23,12 C23,9.794 21.206,8 19,8 Z"
})));
Record.displayName = "DecorativeIcon";

const Refresh = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M23.4805,11.4805 C23.7665,11.4805 24.0005,11.7135 24.0005,12.0005 C24.0005,18.6165 18.6165,24.0005 12.0005,24.0005 C7.4755,24.0005 3.6935,21.4465 1.0395,16.6075 L1.0395,19.5215 C1.0395,19.8085 0.8065,20.0415 0.5195,20.0415 C0.2325,20.0415 0.0005,19.8085 0.0005,19.5215 L0.0005,15.5625 C0.0005,15.2765 0.2325,15.0435 0.5195,15.0435 L4.4785,15.0435 C4.7645,15.0435 4.9975,15.2765 4.9975,15.5625 C4.9975,15.8495 4.7645,16.0825 4.4785,16.0825 L1.9325,16.0825 C3.6735,19.2645 6.8145,22.9605 12.0005,22.9605 C18.0435,22.9605 22.9605,18.0435 22.9605,12.0005 C22.9605,11.7135 23.1945,11.4805 23.4805,11.4805 Z M23.4805,3.959 C23.7665,3.959 24.0005,4.192 24.0005,4.478 L24.0005,8.437 C24.0005,8.724 23.7665,8.957 23.4805,8.957 L19.5215,8.957 C19.2355,8.957 19.0015,8.724 19.0015,8.437 C19.0015,8.15 19.2355,7.917 19.5215,7.917 L22.0685,7.917 C20.3265,4.736 17.1855,1.039 12.0005,1.039 C5.9565,1.039 1.0395,5.956 1.0395,12 C1.0395,12.287 0.8065,12.52 0.5195,12.52 C0.2325,12.52 0.0005,12.287 0.0005,12 C0.0005,5.383 5.3835,-8.8817842e-15 12.0005,-8.8817842e-15 C16.5265,-8.8817842e-15 20.3065,2.554 22.9605,7.392 L22.9605,4.478 C22.9605,4.192 23.1945,3.959 23.4805,3.959 Z"
})));
Refresh.displayName = "DecorativeIcon";

const RemoteControl = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "14",
  height: "24",
  viewBox: "0 0 14 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-5)",
  d: "M12.3901128,13.2329185 L12.8656571,13.7094618 C13.0614695,13.9042751 13.0614695,14.2199725 12.8656571,14.4157849 C12.7677509,14.512692 12.6398735,14.5616451 12.5129951,14.5616451 C12.3851176,14.5616451 12.2572402,14.512692 12.159334,14.4157849 L12.0364518,14.2929026 L11.9135695,14.4157849 C11.7187562,14.6105982 11.4030588,14.6105982 11.2072464,14.4157849 C11.0124331,14.2199725 11.0124331,13.9042751 11.2072464,13.7094618 L11.6837897,13.2329185 C11.7776997,13.1390085 11.9045781,13.0870582 12.0364518,13.0870582 C12.1693244,13.0870582 12.2962028,13.1390085 12.3901128,13.2329185 Z M9.54463975,16.811489 L9.69349709,16.9603463 C9.8883104,17.1561587 9.8883104,17.4718561 9.69349709,17.6666694 C9.59559092,17.7645756 9.46771347,17.8135287 9.33983602,17.8135287 C9.21195857,17.8135287 9.08508016,17.7645756 8.98717399,17.6666694 L8.51063067,17.1911252 C8.3258078,17.0063023 8.31481833,16.7105857 8.48465557,16.5127753 L8.96119888,15.9583066 C9.14102655,15.7485077 9.456724,15.7255297 9.6655239,15.9033593 C9.87532284,16.0831869 9.89830082,16.3988844 9.7194722,16.6076843 L9.54463975,16.811489 Z M12.159334,19.1813179 C12.3541473,18.9865046 12.6708438,18.9865046 12.8656571,19.1813179 C13.0614695,19.3761312 13.0614695,19.6928277 12.8656571,19.887641 L12.3901128,20.3641843 C12.2962028,20.4570953 12.1693244,20.5100445 12.0364518,20.5100445 C11.9045781,20.5100445 11.7776997,20.4570953 11.6837897,20.3641843 L11.2072464,19.887641 C11.0124331,19.6928277 11.0124331,19.3761312 11.2072464,19.1813179 C11.4030588,18.9865046 11.7187562,18.9865046 11.9135695,19.1813179 L12.0364518,19.3042001 L12.159334,19.1813179 Z M15.0077043,15.9295342 L15.563172,16.4850019 C15.6610782,16.582908 15.7140274,16.7177788 15.7090322,16.8576448 C15.703038,16.9955126 15.6410973,17.1263872 15.5341998,17.2173001 L14.9797311,17.6938434 C14.8858211,17.7737668 14.7699322,17.8137285 14.6540432,17.8137285 C14.5141773,17.8137285 14.3743113,17.753786 14.2754061,17.6388961 C14.0955784,17.4300962 14.1195555,17.1143987 14.3293544,16.934571 L14.4752146,16.8096907 L14.3013812,16.6358573 C14.1065679,16.441044 14.1065679,16.1243475 14.3013812,15.9295342 C14.4961945,15.7347209 14.812891,15.7347209 15.0077043,15.9295342 Z M9.52615746,4.01615119 C9.77392002,3.76838863 10.1755351,3.76838863 10.4232977,4.01615119 C10.6710603,4.26391375 10.6710603,4.66552887 10.4232977,4.91329143 C10.1755351,5.16105399 9.77392002,5.16105399 9.52615746,4.91329143 C9.2783949,4.66552887 9.2783949,4.26391375 9.52615746,4.01615119 Z M12.4857212,4.91379095 C12.2379587,5.16155351 11.8363435,5.16155351 11.588581,4.91379095 C11.3408184,4.66602839 11.3408184,4.26441327 11.588581,4.01665071 C11.8363435,3.76888815 12.2379587,3.76888815 12.4857212,4.01665071 C12.7334838,4.26441327 12.7334838,4.66602839 12.4857212,4.91379095 Z M14.5481447,4.91379095 C14.3003822,5.16155351 13.898767,5.16155351 13.6510045,4.91379095 C13.4032419,4.66602839 13.4032419,4.26441327 13.6510045,4.01665071 C13.898767,3.76888815 14.3003822,3.76888815 14.5481447,4.01665071 C14.7959073,4.26441327 14.7959073,4.66602839 14.5481447,4.91379095 Z M9.52615746,7.2679349 C9.77392002,7.02017233 10.1755351,7.02017233 10.4232977,7.2679349 C10.6710603,7.51569746 10.6710603,7.91731258 10.4232977,8.16507514 C10.1755351,8.4128377 9.77392002,8.4128377 9.52615746,8.16507514 C9.2783949,7.91731258 9.2783949,7.51569746 9.52615746,7.2679349 Z M12.4857212,8.16547475 C12.2379587,8.41323731 11.8363435,8.41323731 11.588581,8.16547475 C11.3408184,7.91771219 11.3408184,7.51609707 11.588581,7.26833451 C11.8363435,7.02057195 12.2379587,7.02057195 12.4857212,7.26833451 C12.7334838,7.51609707 12.7334838,7.91771219 12.4857212,8.16547475 Z M14.5481447,8.16547475 C14.3003822,8.41323731 13.898767,8.41323731 13.6510045,8.16547475 C13.4032419,7.91771219 13.4032419,7.51609707 13.6510045,7.26833451 C13.898767,7.02057195 14.3003822,7.02057195 14.5481447,7.26833451 C14.7959073,7.51609707 14.7959073,7.91771219 14.5481447,8.16547475 Z M9.52615746,10.4406943 C9.77392002,10.1929318 10.1755351,10.1929318 10.4232977,10.4406943 C10.6710603,10.6884569 10.6710603,11.090072 10.4232977,11.3378346 C10.1755351,11.5855971 9.77392002,11.5855971 9.52615746,11.3378346 C9.2783949,11.090072 9.2783949,10.6884569 9.52615746,10.4406943 Z M12.4857212,11.3377347 C12.2379587,11.5854972 11.8363435,11.5854972 11.588581,11.3377347 C11.3408184,11.0899721 11.3408184,10.688357 11.588581,10.4405944 C11.8363435,10.1928319 12.2379587,10.1928319 12.4857212,10.4405944 C12.7334838,10.688357 12.7334838,11.0899721 12.4857212,11.3377347 Z M14.5481447,10.4406943 C14.7959073,10.6884569 14.7959073,11.090072 14.5481447,11.3378346 C14.3003822,11.5855971 13.898767,11.5855971 13.6510045,11.3378346 C13.4032419,11.090072 13.4032419,10.6884569 13.6510045,10.4406943 C13.898767,10.1929318 14.3003822,10.1929318 14.5481447,10.4406943 Z M12.4857212,17.2866336 C12.2379587,17.5343962 11.8363435,17.5343962 11.588581,17.2866336 C11.3408184,17.0388711 11.3408184,16.637256 11.588581,16.3894934 C11.8363435,16.1417308 12.2379587,16.1417308 12.4857212,16.3894934 C12.7334838,16.637256 12.7334838,17.0388711 12.4857212,17.2866336 Z M16.7814045,22.5004371 C16.9772169,22.2916372 17.2039995,21.9299838 17.1700321,21.3905008 L17.169033,2.56154519 C17.169033,1.68538484 16.4826908,0.999042584 15.6065304,0.999042584 L8.38844777,0.999042584 C7.51228742,0.999042584 6.82594516,1.68538484 6.82594516,2.56154519 L6.82594516,21.4384548 C6.82594516,22.3136161 7.51228742,23.0009574 8.38844777,23.0009574 L15.6065304,23.0009574 C16.0541015,23.0009574 16.4826908,22.8181326 16.7814045,22.5004371 Z M15.6065304,0 C17.0431537,0 18.1680756,1.12492195 18.1680756,2.56154519 L18.1680756,21.3585314 C18.2110345,22.0258919 17.9772585,22.686259 17.5097066,23.1847813 C17.0231728,23.7022853 16.3298373,24 15.6065304,24 L8.38844777,24 C6.95282357,24 5.82690258,22.8750781 5.82690258,21.4384548 L5.82690258,2.56154519 C5.82690258,1.12492195 6.95282357,0 8.38844777,0 L15.6065304,0 Z"
})));
RemoteControl.displayName = "DecorativeIcon";

const Router = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "20",
  viewBox: "0 0 24 20"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -2)",
  d: "M17,14.121 L17,7.621 C17,7.345 17.224,7.121 17.5,7.121 C17.776,7.121 18,7.345 18,7.621 L18,14.121 L21.5,14.121 C22.878,14.121 24,15.243 24,16.621 L24,18.621 C24,20 22.878,21.121 21.5,21.121 L2.5,21.121 C1.122,21.121 0,19.999 0,18.621 L0,16.621 C0,15.243 1.122,14.121 2.5,14.121 L17,14.121 Z M2.5,15.121 C1.673,15.121 1,15.794 1,16.621 L1,18.621 C1,19.448 1.673,20.121 2.5,20.121 L21.5,20.121 C22.327,20.121 23,19.448 23,18.621 L23,16.621 C23,15.794 22.327,15.121 21.5,15.121 L2.5,15.121 Z M3.5,18.621 C2.94771525,18.621 2.5,18.1732847 2.5,17.621 C2.5,17.0687153 2.94771525,16.621 3.5,16.621 C4.05228475,16.621 4.5,17.0687153 4.5,17.621 C4.5,18.1732847 4.05228475,18.621 3.5,18.621 Z M6.5,18.621 C5.94771525,18.621 5.5,18.1732847 5.5,17.621 C5.5,17.0687153 5.94771525,16.621 6.5,16.621 C7.05228475,16.621 7.5,17.0687153 7.5,17.621 C7.5,18.1732847 7.05228475,18.621 6.5,18.621 Z M9.5,18.621 C8.94771525,18.621 8.5,18.1732847 8.5,17.621 C8.5,17.0687153 8.94771525,16.621 9.5,16.621 C10.0522847,16.621 10.5,17.0687153 10.5,17.621 C10.5,18.1732847 10.0522847,18.621 9.5,18.621 Z M12.5,18.621 C11.9477153,18.621 11.5,18.1732847 11.5,17.621 C11.5,17.0687153 11.9477153,16.621 12.5,16.621 C13.0522847,16.621 13.5,17.0687153 13.5,17.621 C13.5,18.1732847 13.0522847,18.621 12.5,18.621 Z M20.5,18.121 L15.5,18.121 C15.224,18.121 15,17.897 15,17.621 C15,17.345 15.224,17.121 15.5,17.121 L20.5,17.121 C20.776,17.121 21,17.345 21,17.621 C21,17.897 20.776,18.121 20.5,18.121 Z M16.086,9.535 C15.958,9.535 15.83,9.486 15.732,9.389 C15.26,8.917 15,8.289 15,7.621 C15,6.953 15.26,6.325 15.732,5.853 C15.927,5.658 16.244,5.658 16.439,5.853 C16.634,6.048 16.634,6.365 16.439,6.56 C16.156,6.844 16,7.22 16,7.621 C16,8.022 16.156,8.398 16.439,8.682 C16.634,8.877 16.634,9.194 16.439,9.389 C16.342,9.487 16.214,9.535 16.086,9.535 Z M18.914,9.535 C18.786,9.535 18.658,9.486 18.56,9.389 C18.365,9.194 18.365,8.877 18.56,8.682 C18.844,8.399 19,8.022 19,7.621 C19,7.22 18.844,6.844 18.561,6.56 C18.366,6.365 18.366,6.048 18.561,5.853 C18.756,5.658 19.073,5.658 19.268,5.853 C19.74,6.325 20,6.953 20,7.621 C20,8.289 19.74,8.917 19.268,9.389 C19.17,9.487 19.042,9.535 18.914,9.535 Z M14.671,10.95 C14.543,10.95 14.415,10.901 14.317,10.804 C12.563,9.049 12.563,6.195 14.317,4.44 C14.512,4.245 14.829,4.245 15.024,4.44 C15.219,4.635 15.219,4.952 15.024,5.147 C13.66,6.512 13.66,8.732 15.024,10.097 C15.219,10.292 15.219,10.609 15.024,10.804 C14.927,10.901 14.799,10.95 14.671,10.95 Z M20.329,10.95 C20.201,10.95 20.073,10.901 19.975,10.804 C19.78,10.609 19.78,10.292 19.975,10.097 C21.339,8.732 21.339,6.512 19.975,5.147 C19.78,4.952 19.78,4.635 19.975,4.44 C20.17,4.245 20.487,4.245 20.682,4.44 C22.436,6.195 22.436,9.049 20.682,10.804 C20.584,10.901 20.457,10.95 20.329,10.95 Z M13.257,12.364 C13.129,12.364 13.001,12.315 12.903,12.218 C10.369,9.684 10.369,5.56 12.903,3.026 C13.098,2.831 13.415,2.831 13.61,3.026 C13.805,3.221 13.805,3.538 13.61,3.733 C11.465,5.878 11.465,9.367 13.61,11.511 C13.805,11.706 13.805,12.023 13.61,12.218 C13.513,12.315 13.385,12.364 13.257,12.364 Z M21.743,12.364 C21.615,12.364 21.487,12.315 21.389,12.218 C21.194,12.023 21.194,11.706 21.389,11.511 C23.534,9.366 23.534,5.877 21.389,3.733 C21.194,3.538 21.194,3.221 21.389,3.026 C21.584,2.831 21.901,2.831 22.096,3.026 C24.63,5.56 24.63,9.684 22.096,12.218 C21.999,12.315 21.871,12.364 21.743,12.364 Z"
})));
Router.displayName = "DecorativeIcon";

const Sales = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20"
}, /*#__PURE__*/React.createElement("path", {
  d: "M19.583 6.667c.23 0 .417.186.417.416v4.167a.417.417 0 01-.712.295L17.5 9.756l-5.956 5.956a.417.417 0 01-.589 0l-3.037-3.04-4.705 4.706a.416.416 0 11-.59-.589l5-5a.417.417 0 01.589 0l3.038 3.039 5.661-5.661-1.788-1.789a.416.416 0 01.295-.711h4.166zM7.083 0a7.091 7.091 0 017.084 7.083c0 2.36-1.17 4.556-3.129 5.877a.417.417 0 01-.466-.69A6.249 6.249 0 007.083.832a6.257 6.257 0 00-6.25 6.25 6.248 6.248 0 003.772 5.737.417.417 0 01-.33.765A7.08 7.08 0 010 7.083 7.091 7.091 0 017.083 0zm0 3.333c.23 0 .417.187.417.417v.449c.912.143 1.6.748 1.665 1.52a.417.417 0 01-.83.07c-.029-.34-.375-.628-.835-.74l.002 1.698c1.124.275 1.665.804 1.665 1.586 0 .805-.717 1.478-1.666 1.633l-.001.45a.417.417 0 01-.833 0l-.001-.448c-.912-.143-1.6-.75-1.664-1.52a.417.417 0 01.83-.07c.028.339.374.628.834.74L6.665 7.42C5.54 7.144 5 6.615 5 5.833c0-.804.717-1.477 1.666-1.633v-.45c0-.23.187-.417.417-.417zM19.167 7.5h-2.745l2.745 2.744V7.5zm-11.665.103l-.001 1.514c.48-.118.831-.43.831-.784 0-.334-.266-.57-.83-.73zM6.666 5.05c-.48.117-.833.429-.833.783 0 .334.267.57.832.73l.001-1.513z"
})));
Sales.displayName = "DecorativeIcon";

const SecurityCamera = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "18",
  viewBox: "0 0 24 18"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -3)",
  d: "M9.1881686,13.4342021 C9.38023,13.6164272 9.5,13.8741046 9.5,14.1597559 C9.5,14.7120406 9.05228475,15.1597559 8.5,15.1597559 C7.94771525,15.1597559 7.5,14.7120406 7.5,14.1597559 C7.5,13.6074711 7.94771525,13.1597559 8.5,13.1597559 C8.54669717,13.1597559 8.59264676,13.1629567 8.63764134,13.1691508 L7.87925778,12.8040272 C7.3464554,13.0449741 7,13.5687842 7,14.1597559 C7,14.9867559 7.673,15.6597559 8.5,15.6597559 C9.327,15.6597559 10,14.9867559 10,14.1597559 C10,14.0425187 9.98429194,13.9230375 9.95317647,13.802515 L9.1881686,13.4342021 Z M19.0126216,10.8254045 L21.016,11.6267559 L22.342,11.1847559 C22.469,11.1427559 22.606,11.1527559 22.724,11.2117559 L23.724,11.7117559 C23.964,11.8317559 24.067,12.1207559 23.955,12.3657559 L21.455,17.8657559 C21.399,17.9897559 21.295,18.0847559 21.167,18.1297559 C21.112,18.1497559 21.057,18.1597559 21,18.1597559 C20.923,18.1597559 20.847,18.1417559 20.776,18.1067559 L19.776,17.6067559 C19.658,17.5467559 19.567,17.4427559 19.525,17.3177559 L19.084,15.9927559 L17.1603995,14.8382669 L16.88,15.4457559 C16.71,15.8137559 16.406,16.0917559 16.026,16.2287559 C15.859,16.2887559 15.688,16.3177559 15.517,16.3177559 C15.295,16.3177559 15.075,16.2677559 14.868,16.1687559 L10.9958575,14.3045136 C10.930314,15.4467823 10.094161,16.3865848 9,16.6095377 L9,20.1597559 C9,20.4357559 8.776,20.6597559 8.5,20.6597559 L0.5,20.6597559 C0.224,20.6597559 0,20.4357559 0,20.1597559 C0,19.8837559 0.224,19.6597559 0.5,19.6597559 L8,19.6597559 L8,16.6095377 C6.85994766,16.3772337 6,15.3666868 6,14.1597559 C6,13.4308554 6.31423865,12.7631065 6.83535832,12.301442 L3.17,10.5367559 C2.437,10.1837559 2.117,9.2957559 2.458,8.5567559 L4.62,3.8727559 C4.79,3.5047559 5.094,3.2267559 5.475,3.0897559 C5.856,2.9517559 6.266,2.9737559 6.633,3.1497559 L18.33,8.7817559 C19.063,9.1347559 19.383,10.0227559 19.042,10.7617559 L19.0126216,10.8254045 Z M18.5928302,11.734888 L17.5816777,13.9255625 L19.757,15.2307559 C19.86,15.2927559 19.937,15.3877559 19.975,15.5017559 L20.41,16.8057559 L20.761,16.9807559 L22.847,12.3917559 L22.463,12.1997559 L21.159,12.6337559 C21.046,12.6717559 20.926,12.6667559 20.815,12.6237559 L18.5928302,11.734888 Z M10.6018957,13.0056611 L15.3,15.2677559 C15.423,15.3267559 15.56,15.3337559 15.686,15.2877559 C15.814,15.2427559 15.915,15.1497559 15.971,15.0267559 L18.133,10.3427559 C18.246,10.0967559 18.14,9.8007559 17.896,9.6827559 L6.199,4.0507559 C6.131,4.0177559 6.057,4.0007559 5.982,4.0007559 C5.925,4.0007559 5.868,4.0107559 5.813,4.0307559 C5.686,4.0767559 5.585,4.1687559 5.528,4.2917559 L3.366,8.9757559 C3.253,9.2217559 3.359,9.5177559 3.603,9.6357559 L8.11407514,11.8077979 C8.11778882,11.8095302 8.12147846,11.8113068 8.12514539,11.8131281 L10.5576814,12.9843723 C10.5727583,12.9907404 10.587515,12.9978453 10.6018957,13.0056611 Z"
})));
SecurityCamera.displayName = "DecorativeIcon";

const SecurityHouse = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M23.5,17 L23,17 L23,16.5 C23,14.57 21.43,13 19.5,13 C17.57,13 16,14.57 16,16.5 L16,17 L15.5,17 C15.224,17 15,17.224 15,17.5 L15,23.5 C15,23.776 15.224,24 15.5,24 L23.5,24 C23.776,24 24,23.776 24,23.5 L24,17.5 C24,17.224 23.776,17 23.5,17 Z M17,16.5 C17,15.122 18.121,14 19.5,14 C20.879,14 22,15.122 22,16.5 L22,17 L17,17 L17,16.5 Z M23,23 L16,23 L16,18 L16.5,18 L22.5,18 L23,18 L23,23 Z M13.5,19 C13.776,19 14,19.224 14,19.5 C14,19.776 13.776,20 13.5,20 L8.5,20 C8.224,20 8,19.776 8,19.5 L8,12.5 C8,12.224 8.224,12 8.5,12 L15.5,12 C15.776,12 16,12.224 16,12.5 L16,13.5 C16,13.776 15.776,14 15.5,14 C15.224,14 15,13.776 15,13.5 L15,13 L9,13 L9,19 L13.5,19 Z M13.5,23 C13.776,23 14,23.224 14,23.5 C14,23.776 13.776,24 13.5,24 L3.5,24 C3.224,24 3,23.776 3,23.5 L3,12 L0.5,12 C0.298,12 0.115,11.878 0.038,11.691 C-0.039,11.504 0.004,11.289 0.146,11.146 L10.794,0.5 C11.432,-0.141 12.568,-0.139 13.206,0.5 L16,3.293 L16,0.5 C16,0.224 16.224,0 16.5,0 L20.5,0 C20.776,0 21,0.224 21,0.5 L21,8.293 L23.854,11.147 C23.997,11.29 24.04,11.505 23.962,11.692 C23.884,11.879 23.702,12 23.5,12 L20.5,12 C20.224,12 20,11.776 20,11.5 C20,11.224 20.224,11 20.5,11 L22.293,11 L20.147,8.854 C20.053,8.76 20,8.633 20,8.5 L20,1 L17,1 L17,4.5 C17,4.702 16.878,4.885 16.691,4.962 C16.505,5.041 16.291,4.997 16.146,4.854 L12.499,1.207 C12.234,0.942 11.764,0.944 11.501,1.207 L1.707,11 L3.5,11 C3.776,11 4,11.224 4,11.5 L4,23 L13.5,23 Z M19.5,19 C18.948,19 18.5,19.448 18.5,20 C18.5,20.366 18.706,20.673 19,20.847 L19,21.5 C19,21.776 19.224,22 19.5,22 C19.776,22 20,21.776 20,21.5 L20,20.847 C20.294,20.673 20.5,20.366 20.5,20 C20.5,19.448 20.052,19 19.5,19 Z"
})));
SecurityHouse.displayName = "DecorativeIcon";

const SecurityMobile = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "16",
  height: "24",
  viewBox: "0 0 16 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-4)",
  d: "M15.5,23 L7.5,23 C6.621,23 5.5,21.878 5.5,20 L5.5,19 L18.5,19 L18.5,20 C18.5,21.878 17.379,23 15.5,23 L15.5,23 Z M7.5,1 L15.5,1 C17.379,1 18.5,2.122 18.5,3 L18.5,4 L5.5,4 L5.5,3 C5.5,2.122 6.621,1 7.5,1 L7.5,1 Z M5.5,18 L18.5,18 L18.5,5 L5.5,5 L5.5,18 Z M16.5,1.42108547e-14 L8.5,1.42108547e-14 C6.07,1.42108547e-14 4.5,1.57 4.5,4 L4.5,21 C4.5,22.43 6.07,24 8.5,24 L16.5,24 C17.93,24 19.5,22.43 19.5,21 L19.5,4 C19.5,1.57 17.93,1.42108547e-14 16.5,1.42108547e-14 L16.5,1.42108547e-14 Z M11.5,11 L11.5,9 L12.5,9 L12.5,11 L11.5,11 Z M11,3 C10.724,3 10.5,2.776 10.5,2.5 C10.5,2.224 10.724,2 11,2 L11.993,2 L12.002,2 L13,2 C13.276,2 13.5,2.224 13.5,2.5 C13.5,2.776 13.276,3 13,3 L11,3 Z M11.5,14 L12.5,14 L12.5,12 L11.5,12 L11.5,14 Z M10.5,11 L10.5,12 L10.5,14 L10.5,15 C10.5,15 10.972,15.024 11.5,15 L13.5,14 L13.5,12 L13.5,11 L13.5,9 L13.5,8 C13.5,8 13.028,7.976 12.5,8 L10.5,9 L10.5,11 Z M15.5,14 C15.5,14.098 11.825,16 11.825,16 C11.825,16 8.5,14.099 8.5,14 L8.5,8 L12,7 L15.5,8 L15.5,14 Z M12.5,6 L16.5,7 L16.5,14 C16.5,15.048 13.023,16.542 12.321,17 C11.952,16.987 11.886,17.001 11.321,17 C11.756,17.001 11.689,16.987 11.321,17 C10.618,16.542 7.5,15.048 7.5,14 L7.5,7 L11.5,6 C11.959,5.995 12.041,5.995 12.5,6 Z M12,20 C12.553,20 13,20.447 13,21 C13,21.553 12.553,22 12,22 C11.448,22 11,21.553 11,21 C11,20.447 11.448,20 12,20 Z"
})));
SecurityMobile.displayName = "DecorativeIcon";

const SecuritySettings = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "22",
  height: "24",
  viewBox: "0 0 22 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-1)",
  d: "M12,24 C11.95,24 11.899,23.993 11.852,23.978 C8.242,22.855 1.5,18.922 1.5,14.5 L1.5,3.5 C1.5,3.279 1.645,3.084 1.856,3.021 L11.856,0.021 C11.95,-0.007 12.049,-0.007 12.143,0.021 L22.143,3.021 C22.355,3.085 22.5,3.279 22.5,3.5 L22.5,14.5 C22.5,18.922 15.758,22.854 12.148,23.978 C12.101,23.993 12.05,24 12,24 Z M2.5,3.872 L2.5,14.5 C2.5,18.011 8.063,21.703 12,22.976 C15.937,21.703 21.5,18.011 21.5,14.5 L21.5,3.872 L12,1.022 L2.5,3.872 Z M12.979,16.9987889 C12.873,16.9987889 12.769,16.9641714 12.682,16.8990091 C12.569,16.8145018 12.495,16.6841772 12.482,16.5416346 C12.456,16.2789491 12.248,16.0814259 12,16.0814259 C11.751,16.0814259 11.543,16.2789491 11.517,16.5426528 C11.503,16.6851953 11.43,16.8155199 11.317,16.9000273 C11.204,16.9845346 11.06,17.0191521 10.922,16.9896254 C9.75,16.752394 8.699,16.1272431 7.884,15.183408 C7.791,15.0775192 7.747,14.9359949 7.762,14.7954886 C7.776,14.6539643 7.847,14.525676 7.958,14.4401505 C8.165,14.2813174 8.226,14.0084503 8.103,13.791582 C7.98,13.5747137 7.718,13.4902063 7.48,13.5940588 C7.352,13.6490394 7.207,13.6470031 7.081,13.5899861 C6.954,13.5319509 6.856,13.4230077 6.811,13.2886105 C6.602,12.6614233 6.5,12.076999 6.5,11.5007199 C6.5,10.9244408 6.602,10.3400164 6.811,9.71282931 C6.856,9.57843207 6.954,9.46948885 7.08,9.41247183 C7.208,9.35443666 7.352,9.35240034 7.48,9.40839919 C7.719,9.51123344 7.98,9.42774425 8.102,9.21087597 C8.226,8.99095321 8.165,8.71910424 7.958,8.56027114 C7.847,8.47474562 7.775,8.34645734 7.762,8.20493298 C7.747,8.06442677 7.791,7.92392056 7.883,7.81701366 C8.699,6.87216032 9.75,6.24700951 10.922,6.01079618 C11.061,5.98228767 11.203,6.01486882 11.317,6.10039434 C11.43,6.18591986 11.504,6.3152263 11.517,6.45776883 C11.543,6.72045434 11.751,6.91797756 12,6.91797756 C12.248,6.91797756 12.456,6.72045434 12.482,6.45776883 C12.496,6.3152263 12.569,6.18591986 12.682,6.10039434 C12.795,6.01588698 12.937,5.98025135 13.077,6.01079618 C14.249,6.24700951 15.3,6.87216032 16.116,7.81701366 C16.208,7.9229024 16.252,8.06442677 16.237,8.20493298 C16.223,8.34645734 16.152,8.47474562 16.041,8.56027114 C15.834,8.71808608 15.773,8.99095321 15.896,9.20782149 C16.02,9.42570793 16.284,9.50817896 16.52,9.40636287 C16.648,9.35138218 16.791,9.35240034 16.92,9.41043551 C17.046,9.46847069 17.144,9.5774139 17.189,9.71079299 C17.398,10.3379801 17.5,10.9224045 17.5,11.4986836 C17.5,12.0719082 17.398,12.6563325 17.189,13.285556 C17.145,13.4199532 17.047,13.5288965 16.92,13.5869316 C16.792,13.6449668 16.648,13.645985 16.52,13.5910043 C16.283,13.48817 16.019,13.5716592 15.897,13.7885275 C15.896,13.7885275 15.896,13.7885275 15.896,13.7885275 C15.773,14.0053958 15.833,14.2782629 16.041,14.437096 C16.152,14.5216034 16.224,14.6509098 16.237,14.7924342 C16.252,14.9329404 16.208,15.0734466 16.115,15.1803535 C15.3,16.1252068 14.249,16.7503576 13.077,16.986571 C13.045,16.9967526 13.012,16.9987889 12.979,16.9987889 Z M8.938,14.8321425 C9.445,15.3208597 10.038,15.677216 10.685,15.87983 C10.936,15.3900946 11.433,15.063265 12,15.063265 C12.567,15.063265 13.063,15.3900946 13.313,15.87983 C13.96,15.6761979 14.553,15.3208597 15.06,14.8321425 C14.778,14.3678611 14.751,13.7722369 15.03,13.2825015 C15.309,12.791748 15.869,12.5280443 16.366,12.5341532 C16.456,12.1737243 16.5,11.8326404 16.5,11.5007199 C16.5,11.1677813 16.456,10.8266974 16.367,10.4672866 C15.83,10.4917224 15.309,10.21071 15.03,9.71893827 C14.752,9.22920287 14.778,8.63357873 15.06,8.16929734 C14.553,7.6805801 13.96,7.32422377 13.313,7.12160975 C13.063,7.60930883 12.567,7.93613849 12,7.93613849 C11.433,7.93613849 10.936,7.60930883 10.686,7.11957343 C10.039,7.32320561 9.446,7.67854378 8.939,8.16726102 C9.221,8.63256057 9.247,9.22716655 8.968,9.71893827 C8.69,10.2096918 8.168,10.4774682 7.633,10.4662684 C7.544,10.8256792 7.5,11.1667631 7.5,11.4997017 C7.5,11.8336585 7.544,12.1747424 7.633,12.5331351 C8.166,12.51379 8.69,12.7897116 8.969,13.2814834 C9.247,13.7722369 9.221,14.3678611 8.938,14.8321425 Z M12,14 C10.621,14 9.5,12.878 9.5,11.5 C9.5,10.122 10.621,9 12,9 C13.379,9 14.5,10.122 14.5,11.5 C14.5,12.878 13.379,14 12,14 Z M12,10 C11.173,10 10.5,10.673 10.5,11.5 C10.5,12.327 11.173,13 12,13 C12.827,13 13.5,12.327 13.5,11.5 C13.5,10.673 12.827,10 12,10 Z"
})));
SecuritySettings.displayName = "DecorativeIcon";

const Server = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "22",
  viewBox: "0 0 24 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -1)",
  d: "M15.5614,4.3528 C15.8494,4.3528 16.0844,4.5878 16.0844,4.8758 L16.0844,6.4588 C16.0844,6.7478 15.8494,6.9818 15.5614,6.9818 C15.2734,6.9818 15.0384,6.7478 15.0384,6.4588 L15.0384,4.8758 C15.0384,4.5878 15.2734,4.3528 15.5614,4.3528 Z M3.9574,5.6677 C3.9574,5.5197 3.8374,5.3987 3.6884,5.3987 C3.5414,5.3987 3.4214,5.5197 3.4214,5.6677 C3.4214,5.8147 3.5414,5.9357 3.6884,5.9357 C3.8374,5.9357 3.9574,5.8147 3.9574,5.6677 Z M3.6884,4.3527 C4.4144,4.3527 5.0034,4.9427 5.0034,5.6677 C5.0034,6.3927 4.4144,6.9817 3.6884,6.9817 C2.9644,6.9817 2.3744,6.3927 2.3744,5.6677 C2.3744,4.9427 2.9644,4.3527 3.6884,4.3527 Z M13.1864,4.3528 C13.4744,4.3528 13.7104,4.5878 13.7104,4.8758 L13.7104,6.4588 C13.7104,6.7478 13.4744,6.9818 13.1864,6.9818 C12.8984,6.9818 12.6634,6.7478 12.6634,6.4588 L12.6634,4.8758 C12.6634,4.5878 12.8984,4.3528 13.1864,4.3528 Z M17.9364,4.3528 C18.2244,4.3528 18.4594,4.5878 18.4594,4.8758 L18.4594,6.4588 C18.4594,6.7478 18.2244,6.9818 17.9364,6.9818 C17.6484,6.9818 17.4124,6.7478 17.4124,6.4588 L17.4124,4.8758 C17.4124,4.5878 17.6484,4.3528 17.9364,4.3528 Z M15.5614,13.0588 C15.8494,13.0588 16.0844,13.2938 16.0844,13.5818 L16.0844,15.1638 C16.0844,15.4538 15.8494,15.6888 15.5614,15.6888 C15.2734,15.6888 15.0384,15.4538 15.0384,15.1638 L15.0384,13.5818 C15.0384,13.2938 15.2734,13.0588 15.5614,13.0588 Z M20.3104,13.0588 C20.5984,13.0588 20.8334,13.2938 20.8334,13.5818 L20.8334,15.1638 C20.8334,15.4538 20.5984,15.6888 20.3104,15.6888 C20.0224,15.6888 19.7874,15.4538 19.7874,15.1638 L19.7874,13.5818 C19.7874,13.2938 20.0224,13.0588 20.3104,13.0588 Z M17.9364,13.0588 C18.2244,13.0588 18.4594,13.2938 18.4594,13.5818 L18.4594,15.1638 C18.4594,15.4538 18.2244,15.6888 17.9364,15.6888 C17.6484,15.6888 17.4124,15.4538 17.4124,15.1638 L17.4124,13.5818 C17.4124,13.2938 17.6484,13.0588 17.9364,13.0588 Z M3.9574,14.3743 C3.9574,14.2273 3.8374,14.1053 3.6884,14.1053 C3.5414,14.1053 3.4214,14.2273 3.4214,14.3743 C3.4214,14.5213 3.5414,14.6423 3.6884,14.6423 C3.8374,14.6423 3.9574,14.5213 3.9574,14.3743 Z M3.6884,13.0593 C4.4144,13.0593 5.0034,13.6483 5.0034,14.3743 C5.0034,15.0993 4.4144,15.6883 3.6884,15.6883 C2.9644,15.6883 2.3744,15.0993 2.3744,14.3743 C2.3744,13.6483 2.9644,13.0593 3.6884,13.0593 Z M22.953,13.26 C22.953,12.417 22.266,11.732 21.424,11.732 L2.576,11.732 C1.732,11.732 1.047,12.417 1.047,13.26 L1.047,15.487 C1.047,16.329 1.732,17.016 2.576,17.016 L21.424,17.016 C22.266,17.016 22.953,16.329 22.953,15.487 L22.953,13.26 Z M22.953,6.78 L22.953,4.553 C22.953,3.71 22.266,3.025 21.424,3.025 L2.576,3.025 C1.732,3.025 1.047,3.71 1.047,4.553 L1.047,6.78 C1.047,7.623 1.732,8.309 2.576,8.309 L21.424,8.309 C22.266,8.309 22.953,7.623 22.953,6.78 Z M10.021,20.438 C9.732,20.438 9.497,20.202 9.497,19.914 L9.497,19.646 L8.961,19.646 L8.961,19.914 C8.961,20.202 8.726,20.438 8.438,20.438 L8.17,20.438 L8.17,20.973 L10.289,20.973 L10.289,20.438 L10.021,20.438 Z M21.424,10.685 C22.844,10.685 24,11.841 24,13.261 L24,15.487 C24,16.907 22.844,18.063 21.424,18.063 L9.753,18.063 L9.753,18.6 L10.021,18.6 C10.31,18.6 10.545,18.834 10.545,19.122 L10.545,19.391 L10.812,19.391 C11.101,19.391 11.336,19.626 11.336,19.914 L11.336,20.183 L16.353,20.183 C16.641,20.183 16.877,20.418 16.877,20.706 C16.877,20.994 16.641,21.229 16.353,21.229 L11.336,21.229 L11.336,21.497 C11.336,21.785 11.101,22.021 10.812,22.021 L7.646,22.021 C7.358,22.021 7.123,21.785 7.123,21.497 L7.123,21.229 L2.106,21.229 C1.817,21.229 1.583,20.994 1.583,20.706 C1.583,20.418 1.817,20.183 2.106,20.183 L7.123,20.183 L7.123,19.914 C7.123,19.626 7.358,19.391 7.646,19.391 L7.915,19.391 L7.915,19.122 C7.915,18.834 8.15,18.6 8.438,18.6 L8.706,18.6 L8.706,18.063 L2.576,18.063 C1.155,18.063 9.09494702e-13,16.907 9.09494702e-13,15.487 L9.09494702e-13,13.261 C9.09494702e-13,11.841 1.156,10.685 2.577,10.685 L8.706,10.685 L8.706,9.357 L2.576,9.357 C1.155,9.357 9.09494702e-13,8.201 9.09494702e-13,6.781 L9.09494702e-13,4.554 C9.09494702e-13,3.135 1.156,1.979 2.577,1.979 L21.424,1.979 C22.111,1.979 22.758,2.247 23.244,2.735 C23.731,3.222 24,3.868 23.999,4.554 L23.999,6.781 C23.999,8.201 22.844,9.357 21.424,9.357 L9.753,9.357 L9.753,10.685 L21.424,10.685 Z M20.3104,4.3528 C20.5984,4.3528 20.8334,4.5878 20.8334,4.8758 L20.8334,6.4588 C20.8334,6.7478 20.5984,6.9818 20.3104,6.9818 C20.0224,6.9818 19.7874,6.7478 19.7874,6.4588 L19.7874,4.8758 C19.7874,4.5878 20.0224,4.3528 20.3104,4.3528 Z M13.1864,13.0588 C13.4744,13.0588 13.7104,13.2938 13.7104,13.5818 L13.7104,15.1638 C13.7104,15.4538 13.4744,15.6888 13.1864,15.6888 C12.8984,15.6888 12.6634,15.4538 12.6634,15.1638 L12.6634,13.5818 C12.6634,13.2938 12.8984,13.0588 13.1864,13.0588 Z"
})));
Server.displayName = "DecorativeIcon";

const ServiceTruck = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "18",
  viewBox: "0 0 24 18"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -3)",
  d: "M2.06428755,17.9354624 C2.32085601,16.8282317 3.31520351,16 4.5,16 C5.70770586,16 6.71752643,16.8605709 6.94976408,18 L17.0502359,18 C17.2824736,16.8605709 18.2922941,16 19.5,16 C20.6847965,16 21.679144,16.8282317 21.9357125,17.9354624 C22.5509464,17.7483124 23,17.1755338 23,16.5 L23,13.781 C23,13.551 22.845,13.352 22.623,13.296 C21.721,13.071 20.897,12.605 20.241,11.948 L15.732,7.44 C15.453,7.16 15.066,7 14.672,7 C14.512,7 14.361,6.923 14.267,6.793 L12.395,4.207 C12.301,4.078 12.149,4 11.989,4 L1.5,4 C1.225,4 1,4.224 1,4.5 L1,16.5 C1,17.1755338 1.44905365,17.7483124 2.06428755,17.9354624 Z M2.04204686,18.9579722 C0.881158025,18.7422213 0,17.7217246 0,16.5 L0,4.5 C0,3.673 0.673,3 1.5,3 L11.989,3 C12.468,3 12.923,3.232 13.204,3.62 L14.937,6.014 C15.504,6.074 16.03,6.324 16.439,6.733 L20.948,11.241 C21.476,11.77 22.139,12.145 22.865,12.326 C23.533,12.493 24,13.091 24,13.781 L24,16.5 C24,17.7217246 23.118842,18.7422213 21.9579531,18.9579722 C21.7422545,20.1182011 20.7225106,21 19.5,21 C18.2922941,21 17.2824736,20.1394291 17.0502359,19 L6.94976408,19 C6.71752643,20.1394291 5.70770586,21 4.5,21 C3.27748944,21 2.25774547,20.1182011 2.04204686,18.9579722 Z M4.5,17 C3.673,17 3,17.673 3,18.5 C3,19.327 3.673,20 4.5,20 C5.327,20 6,19.327 6,18.5 C6,17.673 5.327,17 4.5,17 Z M19.5,17 C18.673,17 18,17.673 18,18.5 C18,19.327 18.673,20 19.5,20 C20.327,20 21,19.327 21,18.5 C21,17.673 20.327,17 19.5,17 Z M15.5,15 L14.5,15 C14.224,15 14,14.776 14,14.5 C14,14.224 14.224,14 14.5,14 L15.5,14 C15.776,14 16,14.224 16,14.5 C16,14.776 15.776,15 15.5,15 Z M18.5,13 L12.5,13 C12.224,13 12,12.776 12,12.5 L12,8.5 C12,8.224 12.224,8 12.5,8 C12.776,8 13,8.224 13,8.5 L13,12 L18.5,12 C18.776,12 19,12.224 19,12.5 C19,12.776 18.776,13 18.5,13 Z M9.5,10 L3.5,10 C3.224,10 3,9.776 3,9.5 C3,9.224 3.224,9 3.5,9 L9.5,9 C9.776,9 10,9.224 10,9.5 C10,9.776 9.776,10 9.5,10 Z M11.5,7 L3.5,7 C3.224,7 3,6.776 3,6.5 C3,6.224 3.224,6 3.5,6 L11.5,6 C11.776,6 12,6.224 12,6.5 C12,6.776 11.776,7 11.5,7 Z M9.5,13 L3.5,13 C3.224,13 3,12.776 3,12.5 C3,12.224 3.224,12 3.5,12 L9.5,12 C9.776,12 10,12.224 10,12.5 C10,12.776 9.776,13 9.5,13 Z"
})));
ServiceTruck.displayName = "DecorativeIcon";

const Settings = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M14.3008946,24 L9.70089462,24 C9.16189462,24 8.70589462,23.604 8.64089462,23.079 L8.24489462,20.319 C7.70389462,20.075 7.17989462,19.771 6.68189462,19.412 L4.07889462,20.457 C3.56289462,20.644 3.00089462,20.436 2.75189462,19.98 L0.457894623,16.011 C0.196894623,15.532 0.308894623,14.957 0.717894623,14.633 L2.92589462,12.906 C2.89289462,12.568 2.87589462,12.275 2.87589462,12 C2.87589462,11.725 2.89289462,11.432 2.92789462,11.094 L0.721894623,9.37 C0.301894623,9.038 0.190894623,8.444 0.461894623,7.986 L2.75889462,4.011 C3.00889462,3.553 3.57689462,3.347 4.07589462,3.542 L6.68589462,4.59 C7.20689462,4.218 7.72189462,3.919 8.24589462,3.682 L8.64289462,0.911 C8.70689462,0.396 9.16289462,0 9.70189462,0 L14.3018946,0 C14.8408946,0 15.2968946,0.396 15.3618946,0.921 L15.7578946,3.682 C16.2988946,3.925 16.8218946,4.229 17.3198946,4.589 L19.9228946,3.544 C20.4358946,3.355 20.9988946,3.564 21.2498946,4.021 L23.5438946,7.99 C23.8058946,8.469 23.6928946,9.044 23.2828946,9.368 L21.0748946,11.094 C21.1028946,11.36 21.1268946,11.671 21.1268946,12 C21.1268946,12.329 21.1038946,12.64 21.0748946,12.906 L23.2808946,14.631 C23.6928946,14.958 23.8048946,15.533 23.5498946,16.001 L21.2438946,19.99 C20.9938946,20.448 20.4238946,20.652 19.9268946,20.459 L17.3168946,19.411 C16.7958946,19.783 16.2808946,20.082 15.7568946,20.319 L15.3598946,23.089 C15.2958946,23.604 14.8398946,24 14.3008946,24 Z M6.75689462,18.343 C6.86489462,18.343 6.97289462,18.378 7.06189462,18.447 C7.63689462,18.889 8.25189462,19.246 8.89089462,19.508 C9.05489462,19.575 9.17089462,19.724 9.19689462,19.9 L9.63389462,22.947 L14.3008946,23 L14.8058946,19.899 C14.8308946,19.723 14.9478946,19.574 15.1118946,19.507 C15.7258946,19.256 16.3248946,18.907 16.9448946,18.443 C17.0848946,18.339 17.2688946,18.314 17.4308946,18.379 L20.2938946,19.529 L22.6758946,15.511 C22.6918946,15.483 22.6868946,15.438 22.6608946,15.417 L20.2368946,13.521 C20.0988946,13.413 20.0268946,13.239 20.0488946,13.065 C20.0868946,12.761 20.1258946,12.397 20.1258946,12 C20.1258946,11.604 20.0868946,11.239 20.0488946,10.935 C20.0268946,10.76 20.0988946,10.587 20.2368946,10.479 L22.6638946,8.582 C22.6878946,8.563 22.6918946,8.519 22.6708946,8.48 L20.3768946,4.511 L17.4318946,5.622 C17.2668946,5.689 17.0818946,5.663 16.9408946,5.555 C16.3648946,5.112 15.7498946,4.755 15.1118946,4.494 C14.9478946,4.427 14.8318946,4.278 14.8058946,4.102 L14.3698946,1.054 L9.70189462,1 L9.19589462,4.102 C9.17089462,4.277 9.05489462,4.426 8.89089462,4.494 C8.27689462,4.745 7.67689462,5.093 7.05789462,5.558 C6.91689462,5.663 6.73389462,5.688 6.57089462,5.622 L3.70789462,4.472 L1.32589462,8.49 L3.76489462,10.479 C3.90289462,10.587 3.97489462,10.76 3.95289462,10.935 C3.90089462,11.355 3.87589462,11.693 3.87589462,12 C3.87589462,12.307 3.89989462,12.646 3.95289462,13.065 C3.97489462,13.239 3.90289462,13.413 3.76489462,13.521 L1.33789462,15.418 C1.31389462,15.437 1.30989462,15.482 1.33089462,15.521 L3.62489462,19.49 L6.56989462,18.379 C6.63089462,18.354 6.69389462,18.343 6.75689462,18.343 Z M12.0008946,17 C9.24389462,17 7.00089462,14.757 7.00089462,12 C7.00089462,9.243 9.24389462,7 12.0008946,7 C14.7578946,7 17.0008946,9.243 17.0008946,12 C17.0008946,14.757 14.7578946,17 12.0008946,17 Z M12.0008946,8 C9.79489462,8 8.00089462,9.794 8.00089462,12 C8.00089462,14.206 9.79489462,16 12.0008946,16 C14.2068946,16 16.0008946,14.206 16.0008946,12 C16.0008946,9.794 14.2068946,8 12.0008946,8 Z"
})));
Settings.displayName = "DecorativeIcon";

const SharedAccount = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "18",
  viewBox: "0 0 24 18"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -3)",
  d: "M20.755,16.341 L17.999,15.653 L17.796,14.836 C18.525,14.09 19.029,13.09 19.197,12.058 C19.627,11.904 19.952,11.519 20.011,11.044 L20.196,9.566 C20.24,9.217 20.131,8.864 19.9,8.599 C19.787,8.469 19.648,8.365 19.495,8.293 L19.556,7.043 L19.799,6.799 C20.249,6.321 20.622,5.506 19.854,4.335 C19.273,3.449 18.296,3 16.945,3 C16.406,3 15.145,3 13.984,3.824 C13.759,3.984 13.706,4.296 13.866,4.521 C14.025,4.746 14.339,4.798 14.562,4.639 C15.357,4.075 16.213,3.999 16.946,3.999 C17.938,3.999 18.634,4.296 19.018,4.882 C19.456,5.551 19.291,5.88 19.082,6.102 L18.713,6.472 C18.625,6.56 18.573,6.677 18.567,6.801 L18.477,8.651 C18.47,8.787 18.519,8.919 18.612,9.018 C18.705,9.117 18.834,9.174 18.97,9.175 C19.064,9.176 19.122,9.227 19.148,9.257 C19.175,9.287 19.217,9.351 19.205,9.443 L19.02,10.922 C19.006,11.041 18.903,11.131 18.747,11.131 C18.486,11.131 18.27,11.332 18.249,11.592 C18.168,12.61 17.667,13.624 16.907,14.305 C16.77,14.428 16.711,14.618 16.756,14.798 L17.103,16.187 C17.148,16.366 17.287,16.507 17.467,16.551 L20.514,17.312 C21.814,17.637 22.766,18.707 22.963,20 L19.5,19.998 L19.5,21 L23.499,20.997 C23.775,20.997 23.999,20.773 23.999,20.497 C24,18.528 22.666,16.819 20.755,16.341 Z M14.755,16.341 L11.999,15.653 L11.889,15.21 C13.776,14.873 14.754,14.303 14.799,14.277 C14.939,14.194 15.027,14.044 15.039,13.881 C15.051,13.718 14.979,13.556 14.851,13.453 C14.838,13.443 13.566,12.371 13.566,8.674 C13.566,5.399 12.776,3.739 11.218,3.739 L11.052,3.739 C10.523,3.238 10.084,3 9,3 C7.57,3 4.435,4.429 4.435,8.674 C4.435,12.371 3.163,13.443 3.157,13.448 C3.024,13.547 2.949,13.707 2.958,13.873 C2.966,14.039 3.056,14.19 3.199,14.276 C3.243,14.303 4.213,14.876 6.112,15.213 L6.002,15.653 L3.246,16.342 C1.334,16.819 0,18.529 0,20.5 C0,20.633 0.052,20.761 0.146,20.854 C0.24,20.947 0.367,21 0.5,21 L17.5,20.997 C17.776,20.997 18,20.773 18,20.497 C18,18.528 16.666,16.819 14.755,16.341 Z M1.039,19.998 C1.236,18.706 2.189,17.637 3.489,17.311 L6.536,16.55 C6.715,16.505 6.855,16.365 6.9,16.186 L7.215,14.925 C7.249,14.787 7.224,14.642 7.144,14.524 C7.065,14.407 6.939,14.329 6.798,14.309 C5.62,14.145 4.775,13.874 4.271,13.674 C4.768,12.954 5.436,11.466 5.436,8.674 C5.435,4.832 8.294,4 9,4 C9.863,4 10.034,4.133 10.494,4.593 C10.588,4.686 10.715,4.739 10.848,4.739 L11.218,4.739 C12.075,4.739 12.566,6.174 12.566,8.674 C12.566,11.464 13.233,12.952 13.73,13.673 C13.223,13.873 12.377,14.143 11.203,14.308 C11.062,14.327 10.937,14.406 10.858,14.523 C10.778,14.641 10.753,14.786 10.787,14.924 L11.102,16.187 C11.147,16.366 11.286,16.507 11.466,16.551 L14.513,17.312 C15.813,17.637 16.765,18.707 16.962,20 L1.039,19.998 Z"
})));
SharedAccount.displayName = "DecorativeIcon";

const Shop = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "20",
  viewBox: "0 0 24 20"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -2)",
  d: "M5.792,16.6245 L11.084,16.6245 L11.084,13.7075 L5.792,13.7075 L5.792,16.6245 Z M11.604,12.6665 C11.891,12.6665 12.125,12.8995 12.125,13.1865 L12.125,17.1455 C12.125,17.4325 11.891,17.6665 11.604,17.6665 L5.271,17.6665 C4.984,17.6665 4.75,17.4325 4.75,17.1455 L4.75,13.1865 C4.75,12.8995 4.984,12.6665 5.271,12.6665 L11.604,12.6665 Z M12.521,6.333 L17.121,6.333 L15.663,3.416 L12.521,3.416 L12.521,6.333 Z M22.92,7.375 L18.458,7.375 L18.458,9.525 C18.935,9.815 19.462,9.969 19.985,9.969 C21.473,9.969 22.736,8.84 22.92,7.375 Z M1.471,6.333 L5.714,6.333 L7.173,3.416 L3.768,3.416 L1.471,6.333 Z M17.417,9.721 L17.417,7.375 L12.521,7.375 L12.521,9.647 C13.074,10.482 13.996,10.979 14.994,10.979 C15.957,10.979 16.859,10.509 17.417,9.721 Z M18.285,6.333 L22.469,6.333 L20.229,3.416 L16.827,3.416 L18.285,6.333 Z M6.584,9.723 C7.143,10.511 8.045,10.98 9.005,10.98 C10.004,10.98 10.926,10.483 11.479,9.648 L11.479,7.375 L6.584,7.375 L6.584,9.723 Z M18.729,12.666 C19.017,12.666 19.25,12.9 19.25,13.187 L19.25,20.583 L19.792,20.583 L19.792,11 C19.209,10.971 18.646,10.812 18.113,10.526 C17.349,11.478 16.217,12.021 14.994,12.021 C13.851,12.021 12.769,11.533 12.002,10.676 C11.242,11.533 10.159,12.021 9.006,12.021 C7.783,12.021 6.65,11.478 5.885,10.526 C5.354,10.812 4.791,10.971 4.208,11 L4.208,20.583 L12.667,20.583 L12.667,13.187 C12.667,12.9 12.9,12.666 13.188,12.666 L18.729,12.666 Z M6.879,6.333 L11.479,6.333 L11.479,3.416 L8.337,3.416 L6.879,6.333 Z M5.542,7.375 L1.08,7.375 C1.264,8.839 2.528,9.968 4.015,9.968 C4.539,9.968 5.065,9.815 5.542,9.525 L5.542,7.375 Z M13.708,20.583 L18.208,20.583 L18.208,13.708 L13.708,13.708 L13.708,20.583 Z M23.996,6.818 L24,6.854 L24,7.009 C24,8.892 22.675,10.518 20.833,10.914 L20.833,21.104 C20.833,21.391 20.6,21.625 20.313,21.625 L3.688,21.625 C3.4,21.625 3.167,21.391 3.167,21.104 L3.167,10.914 C1.325,10.518 0,8.892 0,7.009 L0,6.854 C0,6.823 0.006,6.798 0.011,6.779 C-0.012,6.633 0.023,6.488 0.111,6.377 L3.106,2.574 C3.203,2.449 3.356,2.375 3.515,2.375 L20.485,2.375 C20.646,2.375 20.801,2.451 20.898,2.578 L23.893,6.476 C23.966,6.572 24.003,6.693 23.996,6.818 Z"
})));
Shop.displayName = "DecorativeIcon";

const Signal = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M4,18.7826087 L1,18.7826087 C0.224,18.7826087 0,19.0163478 0,19.826087 L0,24 C0,23.7662609 0.224,24 1,24 L4,24 C3.776,24 4,23.7662609 4,24 L4,19.826087 C4,19.0163478 3.776,18.7826087 4,18.7826087 Z M3,22.9565217 L1,22.9565217 L1,19.826087 L3,19.826087 L3,22.9565217 Z M24,0 L21,0 C20.224,0 20,0.23373913 20,1.04347826 L20,24 C20,23.7662609 20.224,24 21,24 L24,24 C23.776,24 24,23.7662609 24,24 L24,1.04347826 C24,0.23373913 23.776,0 24,0 Z M23,22.9565217 L21,22.9565217 L21,1.04347826 L23,1.04347826 L23,22.9565217 Z M9,14.6086957 L6,14.6086957 C5.224,14.6086957 5,14.8424348 5,14.6086957 L5,22.9565217 C5,23.7662609 5.224,24 6,24 L9,24 C8.776,24 9,23.7662609 9,22.9565217 L9,14.6086957 C9,14.8424348 8.776,14.6086957 9,14.6086957 Z M8,22.9565217 L6,22.9565217 L6,15.6521739 L8,15.6521739 L8,22.9565217 Z M19,4.17391304 L16,4.17391304 C15.224,4.17391304 15,4.40765217 15,5.2173913 L15,24 C15,23.7662609 15.224,24 16,24 L19,24 C18.776,24 19,23.7662609 19,24 L19,5.2173913 C19,4.40765217 18.776,4.17391304 19,4.17391304 Z M18,22.9565217 L16,22.9565217 L16,5.2173913 L18,5.2173913 L18,22.9565217 Z M14,9.39130435 L11,9.39130435 C10.224,9.39130435 10,9.62504348 10,10.4347826 L10,24 C10,23.7662609 10.224,24 11,24 L14,24 C13.776,24 14,23.7662609 14,24 L14,10.4347826 C14,9.62504348 13.776,9.39130435 14,9.39130435 Z M13,22.9565217 L11,22.9565217 L11,10.4347826 L13,10.4347826 L13,22.9565217 Z"
})));
Signal.displayName = "DecorativeIcon";

const SignPost = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M11.3441248,11.8965 L13.5121248,11.8965 L13.5121248,9.7285 L11.3441248,9.7285 L11.3441248,11.8965 Z M19.8481248,13.1875 L19.8481248,17.1485 C19.8481248,17.3095 19.7171248,17.4405 19.5561248,17.4405 L6.35412481,17.4405 C6.27712481,17.4405 6.20312481,17.4095 6.14812481,17.3545 L4.16712481,15.3735 C4.11212481,15.3185 4.08212481,15.2455 4.08212481,15.1685 C4.08212481,15.0905 4.11212481,15.0175 4.16812481,14.9625 L6.14912481,12.9805 C6.20312481,12.9265 6.27712481,12.8965 6.35412481,12.8965 L6.35412481,12.8965 L19.5561248,12.8965 C19.7171248,12.8965 19.8481248,13.0265 19.8481248,13.1875 L19.8481248,13.1875 Z M13.5121248,22.6925 C13.5121248,22.8505 13.3791248,22.9845 13.2201248,22.9845 L11.6361248,22.9845 C11.4781248,22.9845 11.3441248,22.8505 11.3441248,22.6925 L11.3441248,18.4405 L13.5121248,18.4405 L13.5121248,22.6925 Z M1.84012481,8.4365 L1.84012481,3.6835 C1.84012481,3.5225 1.97112481,3.3915 2.13212481,3.3915 L19.4921248,3.3915 C19.5691248,3.3915 19.6441248,3.4225 19.6991248,3.4775 L22.0751248,5.8535 C22.1881248,5.9675 22.1881248,6.1525 22.0751248,6.2665 L19.6981248,8.6425 C19.6431248,8.6975 19.5701248,8.7285 19.4921248,8.7285 L2.13212481,8.7285 C1.97112481,8.7285 1.84012481,8.5975 1.84012481,8.4365 L1.84012481,8.4365 Z M11.3441248,1.3075 C11.3441248,1.1495 11.4781248,1.0155 11.6361248,1.0155 L13.2201248,1.0155 C13.3791248,1.0155 13.5121248,1.1495 13.5121248,1.3075 L13.5121248,2.3915 L11.3441248,2.3915 L11.3441248,1.3075 Z M19.4921248,9.7285 C19.8381248,9.7285 20.1631248,9.5935 20.4061248,9.3495 L22.7831248,6.9725 C23.2861248,6.4685 23.2851248,5.6505 22.7821248,5.1465 L20.4071248,2.7715 C20.1671248,2.5295 19.8331248,2.3915 19.4921248,2.3915 L14.5121248,2.3915 L14.5121248,1.3075 C14.5121248,0.5955 13.9331248,0.0155 13.2201248,0.0155 L11.6361248,0.0155 C10.9241248,0.0155 10.3441248,0.5955 10.3441248,1.3075 L10.3441248,2.3915 L2.13212481,2.3915 C1.42012481,2.3915 0.840124814,2.9715 0.840124814,3.6835 L0.840124814,8.4365 C0.840124814,9.1485 1.42012481,9.7285 2.13212481,9.7285 L10.3441248,9.7285 L10.3441248,11.8965 L6.35512481,11.8965 L6.35212481,11.8965 C6.01212481,11.8965 5.68012481,12.0345 5.44112481,12.2745 L3.46212481,14.2545 C3.21712481,14.4985 3.08212481,14.8225 3.08212481,15.1675 C3.08212481,15.5125 3.21712481,15.8375 3.46112481,16.0815 L5.44112481,18.0605 C5.68112481,18.3015 6.01412481,18.4405 6.35412481,18.4405 L10.3441248,18.4405 L10.3441248,22.6925 C10.3441248,23.4055 10.9241248,23.9845 11.6361248,23.9845 L13.2201248,23.9845 C13.9331248,23.9845 14.5121248,23.4055 14.5121248,22.6925 L14.5121248,18.4405 L19.5561248,18.4405 C20.2691248,18.4405 20.8481248,17.8615 20.8481248,17.1485 L20.8481248,13.1875 C20.8481248,12.4755 20.2691248,11.8965 19.5561248,11.8965 L14.5121248,11.8965 L14.5121248,9.7285 L19.4921248,9.7285 Z"
})));
SignPost.displayName = "DecorativeIcon";

const SimCard = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "18",
  height: "24",
  viewBox: "0 0 18 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-3)",
  d: "M13.5,15 L10.5,15 L10.5,17.5 C10.5,17.776 10.276,18 10,18 C9.724,18 9.5,17.776 9.5,17.5 L9.5,15 L7.5,15 L7.5,19.5 C7.5,19.776 7.724,20 8,20 L11.5,20 L11.5,17.5 C11.5,17.224 11.724,17 12,17 C12.276,17 12.5,17.224 12.5,17.5 L12.5,20 L16,20 C16.276,20 16.5,19.776 16.5,19.5 L16.5,15 L14.5,15 L14.5,17.5 C14.5,17.776 14.276,18 14,18 C13.724,18 13.5,17.776 13.5,17.5 L13.5,15 Z M14.5,9 L14.5,11.5 C14.5,11.776 14.276,12 14,12 C13.724,12 13.5,11.776 13.5,11.5 L13.5,9 L10.5,9 L10.5,11.5 C10.5,11.776 10.276,12 10,12 C9.724,12 9.5,11.776 9.5,11.5 L9.5,9 L8,9 C7.724,9 7.5,9.224 7.5,9.5 L7.5,14 L11.5,14 L11.5,11.5 C11.5,11.224 11.724,11 12,11 C12.276,11 12.5,11.224 12.5,11.5 L12.5,14 L16.5,14 L16.5,9.5 C16.5,9.224 16.276,9 16,9 L14.5,9 Z M18,24 L6,24 C4.622,24 3.5,22.878 3.5,21.5 L3.5,5.5 C3.5,5.367 3.553,5.24 3.646,5.146 L8.646,0.146 C8.74,0.053 8.867,0 9,0 L18,0 C19.378,0 20.5,1.122 20.5,2.5 L20.5,21.5 C20.5,22.878 19.378,24 18,24 Z M4.5,5.707 L4.5,21.5 C4.5,22.327 5.173,23 6,23 L18,23 C18.827,23 19.5,22.327 19.5,21.5 L19.5,2.5 C19.5,1.673 18.827,1 18,1 L9.207,1 L4.5,5.707 Z M16,21 L8,21 C7.173,21 6.5,20.327 6.5,19.5 L6.5,9.5 C6.5,8.673 7.173,8 8,8 L16,8 C16.827,8 17.5,8.673 17.5,9.5 L17.5,19.5 C17.5,20.327 16.827,21 16,21 Z"
})));
SimCard.displayName = "DecorativeIcon";

const Soccer = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M9 2.75v-1.334c-2.235.634-4.182 1.959-5.596 3.728l1.967.328 3.629-2.722zm1-.04l3.11 1.777 4.39-.439v-1.548l.001-.023c-1.619-.939-3.498-1.477-5.501-1.477-.683 0-1.351.063-2 .182v1.528zm-4.851 3.738l-2.396-.399c-1.108 1.717-1.752 3.76-1.752 5.951 0 .502.034.996.099 1.481l3.1-.443 2.239-3.582-1.289-3.008zm-3.118-1.121c.03-.081.079-.152.142-.206 2.173-3.094 5.768-5.121 9.828-5.121 6.617 0 12 5.383 12 12s-5.383 12-12 12-12-5.383-12-12c0-2.468.749-4.764 2.031-6.673zm5.267 4.64l-2.218 3.548 2.199 3.958 4.85-.441 1.314-3.941-2.669-3.559-3.476.434zm6.026-4.496l-1.738 3.477 2.646 3.528 4.41-.441 1.304-3.477-2.205-3.528-4.416.442zm6.185 7.097l.443 4.432h1.845c.769-1.501 1.204-3.201 1.204-5 0-.877-.103-1.731-.298-2.55l-1.883-.377-1.31 3.494zm.136 5.432l-3.69 2.307-.348 2.086c2.319-.807 4.287-2.37 5.609-4.393h-1.571zm-4.686 2.2l-2.62-2.183-5.017.456-1.359 2.719c1.734 1.143 3.81 1.809 6.037 1.809.875 0 1.726-.103 2.542-.296l.417-2.504zm7.424-11.833c-.742-2.113-2.111-3.933-3.883-5.236v1.225l2.31 3.696 1.573.315zm-17.24 12.229l1.292-2.584-2.205-3.969-2.952.422c.565 2.459 1.956 4.605 3.865 6.13zm.971-14.432l1.197 2.793 3.361-.42 1.669-3.338-2.804-1.602-3.423 2.567zm6.968 11.17l2.46 2.05 3.43-2.144-.419-4.193-4.18.418-1.291 3.869z"
})));
Soccer.displayName = "DecorativeIcon";

const Speaker = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "18",
  height: "24",
  viewBox: "0 0 18 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-3)",
  d: "M19.862,21.931 L19.862,2.069 C19.862,1.458 19.364,0.96 18.753,0.96 L5.246,0.96 C4.635,0.96 4.138,1.458 4.138,2.069 L4.138,21.931 C4.138,22.542 4.635,23.04 5.246,23.04 L18.753,23.04 C19.364,23.04 19.862,22.542 19.862,21.931 Z M18.753,-3.01980663e-14 C19.893,-3.01980663e-14 20.822,0.929 20.822,2.069 L20.822,21.931 C20.822,23.073 19.893,24 18.753,24 L5.246,24 C4.106,24 3.178,23.073 3.178,21.931 L3.178,2.069 C3.178,0.929 4.106,-3.01980663e-14 5.246,-3.01980663e-14 L18.753,-3.01980663e-14 Z M15.3122,19.2845 C17.1382,17.4585 17.1382,14.4865 15.3122,12.6605 C14.3992,11.7475 13.1992,11.2905 11.9992,11.2905 C10.8002,11.2905 9.6012,11.7475 8.6872,12.6605 C6.8612,14.4865 6.8612,17.4585 8.6872,19.2845 C10.5142,21.1105 13.4872,21.1115 15.3122,19.2845 Z M11.9992,10.3285 C13.5072,10.3285 14.9242,10.9155 15.9912,11.9815 C17.0562,13.0475 17.6432,14.4655 17.6432,15.9725 C17.6432,17.4795 17.0562,18.8975 15.9912,19.9635 C14.9242,21.0295 13.5072,21.6165 11.9992,21.6165 C10.4922,21.6165 9.0752,21.0295 8.0092,19.9635 C6.9432,18.8975 6.3562,17.4795 6.3562,15.9725 C6.3562,14.4655 6.9432,13.0475 8.0092,11.9815 C9.0752,10.9155 10.4922,10.3285 11.9992,10.3285 Z M12.5031,16.4759 C12.7801,16.1989 12.7801,15.7469 12.5031,15.4689 C12.3641,15.3299 12.1821,15.2609 12.0001,15.2609 C11.8171,15.2609 11.6351,15.3299 11.4961,15.4689 C11.2191,15.7469 11.2191,16.1989 11.4961,16.4759 C11.7741,16.7529 12.2261,16.7529 12.5031,16.4759 Z M10.8171,14.7899 C11.4691,14.1389 12.5311,14.1389 13.1821,14.7899 C13.8341,15.4429 13.8341,16.5029 13.1821,17.1549 C12.8561,17.4799 12.4271,17.6429 12.0001,17.6429 C11.5721,17.6429 11.1441,17.4799 10.8171,17.1549 C10.1661,16.5029 10.1661,15.4429 10.8171,14.7899 Z M10.654,3.9012 C9.912,4.6432 9.912,5.8512 10.654,6.5932 C11.396,7.3352 12.603,7.3352 13.346,6.5932 C14.089,5.8512 14.089,4.6432 13.346,3.9012 C12.986,3.5422 12.508,3.3432 12,3.3432 C11.491,3.3432 11.013,3.5422 10.654,3.9012 Z M12,8.1092 C11.267,8.1092 10.533,7.8302 9.975,7.2722 C8.859,6.1552 8.859,4.3392 9.975,3.2222 C11.056,2.1402 12.943,2.1402 14.025,3.2222 C15.141,4.3392 15.141,6.1552 14.025,7.2722 C13.466,7.8302 12.733,8.1092 12,8.1092 Z"
})));
Speaker.displayName = "DecorativeIcon";

const SpeakerPhone = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "22",
  viewBox: "0 0 24 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -1)",
  d: "M7.673,15.7405 C7.804,15.7405 7.92,15.7495 8.049,15.7505 L8.481,18.7705 C8.495,18.8665 8.53,18.9545 8.585,19.0315 L10.425,21.6325 L7.393,21.6325 C7.201,21.6325 7.036,21.4895 7.008,21.2995 L6.214,15.7405 L7.673,15.7405 Z M4.133,7.0885 L7.079,7.0885 L7.079,14.5535 L5.529,14.5535 L4.133,14.5535 C2.509,14.5535 1.188,13.2315 1.188,11.6075 L1.188,10.0335 C1.188,8.4095 2.509,7.0885 4.133,7.0885 L4.133,7.0885 Z M8.679,14.5745 C8.641,14.5665 8.604,14.5535 8.563,14.5535 L8.267,14.5535 L8.267,7.0755 C18.025,6.9405 21.562,3.5915 22.487,2.4295 C22.684,2.5275 22.811,2.7295 22.811,2.9545 L22.811,18.6855 C22.811,18.9105 22.684,19.1135 22.487,19.2105 C21.575,18.0655 18.123,14.7975 8.679,14.5745 L8.679,14.5745 Z M22.226,1.1795 C22.019,1.1795 21.823,1.2915 21.715,1.4705 C21.687,1.5145 18.871,5.9005 7.673,5.9005 L4.133,5.9005 C1.854,5.9005 1.13686838e-13,7.7545 1.13686838e-13,10.0335 L1.13686838e-13,11.6075 C1.13686838e-13,13.8865 1.854,15.7405 4.133,15.7405 L5.014,15.7405 L5.832,21.4665 C5.943,22.2385 6.614,22.8205 7.393,22.8205 L10.642,22.8205 C10.868,22.8205 11.086,22.7515 11.273,22.6185 C11.758,22.2695 11.872,21.5915 11.525,21.1035 L9.636,18.4595 L9.254,15.7795 C19.091,16.1725 21.689,20.1265 21.714,20.1665 C21.819,20.3465 22.016,20.4605 22.226,20.4605 C23.204,20.4605 24,19.6645 24,18.6855 L24,2.9545 C24,1.9755 23.204,1.1795 22.226,1.1795 L22.226,1.1795 Z"
})));
SpeakerPhone.displayName = "DecorativeIcon";

const Speed = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M19.7435402,19.7440299 C15.4740144,24.0135557 8.52638557,24.0135557 4.2558701,19.7440299 C3.40077732,18.8889371 2.72481856,17.922999 2.21215876,16.8957 L7.73760206,16.8957 C8.63426186,16.8957 9.44580825,16.3394938 9.76349897,15.4903392 C10.0802,14.5362773 10.9798289,13.8959474 12.0002,13.8959474 C12.5336433,13.8959474 13.0344268,14.0721124 13.4372309,14.3779268 C13.4590041,14.3997 13.4837464,14.4185041 13.5094784,14.4363186 C13.8410247,14.7094732 14.099334,15.0766485 14.2438289,15.510133 C14.5555814,16.3394938 15.3661381,16.8957 16.2627979,16.8957 L21.7872515,16.8957 C21.2745918,17.922999 20.598633,18.8889371 19.7435402,19.7440299 M19.6980144,9.36910206 C19.5099732,9.12761753 19.1625918,9.08704021 18.9211072,9.27409175 L13.798468,13.2843186 C13.2689835,12.9666278 12.6504268,12.7884835 12.0002,12.7884835 C10.5018082,12.7884835 9.18057113,13.7336381 8.71838557,15.1211845 C8.57092165,15.5140918 8.16811753,15.7882361 7.73760206,15.7882361 L1.73710722,15.7882361 C1.35310722,14.7431227 1.13537526,13.6534732 1.07995258,12.5539268 L3.71154021,12.5539268 C4.01735464,12.5539268 4.26477732,12.3055144 4.26477732,11.9997 C4.26477732,11.6938856 4.01735464,11.4464629 3.71154021,11.4464629 L1.07995258,11.4464629 C1.20267423,9.00291649 2.13694227,6.59994742 3.88374639,4.66807113 L5.76613814,6.55046289 C5.87500412,6.65833918 6.0165299,6.71277216 6.15805567,6.71277216 C6.30057113,6.71277216 6.44209691,6.65833918 6.5499732,6.55046289 C6.76671546,6.33372062 6.76671546,5.9833701 6.5499732,5.76662784 L4.66758144,3.88423608 C6.60044742,2.13743196 9.0024268,1.20316392 11.4459732,1.08044227 L11.4459732,3.71104021 C11.4459732,4.01685464 11.6943856,4.26526701 12.0002,4.26526701 C12.3060144,4.26526701 12.5534371,4.01685464 12.5534371,3.71104021 L12.5534371,1.08044227 C14.9969835,1.20316392 17.3999526,2.13743196 19.3318289,3.88522577 L17.5296021,5.68745258 C17.3128598,5.90419485 17.3128598,6.25553505 17.5296021,6.47128763 C17.6374784,6.58015361 17.7790041,6.63359691 17.9205299,6.63359691 C18.0630454,6.63359691 18.2035814,6.58015361 18.3124474,6.47128763 L20.1156639,4.66807113 C21.862468,6.59994742 22.7967361,9.00291649 22.9194577,11.4464629 L20.2888598,11.4464629 C19.9820557,11.4464629 19.734633,11.6938856 19.734633,11.9997 C19.734633,12.3055144 19.9820557,12.5539268 20.2888598,12.5539268 L22.9194577,12.5539268 C22.8640351,13.6534732 22.6463031,14.7431227 22.2623031,15.7882361 L16.2627979,15.7882361 C15.8322825,15.7882361 15.4294784,15.5140918 15.2889423,15.1399887 C15.1484062,14.7203598 14.9336433,14.3422979 14.6585093,14.0176794 L19.6030041,10.146999 C19.8454784,9.95796804 19.8880351,9.6105866 19.6980144,9.36910206 M23.9230041,12.2659268 C23.9675402,12.1857619 24.0002,12.0986691 24.0002,11.9997 C24.0002,11.9017206 23.9675402,11.8136381 23.9230041,11.7334732 C23.8566948,8.76539072 22.7037052,5.81809175 20.4442412,3.55862784 C20.4442412,3.55763814 20.4442412,3.55664845 20.4432515,3.55664845 C20.4422619,3.55565876 20.4422619,3.55565876 20.4412722,3.55466907 C18.1808186,1.29619485 15.2335196,0.143205155 12.2664268,0.077885567 C12.1862619,0.0323597938 12.0981794,-0.0003 12.0002,-0.0003 C11.9012309,-0.0003 11.8141381,0.0323597938 11.7339732,0.077885567 C8.76490103,0.143205155 5.81661237,1.29619485 3.55615876,3.55664845 C1.29570515,5.81710206 0.142715464,8.76539072 0.0773958763,11.7344629 C0.0318701031,11.8146278 0.0002,11.9017206 0.0002,11.9997 C0.0002,12.0976794 0.0318701031,12.1857619 0.0773958763,12.2649371 C0.107086598,13.6425866 0.371334021,15.0133082 0.874096907,16.3137619 C0.874096907,16.3236588 0.868158763,16.332566 0.868158763,16.3414732 C0.868158763,16.5067515 0.942385567,16.649267 1.05521031,16.7512052 C1.63516907,18.0912464 2.46255052,19.350133 3.55615876,20.4437412 C5.88391134,22.7724835 8.94205567,23.9353701 12.0002,23.9353701 C15.0583443,23.9353701 18.1145093,22.7724835 20.4432515,20.4437412 C21.5368598,19.350133 22.3632515,18.0922361 22.9432103,16.7521948 C23.0580144,16.6502567 23.1322412,16.5067515 23.1322412,16.3414732 C23.1322412,16.3315763 23.1263031,16.3226691 23.1263031,16.3117825 C23.6280763,15.0123186 23.891334,13.6415969 23.9230041,12.2659268"
})));
Speed.displayName = "DecorativeIcon";

const SpeedReduced = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M4.257 19.744c4.27 4.27 11.217 4.27 15.488 0a10.89 10.89 0 0 0 2.043-2.848h-5.525a2.164 2.164 0 0 1-2.026-1.406A2.344 2.344 0 0 0 12 13.896c-.533 0-1.034.176-1.437.482a2.349 2.349 0 0 0-.807 1.132 2.16 2.16 0 0 1-2.018 1.386H2.213a10.89 10.89 0 0 0 2.044 2.848zm.045-10.375a.554.554 0 0 1 .777-.095l5.123 4.01A3.49 3.49 0 0 1 12 12.788c1.499 0 2.82.946 3.282 2.333.147.393.55.667.98.667h6.001c.384-1.045.602-2.135.657-3.234H20.29a.554.554 0 0 1 0-1.108h2.631a10.89 10.89 0 0 0-2.803-6.778L18.234 6.55a.556.556 0 0 1-.784 0 .554.554 0 0 1 0-.783l1.883-1.883a10.891 10.891 0 0 0-6.779-2.804v2.631a.555.555 0 0 1-1.107 0v-2.63a10.885 10.885 0 0 0-6.778 2.804L6.47 5.687a.554.554 0 1 1-.783.784L3.885 4.668a10.89 10.89 0 0 0-2.804 6.778h2.63a.553.553 0 1 1 0 1.108h-2.63c.055 1.1.273 2.19.657 3.234h6c.43 0 .833-.274.973-.648a3.4 3.4 0 0 1 .63-1.122l-4.944-3.871a.552.552 0 0 1-.095-.778zM.077 12.266A.542.542 0 0 1 0 12c0-.098.033-.186.077-.267a11.889 11.889 0 0 1 3.48-8.174v-.002l.002-.002A11.89 11.89 0 0 1 11.734.078.536.536 0 0 1 12 0c.1 0 .186.032.266.078a11.887 11.887 0 0 1 8.178 3.479 11.887 11.887 0 0 1 3.479 8.177c.046.08.077.168.077.266a.529.529 0 0 1-.077.265 11.937 11.937 0 0 1-.797 4.049c0 .01.006.019.006.027a.548.548 0 0 1-.187.41 11.87 11.87 0 0 1-2.5 3.693A11.9 11.9 0 0 1 12 23.935a11.9 11.9 0 0 1-8.443-3.491 11.862 11.862 0 0 1-2.5-3.692.545.545 0 0 1-.189-.41c0-.01.006-.02.006-.03-.502-1.3-.765-2.67-.797-4.046z",
  fillRule: "evenodd"
})));
SpeedReduced.displayName = "DecorativeIcon";

const Success = props => {
  return /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
    width: "22",
    height: "22",
    viewBox: "0 0 22 22"
  }, /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    transform: "translate(-1 -1)",
    d: "M12,23 C5.93469565,23 1,18.0653043 1,12 C1,5.93469565 5.93469565,1 12,1 C18.0653043,1 23,5.93469565 23,12 C23,18.0653043 18.0653043,23 12,23 Z M12,1.95652174 C6.46173913,1.95652174 1.95652174,6.46173913 1.95652174,12 C1.95652174,17.5382609 6.46173913,22.0434783 12,22.0434783 C17.5382609,22.0434783 22.0434783,17.5382609 22.0434783,12 C22.0434783,6.46173913 17.5382609,1.95652174 12,1.95652174 Z M10.5652174,16.7826087 C10.4427826,16.7826087 10.3203478,16.7357391 10.2266087,16.6429565 L5.444,11.8603478 C5.25747826,11.6738261 5.25747826,11.3706087 5.444,11.184087 C5.63052174,10.9975652 5.93373913,10.9975652 6.12026087,11.184087 L10.5652174,15.628087 L17.8787826,8.31452174 C18.0653043,8.128 18.3685217,8.128 18.5550435,8.31452174 C18.7415652,8.50104348 18.7415652,8.80426087 18.5550435,8.99078261 L10.9028696,16.6429565 C10.810087,16.7357391 10.6876522,16.7826087 10.5652174,16.7826087 Z"
  })));
};
Success.displayName = "DecorativeIcon";

const Suitcase = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "20",
  viewBox: "0 0 24 20"
}, /*#__PURE__*/React.createElement("path", {
  transform: "translate(0 -2)",
  d: "M20.5,22 L3.5,22 C1.57,22 0,20.43 0,18.5 L0,8.5 C0,6.57 1.57,5 3.5,5 L20.5,5 C22.43,5 24,6.57 24,8.5 L24,18.5 C24,20.43 22.43,22 20.5,22 Z M3.5,6 C2.121,6 1,7.121 1,8.5 L1,18.5 C1,19.879 2.121,21 3.5,21 L20.5,21 C21.879,21 23,19.879 23,18.5 L23,8.5 C23,7.121 21.879,6 20.5,6 L3.5,6 Z M15.5,6 L8.5,6 C8.224,6 8,5.776 8,5.5 L8,3.5 C8,2.673 8.673,2 9.5,2 L14.5,2 C15.327,2 16,2.673 16,3.5 L16,5.5 C16,5.776 15.776,6 15.5,6 Z M9,5 L15,5 L15,3.5 C15,3.225 14.775,3 14.5,3 L9.5,3 C9.225,3 9,3.225 9,3.5 L9,5 Z M6.5,22 L4.5,22 C4.224,22 4,21.776 4,21.5 L4,5.5 C4,5.224 4.224,5 4.5,5 L6.5,5 C6.776,5 7,5.224 7,5.5 L7,21.5 C7,21.776 6.776,22 6.5,22 Z M5,21 L6,21 L6,6 L5,6 L5,21 Z M19.5,22 L17.5,22 C17.224,22 17,21.776 17,21.5 L17,5.5 C17,5.224 17.224,5 17.5,5 L19.5,5 C19.776,5 20,5.224 20,5.5 L20,21.5 C20,21.776 19.776,22 19.5,22 Z M18,21 L19,21 L19,6 L18,6 L18,21 Z"
})));
Suitcase.displayName = "DecorativeIcon";

const Support = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M12.0002,17.7216 C12.5822,17.7216 13.0552,18.1946 13.0552,18.7766 C13.0552,19.3586 12.5822,19.8306 12.0002,19.8306 C11.4182,19.8306 10.9452,19.3586 10.9452,18.7766 C10.9452,18.1946 11.4182,17.7216 12.0002,17.7216 Z M12.001,5.2123 C14.019,5.2123 15.661,6.8543 15.661,8.8723 L15.661,9.6623 C15.661,10.6403 15.28,11.5593 14.588,12.2513 L13.293,13.5473 C12.803,14.0353 12.533,14.6873 12.533,15.3803 L12.533,16.1703 C12.533,16.4633 12.294,16.7033 12,16.7033 C11.706,16.7033 11.467,16.4633 11.467,16.1703 L11.467,15.3803 C11.467,14.4013 11.848,13.4833 12.539,12.7923 L13.834,11.4973 C14.325,11.0063 14.595,10.3543 14.595,9.6623 L14.595,8.8723 C14.595,7.4423 13.432,6.2783 12.001,6.2783 C10.57,6.2783 9.407,7.4423 9.407,8.8723 L9.407,9.9153 C9.407,10.2093 9.168,10.4483 8.874,10.4483 C8.58,10.4483 8.34,10.2093 8.34,9.9153 L8.34,8.8723 C8.34,6.8543 9.982,5.2123 12.001,5.2123 Z M12,22.934 C18.029,22.934 22.934,18.03 22.934,12 C22.934,5.972 18.029,1.067 12,1.067 C5.972,1.067 1.066,5.972 1.066,12 C1.066,18.03 5.972,22.934 12,22.934 Z M12,-1.77635684e-15 C18.616,-1.77635684e-15 24,5.384 24,12 C24,18.617 18.616,24 12,24 C5.383,24 0,18.617 0,12 C0,5.384 5.383,-1.77635684e-15 12,-1.77635684e-15 Z"
})));
Support.displayName = "DecorativeIcon";

const Tablet = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "18",
  height: "24",
  viewBox: "0 0 18 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-3)",
  d: "M12,20.5 C11.448,20.5 11,20.948 11,21.5 C11,22.052 11.448,22.5 12,22.5 C12.552,22.5 13,22.052 13,21.5 C13,20.948 12.552,20.5 12,20.5 Z M18.5,2 L5.5,2 C5.224,2 5,2.224 5,2.5 L5,19.5 C5,19.776 5.224,20 5.5,20 L18.5,20 C18.776,20 19,19.776 19,19.5 L19,2.5 C19,2.224 18.776,2 18.5,2 Z M18,19 L6,19 L6,3 L18,3 L18,19 Z M18.5,0 L5.5,0 C4.122,0 3,1.122 3,2.5 L3,21.5 C3,22.878 4.122,24 5.5,24 L18.5,24 C19.878,24 21,22.878 21,21.5 L21,2.5 C21,1.122 19.878,0 18.5,0 Z M20,21.5 C20,22.327 19.327,23 18.5,23 L5.5,23 C4.673,23 4,22.327 4,21.5 L4,2.5 C4,1.673 4.673,1 5.5,1 L18.5,1 C19.327,1 20,1.673 20,2.5 L20,21.5 Z"
})));
Tablet.displayName = "DecorativeIcon";

const Target = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M12.3787231,10.9154165 L18.50025,4.79388961 L18.50025,3.00088961 C18.50025,2.86788961 18.55325,2.74088961 18.64625,2.64688961 L20.64625,0.646889613 C20.79025,0.503889613 21.00525,0.459889614 21.19125,0.538889614 C21.37825,0.616889613 21.50025,0.798889613 21.50025,1.00088961 L21.50025,2.50088961 L23.00025,2.50088961 C23.20225,2.50088961 23.38525,2.62288961 23.46225,2.80988961 C23.53925,2.99688961 23.49625,3.21188961 23.35425,3.35488961 L21.35425,5.35488961 C21.26025,5.44888961 21.13325,5.50088961 21.00025,5.50088961 L19.20725,5.50088961 L13.0854716,11.622668 C13.3473717,12.0179185 13.5,12.4915316 13.5,13 C13.5,14.378 12.379,15.5 11,15.5 C9.621,15.5 8.5,14.378 8.5,13 C8.5,11.622 9.621,10.5 11,10.5 C11.5092453,10.5 11.9833067,10.6530095 12.3787231,10.9154165 Z M11.6471857,11.6469539 C11.4511356,11.5527847 11.2316071,11.5 11,11.5 C10.173,11.5 9.5,12.173 9.5,13 C9.5,13.827 10.173,14.5 11,14.5 C11.827,14.5 12.5,13.827 12.5,13 C12.5,12.7689993 12.4474914,12.550014 12.3537849,12.3543547 L11.35325,13.3548896 C11.25625,13.4518896 11.12825,13.5008896 11.00025,13.5008896 C10.87225,13.5008896 10.74425,13.4518896 10.64625,13.3548896 C10.45125,13.1598896 10.45125,12.8428896 10.64625,12.6478896 L11.6471857,11.6469539 Z M11,19.5 C7.416,19.5 4.5,16.584 4.5,13 C4.5,9.416 7.416,6.5 11,6.5 C11.97,6.5 12.911,6.715 13.797,7.139 C14.046,7.259 14.151,7.557 14.032,7.806 C13.913,8.055 13.614,8.16 13.365,8.041 C12.615,7.682 11.819,7.5 11,7.5 C7.968,7.5 5.5,9.967 5.5,13 C5.5,16.033 7.968,18.5 11,18.5 C14.032,18.5 16.5,16.033 16.5,13 C16.5,12.181 16.317,11.385 15.958,10.634 C15.839,10.385 15.944,10.087 16.193,9.967 C16.439,9.847 16.74,9.951 16.86,10.202 C17.285,11.089 17.5,12.03 17.5,13 C17.5,16.584 14.584,19.5 11,19.5 Z M11,23.5 C5.21,23.5 0.5,18.79 0.5,13 C0.5,7.21 5.21,2.5 11,2.5 C13.064,2.5 15.065,3.103 16.788,4.243 C17.017,4.395 17.081,4.706 16.929,4.936 C16.775,5.167 16.465,5.228 16.236,5.077 C14.678,4.046 12.867,3.5 11,3.5 C5.762,3.5 1.5,7.762 1.5,13 C1.5,18.238 5.762,22.5 11,22.5 C16.238,22.5 20.5,18.238 20.5,13 C20.5,11.133 19.955,9.322 18.923,7.764 C18.771,7.534 18.834,7.223 19.064,7.071 C19.293,6.92 19.603,6.981 19.757,7.212 C20.898,8.934 21.5,10.936 21.5,13 C21.5,18.79 16.79,23.5 11,23.5 Z M19.50025,4.50088961 L20.79325,4.50088961 L21.79325,3.50088961 L21.00025,3.50088961 C20.72425,3.50088961 20.50025,3.27688961 20.50025,3.00088961 L20.50025,2.20788961 L19.50025,3.20788961 L19.50025,4.50088961 Z"
})));
Target.displayName = "DecorativeIcon";

const Tasks = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "18",
  height: "24",
  viewBox: "0 0 18 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-3)",
  d: "M5.7915,15.562 C5.7915,15.711 5.9135,15.833 6.0625,15.833 C6.2115,15.833 6.3335,15.711 6.3335,15.562 C6.3335,15.413 6.2115,15.291 6.0625,15.291 C5.9135,15.291 5.7915,15.413 5.7915,15.562 Z M6.0625,16.874 C5.3385,16.874 4.7495,16.286 4.7495,15.562 C4.7495,14.838 5.3385,14.25 6.0625,14.25 C6.7855,14.25 7.3745,14.838 7.3745,15.562 C7.3745,16.286 6.7855,16.874 6.0625,16.874 Z M9.229,12.1245 C8.942,12.1245 8.708,11.8905 8.708,11.6035 C8.708,11.3165 8.942,11.0825 9.229,11.0825 L18.729,11.0825 C19.016,11.0825 19.25,11.3165 19.25,11.6035 C19.25,11.8905 19.016,12.1245 18.729,12.1245 L9.229,12.1245 Z M9.229,8.166 C8.942,8.166 8.708,7.933 8.708,7.645 C8.708,7.358 8.942,7.124 9.229,7.124 L18.729,7.124 C19.016,7.124 19.25,7.358 19.25,7.645 C19.25,7.933 19.016,8.166 18.729,8.166 L9.229,8.166 Z M9.229,16.0825 C8.942,16.0825 8.708,15.8495 8.708,15.5615 C8.708,15.2745 8.942,15.0415 9.229,15.0415 L18.729,15.0415 C19.016,15.0415 19.25,15.2745 19.25,15.5615 C19.25,15.8495 19.016,16.0825 18.729,16.0825 L9.229,16.0825 Z M5.7915,11.6035 C5.7915,11.7525 5.9135,11.8745 6.0625,11.8745 C6.2115,11.8745 6.3335,11.7525 6.3335,11.6035 C6.3335,11.4545 6.2115,11.3325 6.0625,11.3325 C5.9135,11.3325 5.7915,11.4545 5.7915,11.6035 Z M6.0625,12.9155 C5.3385,12.9155 4.7495,12.3275 4.7495,11.6035 C4.7495,10.8795 5.3385,10.2915 6.0625,10.2915 C6.7855,10.2915 7.3745,10.8795 7.3745,11.6035 C7.3745,12.3275 6.7855,12.9155 6.0625,12.9155 Z M9.229,20.0415 C8.942,20.0415 8.708,19.8075 8.708,19.5205 C8.708,19.2325 8.942,18.9995 9.229,18.9995 L13.979,18.9995 C14.266,18.9995 14.5,19.2325 14.5,19.5205 C14.5,19.8075 14.266,20.0415 13.979,20.0415 L9.229,20.0415 Z M5.7915,19.52 C5.7915,19.669 5.9135,19.791 6.0625,19.791 C6.2115,19.791 6.3335,19.669 6.3335,19.52 C6.3335,19.371 6.2115,19.249 6.0625,19.249 C5.9135,19.249 5.7915,19.371 5.7915,19.52 Z M6.0625,20.832 C5.3385,20.832 4.7495,20.244 4.7495,19.52 C4.7495,18.796 5.3385,18.208 6.0625,18.208 C6.7855,18.208 7.3745,18.796 7.3745,19.52 C7.3745,20.244 6.7855,20.832 6.0625,20.832 Z M5.7915,7.6455 C5.7915,7.7945 5.9135,7.9165 6.0625,7.9165 C6.2115,7.9165 6.3335,7.7945 6.3335,7.6455 C6.3335,7.4965 6.2115,7.3745 6.0625,7.3745 C5.9135,7.3745 5.7915,7.4965 5.7915,7.6455 Z M6.0625,8.9575 C5.3385,8.9575 4.7495,8.3695 4.7495,7.6455 C4.7495,6.9215 5.3385,6.3335 6.0625,6.3335 C6.7855,6.3335 7.3745,6.9215 7.3745,7.6455 C7.3745,8.3695 6.7855,8.9575 6.0625,8.9575 Z M4.209,3.876 L4.209,22.499 C4.209,22.751 4.414,22.958 4.666,22.958 L19.334,22.958 C19.586,22.958 19.792,22.751 19.792,22.499 L19.792,3.876 C19.792,3.623 19.586,3.417 19.334,3.417 L16.875,3.417 L16.875,3.687 C16.875,3.974 16.641,4.208 16.354,4.208 L7.646,4.208 C7.358,4.208 7.125,3.974 7.125,3.687 L7.125,3.417 L4.666,3.417 C4.414,3.417 4.209,3.623 4.209,3.876 Z M11.376,1.486 C11.301,1.694 11.105,1.833 10.885,1.833 L9.229,1.833 C8.643,1.833 8.167,2.31 8.167,2.896 L8.167,3.166 L15.833,3.166 L15.833,2.896 C15.833,2.31 15.356,1.833 14.77,1.833 L13.115,1.833 C12.895,1.833 12.698,1.694 12.624,1.486 C12.529,1.22 12.278,1.041 12,1.041 C11.721,1.041 11.47,1.22 11.376,1.486 Z M19.334,2.376 C20.161,2.376 20.833,3.049 20.833,3.876 L20.833,22.499 C20.833,23.326 20.161,24 19.334,24 L4.666,24 C3.839,24 3.167,23.326 3.167,22.499 L3.167,3.876 C3.167,3.049 3.839,2.376 4.666,2.376 L7.189,2.376 C7.426,1.452 8.268,0.791 9.229,0.791 L10.563,0.791 C10.875,0.301 11.419,0 12,0 C12.579,0 13.123,0.301 13.436,0.791 L14.77,0.791 C15.732,0.791 16.574,1.452 16.81,2.376 L19.334,2.376 Z"
})));
Tasks.displayName = "DecorativeIcon";

const ThumbsUp = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "23",
  viewBox: "0 0 24 23"
}, /*#__PURE__*/React.createElement("path", {
  transform: "translate(0 -1)",
  d: "M7.5,22 C7.224,22 7,21.776 7,21.5 L7,12.5 C7,12.224 7.224,12 7.5,12 C7.776,12 8,12.224 8,12.5 L8,21.5 C8,21.776 7.776,22 7.5,22 Z M5.5,24 L2.5,24 C1.121,24 0,22.879 0,21.5 L0,13.5 C0,12.121 1.121,11 2.5,11 L7.5,11 C7.776,11 8,11.224 8,11.5 L8,11.691 L8.119,11.63 L11,5.391 L11,2 C11,1.848 11.069,1.704 11.188,1.609 C11.219,1.585 11.962,1 13,1 C14.157,1 16,2.831 16,5 C16,6.368 15.51,8.071 15.204,9 L21.381,9 C22.727,9 23.872,9.996 23.989,11.267 C24.054,11.98 23.816,12.665 23.349,13.176 C23.761,13.589 24,14.149 24,14.75 C24,15.617 23.504,16.379 22.766,16.751 C22.919,17.057 23,17.396 23,17.75 C23,18.617 22.503,19.38 21.765,19.751 C21.993,20.207 22.06,20.732 21.945,21.254 C21.721,22.266 20.768,23 19.679,23 L10.5,23 C9.805,23 8.685,22.775 7.853,22.347 C7.505,23.31 6.581,24 5.5,24 Z M2.5,12 C1.673,12 1,12.673 1,13.5 L1,21.5 C1,22.327 1.673,23 2.5,23 L5.5,23 C6.327,23 7,22.327 7,21.5 C7,21.298 7.122,21.115 7.309,21.038 C7.495,20.962 7.711,21.004 7.854,21.146 C8.326,21.619 9.688,22 10.5,22 L19.679,22 C20.303,22 20.845,21.596 20.968,21.038 C21.067,20.59 20.935,20.155 20.606,19.845 C20.464,19.711 20.413,19.508 20.474,19.323 C20.536,19.138 20.699,19.007 20.892,18.984 C21.523,18.911 22,18.381 22,17.75 C22,17.406 21.859,17.084 21.605,16.845 C21.463,16.711 21.412,16.508 21.473,16.323 C21.535,16.138 21.698,16.007 21.891,15.984 C22.523,15.911 23,15.381 23,14.75 C23,14.284 22.738,13.86 22.315,13.645 C22.155,13.562 22.051,13.4 22.044,13.219 C22.037,13.038 22.128,12.868 22.281,12.774 C22.772,12.471 23.046,11.929 22.993,11.359 C22.923,10.597 22.215,10 21.381,10 L14.5,10 C14.336,10 14.182,9.919 14.088,9.784 C13.995,9.648 13.975,9.475 14.033,9.322 C14.042,9.297 15,6.76 15,5 C15,3.362 13.548,2 13,2 C12.569,2 12.208,2.156 12,2.271 L12,5.5 C12,5.572 11.984,5.644 11.954,5.71 L8.954,12.21 C8.906,12.313 8.825,12.397 8.724,12.447 L7.724,12.947 C7.568,13.023 7.384,13.014 7.238,12.926 C7.09,12.834 7,12.673 7,12.5 L7,12 L2.5,12 Z"
})));
ThumbsUp.displayName = "DecorativeIcon";

const Time = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M16.5049,11.4668 C16.8189,11.4668 17.0379,11.6868 17.0379,11.9998 C17.0379,12.3138 16.8189,12.5328 16.5049,12.5328 L11.9999,12.5328 C11.6869,12.5328 11.4669,12.3138 11.4669,11.9998 L11.4669,3.8098 C11.4669,3.4958 11.6869,3.2768 11.9999,3.2768 C12.3139,3.2768 12.5329,3.4958 12.5329,3.8098 L12.5329,11.4668 L16.5049,11.4668 Z M12,22.9336 C18.029,22.9336 22.934,18.0296 22.934,11.9996 C22.934,5.9716 18.029,1.0666 12,1.0666 C5.972,1.0666 1.066,5.9716 1.066,11.9996 C1.066,18.0296 5.972,22.9336 12,22.9336 Z M12,-0.0004 C18.616,-0.0004 24,5.3836 24,11.9996 C24,18.6166 18.616,23.9996 12,23.9996 C5.383,23.9996 0,18.6166 0,11.9996 C0,5.3836 5.383,-0.0004 12,-0.0004 Z"
})));
Time.displayName = "DecorativeIcon";

const TowTruck = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M4.5 20.52a2.503 2.503 0 0 1-2.5-2.5c0-1.378 1.121-2.5 2.5-2.5S7 16.642 7 18.02s-1.121 2.5-2.5 2.5zm0-4c-.827 0-1.5.673-1.5 1.5s.673 1.5 1.5 1.5 1.5-.673 1.5-1.5-.673-1.5-1.5-1.5zm15 4a2.503 2.503 0 0 1-2.5-2.5c0-1.378 1.121-2.5 2.5-2.5s2.5 1.122 2.5 2.5-1.121 2.5-2.5 2.5zm0-4c-.827 0-1.5.673-1.5 1.5s.673 1.5 1.5 1.5 1.5-.673 1.5-1.5-.673-1.5-1.5-1.5zm-2-3h-1a.5.5 0 0 1 0-1h1a.5.5 0 0 1 0 1zm-4.5.473a.5.5 0 0 1-.5.527H1.892l-.75 3H2.5a.5.5 0 0 1 0 1h-2a.503.503 0 0 1-.486-.621l1-4a.502.502 0 0 1 .486-.379h5.327L5.001 7.427V9.02c0 .827-.673 1.5-1.5 1.5S2 9.847 2 9.02a.5.5 0 0 1 1 0 .5.5 0 0 0 1 0v-5a.5.5 0 0 1 .5-.5h1.892a2.49 2.49 0 0 1 2.12 1.174L12 11.852V4.02a.5.5 0 0 1 .5-.5h9c.737 0 1.96.753 2.354 1.146A.504.504 0 0 1 24 5.02v1.5a.5.5 0 0 1-.276.447L23 7.329v3.382l.724.362a.5.5 0 0 1 .276.447v4.5c0 1.378-1.121 2.5-2.5 2.5a.5.5 0 0 1 0-1c.827 0 1.5-.673 1.5-1.5v-4.191l-.724-.362A.503.503 0 0 1 22 11.02v-4a.5.5 0 0 1 .276-.447L23 6.211v-.965c-.407-.319-1.193-.726-1.5-.726H13v9.473zm-5.127-.473h3.83L7.64 5.178c-.252-.394-.728-.658-1.248-.658h-1.22l2.7 9zm9.627 5h-11a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1zm3-7h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 1 0v3.5h3.5a.5.5 0 0 1 0 1z",
  fillRule: "nonzero"
})));
TowTruck.displayName = "DecorativeIcon";

const Transmitter = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M14.8127,8.645 L13.9927,5.717 L21.2077,5.717 L14.8127,8.645 Z M15.7767,15.79 L9.8257,12.029 L14.1667,10.041 L15.7767,15.79 Z M7.2367,22.958 L16.3057,17.678 L17.7857,22.958 L7.2367,22.958 Z M2.7457,5.717 L10.0077,5.717 L9.1647,8.725 L2.7457,5.717 Z M11.0457,5.717 L12.9547,5.717 L13.8927,9.066 L9.5507,11.055 L11.0457,5.717 Z M9.0787,12.74 L15.6597,16.898 L6.4037,22.288 L9.0787,12.74 Z M11.9997,2.312 L12.6737,4.717 L11.3267,4.717 L11.9997,2.312 Z M23.9887,5.109 C23.9757,5.052 23.9537,4.998 23.9227,4.95 C23.8827,4.886 23.8297,4.834 23.7687,4.795 C23.7087,4.757 23.6417,4.732 23.5687,4.722 C23.5417,4.718 23.5087,4.717 23.4897,4.717 L13.7127,4.717 L12.4817,0.324 C12.3607,-0.108 11.6397,-0.108 11.5187,0.324 L10.2877,4.717 L0.5117,4.717 C0.4787,4.716 0.4587,4.718 0.4327,4.722 C0.3587,4.732 0.2897,4.758 0.2297,4.796 L0.2297,4.797 L0.2297,4.797 C0.1707,4.834 0.1207,4.884 0.0817,4.944 C0.0487,4.994 0.0247,5.05 0.0117,5.109 C0.0027,5.149 -0.0003,5.188 -0.0003,5.228 L-0.0003,8.39 C-0.0003,8.666 0.2237,8.89 0.4997,8.89 C0.7767,8.89 0.9997,8.666 0.9997,8.39 L0.9997,6.004 L8.8917,9.701 L5.1387,23.095 C5.0727,23.201 5.0467,23.326 5.0697,23.45 C5.0677,23.56 5.0887,23.67 5.1577,23.76 C5.2527,23.885 5.3997,23.958 5.5567,23.958 L18.4447,23.958 C18.6007,23.958 18.7487,23.885 18.8427,23.76 C18.9377,23.636 18.9677,23.474 18.9257,23.324 L17.0977,16.8 C17.0907,16.772 17.0927,16.743 17.0817,16.715 C17.0787,16.708 17.0727,16.704 17.0697,16.698 L15.0857,9.62 L23.0007,5.996 L23.0007,8.39 C23.0007,8.666 23.2237,8.89 23.5007,8.89 C23.7767,8.89 24.0007,8.666 24.0007,8.39 L24.0007,5.228 C24.0007,5.188 23.9977,5.149 23.9887,5.109 L23.9887,5.109 Z"
})));
Transmitter.displayName = "DecorativeIcon";

const Tv = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "20",
  viewBox: "0 0 24 20"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -2)",
  d: "M22.5,2 L1.5,2 C0.673,2 0,2.673 0,3.5 L0,17.5 C0,18.327 0.673,19 1.5,19 L10,19 L10,20.077 L4.418,21.007 C4.146,21.052 3.962,21.31 4.007,21.582 C4.048,21.827 4.26,22 4.5,22 C4.527,22 4.554,21.998 4.582,21.993 L10.54,21 L13.459,21 L19.417,21.993 C19.445,21.998 19.473,22 19.5,22 C19.741,22 19.953,21.827 19.992,21.582 C20.038,21.31 19.853,21.052 19.581,21.007 L14,20.077 L14,19 L22.5,19 C23.327,19 24,18.327 24,17.5 L24,3.5 C24,2.673 23.327,2 22.5,2 Z M13,20 L11,20 L11,19 L13,19 L13,20 Z M23,17.5 C23,17.776 22.776,18 22.5,18 L1.5,18 C1.224,18 1,17.776 1,17.5 L1,3.5 C1,3.224 1.224,3 1.5,3 L22.5,3 C22.776,3 23,3.224 23,3.5 L23,17.5 Z"
})));
Tv.displayName = "DecorativeIcon";

const TVChoiceAndFlexibility = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "48",
  height: "48",
  viewBox: "0 0 48 48"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M37,48H25c-0.6,0-1-0.4-1-1c0-2.8,2.2-5,5-5h1.6L23,34.4c-0.6-0.6-1-1.4-1-2.2c0-0.8,0.4-1.6,1-2.2 c1.2-1.2,3.2-1.2,4.4,0l1.8,1.8c0.2-0.4,0.4-0.6,0.6-1c0.6-0.6,1.6-1,2.6-0.8c0.2-0.6,0.4-1.2,0.8-1.6c0.8-0.8,2.2-1.2,3.2-0.8 c0.2-0.4,0.4-0.8,0.8-1.2c1.2-1.2,3.2-1.2,4.4,0l3,3.2c2,2,3.2,4.8,3.2,7.8C48,43.2,43.2,48,37,48L37,48z M26.2,46h11c5,0,9-4,9-9 c0-2.4-1-4.6-2.6-6.2l-3-3.2c-0.4-0.4-1.2-0.4-1.6,0s-0.4,1.2,0,1.6c0.2,0.2,0.2,0.4,0.2,0.8s0,0.6-0.2,0.8c-0.4,0.4-1,0.4-1.4,0 l-1-1c-0.4-0.4-1.2-0.4-1.6,0c-0.2,0.2-0.4,0.4-0.4,0.8s0.2,0.6,0.4,0.8l1,1c0.2,0.2,0.2,0.4,0.2,0.8c0,0.4,0,0.6-0.2,0.8 c-0.4,0.4-1,0.4-1.4,0L33,32.4c-0.4-0.4-1.2-0.4-1.6,0c-0.2,0.2-0.4,0.4-0.4,0.8c0,0.4,0.2,0.6,0.4,0.8l2.6,2.4 c0.2,0.2,0.2,0.4,0.2,0.8c0,0.4,0,0.6-0.2,0.8c-0.4,0.4-1,0.4-1.4,0L26,31.4c-0.4-0.4-1.2-0.4-1.6,0c-0.2,0.2-0.4,0.4-0.4,0.8 c0,0.4,0.2,0.6,0.4,0.8l9.4,9.4c0.2,0.2,0.4,0.8,0.2,1c-0.2,0.4-0.6,0.6-1,0.6h-4C27.6,44,26.6,44.8,26.2,46L26.2,46z M21,48H5c-2.8,0-5-2.2-5-5V5c0-2.8,2.2-5,5-5h24c2.8,0,5,2.2,5,5v20c0,0.6-0.4,1-1,1s-1-0.4-1-1V5 c0-1.6-1.4-3-3-3H5C3.4,2,2,3.4,2,5v38c0,1.6,1.4,3,3,3h16c0.6,0,1,0.4,1,1S21.6,48,21,48z M23,40H1c-0.6,0-1-0.4-1-1s0.4-1,1-1h22c0.6,0,1,0.4,1,1S23.6,40,23,40z M19,44h-4c-0.6,0-1-0.4-1-1s0.4-1,1-1h4c0.6,0,1,0.4,1,1S19.6,44,19,44z M13,20H8c-1.7,0-3-1.3-3-3v-5c0-1.7,1.3-3,3-3h5c1.7,0,3,1.3,3,3v5C16,18.7,14.7,20,13,20z M8,11 c-0.6,0-1,0.4-1,1v5c0,0.6,0.4,1,1,1h5c0.6,0,1-0.4,1-1v-5c0-0.6-0.4-1-1-1H8z M26,20h-5c-1.7,0-3-1.3-3-3v-5c0-1.7,1.3-3,3-3h5c1.7,0,3,1.3,3,3v5C29,18.7,27.7,20,26,20z M21,11 c-0.6,0-1,0.4-1,1v5c0,0.6,0.4,1,1,1h5c0.6,0,1-0.4,1-1v-5c0-0.6-0.4-1-1-1H21z M13,33H8c-1.7,0-3-1.3-3-3v-5c0-1.7,1.3-3,3-3h5c1.7,0,3,1.3,3,3v5C16,31.7,14.7,33,13,33z M8,24 c-0.6,0-1,0.4-1,1v5c0,0.6,0.4,1,1,1h5c0.6,0,1-0.4,1-1v-5c0-0.6-0.4-1-1-1H8z M27,22c1.1,0,2,0.9,2,2l0,5.2c-0.9-1.3-2.4-2.2-4-2.2c-2.8,0-5,2.5-5,5.5c0,0.2,0,0.3,0,0.5l0,0 c-1.1,0-2-0.9-2-2v-7c0-1.1,0.9-2,2-2H27z M6,5c0,1.3-2,1.3-2,0C4,3.7,6,3.7,6,5z"
})));
TVChoiceAndFlexibility.displayName = "DecorativeIcon";

const TwoWayVoiceCall = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "25",
  height: "25",
  viewBox: "0 0 25 25",
  fill: "none"
}, /*#__PURE__*/React.createElement("path", {
  d: "M20.3071 8.11108L18.4609 9.88886L20.3071 11.6666",
  stroke: "#4B286D",
  fill: "transparent",
  strokeLinecap: "round",
  strokeLinejoin: "round"
}), /*#__PURE__*/React.createElement("path", {
  d: "M20.3071 2.77783C22.3462 2.77783 23.9994 4.36983 23.9994 6.33339C23.9994 8.29694 22.3462 9.88894 20.3071 9.88894H18.4609",
  stroke: "#4B286D",
  fill: "transparent",
  strokeLinecap: "round",
  strokeLinejoin: "round"
}), /*#__PURE__*/React.createElement("path", {
  d: "M16.6152 4.55556L18.4614 2.77778L16.6152 1",
  stroke: "#4B286D",
  fill: "transparent",
  strokeLinecap: "round",
  strokeLinejoin: "round"
}), /*#__PURE__*/React.createElement("path", {
  d: "M16.6161 9.88894C14.5771 9.88894 12.9238 8.29694 12.9238 6.33339C12.9238 4.36983 14.5771 2.77783 16.6161 2.77783H18.4623",
  stroke: "#4B286D",
  fill: "transparent",
  strokeLinecap: "round",
  strokeLinejoin: "round"
}), /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M8.53881 16.5029C9.98272 17.9765 11.4945 18.8477 13.135 19.6849L16.317 16.5029C16.65 16.1699 17.1408 15.9083 17.5601 16.0532C18.8159 16.4718 20.1587 17.0071 21.4569 17.058C21.7652 17.058 22.0636 17.1867 22.2942 17.4172C22.5339 17.6569 22.6534 17.9645 22.6534 18.2714L22.2178 22.8351C22.2263 23.1335 22.1068 23.4411 21.8671 23.6808C21.6281 23.9198 21.3205 24.0393 21.0136 24.0393C15.9373 23.9028 11.264 22.1159 7.12459 17.9171C3.27298 14.0104 1.13893 9.10448 1.00246 4.02816C1.00246 3.72127 1.12196 3.41368 1.36096 3.17468C1.60067 2.93497 1.90826 2.81547 2.21515 2.81547L6.5384 2.26958C6.84599 2.27029 7.15358 2.38979 7.39259 2.62879C7.6231 2.85931 7.7426 3.1669 7.7518 3.46601C7.79422 4.77274 8.4391 6.37363 8.85771 7.62945C9.00337 8.04806 8.73255 8.53101 8.39102 8.87255L5.35682 11.9067C6.17707 13.5472 7.18611 15.122 8.53881 16.5029V16.5029Z",
  stroke: "#4B286D",
  fill: "#fff",
  strokeLinecap: "round",
  strokeLinejoin: "round"
})));
TwoWayVoiceCall.displayName = "DecorativeIcon";

const Umbrella = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  fill: "none"
}, /*#__PURE__*/React.createElement("path", {
  d: "M18.8 1.99909C19.0048 1.99909 19.2096 1.92069 19.3648 1.76469C19.5432 1.58709 19.7936 1.00309 19.972 0.54469C20.0304 0.39669 19.9944 0.22869 19.8824 0.11669C19.7704 0.0046905 19.604 -0.0289095 19.4544 0.0270905C18.9968 0.20549 18.4128 0.45589 18.2344 0.63429C17.9224 0.94629 17.9224 1.45349 18.2344 1.76549C18.3904 1.92069 18.5952 1.99909 18.8 1.99909ZM10 3.99909C4.3928 3.99909 0 8.39189 0 13.9991C0 14.2207 0.1784 14.4095 0.3992 14.4095C0.6144 14.4095 0.788 14.2511 0.7984 14.0399C0.7992 14.0319 0.8 14.0239 0.8 14.0151C0.864 13.7535 1.7184 12.7991 2.8 12.7991C3.8864 12.7991 4.7472 13.7679 4.8 13.9991C4.8 14.2207 4.9784 14.4095 5.1992 14.4095C5.4144 14.4095 5.588 14.2511 5.5984 14.0399C5.5992 14.0319 5.6 14.0239 5.6 14.0151C5.664 13.7535 6.5184 12.7991 7.6 12.7991C8.6888 12.7991 9.5488 13.7671 9.6 13.9991V21.9991C9.6 22.6607 9.0616 23.1991 8.4 23.1991C7.7384 23.1991 7.2 22.6607 7.2 21.9991V21.1991C7.2 20.9783 7.0208 20.7991 6.8 20.7991C6.5792 20.7991 6.4 20.9783 6.4 21.1991V21.9991C6.4 23.1023 7.2976 23.9991 8.4 23.9991C9.5024 23.9991 10.4 23.1023 10.4 21.9991V14.0167V14.0159C10.4656 13.7535 11.3216 12.7991 12.4 12.7991C13.4864 12.7991 14.3472 13.7679 14.4 13.9991C14.4 14.2207 14.5784 14.4095 14.7992 14.4095C15.0144 14.4095 15.188 14.2511 15.1984 14.0399C15.1992 14.0319 15.2 14.0239 15.2 14.0151C15.264 13.7535 16.1184 12.7991 17.2 12.7991C18.2864 12.7991 19.1472 13.7679 19.2 13.9991C19.2 14.2199 19.3792 14.3991 19.6 14.3991C19.8208 14.3991 20 14.2199 20 13.9991C20 8.39189 15.6072 3.99909 10 3.99909ZM17.2 11.9991C16.2032 11.9991 15.2976 12.5895 14.8 13.1783C14.3024 12.5887 13.3968 11.9991 12.4 11.9991C11.4032 11.9991 10.4976 12.5887 10 13.1783C9.5024 12.5887 8.5968 11.9991 7.6 11.9991C6.6032 11.9991 5.6976 12.5895 5.2 13.1783C4.7024 12.5887 3.7968 11.9991 2.8 11.9991C2.072 11.9991 1.3928 12.3135 0.8856 12.7127C1.4936 8.18389 5.2784 4.79909 10 4.79909C14.7216 4.79909 18.5064 8.18389 19.1144 12.7127C18.6072 12.3135 17.928 11.9991 17.2 11.9991ZM20.2544 4.02709C19.7968 4.20549 19.2128 4.45589 19.0344 4.63429C18.7224 4.94629 18.7224 5.45349 19.0344 5.76549C19.1904 5.92069 19.3952 5.99909 19.6 5.99909C19.8048 5.99909 20.0096 5.92069 20.1648 5.76469C20.3432 5.58709 20.5936 5.00309 20.772 4.54469C20.8304 4.39669 20.7944 4.22869 20.6824 4.11669C20.5704 4.00549 20.404 3.97029 20.2544 4.02709ZM23.8824 4.11669C23.7704 4.00549 23.6032 3.97029 23.4544 4.02709C22.9968 4.20549 22.4128 4.45589 22.2344 4.63429C21.9224 4.94629 21.9224 5.45349 22.2344 5.76549C22.3904 5.92069 22.5952 5.99909 22.8 5.99909C23.0048 5.99909 23.2096 5.92069 23.3648 5.76469C23.5432 5.58709 23.7936 5.00309 23.972 4.54469C24.0304 4.39669 23.9944 4.22869 23.8824 4.11669Z",
  fill: "#4B286D"
})));
Umbrella.displayName = "DecorativeIcon";

const Upload = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M23.505,15.8693 C23.778,15.8693 24,16.0903 24,16.3633 L24,21.9183 C24,23.0663 23.067,24.0003 21.918,24.0003 L2.082,24.0003 C0.934,24.0003 -9.09494702e-13,23.0663 -9.09494702e-13,21.9183 L-9.09494702e-13,16.3633 C-9.09494702e-13,16.0903 0.221,15.8693 0.495,15.8693 C0.769,15.8693 0.99,16.0903 0.99,16.3633 L0.99,21.9183 C0.99,22.5203 1.48,23.0113 2.082,23.0113 L21.918,23.0113 C22.521,23.0113 23.011,22.5203 23.011,21.9183 L23.011,16.3633 C23.011,16.0903 23.232,15.8693 23.505,15.8693 Z M12.3350936,0.1307 L17.4930936,4.8917 C17.6930936,5.0767 17.7060936,5.3897 17.5200936,5.5907 C17.3350936,5.7917 17.0220936,5.8037 16.8210936,5.6187 L12.4940936,1.6247 L12.4940936,16.3637 C12.4940936,16.6367 12.2730936,16.8587 11.9990936,16.8587 C11.7260936,16.8587 11.5040936,16.6367 11.5040936,16.3637 L11.5040936,1.6247 L7.17709362,5.6187 C6.97809362,5.8037 6.66309362,5.7897 6.47909362,5.5907 C6.29309362,5.3897 6.30609362,5.0767 6.50709362,4.8917 L11.6630936,0.1307 C11.6860936,0.1097 11.7130936,0.0997 11.7390936,0.0837 C11.7640936,0.0687 11.7870936,0.0477 11.8140936,0.0367 C11.8740936,0.0127 11.9360936,-0.0003 11.9990936,-0.0003 C12.0620936,-0.0003 12.1240936,0.0127 12.1840936,0.0367 C12.2110936,0.0477 12.2340936,0.0687 12.2590936,0.0837 C12.2850936,0.0997 12.3120936,0.1097 12.3350936,0.1307 Z"
})));
Upload.displayName = "DecorativeIcon";

const UploadToCloud = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M19.5003,10.00005 C20.8793,10.00005 22.0003,11.12205 22.0003,12.50005 L22.0003,19.50005 C22.0003,20.87805 20.8793,22.00005 19.5003,22.00005 L13.0003,22.00005 L13.0003,23.00005 L16.5003,23.00005 C16.7763,23.00005 17.0003,23.22405 17.0003,23.50005 C17.0003,23.77605 16.7763,24.00005 16.5003,24.00005 L8.5003,24.00005 C8.2243,24.00005 8.0003,23.77605 8.0003,23.50005 C8.0003,23.22405 8.2243,23.00005 8.5003,23.00005 L12.0003,23.00005 L12.0003,22.00005 L5.5003,22.00005 C4.1213,22.00005 3.0003,20.87805 3.0003,19.50005 L3.0003,12.50005 C3.0003,11.12205 4.1213,10.00005 5.5003,10.00005 L10.5003,10.00005 C10.7763,10.00005 11.0003,10.22405 11.0003,10.50005 C11.0003,10.77605 10.7763,11.00005 10.5003,11.00005 L5.5003,11.00005 C4.6733,11.00005 4.0003,11.67305 4.0003,12.50005 L4.0003,18.00005 L21.0003,18.00005 L21.0003,12.50005 C21.0003,11.67305 20.3273,11.00005 19.5003,11.00005 L14.5003,11.00005 C14.2243,11.00005 14.0003,10.77605 14.0003,10.50005 C14.0003,10.22405 14.2243,10.00005 14.5003,10.00005 L19.5003,10.00005 Z M19.5003,21.00005 C20.3273,21.00005 21.0003,20.32705 21.0003,19.50005 L21.0003,19.00005 L4.0003,19.00005 L4.0003,19.50005 C4.0003,20.32705 4.6733,21.00005 5.5003,21.00005 L19.5003,21.00005 Z M12.5003,16.00005 C12.2243,16.00005 12.0003,15.77605 12.0003,15.50005 L12.0003,6.70705 L10.8543,7.85305 C10.6593,8.04805 10.3423,8.04805 10.1473,7.85305 C9.9523,7.65805 9.9523,7.34105 10.1473,7.14605 L12.1473,5.14605 C12.1473,5.14605 12.1493,5.14605 12.1493,5.14505 C12.2133,5.08205 12.2913,5.04705 12.3723,5.02505 C12.3953,5.01905 12.4163,5.01605 12.4393,5.01205 C12.5233,5.00205 12.6093,5.00505 12.6883,5.03805 C12.6893,5.03805 12.6913,5.03805 12.6923,5.03805 C12.6983,5.04105 12.7003,5.04605 12.7063,5.04905 C12.7583,5.07305 12.8103,5.10405 12.8533,5.14705 L14.8543,7.14705 C15.0483,7.34205 15.0483,7.65905 14.8543,7.85405 C14.7563,7.95105 14.6283,8.00005 14.5003,8.00005 C14.3723,8.00005 14.2443,7.95105 14.1463,7.85405 L13.0003,6.70805 L13.0003,15.50005 C13.0003,15.77605 12.7763,16.00005 12.5003,16.00005 Z M18.846,6.16895 C21.758,6.38295 24,8.81795 24,11.77895 C24,12.24395 23.932,12.71695 23.784,13.26695 C23.71,13.53995 23.438,13.69895 23.169,13.62495 C22.904,13.54995 22.746,13.26895 22.82,12.99595 C22.943,12.53595 23,12.14995 23,11.77895 C23,9.23795 20.982,7.16995 18.5,7.16995 C18.242,7.16595 17.962,6.99395 17.927,6.73795 C17.474,3.48095 14.711,1.02395 11.5,1.02395 C7.916,1.02395 5,4.01095 5,7.68195 C5,7.97095 5.024,8.27595 5.076,8.64195 C5.097,8.78995 5.053,8.94095 4.956,9.05395 C4.859,9.16595 4.71,9.21595 4.573,9.22695 C4.55,9.22695 4.488,9.21995 4.466,9.21595 C2.57,9.21795 1,10.82695 1,12.80295 C1,13.66695 1.303,14.47895 1.876,15.14995 C2.059,15.36395 2.037,15.68695 1.829,15.87295 C1.734,15.95795 1.617,15.99995 1.5,15.99995 C1.361,15.99995 1.223,15.93995 1.124,15.82495 C0.399,14.97595 4.54747351e-13,13.90295 4.54747351e-13,12.80295 C4.54747351e-13,10.42695 1.765,8.46495 4.022,8.21995 C4.007,8.03195 4,7.85495 4,7.68195 C4,3.44595 7.365,-5e-05 11.5,-5e-05 C15.065,-5e-05 18.152,2.62295 18.846,6.16895 Z"
})));
UploadToCloud.displayName = "DecorativeIcon";

const UsbCable = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M5.5,2 L3.5,2 C3.224,2 3,2.224 3,2.5 L3,4.5 C3,4.776 3.224,5 3.5,5 L5.5,5 C5.776,5 6,4.776 6,4.5 L6,2.5 C6,2.224 5.776,2 5.5,2 Z M5,4 L4,4 L4,3 L5,3 L5,4 Z M19.5,0 C17.019,0 15,2.019 15,4.5 L15,19 C15,21.206 13.206,23 11,23 C8.794,23 7,21.206 7,19 L7,18.975 C10.351,18.718 13,15.916 13,12.5 L13,9.5 C13,8.849 12.581,8.299 12,8.092 L12,0.5 C12,0.224 11.776,0 11.5,0 L1.5,0 C1.224,0 1,0.224 1,0.5 L1,8.092 C0.419,8.299 0,8.849 0,9.5 L0,12.5 C0,15.915 2.649,18.718 6,18.975 L6,19 C6,21.757 8.243,24 11,24 C13.757,24 16,21.757 16,19 L16,4.5 C16,2.57 17.57,1 19.5,1 C21.43,1 23,2.57 23,4.5 L23,8.5 C23,8.776 23.224,9 23.5,9 C23.776,9 24,8.776 24,8.5 L24,4.5 C24,2.019 21.981,0 19.5,0 Z M2,1 L11,1 L11,8 L2,8 L2,1 Z M1,12.5 L1,9.5 C1,9.224 1.224,9 1.5,9 L11.5,9 C11.776,9 12,9.224 12,9.5 L12,12.5 C12,15.533 9.533,18 6.5,18 C3.467,18 1,15.533 1,12.5 Z M9.5,2 L7.5,2 C7.224,2 7,2.224 7,2.5 L7,4.5 C7,4.776 7.224,5 7.5,5 L9.5,5 C9.776,5 10,4.776 10,4.5 L10,2.5 C10,2.224 9.776,2 9.5,2 Z M9,4 L8,4 L8,3 L9,3 L9,4 Z"
})));
UsbCable.displayName = "DecorativeIcon";

const User = props => {
  return /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
    width: "24",
    height: "24",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    d: "M12,0 C5.383,0 0,5.383 0,12 C0,18.617 5.383,24 12,24 C18.617,24 24,18.617 24,12 C24,5.383 18.617,0 12,0 Z M12,23 C9.616,23 7.413,22.229 5.609,20.935 L8.193,20.073 C9.757,19.421 10.278,17.073 10.278,16.5 C10.278,16.35 10.211,16.209 10.096,16.114 C9.537,15.653 8.944,14.853 8.944,14.278 C8.944,13.605 8.669,13.223 8.401,13.036 C8.276,12.69 8.074,12.06 8.057,11.663 C8.306,11.635 8.5,11.423 8.5,11.166 L8.5,8.499 C8.5,7.072 9.863,4.999 12,4.999 C14.008,4.999 14.537,5.864 14.604,6.206 C14.586,6.27 14.579,6.333 14.585,6.389 C14.614,6.66 14.817,6.789 14.926,6.858 C15.098,6.967 15.5,7.223 15.5,8.5 L15.5,11.167 C15.5,11.444 15.634,11.636 15.91,11.636 C15.919,11.645 15.931,11.667 15.942,11.689 C15.918,12.088 15.724,12.692 15.599,13.036 C15.332,13.223 15.056,13.605 15.056,14.278 C15.056,14.853 14.463,15.653 13.904,16.114 C13.788,16.209 13.722,16.351 13.722,16.5 C13.722,17.072 14.244,19.421 15.842,20.085 L18.391,20.935 C16.588,22.229 14.384,23 12,23 Z M19.137,20.354 C19.091,20.206 18.985,20.079 18.827,20.026 L16.195,19.15 C15.275,18.767 14.848,17.295 14.748,16.706 C15.429,16.073 16.058,15.13 16.058,14.278 C16.058,13.989 16.14,13.877 16.124,13.874 C16.28,13.835 16.407,13.724 16.467,13.575 C16.516,13.452 16.947,12.353 16.947,11.612 C16.947,11.572 16.942,11.531 16.932,11.491 C16.869,11.24 16.722,10.987 16.502,10.829 L16.502,8.501 C16.502,7.061 16.063,6.459 15.6,6.11 C15.496,5.395 14.73,4.001 12.002,4.001 C9.214,4.001 7.502,6.622 7.502,8.501 L7.502,10.829 C7.282,10.987 7.135,11.24 7.072,11.491 C7.062,11.53 7.057,11.571 7.057,11.612 C7.057,12.353 7.488,13.452 7.537,13.575 C7.597,13.724 7.676,13.819 7.832,13.858 C7.864,13.877 7.946,13.988 7.946,14.278 C7.946,15.13 8.575,16.073 9.256,16.706 C9.156,17.295 8.733,18.765 7.843,19.137 L5.176,20.026 C5.017,20.079 4.911,20.207 4.865,20.356 C2.504,18.336 1,15.343 1,12 C1,5.935 5.935,1 12,1 C18.065,1 23,5.935 23,12 C23,15.341 21.497,18.334 19.137,20.354 Z"
  })));
};
User.displayName = "DecorativeIcon";

const Users = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "16",
  viewBox: "0 0 24 16"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -4)",
  d: "M6.71131209,14.8884129 C7.9554989,13.3403579 9.8640644,12.3478261 12,12.3478261 C14.1360345,12.3478261 16.0446778,13.3404498 17.2888607,14.8886278 C17.9161273,14.5907736 18.6043446,14.4347826 19.3043478,14.4347826 C21.8932174,14.4347826 24,16.5415652 24,19.1304348 C24,19.4184348 23.7662609,19.6521739 23.4782609,19.6521739 C23.1902609,19.6521739 22.9565217,19.4184348 22.9565217,19.1304348 C22.9565217,17.1165217 21.3182609,15.4782609 19.3043478,15.4782609 C18.8142915,15.4782609 18.3326371,15.5757243 17.8864706,15.7636746 C18.456456,16.7563327 18.7826087,17.9060261 18.7826087,19.1304348 C18.7826087,19.4184348 18.5488696,19.6521739 18.2608696,19.6521739 C17.9728696,19.6521739 17.7391304,19.4184348 17.7391304,19.1304348 C17.7391304,15.9655652 15.1648696,13.3913043 12,13.3913043 C8.83513043,13.3913043 6.26086957,15.9655652 6.26086957,19.1304348 C6.26086957,19.4184348 6.02713043,19.6521739 5.73913043,19.6521739 C5.45113043,19.6521739 5.2173913,19.4184348 5.2173913,19.1304348 C5.2173913,17.9059474 5.5435859,16.7561849 6.11363934,15.7634832 C5.66773769,15.5758002 5.18589921,15.4782609 4.69565217,15.4782609 C2.68173913,15.4782609 1.04347826,17.1165217 1.04347826,19.1304348 C1.04347826,19.4184348 0.80973913,19.6521739 0.52173913,19.6521739 C0.23373913,19.6521739 -2.66453526e-14,19.4184348 -2.66453526e-14,19.1304348 C-2.66453526e-14,16.5415652 2.10678261,14.4347826 4.69565217,14.4347826 C5.39593017,14.4347826 6.08441293,14.5908961 6.71131209,14.8884129 Z M4.76973913,13.3913043 C3.33182609,13.3913043 2.16104348,12.2205217 2.16104348,10.7826087 C2.16104348,9.34469565 3.33078261,8.17391304 4.76973913,8.17391304 C6.20869565,8.17391304 7.37843478,9.34469565 7.37843478,10.7826087 C7.37843478,12.2205217 6.20765217,13.3913043 4.76973913,13.3913043 Z M4.76973913,9.2173913 C3.90678261,9.2173913 3.20452174,9.91965217 3.20452174,10.7826087 C3.20452174,11.6455652 3.90678261,12.3478261 4.76973913,12.3478261 C5.63269565,12.3478261 6.33495652,11.6455652 6.33495652,10.7826087 C6.33495652,9.91965217 5.63269565,9.2173913 4.76973913,9.2173913 Z M12,11.3043478 C9.98608696,11.3043478 8.34782609,9.66608696 8.34782609,7.65217391 C8.34782609,5.63826087 9.98608696,4 12,4 C14.013913,4 15.6521739,5.63826087 15.6521739,7.65217391 C15.6521739,9.66608696 14.013913,11.3043478 12,11.3043478 Z M12,5.04347826 C10.562087,5.04347826 9.39130435,6.21426087 9.39130435,7.65217391 C9.39130435,9.09008696 10.562087,10.2608696 12,10.2608696 C13.437913,10.2608696 14.6086957,9.09008696 14.6086957,7.65217391 C14.6086957,6.21426087 13.437913,5.04347826 12,5.04347826 Z M19.3043478,13.3913043 C17.8664348,13.3913043 16.6956522,12.2205217 16.6956522,10.7826087 C16.6956522,9.34469565 17.8664348,8.17391304 19.3043478,8.17391304 C20.7422609,8.17391304 21.9130435,9.34469565 21.9130435,10.7826087 C21.9130435,12.2205217 20.7422609,13.3913043 19.3043478,13.3913043 Z M19.3043478,9.2173913 C18.4413913,9.2173913 17.7391304,9.91965217 17.7391304,10.7826087 C17.7391304,11.6455652 18.4413913,12.3478261 19.3043478,12.3478261 C20.1673043,12.3478261 20.8695652,11.6455652 20.8695652,10.7826087 C20.8695652,9.91965217 20.1673043,9.2173913 19.3043478,9.2173913 Z"
})));
Users.displayName = "DecorativeIcon";

const VideoChat = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "22",
  height: "22",
  viewBox: "0 0 22 22"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-1 -1)",
  d: "M14.3109167,8.424725 C14.1596667,8.34130833 14.0643333,8.18180833 14.0643333,8.00855833 L14.0643333,6.67114167 C12.6215,6.67389167 8.70183333,6.670225 8.249,6.670225 C8.12525,6.82239167 7.7595,7.74180833 7.7595,9.45964167 C7.7595,11.2343083 8.1445,12.120725 8.2765,12.255475 L14.0661667,12.2490583 C14.0670833,11.6990583 14.0643333,10.9125583 14.0643333,10.9125583 C14.0643333,10.7393083 14.15875,10.5798083 14.31,10.4945583 C14.4603333,10.4111417 14.6464167,10.4148083 14.7930833,10.5073917 L16.9674167,11.8658917 L16.9674167,7.05339167 L14.7930833,8.41189167 C14.64825,8.50264167 14.4649167,8.50905833 14.3109167,8.424725 Z M8.20683333,13.2023917 C6.84558333,13.2023917 6.80616667,9.84280833 6.80616667,9.45964167 C6.80616667,9.076475 6.84558333,5.71780833 8.20683333,5.71780833 C8.44241667,5.71780833 13.93325,5.721475 14.5373333,5.71780833 L14.6161667,5.73339167 C14.70875,5.754475 14.7958333,5.77555833 14.8774167,5.856225 C14.9654167,5.94514167 15.0176667,6.06889167 15.0176667,6.19355833 L15.0176667,7.148725 L17.192,5.79114167 C17.33775,5.699475 17.5238333,5.693975 17.6741667,5.77739167 C17.8263333,5.861725 17.92075,6.021225 17.92075,6.194475 L17.92075,12.7266417 C17.92075,12.8980583 17.8263333,13.0593917 17.6750833,13.143725 C17.60175,13.182225 17.522,13.2023917 17.44225,13.2023917 C17.3533333,13.2023917 17.2671667,13.1785583 17.1910833,13.129975 L15.0176667,11.7723917 C15.0185833,12.1711417 15.0185833,12.588225 15.0176667,12.7330583 C15.014,12.9915583 14.7995,13.2023917 14.5400833,13.2023917 L8.20683333,13.2023917 Z M5.83175,17.3299583 C6.09391667,17.3299583 6.3075,17.542625 6.3075,17.806625 L6.3075,21.1634583 L10.9165,17.4362917 C11.0008333,17.3684583 11.1071667,17.330875 11.21625,17.330875 L19.62025,17.330875 C20.9585833,17.330875 22.0466667,16.241875 22.0466667,14.9044583 L22.0466667,4.74320833 C22.0466667,3.404875 20.9585833,2.315875 19.62025,2.315875 L4.37975,2.315875 L4.37883333,2.315875 C3.73166667,2.315875 3.123,2.56795833 2.66466667,3.02720833 C2.20541667,3.48554167 1.95333333,4.095125 1.95333333,4.74229167 L1.95333333,14.9035417 C1.95333333,16.241875 3.04141667,17.3299583 4.37975,17.3299583 L5.83175,17.3299583 Z M19.6211667,1.36345833 C21.48475,1.36345833 23,2.87870833 23,4.74229167 L23,14.9035417 C23,16.767125 21.48475,18.282375 19.6211667,18.282375 L11.3858333,18.282375 L6.1315,22.531125 C6.04716667,22.599875 5.93991667,22.6365417 5.83175,22.6365417 C5.76025,22.6365417 5.68966667,22.6200417 5.6255,22.5897917 C5.46141667,22.511875 5.35508333,22.344125 5.35508333,22.1617083 L5.35508333,18.282375 L4.37975,18.282375 C2.51616667,18.282375 1,16.767125 1,14.9035417 L1,4.74229167 C1,2.87870833 2.51616667,1.36345833 4.37975,1.36345833 L19.6211667,1.36345833 Z"
})));
VideoChat.displayName = "DecorativeIcon";

const VideoGames = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "25",
  height: "20",
  viewBox: "0 0 25 20"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -2)",
  d: "M7.9998,10.125 C7.9998,9.731 7.8468,9.361 7.5678,9.082 C7.2888,8.803 6.9188,8.65 6.5248,8.65 C6.1308,8.65 5.7608,8.803 5.4818,9.082 C5.2028,9.361 5.0498,9.731 5.0498,10.125 C5.0498,10.519 5.2028,10.889 5.4818,11.168 C6.0378,11.725 7.0128,11.723 7.5678,11.168 C7.8468,10.889 7.9998,10.519 7.9998,10.125 Z M6.5248,7.623 C7.2038,7.623 7.8548,7.884 8.3098,8.34 C8.7868,8.816 9.0498,9.45 9.0498,10.125 C9.0498,10.8 8.7868,11.434 8.3098,11.91 C7.8328,12.387 7.1998,12.65 6.5248,12.65 C5.8498,12.65 5.2158,12.387 4.7398,11.91 C4.2628,11.434 3.9998,10.8 3.9998,10.125 C3.9998,9.45 4.2628,8.816 4.7398,8.34 C5.1948,7.884 5.8458,7.623 6.5248,7.623 Z M17.8494,9.6001 L19.3254,9.6001 C19.6144,9.6001 19.8494,9.8351 19.8494,10.1251 C19.8494,10.4141 19.6144,10.6501 19.3254,10.6501 L17.8494,10.6501 L17.8494,12.1251 C17.8494,12.4141 17.6144,12.6501 17.3254,12.6501 C17.0354,12.6501 16.7994,12.4141 16.7994,12.1251 L16.7994,10.6501 L15.3254,10.6501 C15.0354,10.6501 14.7994,10.4141 14.7994,10.1251 C14.7994,9.8351 15.0354,9.6001 15.3254,9.6001 L16.7994,9.6001 L16.7994,8.1251 C16.7994,7.8351 17.0354,7.6001 17.3254,7.6001 C17.6144,7.6001 17.8494,7.8351 17.8494,8.1251 L17.8494,9.6001 Z M23.2,14.0044 C23.2,8.6814 19.86,3.0504 18.064,3.0504 C17.006,3.0504 16.016,3.6494 15.373,4.1514 C14.595,4.7594 13.594,5.0944 12.555,5.0944 L11.694,5.0944 C10.657,5.0944 9.657,4.7594 8.877,4.1524 C8.233,3.6494 7.244,3.0504 6.186,3.0504 C4.389,3.0504 1.05,8.6814 1.05,14.0044 C1.05,17.6504 2.293,20.4004 3.942,20.4004 C5.382,20.4004 6.32,19.0224 6.854,17.8654 C7.581,16.3004 9.165,15.2894 10.889,15.2894 L13.36,15.2894 C15.086,15.2894 16.67,16.3004 17.395,17.8644 C17.93,19.0214 18.869,20.4004 20.306,20.4004 C21.956,20.4004 23.2,17.6504 23.2,14.0044 Z M22.143,5.8554 C23.482,8.3634 24.25,11.3334 24.25,14.0044 C24.25,18.3884 22.629,21.4494 20.306,21.4494 C18.728,21.4494 17.392,20.3624 16.443,18.3074 C15.888,17.1114 14.679,16.3394 13.36,16.3394 L10.897,16.3394 C9.573,16.3394 8.362,17.1114 7.806,18.3074 C6.858,20.3624 5.521,21.4494 3.942,21.4494 C1.621,21.4494 -1.77635684e-15,18.3884 -1.77635684e-15,14.0044 C-1.77635684e-15,11.3344 0.767,8.3634 2.106,5.8554 C3.394,3.4414 4.92,2.0004 6.186,2.0004 C7.543,2.0004 8.749,2.7204 9.523,3.3244 C10.119,3.7884 10.89,4.0444 11.694,4.0444 L12.555,4.0444 C13.359,4.0444 14.131,3.7884 14.726,3.3244 C15.5,2.7204 16.706,2.0004 18.064,2.0004 C19.331,2.0004 20.855,3.4414 22.143,5.8554 Z"
})));
VideoGames.displayName = "DecorativeIcon";

const Visible = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "14",
  viewBox: "0 0 24 14"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -5)",
  d: "M12,19 C5.839,19 0.349,12.596 0.118,12.323 C-0.039,12.136 -0.039,11.863 0.118,11.677 C0.349,11.404 5.839,5 12,5 C19.18,5 23.722,11.441 23.911,11.716 C24.04,11.902 24.027,12.151 23.882,12.323 C23.651,12.596 18.161,19 12,19 Z M1.172,12 C2.365,13.29 7.061,18 12,18 C16.981,18 21.704,13.222 22.854,11.973 C21.858,10.703 17.779,6 12,6 C7.054,6 2.363,10.709 1.172,12 Z M12,16 C9.794,16 8,14.206 8,12 C8,9.794 9.794,8 12,8 C14.206,8 16,9.794 16,12 C16,14.206 14.206,16 12,16 Z M12,9 C10.346,9 9,10.346 9,12 C9,13.654 10.346,15 12,15 C13.654,15 15,13.654 15,12 C15,10.346 13.654,9 12,9 Z"
})));
Visible.displayName = "DecorativeIcon";

const Warranty = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M14.5211333,11.6702089 L23.229,20.141 C23.721,20.634 24,21.31 24,21.999 C24,23.103 23.103,24 22,24 C21.3,24 20.642,23.728 20.147,23.232 L12.0039848,14.8613431 C11.9857035,14.8891246 11.9643752,14.9154998 11.94,14.94 C11.656,15.223 11.5,15.599 11.5,16 C11.5,16.127 11.45,16.251 11.363,16.344 C11.263,16.45 5.071,23.134 5.071,23.134 C4.508,23.697 3.777,24 3,24 C2.23,24 1.48,23.689 0.938,23.147 L0.845,23.05 C0.303,22.508 1.0658141e-14,21.777 1.0658141e-14,21 C1.0658141e-14,20.23 0.311,19.48 0.853,18.939 L7.751,12.714 C7.843,12.631 7.962,12.585 8.086,12.585 C8.087,12.585 8.087,12.585 8.088,12.585 C8.487,12.585 8.863,12.429 9.147,12.146 C9.18501943,12.1079806 9.22767656,12.0773738 9.27316294,12.0541798 L7.484,10.215 C7.106,9.827 6.547,9.671 6.022,9.813 C5.548,9.94 5.223,10 5,10 C3.629,10 2.303,9.428 1.361,8.43 C0.407,7.417 -0.073,6.092 0.009,4.699 C0.019,4.527 0.117,4.372 0.269,4.289 C0.423,4.204 0.633,4.197 0.786,4.289 L3.521,5.93 C4.353,5.5 4.896,4.693 4.986,3.775 L1.931,1.941 C1.79,1.857 1.7,1.71 1.688,1.547 C1.678,1.384 1.746,1.226 1.874,1.124 C2.754,0.414 3.799,0.025 4.894,0.001 C6.128,-0.021 7.332,0.486 8.289,1.441 C9.516,2.667 10.011,4.277 9.722,6.1 C9.644,6.59 9.805,7.083 10.153,7.421 L12.3081345,9.51746001 C12.3309518,9.47410983 12.3605737,9.43342633 12.397,9.397 L18,3.793 L18,2.5 C18,2.311 18.107,2.138 18.276,2.053 L22.276,0.053 C22.469,-0.044 22.701,-0.006 22.853,0.147 L23.853,1.147 C24.005,1.299 24.043,1.532 23.947,1.724 L21.947,5.724 C21.862,5.893 21.689,6 21.5,6 L20.207,6 L14.603,11.604 C14.5776447,11.6293553 14.5501712,11.6514309 14.5211333,11.6702089 Z M13.822413,10.9905115 C13.8426957,10.9572071 13.8672248,10.9257752 13.896,10.897 L19.646,5.147 C19.74,5.053 19.867,5 20,5 L21.191,5 L22.891,1.599 L22.401,1.109 L19,2.809 L19,4 C19,4.133 18.947,4.26 18.854,4.354 L13.104,10.104 C13.0709888,10.1370112 13.0344812,10.164434 12.9956611,10.1862684 L13.822413,10.9905115 Z M11.3227357,14.1610493 L9.93958198,12.7392289 C9.91723066,12.7804051 9.88870333,12.8191187 9.854,12.854 C9.43,13.279 8.879,13.532 8.288,13.578 L1.542,19.664 C1.204,20.001 1,20.494 1,20.997 C1,21.511 1.199,21.99 1.56,22.351 L1.654,22.449 C2.357,23.152 3.636,23.156 4.351,22.441 C7.914,18.595 9.982,16.363 10.508,15.795 C10.556,15.204 10.809,14.655 11.233,14.232 C11.2606855,14.2044565 11.2908301,14.1808034 11.3227357,14.1610493 Z M6.41,8.762 C7.075,8.762 7.724,9.028 8.201,9.518 L20.859,22.53 C21.16,22.832 21.567,23 22,23 C22.552,23 23,22.551 23,22 C23,21.567 22.831,21.16 22.525,20.854 L9.454,8.139 C8.874,7.575 8.604,6.755 8.732,5.945 C8.972,4.43 8.586,3.153 7.581,2.15 C6.82,1.389 5.918,0.981 4.915,1.001 C4.285,1.015 3.675,1.181 3.117,1.488 L5.757,3.071 C5.908,3.162 6,3.324 6,3.5 C6,4.924 5.209,6.205 3.935,6.842 L3.724,6.947 C3.57,7.023 3.388,7.016 3.243,6.929 L1.045,5.61 C1.166,6.406 1.524,7.143 2.089,7.743 C2.854,8.554 3.887,9 5,9 C5.059,9 5.25,8.985 5.763,8.847 C5.977,8.79 6.194,8.762 6.41,8.762 Z"
})));
Warranty.displayName = "DecorativeIcon";

const Watch = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "15",
  height: "24",
  viewBox: "0 0 15 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(-5)",
  d: "M19,14.9996603 L19,15.4996603 C19,16.5632877 18.6404217,17.3844162 17.9872112,17.896555 C17.9955926,17.9298301 18,17.9643189 18,17.9996603 L18,18.9996603 C18,19.8266604 17.1924,20.4996603 16.2,20.4996603 L15.6,20.4996603 C15.5700629,20.4996603 15.5406356,20.4978302 15.5118705,20.4942969 L14.991062,23.0983396 C14.943062,23.3323396 14.738062,23.5003396 14.500062,23.5003396 L10.500062,23.5003396 C10.262062,23.5003396 10.057062,23.3323396 10.010062,23.0983396 L9.48922631,20.4941613 C9.46011263,20.4977834 9.43031775,20.4996603 9.4,20.4996603 L8.8,20.4996603 C7.8076,20.4996603 7,19.8266604 7,18.9996603 L7,17.9996603 C7,17.9643189 7.00440737,17.9298301 7.01278878,17.896555 C6.35957825,17.3844162 6,16.5632877 6,15.4996603 L6,9.99966035 C6,10.2756603 5.776,10.4996603 5.5,10.4996603 C5.224,10.4996603 5,10.2756603 5,9.99966035 L5,8.99966035 C5,8.72366035 5.224,8.49966035 5.5,8.49966035 C5.776,8.49966035 6,8.72366035 6,8.99966035 L6,7.49966035 C6,7.00539713 6.35524925,6.43380936 7.00098908,6.02858947 C7.00033269,6.01901578 7,6.00937025 7,5.99966035 L7,4.99966035 C7,4.17266035 7.8076,3.49966035 8.8,3.49966035 L9.4,3.49966035 C9.43036441,3.49966035 9.46020433,3.50154312 9.48936072,3.50517611 L10.0100639,0.90166035 C10.0570639,0.66766035 10.2620639,0.49966035 10.5000639,0.49966035 L14.5000639,0.49966035 C14.7380639,0.49966035 14.9430639,0.66766035 14.9900639,0.90166035 L15.5107639,3.5051606 C15.5398807,3.50153776 15.5696789,3.49966035 15.6,3.49966035 L16.2,3.49966035 C17.1924,3.49966035 18,4.17266035 18,4.99966035 L18,5.99966035 C18,6.00937025 17.9996673,6.01901578 17.9990109,6.02858947 C18.6447507,6.43380936 19,7.00539713 19,7.49966035 L19,8.99966035 C19,8.72366035 19.224,8.49966035 19.5,8.49966035 C19.776,8.49966035 20,8.72366035 20,8.99966035 L20,9.99966035 C20,10.2756603 19.776,10.4996603 19.5,10.4996603 C19.224,10.4996603 19,10.2756603 19,9.99966035 L19,13.9996603 C19,13.7236603 19.224,13.4996603 19.5,13.4996603 C19.776,13.4996603 20,13.7236603 20,13.9996603 L20,14.9996603 C20,15.2756603 19.776,15.4996603 19.5,15.4996603 C19.224,15.4996603 19,15.2756603 19,14.9996603 Z M15.7096639,4.49966035 L15.9096639,5.49966035 L16,5.49966035 C16.2844587,5.49966035 16.5515451,5.52537482 16.8,5.57206431 L16.8,4.99966035 C16.8,4.72366035 16.53,4.49966035 16.2,4.49966035 L15.7096639,4.49966035 Z M9.29046387,4.49966035 L8.8,4.49966035 C8.47,4.49966035 8.2,4.72366035 8.2,4.99966035 L8.2,5.57206431 C8.44845486,5.52537482 8.71554135,5.49966035 9,5.49966035 L9.09046387,5.49966035 L9.29046387,4.49966035 Z M16.8,18.4237868 C16.5515451,18.4739459 16.2844587,18.4996603 16,18.4996603 L15.9107978,18.4996603 L15.7107978,19.4996603 L16.2,19.4996603 C16.53,19.4996603 16.8,19.2756603 16.8,18.9996603 L16.8,18.4237868 Z M8.2,18.4237868 L8.2,18.9996603 C8.2,19.2756603 8.47,19.4996603 8.8,19.4996603 L9.29032612,19.4996603 L9.09032612,18.4996603 L9,18.4996603 C8.71554135,18.4996603 8.44845486,18.4739459 8.2,18.4237868 Z M10.1104482,18.4996603 L10.910062,22.5003396 L14.090062,22.5003396 L14.8905459,18.4996603 L10.1104482,18.4996603 Z M10.1097159,5.49966035 L14.8904118,5.49966035 L14.0900639,1.49966035 L10.9100639,1.49966035 L10.1097159,5.49966035 Z M9.4803398,6.49966035 L9,6.49966035 C7.673,6.49966035 7,7.17266035 7,8.49966035 L7,16.4996603 C7,16.8266604 7.673,17.4996603 9,17.4996603 L17,17.4996603 C17.327,17.4996603 18,16.8266604 18,16.4996603 L18,8.49966035 C18,7.17266035 17.327,6.49966035 17,6.49966035 L9.51854438,6.49966035 C9.50584363,6.50017855 9.49309928,6.50018396 9.48033995,6.49966035 Z M17,16.4996603 L9,16.4996603 C8.224,16.4996603 8,16.2756603 8,16.4996603 L8,8.49966035 C8,7.72366035 8.224,7.49966035 9,7.49966035 L17,7.49966035 C16.776,7.49966035 17,7.72366035 17,8.49966035 L17,16.4996603 C17,16.2756603 16.776,16.4996603 17,16.4996603 Z M9,15.4996603 L16,15.4996603 L16,8.49966035 L9,8.49966035 L9,15.4996603 Z"
})));
Watch.displayName = "DecorativeIcon";

const WebstoreTeam = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20"
}, /*#__PURE__*/React.createElement("path", {
  d: "M17.917 0C19.083 0 20 .917 20 2.083v15.834A2.063 2.063 0 0117.917 20H2.083A2.063 2.063 0 010 17.917V2.083C0 .917.917 0 2.083 0zm1.25 4.167H.833v13.75c0 .666.584 1.25 1.25 1.25h15.834c.666 0 1.25-.584 1.25-1.25V4.167zm-10.417 10c.667 0 1.25.583 1.25 1.25 0 .666-.583 1.25-1.25 1.25s-1.25-.584-1.25-1.25c0-.667.583-1.25 1.25-1.25zm3.333 0c.667 0 1.25.583 1.25 1.25 0 .666-.583 1.25-1.25 1.25-.666 0-1.25-.584-1.25-1.25 0-.667.584-1.25 1.25-1.25zM8.75 15c-.25 0-.417.167-.417.417 0 .25.167.416.417.416.25 0 .417-.166.417-.416 0-.25-.167-.417-.417-.417zm3.333 0c-.25 0-.416.167-.416.417 0 .25.166.416.416.416.25 0 .417-.166.417-.416 0-.25-.167-.417-.417-.417zM5.25 7.583c.167 0 .333.167.417.334l.166.5H14.5c.167 0 .25.083.333.166.084.084.084.25.084.334l-.834 3.333a.358.358 0 01-.333.333l-6.583.75L7.5 14.5c0 .25-.083.417-.333.5h-.084c-.166 0-.333-.167-.416-.333L5.083 8.333H3.75c-.25 0-.583-.083-.583-.333s.166-.417.416-.417zm.917 1.5L7 12.417l6.417-.75.666-2.5-7.916-.084zm11.75-8.25H2.083c-.666 0-1.25.584-1.25 1.25v1.25h18.334v-1.25c0-.666-.584-1.25-1.25-1.25zM3.75 1.667a.417.417 0 110 .833.417.417 0 010-.833zm-1.667 0a.417.417 0 110 .833.417.417 0 010-.833zm3.334 0a.417.417 0 110 .833.417.417 0 010-.833z"
})));
WebstoreTeam.displayName = "DecorativeIcon";

const WifiBoost = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M9.55555556,1 C4.8304527,1 1,4.8304527 1,9.55555556 L1,14.4444444 C1,19.1695473 4.8304527,23 9.55555556,23 L14.4444444,23 C19.1695473,23 23,19.1695473 23,14.4444444 L23,9.55555556 C23,4.8304527 19.1695473,1 14.4444444,1 L9.55555556,1 Z M9.6,0 L14.4,0 C19.7019336,0 24,4.2980664 24,9.6 L24,14.4 C24,19.7019336 19.7019336,24 14.4,24 L9.6,24 C4.2980664,24 0,19.7019336 0,14.4 L0,9.6 C0,4.2980664 4.2980664,0 9.6,0 Z M12,14 C11.448,14 11,14.448 11,15 C11,15.552 11.448,16 12,16 C12.552,16 13,15.552 13,15 C13,14.448 12.552,14 12,14 Z M7.404,9.904 C7.209,10.099 7.209,10.416 7.404,10.611 C7.599,10.806 7.916,10.806 8.111,10.611 C10.255,8.466 13.744,8.466 15.889,10.611 C15.987,10.708 16.115,10.757 16.243,10.757 C16.371,10.757 16.499,10.708 16.596,10.611 C16.791,10.416 16.791,10.099 16.596,9.904 C14.062,7.37 9.938,7.37 7.404,9.904 Z M8.818,11.318 C8.623,11.513 8.623,11.83 8.818,12.025 C9.013,12.22 9.33,12.22 9.525,12.025 C10.889,10.661 13.111,10.661 14.475,12.025 C14.573,12.122 14.701,12.171 14.829,12.171 C14.957,12.171 15.084,12.123 15.182,12.025 C15.377,11.83 15.377,11.513 15.182,11.318 C13.427,9.564 10.573,9.564 8.818,11.318 Z M10.232,12.733 C10.037,12.928 10.037,13.245 10.232,13.44 C10.427,13.635 10.744,13.635 10.939,13.44 C11.505,12.874 12.494,12.874 13.06,13.44 C13.158,13.537 13.286,13.586 13.414,13.586 C13.542,13.586 13.67,13.537 13.767,13.44 C13.962,13.245 13.962,12.928 13.767,12.733 C12.824,11.789 11.175,11.789 10.232,12.733 Z"
})));
WifiBoost.displayName = "DecorativeIcon";

const WifiCloud = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "17",
  viewBox: "0 0 24 17"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  transform: "translate(0 -4)",
  d: "M18.5,21 L4.5,21 C2.019,21 0,18.981 0,16.5 C0,14.18 1.765,12.265 4.022,12.025 C4.007,11.842 4,11.669 4,11.5 C4,7.364 7.364,4 11.5,4 C15.064,4 18.151,6.561 18.846,10.023 C21.758,10.232 24,12.609 24,15.5 C24,18.533 21.532,21 18.5,21 Z M4.466,12.999 C2.57,13 1,14.57 1,16.5 C1,18.43 2.57,20 4.5,20 L18.5,20 C20.981,20 23,17.981 23,15.5 C23,13.019 20.981,11 18.5,11 C18.284,11.016 17.962,10.828 17.927,10.578 C17.474,7.398 14.711,5 11.5,5 C7.916,5 5,7.916 5,11.5 C5,11.782 5.024,12.08 5.076,12.437 C5.097,12.582 5.053,12.729 4.956,12.839 C4.859,12.949 4.704,13 4.572,13.008 C4.55,13.008 4.488,13.002 4.466,12.999 Z M11.53,17.5 C11.254,17.5 11.025,17.276 11.025,17 C11.025,16.724 11.244,16.5 11.519,16.5 L11.53,16.5 C11.805,16.5 12.03,16.724 12.03,17 C12.03,17.276 11.806,17.5 11.53,17.5 Z M16,13.693 C15.858,13.693 15.718,13.633 15.619,13.517 C14.516,12.216 13.053,11.5 11.5,11.5 C9.947,11.5 8.484,12.216 7.381,13.517 C7.203,13.727 6.888,13.754 6.677,13.575 C6.466,13.396 6.441,13.081 6.619,12.87 C7.915,11.342 9.649,10.5 11.5,10.5 C13.351,10.5 15.085,11.342 16.381,12.87 C16.56,13.081 16.534,13.396 16.323,13.575 C16.229,13.654 16.114,13.693 16,13.693 Z M14.8,15.107 C14.658,15.107 14.518,15.047 14.419,14.93 C13.635,14.007 12.599,13.498 11.5,13.498 C10.401,13.498 9.365,14.006 8.581,14.93 C8.403,15.141 8.088,15.167 7.877,14.988 C7.666,14.809 7.641,14.494 7.819,14.283 C8.795,13.132 10.102,12.498 11.5,12.498 C12.898,12.498 14.205,13.132 15.181,14.283 C15.36,14.493 15.334,14.809 15.123,14.988 C15.029,15.068 14.914,15.107 14.8,15.107 Z M13.6,16.521 C13.458,16.521 13.318,16.461 13.219,16.344 C12.291,15.252 10.709,15.252 9.781,16.344 C9.603,16.555 9.287,16.581 9.077,16.402 C8.866,16.223 8.841,15.908 9.019,15.697 C10.332,14.149 12.667,14.149 13.98,15.697 C14.159,15.907 14.133,16.223 13.922,16.402 C13.829,16.482 13.714,16.521 13.6,16.521 Z"
})));
WifiCloud.displayName = "DecorativeIcon";

const OnlineSecurity = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "32",
  height: "29",
  viewBox: "0 0 32 29"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M20.06 16.69H18.87C18.97 15.69 19.02 14.61 19.02 13.5C19.02 12.39 18.97 11.33 18.87 10.31H24.87C24.9925 10.7304 25.0893 11.1579 25.16 11.59C25.1733 11.671 25.2026 11.7485 25.2461 11.8181C25.2896 11.8877 25.3465 11.948 25.4134 11.9955C25.4804 12.0429 25.5561 12.0766 25.6362 12.0945C25.7163 12.1125 25.7992 12.1143 25.88 12.1C25.9616 12.088 26.0399 12.0596 26.1102 12.0164C26.1805 11.9733 26.2413 11.9164 26.289 11.8491C26.3367 11.7818 26.3702 11.7055 26.3876 11.6249C26.4049 11.5443 26.4057 11.461 26.39 11.38C25.9044 8.36982 24.3706 5.6281 22.0596 3.63911C19.7485 1.65012 16.8089 0.541828 13.76 0.510002H13.57C10.1222 0.510002 6.81559 1.87964 4.37761 4.31761C1.93964 6.75559 0.57 10.0622 0.57 13.51C0.57 16.9578 1.93964 20.2644 4.37761 22.7024C6.81559 25.1404 10.1222 26.51 13.57 26.51H13.8C15.7381 26.4783 17.6447 26.0137 19.38 25.15C19.4555 25.1132 19.523 25.062 19.5787 24.9991C19.6344 24.9362 19.6772 24.863 19.7046 24.7836C19.732 24.7042 19.7435 24.6202 19.7384 24.5364C19.7333 24.4525 19.7118 24.3705 19.675 24.295C19.6382 24.2195 19.5869 24.152 19.5241 24.0963C19.4612 24.0406 19.388 23.9978 19.3086 23.9704C19.2292 23.943 19.1452 23.9315 19.0614 23.9366C18.9775 23.9417 18.8955 23.9632 18.82 24C18.0186 24.4035 17.1729 24.7123 16.3 24.92C17.6659 22.8192 18.4968 20.4159 18.72 17.92H20.06C20.2121 17.9007 20.352 17.8266 20.4534 17.7115C20.5548 17.5965 20.6108 17.4484 20.6108 17.295C20.6108 17.1416 20.5548 16.9935 20.4534 16.8785C20.352 16.7634 20.2121 16.6893 20.06 16.67V16.69ZM17.77 13.5C17.77 14.63 17.71 15.69 17.61 16.69H9.76C9.65001 15.6302 9.59327 14.5655 9.59 13.5C9.59 12.38 9.66 11.31 9.76 10.31H17.61C17.71 11.31 17.77 12.38 17.77 13.5ZM13.66 1.76H13.73C15.2 1.82 16.79 4.65 17.45 9.06H9.92C10.58 4.63 12.18 1.79 13.66 1.76ZM24.44 9.06H18.72C18.495 6.566 17.668 4.16389 16.31 2.06C18.1262 2.49148 19.8124 3.35236 21.2271 4.57038C22.6417 5.78841 23.7435 7.32803 24.44 9.06V9.06ZM11.1 2C9.72456 4.09855 8.88344 6.50175 8.65 9H2.7C3.43006 7.24114 4.57565 5.68549 6.03862 4.46635C7.50159 3.2472 9.23832 2.40092 11.1 2V2ZM2.27 10.29H8.5C8.4 11.29 8.34 12.37 8.34 13.48C8.34 14.59 8.4 15.65 8.5 16.67H2.27C1.6699 14.5857 1.6699 12.3743 2.27 10.29V10.29ZM2.7 17.92H8.65C8.88344 20.4183 9.72456 22.8214 11.1 24.92C9.24039 24.5211 7.50502 23.6778 6.04222 22.4623C4.57941 21.2468 3.43267 19.6951 2.7 17.94V17.92ZM13.75 25.22H13.65C12.18 25.22 10.58 22.35 9.92 17.92H17.45C16.79 22.33 15.22 25.15 13.75 25.24V25.22Z"
}), /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  d: "M30.43 19.15H30.18V17.28C30.18 16.3067 29.7933 15.3732 29.1051 14.6849C28.4168 13.9967 27.4833 13.61 26.51 13.61C25.5367 13.61 24.6032 13.9967 23.9149 14.6849C23.2267 15.3732 22.84 16.3067 22.84 17.28V19.15H22.59C22.2204 19.1526 21.8669 19.3013 21.6065 19.5636C21.3461 19.8258 21.2 20.1804 21.2 20.55V26.72C21.2 27.0887 21.3464 27.4422 21.6071 27.7029C21.8678 27.9636 22.2213 28.11 22.59 28.11H30.46C30.8286 28.11 31.1822 27.9636 31.4429 27.7029C31.7036 27.4422 31.85 27.0887 31.85 26.72V20.55C31.85 20.3645 31.8132 20.1808 31.7416 20.0096C31.6699 19.8384 31.565 19.6832 31.4329 19.5529C31.3008 19.4226 31.1441 19.3199 30.9719 19.2508C30.7997 19.1816 30.6155 19.1473 30.43 19.15V19.15ZM24.07 17.29C24.07 16.6482 24.325 16.0326 24.7788 15.5788C25.2326 15.125 25.8482 14.87 26.49 14.87C27.1318 14.87 27.7474 15.125 28.2012 15.5788C28.655 16.0326 28.91 16.6482 28.91 17.29V19.15H24.06L24.07 17.29ZM30.57 26.72C30.57 26.7571 30.5553 26.7927 30.529 26.819C30.5027 26.8453 30.4671 26.86 30.43 26.86H22.56C22.5416 26.86 22.5234 26.8564 22.5064 26.8493C22.4894 26.8423 22.474 26.832 22.461 26.819C22.448 26.806 22.4377 26.7906 22.4307 26.7736C22.4236 26.7566 22.42 26.7384 22.42 26.72V20.55C22.4199 20.5119 22.4343 20.4752 22.4603 20.4473C22.4863 20.4195 22.522 20.4025 22.56 20.4H30.43C30.468 20.4025 30.5037 20.4195 30.5297 20.4473C30.5557 20.4752 30.5701 20.5119 30.57 20.55V26.72Z"
})));
OnlineSecurity.displayName = "DecorativeIcon";

const LWC = props => /*#__PURE__*/React.createElement(SVGIcon, props, /*#__PURE__*/React.createElement("svg", {
  width: "24",
  height: "25",
  viewBox: "0 0 24 25",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M10.4492 21.28C10.5634 21.4702 10.5018 21.7169 10.3117 21.8311C9.85723 22.104 9.53176 22.8221 9.50225 23.709C9.49487 23.9307 9.30918 24.1045 9.08749 24.0971C8.8658 24.0897 8.69207 23.904 8.69945 23.6823C8.73258 22.6865 9.0979 21.623 9.89814 21.1425C10.0883 21.0283 10.335 21.0898 10.4492 21.28Z",
  fill: "#4B286D"
}), /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M5.16066 3.63158C5.6407 3.39276 6.15481 3.21301 6.69037 3.21301C7.19911 3.21301 7.82061 3.35317 8.44185 3.54459C9.07076 3.73837 9.73149 3.99503 10.3295 4.24903C10.9285 4.50342 11.4701 4.75746 11.8616 4.94776C12.0576 5.04298 12.2164 5.12243 12.3264 5.17823C12.3815 5.20614 12.4244 5.22814 12.4537 5.24325L12.4873 5.26064L12.4961 5.26524L12.4993 5.26692C12.4994 5.26695 12.4994 5.26697 12.3131 5.62275L12.4993 5.26692C12.6958 5.36983 12.7718 5.61261 12.6689 5.8091C12.566 6.00558 12.3233 6.08143 12.1268 5.97853C12.1268 5.97853 12.1268 5.97854 12.1268 5.97853L12.1245 5.97735L12.1168 5.97333L12.0855 5.95714C12.0578 5.94284 12.0166 5.9217 11.9633 5.89469C11.8567 5.84067 11.702 5.76324 11.5105 5.6702C11.1274 5.48398 10.5986 5.236 10.0155 4.98836C9.43152 4.74032 8.79837 4.49495 8.20532 4.31222C7.6046 4.12712 7.07605 4.01626 6.69037 4.01626C6.33153 4.01626 5.94661 4.13773 5.51845 4.35074C5.11172 4.55308 4.69775 4.82111 4.25371 5.10861C4.22904 5.12458 4.20428 5.14061 4.17943 5.1567C3.7097 5.46063 3.19882 5.79015 2.65649 6.03726C3.15285 6.15826 3.76155 6.29587 4.46174 6.43354C6.48718 6.83178 9.27157 7.22924 12.3131 7.22924C12.5349 7.22924 12.7147 7.40905 12.7147 7.63086C12.7147 7.85267 12.5349 8.03248 12.3131 8.03248C9.20497 8.03248 6.36664 7.6267 4.30677 7.22169C3.27619 7.01906 2.43883 6.8163 1.858 6.66385C1.56755 6.58762 1.34114 6.52394 1.18668 6.47911C1.10945 6.45669 1.05019 6.43898 1.0099 6.42677L0.96381 6.41267L0.951662 6.4089L0.948353 6.40787L0.947394 6.40756C0.947291 6.40753 0.946902 6.40741 1.06766 6.02437L0.947394 6.40756C0.758345 6.34797 0.640558 6.1592 0.670709 5.96328C0.700859 5.76737 0.869436 5.62275 1.06766 5.62275C1.93168 5.62275 2.78804 5.10025 3.74307 4.48231C3.77163 4.46383 3.80027 4.44528 3.82899 4.42668C4.26157 4.14648 4.7116 3.85498 5.16066 3.63158Z",
  fill: "#4B286D"
}), /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M12.3138 5.62275L12.0919 5.28795C11.907 5.41047 11.8565 5.65968 11.979 5.84459C12.1015 6.02947 12.3507 6.08005 12.5356 5.95758L12.5371 5.95657L12.5429 5.95275L12.5671 5.93696C12.5887 5.92294 12.621 5.90209 12.663 5.87538C12.747 5.82196 12.8697 5.74519 13.0227 5.65287C13.3292 5.46801 13.7555 5.22188 14.2356 4.97624C14.7167 4.7301 15.2458 4.48755 15.7587 4.30731C16.277 4.12517 16.7522 4.01626 17.1332 4.01626C17.4987 4.01626 17.9384 4.14142 18.4519 4.36055C18.9342 4.56635 19.445 4.83835 19.9824 5.12456C20.0133 5.14101 20.0442 5.15751 20.0753 5.17404C20.639 5.47405 21.2295 5.78508 21.8085 6.02001C21.8378 6.0319 21.8672 6.04362 21.8966 6.05517C21.4141 6.17175 20.831 6.30262 20.1651 6.43354C18.1397 6.83178 15.3553 7.22924 12.3138 7.22924C12.092 7.22924 11.9122 7.40905 11.9122 7.63086C11.9122 7.85267 12.092 8.03248 12.3138 8.03248C15.4219 8.03248 18.2602 7.6267 20.3201 7.22169C21.3507 7.01906 22.188 6.8163 22.7689 6.66385C23.0593 6.58762 23.2857 6.52394 23.4402 6.47911C23.5174 6.45669 23.5767 6.43898 23.617 6.42677L23.6631 6.41267L23.6752 6.4089L23.6785 6.40787L23.6795 6.40756C23.6796 6.40753 23.68 6.40741 23.5592 6.02437L23.6795 6.40756C23.8685 6.34797 23.9863 6.1592 23.9562 5.96328C23.926 5.76737 23.7574 5.62275 23.5592 5.62275C23.1322 5.62275 22.6471 5.49339 22.1105 5.27569C21.5759 5.0588 21.0209 4.76739 20.4527 4.46497C20.4186 4.4468 20.3844 4.42858 20.3501 4.41034C19.8222 4.12915 19.2826 3.84169 18.7672 3.62176C18.2219 3.38906 17.6622 3.21301 17.1332 3.21301C16.6199 3.21301 16.0455 3.35512 15.4924 3.5495C14.9339 3.74578 14.3699 4.00525 13.8698 4.26115C13.3687 4.51753 12.9255 4.77343 12.6078 4.96509C12.4488 5.06103 12.3207 5.14115 12.232 5.19754C12.1876 5.22575 12.1531 5.24804 12.1294 5.26343L12.1021 5.28123L12.0949 5.28602L12.0928 5.28735L12.0919 5.28795C12.0919 5.288 12.0919 5.28795 12.3138 5.62275Z",
  fill: "#4B286D"
}), /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M12.3137 7.22913C12.5355 7.22913 12.7154 7.40894 12.7154 7.63075V23.6957C12.7154 23.9175 12.5355 24.0973 12.3137 24.0973C12.0919 24.0973 11.9121 23.9175 11.9121 23.6957V7.63075C11.9121 7.40894 12.0919 7.22913 12.3137 7.22913Z",
  fill: "#4B286D"
}), /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M14.8734 9.89643C14.8685 9.92199 14.8607 10.0104 15.0085 10.1582C15.3176 10.4673 15.5162 10.7879 15.5863 11.1299C15.6578 11.478 15.586 11.798 15.4468 12.082C15.4367 12.1025 15.4262 12.1229 15.4154 12.1432C15.7376 11.9391 16.0018 11.7185 16.1881 11.4906C16.4042 11.2263 16.4948 10.9784 16.4859 10.7491C16.4772 10.5222 16.3683 10.2443 16.047 9.92298C15.7052 9.58123 15.2817 9.58804 15.0412 9.71746C14.9201 9.78263 14.8811 9.85671 14.8734 9.89643ZM14.051 13.6338C15.1651 13.2793 16.2228 12.7175 16.81 11.999C17.1102 11.6317 17.3071 11.1982 17.2886 10.7182C17.27 10.2359 17.0367 9.77671 16.615 9.355C16.0145 8.75456 15.2035 8.71803 14.6606 9.01011C14.3901 9.15569 14.1502 9.40517 14.0847 9.74415C14.0166 10.0973 14.157 10.4427 14.4405 10.7262C14.6784 10.9641 14.7706 11.1508 14.7995 11.2914C14.8271 11.4259 14.8062 11.5639 14.7256 11.7283C14.6412 11.9004 14.4986 12.0861 14.3025 12.2988C14.1629 12.4502 14.0109 12.6001 13.8473 12.7615C13.7812 12.8267 13.7132 12.8937 13.6433 12.9635C13.6295 12.9768 13.6167 12.991 13.605 13.006C13.5355 13.0949 13.5045 13.2116 13.5265 13.3279C13.5353 13.3748 13.5525 13.4204 13.578 13.4623C13.6035 13.5043 13.6361 13.5405 13.6736 13.5698C13.7625 13.6393 13.8793 13.6704 13.9956 13.6483C14.0113 13.6453 14.027 13.6414 14.0427 13.6364C14.0455 13.6355 14.0482 13.6347 14.051 13.6338Z",
  fill: "#4B286D"
}), /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M10.0879 9.7734C10.0316 9.45899 9.80816 9.22582 9.55184 9.08849C9.03824 8.81331 8.26128 8.84104 7.66833 9.39534C7.39134 9.65449 7.20376 9.93784 7.1106 10.2428C7.01699 10.5493 7.02507 10.8567 7.10707 11.1519C7.26734 11.729 7.70989 12.2629 8.24061 12.724C9.30901 13.6523 10.8934 14.4212 12.0122 14.776C12.0794 14.7973 12.1483 14.7963 12.2109 14.777C12.3522 14.8376 12.5312 14.9059 12.7252 14.9799L12.8327 15.021C13.0872 15.1184 13.3702 15.2284 13.658 15.3544C14.2412 15.6095 14.8118 15.9163 15.1915 16.2844C15.5604 16.642 15.7135 17.0165 15.5825 17.4582C15.4386 17.9435 14.9327 18.591 13.7333 19.4034C13.5809 19.5067 13.5411 19.714 13.6443 19.8664C13.7476 20.0188 13.9548 20.0586 14.1073 19.9554C15.3398 19.1204 16.0098 18.3621 16.2217 17.6478C16.4465 16.8899 16.1353 16.2709 15.6555 15.8057C15.1864 15.3509 14.5239 15.0055 13.9253 14.7436C13.6222 14.611 13.3271 14.4963 13.0709 14.3983L12.9603 14.3561C12.7499 14.2758 12.5771 14.2098 12.4478 14.1531C12.0323 13.9705 11.4982 13.6821 10.992 13.333C10.6401 13.0903 10.3016 12.8183 10.0258 12.5321C9.6878 12.1815 9.47532 11.8417 9.41553 11.5376C9.40979 11.5084 9.40537 11.4791 9.40241 11.4497C9.37742 11.2018 9.45707 10.9475 9.73328 10.6826C10.0088 10.4181 10.1462 10.0993 10.0879 9.7734ZM8.09908 9.90567C7.90536 10.093 7.79874 10.2721 7.74818 10.4376C7.69597 10.6085 7.69721 10.7855 7.74942 10.9735C7.85759 11.363 8.18304 11.7908 8.67787 12.2208C8.85936 12.3785 9.05838 12.532 9.26892 12.6795C9.02263 12.3686 8.83231 12.027 8.76138 11.6662C8.70298 11.3691 8.72865 11.0746 8.84883 10.7939C8.93724 10.5875 9.07678 10.3885 9.27163 10.2016C9.43617 10.0436 9.43987 9.93695 9.43162 9.89082C9.42131 9.8332 9.37066 9.74774 9.23699 9.67612C8.97066 9.53343 8.50416 9.52666 8.1236 9.88235C8.11527 9.89013 8.1071 9.89791 8.09908 9.90567Z",
  fill: "#4B286D"
}), /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M10.255 15.4672C10.3633 15.6608 10.2942 15.9055 10.1006 16.0138C9.50059 16.3494 9.0363 16.6913 8.74958 17.025C8.46573 17.3555 8.3949 17.6276 8.45414 17.8659C8.51898 18.1268 8.76838 18.4746 9.41745 18.8757C10.0581 19.2715 11.0313 19.6837 12.4284 20.0977C14.2082 20.625 15.104 21.4877 15.542 22.2695C15.758 22.6552 15.8553 23.0085 15.8981 23.27C15.9195 23.4008 15.9273 23.5089 15.9296 23.5872C15.9308 23.6264 15.9305 23.6583 15.9298 23.682C15.9295 23.6938 15.9291 23.7036 15.9287 23.7112L15.9281 23.7211L15.9278 23.7248L15.9277 23.7263C15.9277 23.7266 15.9276 23.7276 15.5272 23.6957L15.9276 23.7276C15.91 23.9487 15.7165 24.1137 15.4953 24.0961C15.2754 24.0786 15.111 23.887 15.1266 23.6674M15.1266 23.6674L15.1267 23.6659L15.1268 23.6651M15.1266 23.6674L15.1269 23.6594C15.1272 23.6502 15.1274 23.6337 15.1267 23.6105C15.1254 23.5641 15.1205 23.4918 15.1054 23.3998C15.0753 23.2158 15.0048 22.9541 14.8412 22.662C14.5198 22.0884 13.8092 21.3446 12.2002 20.8678C10.7714 20.4444 9.72193 20.0081 8.99521 19.559C8.27693 19.1152 7.8143 18.6217 7.67461 18.0597C7.52933 17.4751 7.76147 16.9426 8.14027 16.5016C8.51621 16.064 9.07425 15.6675 9.70844 15.3128C9.90202 15.2045 10.1467 15.2736 10.255 15.4672",
  fill: "#4B286D"
}), /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M12.3133 0.803245C11.2041 0.803245 10.3052 1.70219 10.3052 2.81136C10.3052 3.92053 11.2041 4.81947 12.3133 4.81947C13.4225 4.81947 14.3214 3.92053 14.3214 2.81136C14.3214 1.70219 13.4225 0.803245 12.3133 0.803245ZM9.50195 2.81136C9.50195 1.25857 10.7605 0 12.3133 0C13.8661 0 15.1247 1.25857 15.1247 2.81136C15.1247 4.36415 13.8661 5.62272 12.3133 5.62272C10.7605 5.62272 9.50195 4.36415 9.50195 2.81136Z",
  fill: "#4B286D"
})));
LWC.displayName = "DecorativeIcon";

var index = /*#__PURE__*/Object.freeze({
	__proto__: null,
	Accessible: Accessible,
	AddUser: AddUser,
	AlarmClock: AlarmClock,
	Ambulance: Ambulance,
	AppleWatch: AppleWatch,
	ArrowDown: ArrowDown,
	ArrowUp: ArrowUp,
	ArtificialIntelligence: ArtificialIntelligence,
	Attention: Attention,
	AutomaticFallDetection: AutomaticFallDetection,
	Award: Award,
	Baby: Baby,
	BabyBoy: BabyBoy,
	BabyGirl: BabyGirl,
	BackToSchool: BackToSchool,
	Bank: Bank,
	BatteryCar: BatteryCar,
	BatteryCharging: BatteryCharging,
	Bell: Bell,
	Bill: Bill,
	Bookmark: Bookmark,
	Briefcase: Briefcase,
	Calendar: Calendar,
	Call: Call$1,
	CallForward: CallForward,
	CallOut: CallOut,
	CallReceive: CallReceive,
	CallTalking: CallTalking,
	Camera: Camera,
	Car: Car,
	CartTeam: CartTeam,
	Channels: Channels,
	ChartsBar1: ChartsBar1,
	ChartsBar2: ChartsBar2,
	ChartsLine: ChartsLine,
	Chat1: Chat1,
	Chat2: Chat2,
	ChatSupport: ChatSupport,
	Check: Check,
	Clipboard: Clipboard,
	CloudDownload: CloudDownload,
	CloudSync: CloudSync,
	CloudUpload: CloudUpload,
	Collaboration: Collaboration,
	Compass: Compass,
	ComputerNetwork: ComputerNetwork,
	Contract: Contract,
	CreditCard: CreditCard,
	Cronometer: Cronometer,
	CssActivations: CssActivations,
	DataLimit: DataLimit,
	Deals: Deals,
	Delivery: Delivery,
	Devices: Devices,
	Diagram: Diagram,
	Diamond: Diamond,
	Direction: Direction,
	Document: Document,
	Donate: Donate,
	Download: Download,
	Email: Email,
	Escalations: Escalations,
	FavouriteNetwork: FavouriteNetwork,
	Files: Files,
	Fingerprint: Fingerprint,
	Firewall: Firewall,
	Flag: Flag,
	Gift: Gift,
	Globe1: Globe1,
	Globe2: Globe2,
	HeadBoth: HeadBoth,
	HeadFemale: HeadFemale,
	HeadMale: HeadMale,
	Headset: Headset,
	Heart: Heart,
	Heartbeat: Heartbeat,
	Helpdesk: Helpdesk,
	Home: Home,
	HomeSecurity: Warranty$1,
	IdTag: IdTag,
	Infinite: Infinite,
	Information: Information,
	Internet: Internet,
	Invisible: Invisible,
	Key: Key,
	Laptop: Laptop,
	Layers: Layers,
	Lifesaver: Lifesaver,
	Lightbulb: Lightbulb,
	LocationAdd: LocationAdd,
	LocationHome: LocationHome,
	LocationMap: LocationMap,
	LocationRegular: LocationRegular,
	LocationRemove: LocationRemove,
	LocationVerified: LocationVerified,
	LockClosed: LockClosed,
	LockOpened: LockOpened,
	Login: Login$1,
	LoginForm: LoginForm,
	Map: Map$1,
	Medical: Medical,
	Messaging: Messaging,
	Microphone: Microphone,
	Mobility: Mobility,
	Movie: Movie,
	Music: Music,
	Networking: Networking,
	News: News,
	NextGenFirewall: NextGenFirewall,
	NoContract: NoContract,
	Office: Office,
	Offices: Offices,
	OnDemand: OnDemand,
	OnTheGo: OnTheGo,
	Paperless: Paperless,
	Passport: Passport,
	Phone: Phone,
	PhoneBusiness: PhoneBusiness,
	PhoneHome: PhoneHome,
	PhoneReception: PhoneReception,
	Photo: Photo,
	Photos: Photos,
	PikTV: PikTV,
	PiggyBank: PiggyBank,
	Play: Play,
	Preference: Preference,
	PrivateCloud: PrivateCloud,
	ProactiveAssurance: ProactiveAssurance,
	Radar: Radar,
	Receipt: Receipt,
	Record: Record,
	Refresh: Refresh,
	RemoteControl: RemoteControl,
	Router: Router,
	Sales: Sales,
	SecurityCamera: SecurityCamera,
	SecurityHouse: SecurityHouse,
	SecurityMobile: SecurityMobile,
	SecuritySettings: SecuritySettings,
	Server: Server,
	ServiceTruck: ServiceTruck,
	Settings: Settings,
	SharedAccount: SharedAccount,
	Shop: Shop,
	Signal: Signal,
	SignPost: SignPost,
	SimCard: SimCard,
	Soccer: Soccer,
	Speaker: Speaker,
	SpeakerPhone: SpeakerPhone,
	Speed: Speed,
	SpeedReduced: SpeedReduced,
	Success: Success,
	Suitcase: Suitcase,
	Support: Support,
	Tablet: Tablet,
	Target: Target,
	Tasks: Tasks,
	ThumbsUp: ThumbsUp,
	Time: Time,
	TowTruck: TowTruck,
	Transmitter: Transmitter,
	Tv: Tv,
	TVChoiceAndFlexibility: TVChoiceAndFlexibility,
	TwoWayVoiceCall: TwoWayVoiceCall,
	Umbrella: Umbrella,
	Upload: Upload,
	UploadToCloud: UploadToCloud,
	UsbCable: UsbCable,
	User: User,
	Users: Users,
	VideoChat: VideoChat,
	VideoGames: VideoGames,
	Visible: Visible,
	Warranty: Warranty,
	Watch: Watch,
	WebstoreTeam: WebstoreTeam,
	WifiBoost: WifiBoost,
	WifiCloud: WifiCloud,
	OnlineSecurity: OnlineSecurity,
	LWC: LWC
});

const StyledDimpleDivider = styled.hr(noSpacing, none, {
  height: "32px",
  backgroundImage: "radial-gradient(ellipse at top, rgba(150, 150, 150, 0.1) 0%, rgba(0, 0, 0, 0) 70%)"
});
const DimpleDivider = ({
  ...rest
}) => /*#__PURE__*/React.createElement(StyledDimpleDivider, safeRest(rest));

const Responsive = ({
  minWidth,
  maxWidth,
  query,
  children,
  ...rest
}) => {
  if (!minWidth && !maxWidth) {
    warn("Responsive", "Responsive needs a minWidth or maxWith prop");
  }
  const mediaQuery = {};
  if (minWidth) {
    mediaQuery.minWidth = breakpoints[minWidth];
  }
  if (maxWidth) {
    mediaQuery.maxWidth = breakpoints[maxWidth] - 1;
  }
  return /*#__PURE__*/React.createElement(Media, _extends$2({}, rest, {
    query: {
      ...mediaQuery,
      ...query
    }
  }), children);
};
Responsive.propTypes = {
  minWidth: PropTypes$1.oneOf(["sm", "md", "lg", "xl"]),
  maxWidth: PropTypes$1.oneOf(["sm", "md", "lg", "xl"]),
  query: PropTypes$1.object,
  children: PropTypes$1.oneOfType([PropTypes$1.node, PropTypes$1.func])
};
Responsive.defaultProps = {
  minWidth: undefined,
  maxWidth: undefined,
  query: {},
  children: undefined
};

const viewports = {
  xs: "xs",
  sm: "sm",
  md: "md",
  lg: "lg",
  xl: "xl"
};
viewports.map = new Map([[viewports.xs, 0], [viewports.sm, 576], [viewports.md, 768], [viewports.lg, 992], [viewports.xl, 1200]]);
viewports.values = Array.from(viewports.map.values());
viewports.keys = Array.from(viewports.map.keys());
const viewportsSortedDescending = Array.from(viewports.map.entries()).reverse();

// The largest viewport such that the given width is still >= the breakpoint
viewports.select = (width = 0) => {
  if (!Number.isFinite(+width) || width < 0) {
    throw new Error(`width must be a non-negative number, received: ${width}`);
  }
  return viewportsSortedDescending.find(([, min]) => width >= min)[0];
};
const inherit = ({
  xs,
  sm = xs,
  md = sm,
  lg = md,
  xl = lg
}) => ({
  xs,
  sm,
  md,
  lg,
  xl
});
viewports.inherit = inherit;
const fromArray = viewportsArray => ({
  xs: viewportsArray[0],
  sm: viewportsArray[1],
  md: viewportsArray[2],
  lg: viewportsArray[3],
  xl: viewportsArray[4]
});
viewports.fromArray = fromArray;

const StyledDisplayHeading = styled.h1(noSpacing, wordBreak, helveticaNeueThin35, ({
  invert
}) => ({
  color: invert ? colorWhite : colorSecondary,
  fontSize: "2.75rem",
  lineHeight: 1.14,
  ...media.from("md").css({
    fontSize: "4.5rem",
    lineHeight: "1.11",
    letterSpacing: "0.2px"
  })
}), {
  sup: {
    ...baseSupSubScripts,
    fontSize: "1.25rem",
    top: "-1.2em",
    ...media.from("md").css({
      top: "-2.2em"
    })
  }
});
const DisplayHeading = ({
  invert,
  children,
  ...rest
}) => /*#__PURE__*/React.createElement(StyledDisplayHeading, _extends$2({}, safeRest(rest), {
  invert: invert
}), children);
DisplayHeading.propTypes = {
  /**
   * Invert the text color to appear light on dark backgrounds.
   */
  invert: PropTypes$1.bool,
  /**
   * The text. Can be text, other components, or HTML elements.
   */
  children: PropTypes$1.node.isRequired
};
DisplayHeading.defaultProps = {
  invert: false
};

const baseStyle = {
  transform: "rotate(-0.00001deg)",
  flexShrink: 0
};
const horizontalStyle = {
  ...baseStyle,
  width: "100%",
  height: "1px"
};
const verticalStyle = {
  ...baseStyle,
  display: "inline-block",
  width: "1px"
};
const StyledHairlineDivider = styled.hr(noSpacing, none, props => {
  if (props.vertical && props.gradient) {
    return {
      ...verticalStyle,
      "background-image": `
        linear-gradient(0deg, rgba(216, 216, 216, 0) 0%,
        ${colorGreyGainsboro} 12%,
        ${colorGreyGainsboro} 88%,
        rgba(216, 216, 216, 0) 100%)
      `
    };
  }
  if (props.vertical && !props.gradient) {
    return {
      ...verticalStyle,
      "background-color": colorGreyGainsboro
    };
  }
  if (!props.vertical && props.gradient) {
    return {
      ...horizontalStyle,
      "background-image": `
        linear-gradient(90deg, rgba(216, 216, 216, 0) 0%,
        ${colorGreyGainsboro} 7%,
        ${colorGreyGainsboro} 93%,
        rgba(216, 216, 216, 0) 100%)
      `
    };
  }
  return {
    ...horizontalStyle,
    "background-color": colorGreyGainsboro
  };
});
const HairlineDivider = ({
  vertical,
  gradient,
  ...rest
}) => /*#__PURE__*/React.createElement(StyledHairlineDivider, _extends$2({}, safeRest(rest), {
  vertical: vertical,
  gradient: gradient
}));
HairlineDivider.propTypes = {
  vertical: PropTypes$1.bool,
  gradient: PropTypes$1.bool
};
HairlineDivider.defaultProps = {
  vertical: false,
  gradient: false
};

var CSSTransition$1 = {exports: {}};

var addClass = {exports: {}};

var interopRequireDefault = {exports: {}};

interopRequireDefault.exports;

(function (module) {
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}
	module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports; 
} (interopRequireDefault));

var interopRequireDefaultExports = interopRequireDefault.exports;

var hasClass = {exports: {}};

hasClass.exports;

var hasRequiredHasClass;

function requireHasClass () {
	if (hasRequiredHasClass) return hasClass.exports;
	hasRequiredHasClass = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports.default = hasClass;

		/**
		 * Checks if a given element has a CSS class.
		 * 
		 * @param element the element
		 * @param className the CSS class name
		 */
		function hasClass(element, className) {
		  if (element.classList) return !!className && element.classList.contains(className);
		  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
		}

		module.exports = exports["default"]; 
	} (hasClass, hasClass.exports));
	return hasClass.exports;
}

addClass.exports;

(function (module, exports) {

	var _interopRequireDefault = interopRequireDefaultExports;

	exports.__esModule = true;
	exports.default = addClass;

	var _hasClass = _interopRequireDefault(requireHasClass());

	/**
	 * Adds a CSS class to a given element.
	 * 
	 * @param element the element
	 * @param className the CSS class name
	 */
	function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
	}

	module.exports = exports["default"]; 
} (addClass, addClass.exports));

var addClassExports = addClass.exports;

var removeClass = {exports: {}};

removeClass.exports;

(function (module, exports) {

	exports.__esModule = true;
	exports.default = removeClass;

	function replaceClassName(origClass, classToRemove) {
	  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	}
	/**
	 * Removes a CSS class from a given element.
	 * 
	 * @param element the element
	 * @param className the CSS class name
	 */


	function removeClass(element, className) {
	  if (element.classList) {
	    element.classList.remove(className);
	  } else if (typeof element.className === 'string') {
	    element.className = replaceClassName(element.className, className);
	  } else {
	    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
	  }
	}

	module.exports = exports["default"]; 
} (removeClass, removeClass.exports));

var removeClassExports = removeClass.exports;

var Transition$2 = {};

var reactDom = {exports: {}};

var reactDom_production_min = {};

var scheduler = {exports: {}};

var scheduler_production_min = {};

/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_production_min;

function requireScheduler_production_min () {
	if (hasRequiredScheduler_production_min) return scheduler_production_min;
	hasRequiredScheduler_production_min = 1;
	(function (exports) {
var f,g,h,k,l;
		if("undefined"===typeof window||"function"!==typeof MessageChannel){var p=null,q=null,t=function(){if(null!==p)try{var a=exports.unstable_now();p(!0,a);p=null;}catch(b){throw setTimeout(t,0),b;}},u=Date.now();exports.unstable_now=function(){return Date.now()-u};f=function(a){null!==p?setTimeout(f,0,a):(p=a,setTimeout(t,0));};g=function(a,b){q=setTimeout(a,b);};h=function(){clearTimeout(q);};k=function(){return !1};l=exports.unstable_forceFrameRate=function(){};}else {var w=window.performance,x=window.Date,
		y=window.setTimeout,z=window.clearTimeout;if("undefined"!==typeof console){var A=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");"function"!==typeof A&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");}if("object"===
		typeof w&&"function"===typeof w.now)exports.unstable_now=function(){return w.now()};else {var B=x.now();exports.unstable_now=function(){return x.now()-B};}var C=!1,D=null,E=-1,F=5,G=0;k=function(){return exports.unstable_now()>=G};l=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):F=0<a?Math.floor(1E3/a):5;};var H=new MessageChannel,I=H.port2;H.port1.onmessage=
		function(){if(null!==D){var a=exports.unstable_now();G=a+F;try{D(!0,a)?I.postMessage(null):(C=!1,D=null);}catch(b){throw I.postMessage(null),b;}}else C=!1;};f=function(a){D=a;C||(C=!0,I.postMessage(null));};g=function(a,b){E=y(function(){a(exports.unstable_now());},b);};h=function(){z(E);E=-1;};}function J(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<K(e,b))a[d]=b,a[c]=e,c=d;else break a}}function L(a){a=a[0];return void 0===a?null:a}
		function M(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>K(n,c))void 0!==r&&0>K(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>K(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function K(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var N=[],O=[],P=1,Q=null,R=3,S=!1,T=!1,U=!1;
		function V(a){for(var b=L(O);null!==b;){if(null===b.callback)M(O);else if(b.startTime<=a)M(O),b.sortIndex=b.expirationTime,J(N,b);else break;b=L(O);}}function W(a){U=!1;V(a);if(!T)if(null!==L(N))T=!0,f(X);else {var b=L(O);null!==b&&g(W,b.startTime-a);}}
		function X(a,b){T=!1;U&&(U=!1,h());S=!0;var c=R;try{V(b);for(Q=L(N);null!==Q&&(!(Q.expirationTime>b)||a&&!k());){var d=Q.callback;if(null!==d){Q.callback=null;R=Q.priorityLevel;var e=d(Q.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?Q.callback=e:Q===L(N)&&M(N);V(b);}else M(N);Q=L(N);}if(null!==Q)var m=!0;else {var n=L(O);null!==n&&g(W,n.startTime-b);m=!1;}return m}finally{Q=null,R=c,S=!1;}}
		function Y(a){switch(a){case 1:return -1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}var Z=l;exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null;};exports.unstable_continueExecution=function(){T||S||(T=!0,f(X));};
		exports.unstable_getCurrentPriorityLevel=function(){return R};exports.unstable_getFirstCallbackNode=function(){return L(N)};exports.unstable_next=function(a){switch(R){case 1:case 2:case 3:var b=3;break;default:b=R;}var c=R;R=b;try{return a()}finally{R=c;}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=Z;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=R;R=a;try{return b()}finally{R=c;}};
		exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();if("object"===typeof c&&null!==c){var e=c.delay;e="number"===typeof e&&0<e?d+e:d;c="number"===typeof c.timeout?c.timeout:Y(a);}else c=Y(a),e=d;c=e+c;a={id:P++,callback:b,priorityLevel:a,startTime:e,expirationTime:c,sortIndex:-1};e>d?(a.sortIndex=e,J(O,a),null===L(N)&&a===L(O)&&(U?h():U=!0,g(W,e-d))):(a.sortIndex=c,J(N,a),T||S||(T=!0,f(X)));return a};
		exports.unstable_shouldYield=function(){var a=exports.unstable_now();V(a);var b=L(N);return b!==Q&&null!==Q&&null!==b&&null!==b.callback&&b.startTime<=a&&b.expirationTime<Q.expirationTime||k()};exports.unstable_wrapCallback=function(a){var b=R;return function(){var c=R;R=b;try{return a.apply(this,arguments)}finally{R=c;}}}; 
	} (scheduler_production_min));
	return scheduler_production_min;
}

var scheduler_development = {};

/** @license React v0.19.1
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_development;

function requireScheduler_development () {
	if (hasRequiredScheduler_development) return scheduler_development;
	hasRequiredScheduler_development = 1;
	(function (exports) {



		if (process.env.NODE_ENV !== "production") {
		  (function() {

		var enableSchedulerDebugging = false;
		var enableProfiling = true;

		var requestHostCallback;
		var requestHostTimeout;
		var cancelHostTimeout;
		var shouldYieldToHost;
		var requestPaint;

		if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
		// implementation using setTimeout.
		typeof window === 'undefined' || // Check if MessageChannel is supported, too.
		typeof MessageChannel !== 'function') {
		  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
		  // fallback to a naive implementation.
		  var _callback = null;
		  var _timeoutID = null;

		  var _flushCallback = function () {
		    if (_callback !== null) {
		      try {
		        var currentTime = exports.unstable_now();
		        var hasRemainingTime = true;

		        _callback(hasRemainingTime, currentTime);

		        _callback = null;
		      } catch (e) {
		        setTimeout(_flushCallback, 0);
		        throw e;
		      }
		    }
		  };

		  var initialTime = Date.now();

		  exports.unstable_now = function () {
		    return Date.now() - initialTime;
		  };

		  requestHostCallback = function (cb) {
		    if (_callback !== null) {
		      // Protect against re-entrancy.
		      setTimeout(requestHostCallback, 0, cb);
		    } else {
		      _callback = cb;
		      setTimeout(_flushCallback, 0);
		    }
		  };

		  requestHostTimeout = function (cb, ms) {
		    _timeoutID = setTimeout(cb, ms);
		  };

		  cancelHostTimeout = function () {
		    clearTimeout(_timeoutID);
		  };

		  shouldYieldToHost = function () {
		    return false;
		  };

		  requestPaint = exports.unstable_forceFrameRate = function () {};
		} else {
		  // Capture local references to native APIs, in case a polyfill overrides them.
		  var performance = window.performance;
		  var _Date = window.Date;
		  var _setTimeout = window.setTimeout;
		  var _clearTimeout = window.clearTimeout;

		  if (typeof console !== 'undefined') {
		    // TODO: Scheduler no longer requires these methods to be polyfilled. But
		    // maybe we want to continue warning if they don't exist, to preserve the
		    // option to rely on it in the future?
		    var requestAnimationFrame = window.requestAnimationFrame;
		    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link

		    if (typeof requestAnimationFrame !== 'function') {
		      // Using console['error'] to evade Babel and ESLint
		      console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
		    }

		    if (typeof cancelAnimationFrame !== 'function') {
		      // Using console['error'] to evade Babel and ESLint
		      console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
		    }
		  }

		  if (typeof performance === 'object' && typeof performance.now === 'function') {
		    exports.unstable_now = function () {
		      return performance.now();
		    };
		  } else {
		    var _initialTime = _Date.now();

		    exports.unstable_now = function () {
		      return _Date.now() - _initialTime;
		    };
		  }

		  var isMessageLoopRunning = false;
		  var scheduledHostCallback = null;
		  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
		  // thread, like user events. By default, it yields multiple times per frame.
		  // It does not attempt to align with frame boundaries, since most tasks don't
		  // need to be frame aligned; for those that do, use requestAnimationFrame.

		  var yieldInterval = 5;
		  var deadline = 0; // TODO: Make this configurable

		  {
		    // `isInputPending` is not available. Since we have no way of knowing if
		    // there's pending input, always yield at the end of the frame.
		    shouldYieldToHost = function () {
		      return exports.unstable_now() >= deadline;
		    }; // Since we yield every frame regardless, `requestPaint` has no effect.


		    requestPaint = function () {};
		  }

		  exports.unstable_forceFrameRate = function (fps) {
		    if (fps < 0 || fps > 125) {
		      // Using console['error'] to evade Babel and ESLint
		      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
		      return;
		    }

		    if (fps > 0) {
		      yieldInterval = Math.floor(1000 / fps);
		    } else {
		      // reset the framerate
		      yieldInterval = 5;
		    }
		  };

		  var performWorkUntilDeadline = function () {
		    if (scheduledHostCallback !== null) {
		      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
		      // cycle. This means there's always time remaining at the beginning of
		      // the message event.

		      deadline = currentTime + yieldInterval;
		      var hasTimeRemaining = true;

		      try {
		        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

		        if (!hasMoreWork) {
		          isMessageLoopRunning = false;
		          scheduledHostCallback = null;
		        } else {
		          // If there's more work, schedule the next message event at the end
		          // of the preceding one.
		          port.postMessage(null);
		        }
		      } catch (error) {
		        // If a scheduler task throws, exit the current browser task so the
		        // error can be observed.
		        port.postMessage(null);
		        throw error;
		      }
		    } else {
		      isMessageLoopRunning = false;
		    } // Yielding to the browser will give it a chance to paint, so we can
		  };

		  var channel = new MessageChannel();
		  var port = channel.port2;
		  channel.port1.onmessage = performWorkUntilDeadline;

		  requestHostCallback = function (callback) {
		    scheduledHostCallback = callback;

		    if (!isMessageLoopRunning) {
		      isMessageLoopRunning = true;
		      port.postMessage(null);
		    }
		  };

		  requestHostTimeout = function (callback, ms) {
		    taskTimeoutID = _setTimeout(function () {
		      callback(exports.unstable_now());
		    }, ms);
		  };

		  cancelHostTimeout = function () {
		    _clearTimeout(taskTimeoutID);

		    taskTimeoutID = -1;
		  };
		}

		function push(heap, node) {
		  var index = heap.length;
		  heap.push(node);
		  siftUp(heap, node, index);
		}
		function peek(heap) {
		  var first = heap[0];
		  return first === undefined ? null : first;
		}
		function pop(heap) {
		  var first = heap[0];

		  if (first !== undefined) {
		    var last = heap.pop();

		    if (last !== first) {
		      heap[0] = last;
		      siftDown(heap, last, 0);
		    }

		    return first;
		  } else {
		    return null;
		  }
		}

		function siftUp(heap, node, i) {
		  var index = i;

		  while (true) {
		    var parentIndex = index - 1 >>> 1;
		    var parent = heap[parentIndex];

		    if (parent !== undefined && compare(parent, node) > 0) {
		      // The parent is larger. Swap positions.
		      heap[parentIndex] = node;
		      heap[index] = parent;
		      index = parentIndex;
		    } else {
		      // The parent is smaller. Exit.
		      return;
		    }
		  }
		}

		function siftDown(heap, node, i) {
		  var index = i;
		  var length = heap.length;

		  while (index < length) {
		    var leftIndex = (index + 1) * 2 - 1;
		    var left = heap[leftIndex];
		    var rightIndex = leftIndex + 1;
		    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

		    if (left !== undefined && compare(left, node) < 0) {
		      if (right !== undefined && compare(right, left) < 0) {
		        heap[index] = right;
		        heap[rightIndex] = node;
		        index = rightIndex;
		      } else {
		        heap[index] = left;
		        heap[leftIndex] = node;
		        index = leftIndex;
		      }
		    } else if (right !== undefined && compare(right, node) < 0) {
		      heap[index] = right;
		      heap[rightIndex] = node;
		      index = rightIndex;
		    } else {
		      // Neither child is smaller. Exit.
		      return;
		    }
		  }
		}

		function compare(a, b) {
		  // Compare sort index first, then task id.
		  var diff = a.sortIndex - b.sortIndex;
		  return diff !== 0 ? diff : a.id - b.id;
		}

		// TODO: Use symbols?
		var NoPriority = 0;
		var ImmediatePriority = 1;
		var UserBlockingPriority = 2;
		var NormalPriority = 3;
		var LowPriority = 4;
		var IdlePriority = 5;

		var runIdCounter = 0;
		var mainThreadIdCounter = 0;
		var profilingStateSize = 4;
		var sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer
		typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
		typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
		;
		var profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

		var PRIORITY = 0;
		var CURRENT_TASK_ID = 1;
		var CURRENT_RUN_ID = 2;
		var QUEUE_SIZE = 3;

		{
		  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
		  // array might include canceled tasks.

		  profilingState[QUEUE_SIZE] = 0;
		  profilingState[CURRENT_TASK_ID] = 0;
		} // Bytes per element is 4


		var INITIAL_EVENT_LOG_SIZE = 131072;
		var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

		var eventLogSize = 0;
		var eventLogBuffer = null;
		var eventLog = null;
		var eventLogIndex = 0;
		var TaskStartEvent = 1;
		var TaskCompleteEvent = 2;
		var TaskErrorEvent = 3;
		var TaskCancelEvent = 4;
		var TaskRunEvent = 5;
		var TaskYieldEvent = 6;
		var SchedulerSuspendEvent = 7;
		var SchedulerResumeEvent = 8;

		function logEvent(entries) {
		  if (eventLog !== null) {
		    var offset = eventLogIndex;
		    eventLogIndex += entries.length;

		    if (eventLogIndex + 1 > eventLogSize) {
		      eventLogSize *= 2;

		      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
		        // Using console['error'] to evade Babel and ESLint
		        console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
		        stopLoggingProfilingEvents();
		        return;
		      }

		      var newEventLog = new Int32Array(eventLogSize * 4);
		      newEventLog.set(eventLog);
		      eventLogBuffer = newEventLog.buffer;
		      eventLog = newEventLog;
		    }

		    eventLog.set(entries, offset);
		  }
		}

		function startLoggingProfilingEvents() {
		  eventLogSize = INITIAL_EVENT_LOG_SIZE;
		  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
		  eventLog = new Int32Array(eventLogBuffer);
		  eventLogIndex = 0;
		}
		function stopLoggingProfilingEvents() {
		  var buffer = eventLogBuffer;
		  eventLogSize = 0;
		  eventLogBuffer = null;
		  eventLog = null;
		  eventLogIndex = 0;
		  return buffer;
		}
		function markTaskStart(task, ms) {
		  {
		    profilingState[QUEUE_SIZE]++;

		    if (eventLog !== null) {
		      // performance.now returns a float, representing milliseconds. When the
		      // event is logged, it's coerced to an int. Convert to microseconds to
		      // maintain extra degrees of precision.
		      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
		    }
		  }
		}
		function markTaskCompleted(task, ms) {
		  {
		    profilingState[PRIORITY] = NoPriority;
		    profilingState[CURRENT_TASK_ID] = 0;
		    profilingState[QUEUE_SIZE]--;

		    if (eventLog !== null) {
		      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
		    }
		  }
		}
		function markTaskCanceled(task, ms) {
		  {
		    profilingState[QUEUE_SIZE]--;

		    if (eventLog !== null) {
		      logEvent([TaskCancelEvent, ms * 1000, task.id]);
		    }
		  }
		}
		function markTaskErrored(task, ms) {
		  {
		    profilingState[PRIORITY] = NoPriority;
		    profilingState[CURRENT_TASK_ID] = 0;
		    profilingState[QUEUE_SIZE]--;

		    if (eventLog !== null) {
		      logEvent([TaskErrorEvent, ms * 1000, task.id]);
		    }
		  }
		}
		function markTaskRun(task, ms) {
		  {
		    runIdCounter++;
		    profilingState[PRIORITY] = task.priorityLevel;
		    profilingState[CURRENT_TASK_ID] = task.id;
		    profilingState[CURRENT_RUN_ID] = runIdCounter;

		    if (eventLog !== null) {
		      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
		    }
		  }
		}
		function markTaskYield(task, ms) {
		  {
		    profilingState[PRIORITY] = NoPriority;
		    profilingState[CURRENT_TASK_ID] = 0;
		    profilingState[CURRENT_RUN_ID] = 0;

		    if (eventLog !== null) {
		      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
		    }
		  }
		}
		function markSchedulerSuspended(ms) {
		  {
		    mainThreadIdCounter++;

		    if (eventLog !== null) {
		      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
		    }
		  }
		}
		function markSchedulerUnsuspended(ms) {
		  {
		    if (eventLog !== null) {
		      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
		    }
		  }
		}

		/* eslint-disable no-var */
		// Math.pow(2, 30) - 1
		// 0b111111111111111111111111111111

		var maxSigned31BitInt = 1073741823; // Times out immediately

		var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

		var USER_BLOCKING_PRIORITY = 250;
		var NORMAL_PRIORITY_TIMEOUT = 5000;
		var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

		var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap

		var taskQueue = [];
		var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

		var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
		var currentTask = null;
		var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

		var isPerformingWork = false;
		var isHostCallbackScheduled = false;
		var isHostTimeoutScheduled = false;

		function advanceTimers(currentTime) {
		  // Check for tasks that are no longer delayed and add them to the queue.
		  var timer = peek(timerQueue);

		  while (timer !== null) {
		    if (timer.callback === null) {
		      // Timer was cancelled.
		      pop(timerQueue);
		    } else if (timer.startTime <= currentTime) {
		      // Timer fired. Transfer to the task queue.
		      pop(timerQueue);
		      timer.sortIndex = timer.expirationTime;
		      push(taskQueue, timer);

		      {
		        markTaskStart(timer, currentTime);
		        timer.isQueued = true;
		      }
		    } else {
		      // Remaining timers are pending.
		      return;
		    }

		    timer = peek(timerQueue);
		  }
		}

		function handleTimeout(currentTime) {
		  isHostTimeoutScheduled = false;
		  advanceTimers(currentTime);

		  if (!isHostCallbackScheduled) {
		    if (peek(taskQueue) !== null) {
		      isHostCallbackScheduled = true;
		      requestHostCallback(flushWork);
		    } else {
		      var firstTimer = peek(timerQueue);

		      if (firstTimer !== null) {
		        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		      }
		    }
		  }
		}

		function flushWork(hasTimeRemaining, initialTime) {
		  {
		    markSchedulerUnsuspended(initialTime);
		  } // We'll need a host callback the next time work is scheduled.


		  isHostCallbackScheduled = false;

		  if (isHostTimeoutScheduled) {
		    // We scheduled a timeout but it's no longer needed. Cancel it.
		    isHostTimeoutScheduled = false;
		    cancelHostTimeout();
		  }

		  isPerformingWork = true;
		  var previousPriorityLevel = currentPriorityLevel;

		  try {
		    if (enableProfiling) {
		      try {
		        return workLoop(hasTimeRemaining, initialTime);
		      } catch (error) {
		        if (currentTask !== null) {
		          var currentTime = exports.unstable_now();
		          markTaskErrored(currentTask, currentTime);
		          currentTask.isQueued = false;
		        }

		        throw error;
		      }
		    }
		  } finally {
		    currentTask = null;
		    currentPriorityLevel = previousPriorityLevel;
		    isPerformingWork = false;

		    {
		      var _currentTime = exports.unstable_now();

		      markSchedulerSuspended(_currentTime);
		    }
		  }
		}

		function workLoop(hasTimeRemaining, initialTime) {
		  var currentTime = initialTime;
		  advanceTimers(currentTime);
		  currentTask = peek(taskQueue);

		  while (currentTask !== null && !(enableSchedulerDebugging )) {
		    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
		      // This currentTask hasn't expired, and we've reached the deadline.
		      break;
		    }

		    var callback = currentTask.callback;

		    if (callback !== null) {
		      currentTask.callback = null;
		      currentPriorityLevel = currentTask.priorityLevel;
		      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
		      markTaskRun(currentTask, currentTime);
		      var continuationCallback = callback(didUserCallbackTimeout);
		      currentTime = exports.unstable_now();

		      if (typeof continuationCallback === 'function') {
		        currentTask.callback = continuationCallback;
		        markTaskYield(currentTask, currentTime);
		      } else {
		        {
		          markTaskCompleted(currentTask, currentTime);
		          currentTask.isQueued = false;
		        }

		        if (currentTask === peek(taskQueue)) {
		          pop(taskQueue);
		        }
		      }

		      advanceTimers(currentTime);
		    } else {
		      pop(taskQueue);
		    }

		    currentTask = peek(taskQueue);
		  } // Return whether there's additional work


		  if (currentTask !== null) {
		    return true;
		  } else {
		    var firstTimer = peek(timerQueue);

		    if (firstTimer !== null) {
		      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		    }

		    return false;
		  }
		}

		function unstable_runWithPriority(priorityLevel, eventHandler) {
		  switch (priorityLevel) {
		    case ImmediatePriority:
		    case UserBlockingPriority:
		    case NormalPriority:
		    case LowPriority:
		    case IdlePriority:
		      break;

		    default:
		      priorityLevel = NormalPriority;
		  }

		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;

		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		}

		function unstable_next(eventHandler) {
		  var priorityLevel;

		  switch (currentPriorityLevel) {
		    case ImmediatePriority:
		    case UserBlockingPriority:
		    case NormalPriority:
		      // Shift down to normal priority
		      priorityLevel = NormalPriority;
		      break;

		    default:
		      // Anything lower than normal priority should remain at the current level.
		      priorityLevel = currentPriorityLevel;
		      break;
		  }

		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;

		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		}

		function unstable_wrapCallback(callback) {
		  var parentPriorityLevel = currentPriorityLevel;
		  return function () {
		    // This is a fork of runWithPriority, inlined for performance.
		    var previousPriorityLevel = currentPriorityLevel;
		    currentPriorityLevel = parentPriorityLevel;

		    try {
		      return callback.apply(this, arguments);
		    } finally {
		      currentPriorityLevel = previousPriorityLevel;
		    }
		  };
		}

		function timeoutForPriorityLevel(priorityLevel) {
		  switch (priorityLevel) {
		    case ImmediatePriority:
		      return IMMEDIATE_PRIORITY_TIMEOUT;

		    case UserBlockingPriority:
		      return USER_BLOCKING_PRIORITY;

		    case IdlePriority:
		      return IDLE_PRIORITY;

		    case LowPriority:
		      return LOW_PRIORITY_TIMEOUT;

		    case NormalPriority:
		    default:
		      return NORMAL_PRIORITY_TIMEOUT;
		  }
		}

		function unstable_scheduleCallback(priorityLevel, callback, options) {
		  var currentTime = exports.unstable_now();
		  var startTime;
		  var timeout;

		  if (typeof options === 'object' && options !== null) {
		    var delay = options.delay;

		    if (typeof delay === 'number' && delay > 0) {
		      startTime = currentTime + delay;
		    } else {
		      startTime = currentTime;
		    }

		    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
		  } else {
		    timeout = timeoutForPriorityLevel(priorityLevel);
		    startTime = currentTime;
		  }

		  var expirationTime = startTime + timeout;
		  var newTask = {
		    id: taskIdCounter++,
		    callback: callback,
		    priorityLevel: priorityLevel,
		    startTime: startTime,
		    expirationTime: expirationTime,
		    sortIndex: -1
		  };

		  {
		    newTask.isQueued = false;
		  }

		  if (startTime > currentTime) {
		    // This is a delayed task.
		    newTask.sortIndex = startTime;
		    push(timerQueue, newTask);

		    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
		      // All tasks are delayed, and this is the task with the earliest delay.
		      if (isHostTimeoutScheduled) {
		        // Cancel an existing timeout.
		        cancelHostTimeout();
		      } else {
		        isHostTimeoutScheduled = true;
		      } // Schedule a timeout.


		      requestHostTimeout(handleTimeout, startTime - currentTime);
		    }
		  } else {
		    newTask.sortIndex = expirationTime;
		    push(taskQueue, newTask);

		    {
		      markTaskStart(newTask, currentTime);
		      newTask.isQueued = true;
		    } // Schedule a host callback, if needed. If we're already performing work,
		    // wait until the next time we yield.


		    if (!isHostCallbackScheduled && !isPerformingWork) {
		      isHostCallbackScheduled = true;
		      requestHostCallback(flushWork);
		    }
		  }

		  return newTask;
		}

		function unstable_pauseExecution() {
		}

		function unstable_continueExecution() {

		  if (!isHostCallbackScheduled && !isPerformingWork) {
		    isHostCallbackScheduled = true;
		    requestHostCallback(flushWork);
		  }
		}

		function unstable_getFirstCallbackNode() {
		  return peek(taskQueue);
		}

		function unstable_cancelCallback(task) {
		  {
		    if (task.isQueued) {
		      var currentTime = exports.unstable_now();
		      markTaskCanceled(task, currentTime);
		      task.isQueued = false;
		    }
		  } // Null out the callback to indicate the task has been canceled. (Can't
		  // remove from the queue because you can't remove arbitrary nodes from an
		  // array based heap, only the first one.)


		  task.callback = null;
		}

		function unstable_getCurrentPriorityLevel() {
		  return currentPriorityLevel;
		}

		function unstable_shouldYield() {
		  var currentTime = exports.unstable_now();
		  advanceTimers(currentTime);
		  var firstTask = peek(taskQueue);
		  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
		}

		var unstable_requestPaint = requestPaint;
		var unstable_Profiling =  {
		  startLoggingProfilingEvents: startLoggingProfilingEvents,
		  stopLoggingProfilingEvents: stopLoggingProfilingEvents,
		  sharedProfilingBuffer: sharedProfilingBuffer
		} ;

		exports.unstable_IdlePriority = IdlePriority;
		exports.unstable_ImmediatePriority = ImmediatePriority;
		exports.unstable_LowPriority = LowPriority;
		exports.unstable_NormalPriority = NormalPriority;
		exports.unstable_Profiling = unstable_Profiling;
		exports.unstable_UserBlockingPriority = UserBlockingPriority;
		exports.unstable_cancelCallback = unstable_cancelCallback;
		exports.unstable_continueExecution = unstable_continueExecution;
		exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
		exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
		exports.unstable_next = unstable_next;
		exports.unstable_pauseExecution = unstable_pauseExecution;
		exports.unstable_requestPaint = unstable_requestPaint;
		exports.unstable_runWithPriority = unstable_runWithPriority;
		exports.unstable_scheduleCallback = unstable_scheduleCallback;
		exports.unstable_shouldYield = unstable_shouldYield;
		exports.unstable_wrapCallback = unstable_wrapCallback;
		  })();
		} 
	} (scheduler_development));
	return scheduler_development;
}

var hasRequiredScheduler;

function requireScheduler () {
	if (hasRequiredScheduler) return scheduler.exports;
	hasRequiredScheduler = 1;

	if (process.env.NODE_ENV === 'production') {
	  scheduler.exports = requireScheduler_production_min();
	} else {
	  scheduler.exports = requireScheduler_development();
	}
	return scheduler.exports;
}

/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactDom_production_min;

function requireReactDom_production_min () {
	if (hasRequiredReactDom_production_min) return reactDom_production_min;
	hasRequiredReactDom_production_min = 1;
var aa=reactExports,n=requireObjectAssign(),r=requireScheduler();function u(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(u(227));
	function ba(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l);}catch(m){this.onError(m);}}var da=!1,ea=null,fa=!1,ha=null,ia={onError:function(a){da=!0;ea=a;}};function ja(a,b,c,d,e,f,g,h,k){da=!1;ea=null;ba.apply(ia,arguments);}function ka(a,b,c,d,e,f,g,h,k){ja.apply(this,arguments);if(da){if(da){var l=ea;da=!1;ea=null;}else throw Error(u(198));fa||(fa=!0,ha=l);}}var la=null,ma=null,na=null;
	function oa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=na(c);ka(d,b,void 0,a);a.currentTarget=null;}var pa=null,qa={};
	function ra(){if(pa)for(var a in qa){var b=qa[a],c=pa.indexOf(a);if(!(-1<c))throw Error(u(96,a));if(!sa[c]){if(!b.extractEvents)throw Error(u(97,a));sa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;if(ta.hasOwnProperty(h))throw Error(u(99,h));ta[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ua(k[e],g,h);e=!0;}else f.registrationName?(ua(f.registrationName,g,h),e=!0):e=!1;if(!e)throw Error(u(98,d,a));}}}}
	function ua(a,b,c){if(va[a])throw Error(u(100,a));va[a]=b;wa[a]=b.eventTypes[c].dependencies;}var sa=[],ta={},va={},wa={};function xa(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];if(!qa.hasOwnProperty(c)||qa[c]!==d){if(qa[c])throw Error(u(102,c));qa[c]=d;b=!0;}}b&&ra();}var ya=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),za=null,Aa=null,Ba=null;
	function Ca(a){if(a=ma(a)){if("function"!==typeof za)throw Error(u(280));var b=a.stateNode;b&&(b=la(b),za(a.stateNode,a.type,b));}}function Da(a){Aa?Ba?Ba.push(a):Ba=[a]:Aa=a;}function Ea(){if(Aa){var a=Aa,b=Ba;Ba=Aa=null;Ca(a);if(b)for(a=0;a<b.length;a++)Ca(b[a]);}}function Fa(a,b){return a(b)}function Ga(a,b,c,d,e){return a(b,c,d,e)}function Ha(){}var Ia=Fa,Ja=!1,Ka=!1;function La(){if(null!==Aa||null!==Ba)Ha(),Ea();}
	function Ma(a,b,c){if(Ka)return a(b,c);Ka=!0;try{return Ia(a,b,c)}finally{Ka=!1,La();}}var Na=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Oa=Object.prototype.hasOwnProperty,Pa={},Qa={};
	function Ra(a){if(Oa.call(Qa,a))return !0;if(Oa.call(Pa,a))return !1;if(Na.test(a))return Qa[a]=!0;Pa[a]=!0;return !1}function Sa(a,b,c,d){if(null!==c&&0===c.type)return !1;switch(typeof b){case "function":case "symbol":return !0;case "boolean":if(d)return !1;if(null!==c)return !c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return "data-"!==a&&"aria-"!==a;default:return !1}}
	function Ta(a,b,c,d){if(null===b||"undefined"===typeof b||Sa(a,b,c,d))return !0;if(d)return !1;if(null!==c)switch(c.type){case 3:return !b;case 4:return !1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return !1}function v(a,b,c,d,e,f){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;}var C={};
	"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){C[a]=new v(a,0,!1,a,null,!1);});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];C[b]=new v(b,1,!1,a[1],null,!1);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){C[a]=new v(a,2,!1,a.toLowerCase(),null,!1);});
	["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){C[a]=new v(a,2,!1,a,null,!1);});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){C[a]=new v(a,3,!1,a.toLowerCase(),null,!1);});
	["checked","multiple","muted","selected"].forEach(function(a){C[a]=new v(a,3,!0,a,null,!1);});["capture","download"].forEach(function(a){C[a]=new v(a,4,!1,a,null,!1);});["cols","rows","size","span"].forEach(function(a){C[a]=new v(a,6,!1,a,null,!1);});["rowSpan","start"].forEach(function(a){C[a]=new v(a,5,!1,a.toLowerCase(),null,!1);});var Ua=/[\-:]([a-z])/g;function Va(a){return a[1].toUpperCase()}
	"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(Ua,
	Va);C[b]=new v(b,1,!1,a,null,!1);});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1);});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1);});["tabIndex","crossOrigin"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!1);});
	C.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0);["src","href","action","formAction"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!0);});var Wa=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Wa.hasOwnProperty("ReactCurrentDispatcher")||(Wa.ReactCurrentDispatcher={current:null});Wa.hasOwnProperty("ReactCurrentBatchConfig")||(Wa.ReactCurrentBatchConfig={suspense:null});
	function Xa(a,b,c,d){var e=C.hasOwnProperty(b)?C[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(Ta(b,c,e,d)&&(c=null),d||null===e?Ra(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))));}
	var Ya=/^(.*)[\\\/]/,E="function"===typeof Symbol&&Symbol.for,Za=E?Symbol.for("react.element"):60103,$a=E?Symbol.for("react.portal"):60106,ab=E?Symbol.for("react.fragment"):60107,bb=E?Symbol.for("react.strict_mode"):60108,cb=E?Symbol.for("react.profiler"):60114,db=E?Symbol.for("react.provider"):60109,eb=E?Symbol.for("react.context"):60110,fb=E?Symbol.for("react.concurrent_mode"):60111,gb=E?Symbol.for("react.forward_ref"):60112,hb=E?Symbol.for("react.suspense"):60113,ib=E?Symbol.for("react.suspense_list"):
	60120,jb=E?Symbol.for("react.memo"):60115,kb=E?Symbol.for("react.lazy"):60116,lb=E?Symbol.for("react.block"):60121,mb="function"===typeof Symbol&&Symbol.iterator;function nb(a){if(null===a||"object"!==typeof a)return null;a=mb&&a[mb]||a["@@iterator"];return "function"===typeof a?a:null}function ob(a){if(-1===a._status){a._status=0;var b=a._ctor;b=b();a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b);},function(b){0===a._status&&(a._status=2,a._result=b);});}}
	function pb(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ab:return "Fragment";case $a:return "Portal";case cb:return "Profiler";case bb:return "StrictMode";case hb:return "Suspense";case ib:return "SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case eb:return "Context.Consumer";case db:return "Context.Provider";case gb:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+")":
	"ForwardRef");case jb:return pb(a.type);case lb:return pb(a.render);case kb:if(a=1===a._status?a._result:null)return pb(a)}return null}function qb(a){var b="";do{a:switch(a.tag){case 3:case 4:case 6:case 7:case 10:case 9:var c="";break a;default:var d=a._debugOwner,e=a._debugSource,f=pb(a.type);c=null;d&&(c=pb(d.type));d=f;f="";e?f=" (at "+e.fileName.replace(Ya,"")+":"+e.lineNumber+")":c&&(f=" (created by "+c+")");c="\n    in "+(d||"Unknown")+f;}b+=c;a=a.return;}while(a);return b}
	function rb(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return ""}}function sb(a){var b=a.type;return (a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
	function tb(a){var b=sb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a);}});Object.defineProperty(a,b,{enumerable:c.enumerable});return {getValue:function(){return d},setValue:function(a){d=""+a;},stopTracking:function(){a._valueTracker=
	null;delete a[b];}}}}function xb(a){a._valueTracker||(a._valueTracker=tb(a));}function yb(a){if(!a)return !1;var b=a._valueTracker;if(!b)return !0;var c=b.getValue();var d="";a&&(d=sb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function zb(a,b){var c=b.checked;return n({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}
	function Ab(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=rb(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value};}function Bb(a,b){b=b.checked;null!=b&&Xa(a,"checked",b,!1);}
	function Cb(a,b){Bb(a,b);var c=rb(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c;}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Db(a,b.type,c):b.hasOwnProperty("defaultValue")&&Db(a,b.type,rb(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked);}
	function Eb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b;}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c);}
	function Db(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c);}function Fb(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a);});return b}function Gb(a,b){a=n({children:void 0},b);if(b=Fb(b.children))a.children=b;return a}
	function Hb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0);}else {c=""+rb(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e]);}null!==b&&(b.selected=!0);}}
	function Ib(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(u(91));return n({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function Jb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(u(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(u(93));c=c[0];}b=c;}null==b&&(b="");c=b;}a._wrapperState={initialValue:rb(c)};}
	function Kb(a,b){var c=rb(b.value),d=rb(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d);}function Lb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b);}var Mb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
	function Nb(a){switch(a){case "svg":return "http://www.w3.org/2000/svg";case "math":return "http://www.w3.org/1998/Math/MathML";default:return "http://www.w3.org/1999/xhtml"}}function Ob(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?Nb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
	var Pb,Qb=function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a}(function(a,b){if(a.namespaceURI!==Mb.svg||"innerHTML"in a)a.innerHTML=b;else {Pb=Pb||document.createElement("div");Pb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=Pb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
	function Rb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b;}function Sb(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Tb={animationend:Sb("Animation","AnimationEnd"),animationiteration:Sb("Animation","AnimationIteration"),animationstart:Sb("Animation","AnimationStart"),transitionend:Sb("Transition","TransitionEnd")},Ub={},Vb={};
	ya&&(Vb=document.createElement("div").style,"AnimationEvent"in window||(delete Tb.animationend.animation,delete Tb.animationiteration.animation,delete Tb.animationstart.animation),"TransitionEvent"in window||delete Tb.transitionend.transition);function Wb(a){if(Ub[a])return Ub[a];if(!Tb[a])return a;var b=Tb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Vb)return Ub[a]=b[c];return a}
	var Xb=Wb("animationend"),Yb=Wb("animationiteration"),Zb=Wb("animationstart"),$b=Wb("transitionend"),ac="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),bc=new ("function"===typeof WeakMap?WeakMap:Map);function cc(a){var b=bc.get(a);void 0===b&&(b=new Map,bc.set(a,b));return b}
	function dc(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else {a=b;do b=a,0!==(b.effectTag&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function ec(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function fc(a){if(dc(a)!==a)throw Error(u(188));}
	function gc(a){var b=a.alternate;if(!b){b=dc(a);if(null===b)throw Error(u(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return fc(e),a;if(f===d)return fc(e),b;f=f.sibling;}throw Error(u(188));}if(c.return!==d.return)c=e,d=f;else {for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===
	c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}if(!g)throw Error(u(189));}}if(c.alternate!==d)throw Error(u(190));}if(3!==c.tag)throw Error(u(188));return c.stateNode.current===c?a:b}function hc(a){a=gc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else {if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return null}
	function ic(a,b){if(null==b)throw Error(u(30));if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function jc(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a);}var kc=null;
	function lc(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)oa(a,b[d],c[d]);else b&&oa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a);}}function mc(a){null!==a&&(kc=ic(kc,a));a=kc;kc=null;if(a){jc(a,lc);if(kc)throw Error(u(95));if(fa)throw a=ha,fa=!1,ha=null,a;}}
	function nc(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function oc(a){if(!ya)return !1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}var pc=[];function qc(a){a.topLevelType=null;a.nativeEvent=null;a.targetInst=null;a.ancestors.length=0;10>pc.length&&pc.push(a);}
	function rc(a,b,c,d){if(pc.length){var e=pc.pop();e.topLevelType=a;e.eventSystemFlags=d;e.nativeEvent=b;e.targetInst=c;return e}return {topLevelType:a,eventSystemFlags:d,nativeEvent:b,targetInst:c,ancestors:[]}}
	function sc(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d=c;if(3===d.tag)d=d.stateNode.containerInfo;else {for(;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo;}if(!d)break;b=c.tag;5!==b&&6!==b||a.ancestors.push(c);c=tc(d);}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=nc(a.nativeEvent);d=a.topLevelType;var f=a.nativeEvent,g=a.eventSystemFlags;0===c&&(g|=64);for(var h=null,k=0;k<sa.length;k++){var l=sa[k];l&&(l=l.extractEvents(d,b,f,e,g))&&(h=
	ic(h,l));}mc(h);}}function uc(a,b,c){if(!c.has(a)){switch(a){case "scroll":vc(b,"scroll",!0);break;case "focus":case "blur":vc(b,"focus",!0);vc(b,"blur",!0);c.set("blur",null);c.set("focus",null);break;case "cancel":case "close":oc(a)&&vc(b,a,!0);break;case "invalid":case "submit":case "reset":break;default:-1===ac.indexOf(a)&&F(a,b);}c.set(a,null);}}
	var wc,xc,yc,zc=!1,Ac=[],Bc=null,Cc=null,Dc=null,Ec=new Map,Fc=new Map,Gc=[],Hc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ic="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");
	function Jc(a,b){var c=cc(b);Hc.forEach(function(a){uc(a,b,c);});Ic.forEach(function(a){uc(a,b,c);});}function Kc(a,b,c,d,e){return {blockedOn:a,topLevelType:b,eventSystemFlags:c|32,nativeEvent:e,container:d}}
	function Lc(a,b){switch(a){case "focus":case "blur":Bc=null;break;case "dragenter":case "dragleave":Cc=null;break;case "mouseover":case "mouseout":Dc=null;break;case "pointerover":case "pointerout":Ec.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Fc.delete(b.pointerId);}}function Mc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=Kc(b,c,d,e,f),null!==b&&(b=Nc(b),null!==b&&xc(b)),a;a.eventSystemFlags|=d;return a}
	function Oc(a,b,c,d,e){switch(b){case "focus":return Bc=Mc(Bc,a,b,c,d,e),!0;case "dragenter":return Cc=Mc(Cc,a,b,c,d,e),!0;case "mouseover":return Dc=Mc(Dc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Ec.set(f,Mc(Ec.get(f)||null,a,b,c,d,e));return !0;case "gotpointercapture":return f=e.pointerId,Fc.set(f,Mc(Fc.get(f)||null,a,b,c,d,e)),!0}return !1}
	function Pc(a){var b=tc(a.target);if(null!==b){var c=dc(b);if(null!==c)if(b=c.tag,13===b){if(b=ec(c),null!==b){a.blockedOn=b;r.unstable_runWithPriority(a.priority,function(){yc(c);});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null;}function Qc(a){if(null!==a.blockedOn)return !1;var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);if(null!==b){var c=Nc(b);null!==c&&xc(c);a.blockedOn=b;return !1}return !0}
	function Sc(a,b,c){Qc(a)&&c.delete(b);}function Tc(){for(zc=!1;0<Ac.length;){var a=Ac[0];if(null!==a.blockedOn){a=Nc(a.blockedOn);null!==a&&wc(a);break}var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);null!==b?a.blockedOn=b:Ac.shift();}null!==Bc&&Qc(Bc)&&(Bc=null);null!==Cc&&Qc(Cc)&&(Cc=null);null!==Dc&&Qc(Dc)&&(Dc=null);Ec.forEach(Sc);Fc.forEach(Sc);}function Uc(a,b){a.blockedOn===b&&(a.blockedOn=null,zc||(zc=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Tc)));}
	function Vc(a){function b(b){return Uc(b,a)}if(0<Ac.length){Uc(Ac[0],a);for(var c=1;c<Ac.length;c++){var d=Ac[c];d.blockedOn===a&&(d.blockedOn=null);}}null!==Bc&&Uc(Bc,a);null!==Cc&&Uc(Cc,a);null!==Dc&&Uc(Dc,a);Ec.forEach(b);Fc.forEach(b);for(c=0;c<Gc.length;c++)d=Gc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Gc.length&&(c=Gc[0],null===c.blockedOn);)Pc(c),null===c.blockedOn&&Gc.shift();}
	var Wc={},Yc=new Map,Zc=new Map,$c=["abort","abort",Xb,"animationEnd",Yb,"animationIteration",Zb,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking",
	"seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",$b,"transitionEnd","waiting","waiting"];function ad(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1],f="on"+(e[0].toUpperCase()+e.slice(1));f={phasedRegistrationNames:{bubbled:f,captured:f+"Capture"},dependencies:[d],eventPriority:b};Zc.set(d,b);Yc.set(d,f);Wc[e]=f;}}
	ad("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0);
	ad("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);ad($c,2);for(var bd="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),cd=0;cd<bd.length;cd++)Zc.set(bd[cd],0);
	var dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function F(a,b){vc(b,a,!1);}function vc(a,b,c){var d=Zc.get(b);switch(void 0===d?2:d){case 0:d=gd.bind(null,b,1,a);break;case 1:d=hd.bind(null,b,1,a);break;default:d=id.bind(null,b,1,a);}c?a.addEventListener(b,d,!0):a.addEventListener(b,d,!1);}function gd(a,b,c,d){Ja||Ha();var e=id,f=Ja;Ja=!0;try{Ga(e,a,b,c,d);}finally{(Ja=f)||La();}}function hd(a,b,c,d){ed(dd,id.bind(null,a,b,c,d));}
	function id(a,b,c,d){if(fd)if(0<Ac.length&&-1<Hc.indexOf(a))a=Kc(null,a,b,c,d),Ac.push(a);else {var e=Rc(a,b,c,d);if(null===e)Lc(a,d);else if(-1<Hc.indexOf(a))a=Kc(e,a,b,c,d),Ac.push(a);else if(!Oc(e,a,b,c,d)){Lc(a,d);a=rc(a,d,null,b);try{Ma(sc,a);}finally{qc(a);}}}}
	function Rc(a,b,c,d){c=nc(d);c=tc(c);if(null!==c){var e=dc(c);if(null===e)c=null;else {var f=e.tag;if(13===f){c=ec(e);if(null!==c)return c;c=null;}else if(3===f){if(e.stateNode.hydrate)return 3===e.tag?e.stateNode.containerInfo:null;c=null;}else e!==c&&(c=null);}}a=rc(a,d,c,b);try{Ma(sc,a);}finally{qc(a);}return null}
	var jd={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
	floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},kd=["Webkit","ms","Moz","O"];Object.keys(jd).forEach(function(a){kd.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);jd[b]=jd[a];});});function ld(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||jd.hasOwnProperty(a)&&jd[a]?(""+b).trim():b+"px"}
	function md(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=ld(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e;}}var nd=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
	function od(a,b){if(b){if(nd[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(u(137,a,""));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(u(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(u(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(u(62,""));}}
	function pd(a,b){if(-1===a.indexOf("-"))return "string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return !1;default:return !0}}var qd=Mb.html;function rd(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=cc(a);b=wa[b];for(var d=0;d<b.length;d++)uc(b[d],a,c);}function sd(){}
	function td(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function ud(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function vd(a,b){var c=ud(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return {node:c,offset:b-a};a=d;}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode;}c=void 0;}c=ud(c);}}
	function wd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?wd(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}function xd(){for(var a=window,b=td();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href;}catch(d){c=!1;}if(c)a=b.contentWindow;else break;b=td(a.document);}return b}
	function yd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}var zd="$",Ad="/$",Bd="$?",Cd="$!",Dd=null,Ed=null;function Fd(a,b){switch(a){case "button":case "input":case "select":case "textarea":return !!b.autoFocus}return !1}
	function Gd(a,b){return "textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var Hd="function"===typeof setTimeout?setTimeout:void 0,Id="function"===typeof clearTimeout?clearTimeout:void 0;function Jd(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}
	function Kd(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(c===zd||c===Cd||c===Bd){if(0===b)return a;b--;}else c===Ad&&b++;}a=a.previousSibling;}return null}var Ld=Math.random().toString(36).slice(2),Md="__reactInternalInstance$"+Ld,Nd="__reactEventHandlers$"+Ld,Od="__reactContainere$"+Ld;
	function tc(a){var b=a[Md];if(b)return b;for(var c=a.parentNode;c;){if(b=c[Od]||c[Md]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Kd(a);null!==a;){if(c=a[Md])return c;a=Kd(a);}return b}a=c;c=a.parentNode;}return null}function Nc(a){a=a[Md]||a[Od];return !a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function Pd(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(u(33));}function Qd(a){return a[Nd]||null}
	function Rd(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}
	function Sd(a,b){var c=a.stateNode;if(!c)return null;var d=la(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1;}if(a)return null;if(c&&"function"!==typeof c)throw Error(u(231,
	b,typeof c));return c}function Td(a,b,c){if(b=Sd(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a);}function Ud(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Rd(b);for(b=c.length;0<b--;)Td(c[b],"captured",a);for(b=0;b<c.length;b++)Td(c[b],"bubbled",a);}}
	function Vd(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Sd(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a));}function Wd(a){a&&a.dispatchConfig.registrationName&&Vd(a._targetInst,null,a);}function Xd(a){jc(a,Ud);}var Yd=null,Zd=null,$d=null;
	function ae(){if($d)return $d;var a,b=Zd,c=b.length,d,e="value"in Yd?Yd.value:Yd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return $d=e.slice(a,1<d?1-d:void 0)}function be(){return !0}function ce(){return !1}
	function G(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?be:ce;this.isPropagationStopped=ce;return this}
	n(G.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=be);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=be);},persist:function(){this.isPersistent=be;},isPersistent:ce,destructor:function(){var a=this.constructor.Interface,
	b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=ce;this._dispatchInstances=this._dispatchListeners=null;}});G.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
	G.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;n(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=n({},d.Interface,a);c.extend=d.extend;de(c);return c};de(G);function ee(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}
	function fe(a){if(!(a instanceof this))throw Error(u(279));a.destructor();10>this.eventPool.length&&this.eventPool.push(a);}function de(a){a.eventPool=[];a.getPooled=ee;a.release=fe;}var ge=G.extend({data:null}),he=G.extend({data:null}),ie=[9,13,27,32],je=ya&&"CompositionEvent"in window,ke=null;ya&&"documentMode"in document&&(ke=document.documentMode);
	var le=ya&&"TextEvent"in window&&!ke,me=ya&&(!je||ke&&8<ke&&11>=ke),ne=String.fromCharCode(32),oe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
	captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},pe=!1;
	function qe(a,b){switch(a){case "keyup":return -1!==ie.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return !0;default:return !1}}function re(a){a=a.detail;return "object"===typeof a&&"data"in a?a.data:null}var se=!1;function te(a,b){switch(a){case "compositionend":return re(b);case "keypress":if(32!==b.which)return null;pe=!0;return ne;case "textInput":return a=b.data,a===ne&&pe?null:a;default:return null}}
	function ue(a,b){if(se)return "compositionend"===a||!je&&qe(a,b)?(a=ae(),$d=Zd=Yd=null,se=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return me&&"ko"!==b.locale?null:b.data;default:return null}}
	var ve={eventTypes:oe,extractEvents:function(a,b,c,d){var e;if(je)b:{switch(a){case "compositionstart":var f=oe.compositionStart;break b;case "compositionend":f=oe.compositionEnd;break b;case "compositionupdate":f=oe.compositionUpdate;break b}f=void 0;}else se?qe(a,c)&&(f=oe.compositionEnd):"keydown"===a&&229===c.keyCode&&(f=oe.compositionStart);f?(me&&"ko"!==c.locale&&(se||f!==oe.compositionStart?f===oe.compositionEnd&&se&&(e=ae()):(Yd=d,Zd="value"in Yd?Yd.value:Yd.textContent,se=!0)),f=ge.getPooled(f,
	b,c,d),e?f.data=e:(e=re(c),null!==e&&(f.data=e)),Xd(f),e=f):e=null;(a=le?te(a,c):ue(a,c))?(b=he.getPooled(oe.beforeInput,b,c,d),b.data=a,Xd(b)):b=null;return null===e?b:null===b?e:[e,b]}},we={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function xe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return "input"===b?!!we[a.type]:"textarea"===b?!0:!1}
	var ye={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function ze(a,b,c){a=G.getPooled(ye.change,a,b,c);a.type="change";Da(c);Xd(a);return a}var Ae=null,Be=null;function Ce(a){mc(a);}function De(a){var b=Pd(a);if(yb(b))return a}function Ee(a,b){if("change"===a)return b}var Fe=!1;ya&&(Fe=oc("input")&&(!document.documentMode||9<document.documentMode));
	function Ge(){Ae&&(Ae.detachEvent("onpropertychange",He),Be=Ae=null);}function He(a){if("value"===a.propertyName&&De(Be))if(a=ze(Be,a,nc(a)),Ja)mc(a);else {Ja=!0;try{Fa(Ce,a);}finally{Ja=!1,La();}}}function Ie(a,b,c){"focus"===a?(Ge(),Ae=b,Be=c,Ae.attachEvent("onpropertychange",He)):"blur"===a&&Ge();}function Je(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return De(Be)}function Ke(a,b){if("click"===a)return De(b)}function Le(a,b){if("input"===a||"change"===a)return De(b)}
	var Me={eventTypes:ye,_isInputEventSupported:Fe,extractEvents:function(a,b,c,d){var e=b?Pd(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if("select"===f||"input"===f&&"file"===e.type)var g=Ee;else if(xe(e))if(Fe)g=Le;else {g=Je;var h=Ie;}else (f=e.nodeName)&&"input"===f.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(g=Ke);if(g&&(g=g(a,b)))return ze(g,c,d);h&&h(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Db(e,"number",e.value);}},Ne=G.extend({view:null,detail:null}),
	Oe={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pe(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Oe[a])?!!b[a]:!1}function Qe(){return Pe}
	var Re=0,Se=0,Te=!1,Ue=!1,Ve=Ne.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Qe,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=Re;Re=a.screenX;return Te?"mousemove"===a.type?a.screenX-b:0:(Te=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;
	var b=Se;Se=a.screenY;return Ue?"mousemove"===a.type?a.screenY-b:0:(Ue=!0,0)}}),We=Ve.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xe={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",
	dependencies:["pointerout","pointerover"]}},Ye={eventTypes:Xe,extractEvents:function(a,b,c,d,e){var f="mouseover"===a||"pointerover"===a,g="mouseout"===a||"pointerout"===a;if(f&&0===(e&32)&&(c.relatedTarget||c.fromElement)||!g&&!f)return null;f=d.window===d?d:(f=d.ownerDocument)?f.defaultView||f.parentWindow:window;if(g){if(g=b,b=(b=c.relatedTarget||c.toElement)?tc(b):null,null!==b){var h=dc(b);if(b!==h||5!==b.tag&&6!==b.tag)b=null;}}else g=null;if(g===b)return null;if("mouseout"===a||"mouseover"===
	a){var k=Ve;var l=Xe.mouseLeave;var m=Xe.mouseEnter;var p="mouse";}else if("pointerout"===a||"pointerover"===a)k=We,l=Xe.pointerLeave,m=Xe.pointerEnter,p="pointer";a=null==g?f:Pd(g);f=null==b?f:Pd(b);l=k.getPooled(l,g,c,d);l.type=p+"leave";l.target=a;l.relatedTarget=f;c=k.getPooled(m,b,c,d);c.type=p+"enter";c.target=f;c.relatedTarget=a;d=g;p=b;if(d&&p)a:{k=d;m=p;g=0;for(a=k;a;a=Rd(a))g++;a=0;for(b=m;b;b=Rd(b))a++;for(;0<g-a;)k=Rd(k),g--;for(;0<a-g;)m=Rd(m),a--;for(;g--;){if(k===m||k===m.alternate)break a;
	k=Rd(k);m=Rd(m);}k=null;}else k=null;m=k;for(k=[];d&&d!==m;){g=d.alternate;if(null!==g&&g===m)break;k.push(d);d=Rd(d);}for(d=[];p&&p!==m;){g=p.alternate;if(null!==g&&g===m)break;d.push(p);p=Rd(p);}for(p=0;p<k.length;p++)Vd(k[p],"bubbled",l);for(p=d.length;0<p--;)Vd(d[p],"captured",c);return 0===(e&64)?[l]:[l,c]}};function Ze(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var $e="function"===typeof Object.is?Object.is:Ze,af=Object.prototype.hasOwnProperty;
	function bf(a,b){if($e(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++)if(!af.call(b,c[d])||!$e(a[c[d]],b[c[d]]))return !1;return !0}
	var cf=ya&&"documentMode"in document&&11>=document.documentMode,df={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ef=null,ff=null,gf=null,hf=!1;
	function jf(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if(hf||null==ef||ef!==td(c))return null;c=ef;"selectionStart"in c&&yd(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return gf&&bf(gf,c)?null:(gf=c,a=G.getPooled(df.select,ff,a,b),a.type="select",a.target=ef,Xd(a),a)}
	var kf={eventTypes:df,extractEvents:function(a,b,c,d,e,f){e=f||(d.window===d?d.document:9===d.nodeType?d:d.ownerDocument);if(!(f=!e)){a:{e=cc(e);f=wa.onSelect;for(var g=0;g<f.length;g++)if(!e.has(f[g])){e=!1;break a}e=!0;}f=!e;}if(f)return null;e=b?Pd(b):window;switch(a){case "focus":if(xe(e)||"true"===e.contentEditable)ef=e,ff=b,gf=null;break;case "blur":gf=ff=ef=null;break;case "mousedown":hf=!0;break;case "contextmenu":case "mouseup":case "dragend":return hf=!1,jf(c,d);case "selectionchange":if(cf)break;
	case "keydown":case "keyup":return jf(c,d)}return null}},lf=G.extend({animationName:null,elapsedTime:null,pseudoElement:null}),mf=G.extend({clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}}),nf=Ne.extend({relatedTarget:null});function of(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
	var pf={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},qf={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
	116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rf=Ne.extend({key:function(a){if(a.key){var b=pf[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=of(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?qf[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Qe,charCode:function(a){return "keypress"===
	a.type?of(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===a.type?of(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),sf=Ve.extend({dataTransfer:null}),tf=Ne.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Qe}),uf=G.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vf=Ve.extend({deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in
	a?-a.wheelDeltaX:0},deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),wf={eventTypes:Wc,extractEvents:function(a,b,c,d){var e=Yc.get(a);if(!e)return null;switch(a){case "keypress":if(0===of(c))return null;case "keydown":case "keyup":a=rf;break;case "blur":case "focus":a=nf;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=
	Ve;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=sf;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=tf;break;case Xb:case Yb:case Zb:a=lf;break;case $b:a=uf;break;case "scroll":a=Ne;break;case "wheel":a=vf;break;case "copy":case "cut":case "paste":a=mf;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=
	We;break;default:a=G;}b=a.getPooled(e,b,c,d);Xd(b);return b}};if(pa)throw Error(u(101));pa=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ra();var xf=Nc;la=Qd;ma=xf;na=Pd;xa({SimpleEventPlugin:wf,EnterLeaveEventPlugin:Ye,ChangeEventPlugin:Me,SelectEventPlugin:kf,BeforeInputEventPlugin:ve});var yf=[],zf=-1;function H(a){0>zf||(a.current=yf[zf],yf[zf]=null,zf--);}
	function I(a,b){zf++;yf[zf]=a.current;a.current=b;}var Af={},J={current:Af},K={current:!1},Bf=Af;function Cf(a,b){var c=a.type.contextTypes;if(!c)return Af;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L(a){a=a.childContextTypes;return null!==a&&void 0!==a}
	function Df(){H(K);H(J);}function Ef(a,b,c){if(J.current!==Af)throw Error(u(168));I(J,b);I(K,c);}function Ff(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(u(108,pb(b)||"Unknown",e));return n({},c,{},d)}function Gf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Af;Bf=J.current;I(J,a);I(K,K.current);return !0}
	function Hf(a,b,c){var d=a.stateNode;if(!d)throw Error(u(169));c?(a=Ff(a,b,Bf),d.__reactInternalMemoizedMergedChildContext=a,H(K),H(J),I(J,a)):H(K);I(K,c);}
	var If=r.unstable_runWithPriority,Jf=r.unstable_scheduleCallback,Kf=r.unstable_cancelCallback,Lf=r.unstable_requestPaint,Mf=r.unstable_now,Nf=r.unstable_getCurrentPriorityLevel,Of=r.unstable_ImmediatePriority,Pf=r.unstable_UserBlockingPriority,Qf=r.unstable_NormalPriority,Rf=r.unstable_LowPriority,Sf=r.unstable_IdlePriority,Tf={},Uf=r.unstable_shouldYield,Vf=void 0!==Lf?Lf:function(){},Wf=null,Xf=null,Yf=!1,Zf=Mf(),$f=1E4>Zf?Mf:function(){return Mf()-Zf};
	function ag(){switch(Nf()){case Of:return 99;case Pf:return 98;case Qf:return 97;case Rf:return 96;case Sf:return 95;default:throw Error(u(332));}}function bg(a){switch(a){case 99:return Of;case 98:return Pf;case 97:return Qf;case 96:return Rf;case 95:return Sf;default:throw Error(u(332));}}function cg(a,b){a=bg(a);return If(a,b)}function dg(a,b,c){a=bg(a);return Jf(a,b,c)}function eg(a){null===Wf?(Wf=[a],Xf=Jf(Of,fg)):Wf.push(a);return Tf}function gg(){if(null!==Xf){var a=Xf;Xf=null;Kf(a);}fg();}
	function fg(){if(!Yf&&null!==Wf){Yf=!0;var a=0;try{var b=Wf;cg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});Wf=null;}catch(c){throw null!==Wf&&(Wf=Wf.slice(a+1)),Jf(Of,gg),c;}finally{Yf=!1;}}}function hg(a,b,c){c/=10;return 1073741821-(((1073741821-a+b/10)/c|0)+1)*c}function ig(a,b){if(a&&a.defaultProps){b=n({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);}return b}var jg={current:null},kg=null,lg=null,mg=null;function ng(){mg=lg=kg=null;}
	function og(a){var b=jg.current;H(jg);a.type._context._currentValue=b;}function pg(a,b){for(;null!==a;){var c=a.alternate;if(a.childExpirationTime<b)a.childExpirationTime=b,null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);else if(null!==c&&c.childExpirationTime<b)c.childExpirationTime=b;else break;a=a.return;}}function qg(a,b){kg=a;mg=lg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(a.expirationTime>=b&&(rg=!0),a.firstContext=null);}
	function sg(a,b){if(mg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)mg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===lg){if(null===kg)throw Error(u(308));lg=b;kg.dependencies={expirationTime:0,firstContext:b,responders:null};}else lg=lg.next=b;}return a._currentValue}var tg=!1;function ug(a){a.updateQueue={baseState:a.memoizedState,baseQueue:null,shared:{pending:null},effects:null};}
	function vg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,baseQueue:a.baseQueue,shared:a.shared,effects:a.effects});}function wg(a,b){a={expirationTime:a,suspenseConfig:b,tag:0,payload:null,callback:null,next:null};return a.next=a}function xg(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b;}}
	function yg(a,b){var c=a.alternate;null!==c&&vg(c,a);a=a.updateQueue;c=a.baseQueue;null===c?(a.baseQueue=b.next=b,b.next=b):(b.next=c.next,c.next=b);}
	function zg(a,b,c,d){var e=a.updateQueue;tg=!1;var f=e.baseQueue,g=e.shared.pending;if(null!==g){if(null!==f){var h=f.next;f.next=g.next;g.next=h;}f=g;e.shared.pending=null;h=a.alternate;null!==h&&(h=h.updateQueue,null!==h&&(h.baseQueue=g));}if(null!==f){h=f.next;var k=e.baseState,l=0,m=null,p=null,x=null;if(null!==h){var z=h;do{g=z.expirationTime;if(g<d){var ca={expirationTime:z.expirationTime,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null};null===x?(p=x=
	ca,m=k):x=x.next=ca;g>l&&(l=g);}else {null!==x&&(x=x.next={expirationTime:1073741823,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null});Ag(g,z.suspenseConfig);a:{var D=a,t=z;g=b;ca=c;switch(t.tag){case 1:D=t.payload;if("function"===typeof D){k=D.call(ca,k,g);break a}k=D;break a;case 3:D.effectTag=D.effectTag&-4097|64;case 0:D=t.payload;g="function"===typeof D?D.call(ca,k,g):D;if(null===g||void 0===g)break a;k=n({},k,g);break a;case 2:tg=!0;}}null!==z.callback&&
	(a.effectTag|=32,g=e.effects,null===g?e.effects=[z]:g.push(z));}z=z.next;if(null===z||z===h)if(g=e.shared.pending,null===g)break;else z=f.next=g.next,g.next=h,e.baseQueue=f=g,e.shared.pending=null;}while(1)}null===x?m=k:x.next=p;e.baseState=m;e.baseQueue=x;Bg(l);a.expirationTime=l;a.memoizedState=k;}}
	function Cg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=e;e=c;if("function"!==typeof d)throw Error(u(191,d));d.call(e);}}}var Dg=Wa.ReactCurrentBatchConfig,Eg=(new aa.Component).refs;function Fg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;0===a.expirationTime&&(a.updateQueue.baseState=c);}
	var Jg={isMounted:function(a){return (a=a._reactInternalFiber)?dc(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d);},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d);},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gg(),d=Dg.suspense;
	c=Hg(c,a,d);d=wg(c,d);d.tag=2;void 0!==b&&null!==b&&(d.callback=b);xg(a,d);Ig(a,c);}};function Kg(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!bf(c,d)||!bf(e,f):!0}
	function Lg(a,b,c){var d=!1,e=Af;var f=b.contextType;"object"===typeof f&&null!==f?f=sg(f):(e=L(b)?Bf:J.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Cf(a,e):Af);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Jg;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
	function Mg(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Jg.enqueueReplaceState(b,b.state,null);}
	function Ng(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Eg;ug(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=sg(f):(f=L(b)?Bf:J.current,e.context=Cf(a,f));zg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Fg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||
	(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Jg.enqueueReplaceState(e,e.state,null),zg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.effectTag|=4);}var Og=Array.isArray;
	function Pg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(u(309));var d=c.stateNode;}if(!d)throw Error(u(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Eg&&(b=d.refs={});null===a?delete b[e]:b[e]=a;};b._stringRef=e;return b}if("string"!==typeof a)throw Error(u(284));if(!c._owner)throw Error(u(290,a));}return a}
	function Qg(a,b){if("textarea"!==a.type)throw Error(u(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,""));}
	function Rg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8;}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Sg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
	2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Tg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Pg(a,b,c),d.return=a,d;d=Ug(c.type,c.key,c.props,null,a.mode,d);d.ref=Pg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==
	c.implementation)return b=Vg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Wg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function p(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Tg(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Za:return c=Ug(b.type,b.key,b.props,null,a.mode,c),c.ref=Pg(a,null,b),c.return=a,c;case $a:return b=Vg(b,a.mode,c),b.return=a,b}if(Og(b)||
	nb(b))return b=Wg(b,a.mode,c,null),b.return=a,b;Qg(a,b);}return null}function x(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Za:return c.key===e?c.type===ab?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case $a:return c.key===e?l(a,b,c,d):null}if(Og(c)||nb(c))return null!==e?null:m(a,b,c,d,null);Qg(a,c);}return null}function z(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=
	a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Za:return a=a.get(null===d.key?c:d.key)||null,d.type===ab?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case $a:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Og(d)||nb(d))return a=a.get(c)||null,m(b,a,d,e,null);Qg(b,d);}return null}function ca(e,g,h,k){for(var l=null,t=null,m=g,y=g=0,A=null;null!==m&&y<h.length;y++){m.index>y?(A=m,m=null):A=m.sibling;var q=x(e,m,h[y],k);if(null===q){null===m&&(m=A);break}a&&
	m&&null===q.alternate&&b(e,m);g=f(q,g,y);null===t?l=q:t.sibling=q;t=q;m=A;}if(y===h.length)return c(e,m),l;if(null===m){for(;y<h.length;y++)m=p(e,h[y],k),null!==m&&(g=f(m,g,y),null===t?l=m:t.sibling=m,t=m);return l}for(m=d(e,m);y<h.length;y++)A=z(m,e,y,h[y],k),null!==A&&(a&&null!==A.alternate&&m.delete(null===A.key?y:A.key),g=f(A,g,y),null===t?l=A:t.sibling=A,t=A);a&&m.forEach(function(a){return b(e,a)});return l}function D(e,g,h,l){var k=nb(h);if("function"!==typeof k)throw Error(u(150));h=k.call(h);
	if(null==h)throw Error(u(151));for(var m=k=null,t=g,y=g=0,A=null,q=h.next();null!==t&&!q.done;y++,q=h.next()){t.index>y?(A=t,t=null):A=t.sibling;var D=x(e,t,q.value,l);if(null===D){null===t&&(t=A);break}a&&t&&null===D.alternate&&b(e,t);g=f(D,g,y);null===m?k=D:m.sibling=D;m=D;t=A;}if(q.done)return c(e,t),k;if(null===t){for(;!q.done;y++,q=h.next())q=p(e,q.value,l),null!==q&&(g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);return k}for(t=d(e,t);!q.done;y++,q=h.next())q=z(t,e,y,q.value,l),null!==q&&(a&&null!==
	q.alternate&&t.delete(null===q.key?y:q.key),g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);a&&t.forEach(function(a){return b(e,a)});return k}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ab&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Za:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ab){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,
	k.sibling);d=e(k,f.props);d.ref=Pg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling;}f.type===ab?(d=Wg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Ug(f.type,f.key,f.props,null,a.mode,h),h.ref=Pg(a,d,f),h.return=a,a=h);}return g(a);case $a:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else {c(a,d);break}else b(a,d);d=
	d.sibling;}d=Vg(f,a.mode,h);d.return=a;a=d;}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Tg(f,a.mode,h),d.return=a,a=d),g(a);if(Og(f))return ca(a,d,f,h);if(nb(f))return D(a,d,f,h);l&&Qg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:throw a=a.type,Error(u(152,a.displayName||a.name||"Component"));}return c(a,d)}}var Xg=Rg(!0),Yg=Rg(!1),Zg={},$g={current:Zg},ah={current:Zg},bh={current:Zg};
	function ch(a){if(a===Zg)throw Error(u(174));return a}function dh(a,b){I(bh,b);I(ah,a);I($g,Zg);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:Ob(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=Ob(b,a);}H($g);I($g,b);}function eh(){H($g);H(ah);H(bh);}function fh(a){ch(bh.current);var b=ch($g.current);var c=Ob(b,a.type);b!==c&&(I(ah,a),I($g,c));}function gh(a){ah.current===a&&(H($g),H(ah));}var M={current:0};
	function hh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||c.data===Bd||c.data===Cd))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.effectTag&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}return null}function ih(a,b){return {responder:a,props:b}}
	var jh=Wa.ReactCurrentDispatcher,kh=Wa.ReactCurrentBatchConfig,lh=0,N=null,O=null,P=null,mh=!1;function Q(){throw Error(u(321));}function nh(a,b){if(null===b)return !1;for(var c=0;c<b.length&&c<a.length;c++)if(!$e(a[c],b[c]))return !1;return !0}
	function oh(a,b,c,d,e,f){lh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.expirationTime=0;jh.current=null===a||null===a.memoizedState?ph:qh;a=c(d,e);if(b.expirationTime===lh){f=0;do{b.expirationTime=0;if(!(25>f))throw Error(u(301));f+=1;P=O=null;b.updateQueue=null;jh.current=rh;a=c(d,e);}while(b.expirationTime===lh)}jh.current=sh;b=null!==O&&null!==O.next;lh=0;P=O=N=null;mh=!1;if(b)throw Error(u(300));return a}
	function th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function uh(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null;}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else {if(null===a)throw Error(u(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a;}return P}
	function vh(a,b){return "function"===typeof b?b(a):b}
	function wh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g;}d.baseQueue=e=f;c.pending=null;}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.expirationTime;if(l<lh){var m={expirationTime:k.expirationTime,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null};null===h?(g=h=m,f=d):h=h.next=m;l>N.expirationTime&&
	(N.expirationTime=l,Bg(l));}else null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),Ag(l,k.suspenseConfig),d=k.eagerReducer===a?k.eagerState:a(d,k.action);k=k.next;}while(null!==k&&k!==e);null===h?f=d:h.next=g;$e(d,b.memoizedState)||(rg=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d;}return [b.memoizedState,c.dispatch]}
	function xh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);$e(f,b.memoizedState)||(rg=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f;}return [f,d]}
	function yh(a){var b=th();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:vh,lastRenderedState:a};a=a.dispatch=zh.bind(null,N,a);return [b.memoizedState,a]}function Ah(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}
	function Bh(){return uh().memoizedState}function Ch(a,b,c,d){var e=th();N.effectTag|=a;e.memoizedState=Ah(1|b,c,void 0,void 0===d?null:d);}function Dh(a,b,c,d){var e=uh();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&nh(d,g.deps)){Ah(b,c,f,d);return}}N.effectTag|=a;e.memoizedState=Ah(1|b,c,f,d);}function Eh(a,b){return Ch(516,4,a,b)}function Fh(a,b){return Dh(516,4,a,b)}function Gh(a,b){return Dh(4,2,a,b)}
	function Hh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null);};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null;}}function Ih(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Dh(4,2,Hh.bind(null,b,a),c)}function Jh(){}function Kh(a,b){th().memoizedState=[a,void 0===b?null:b];return a}function Lh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
	function Mh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Nh(a,b,c){var d=ag();cg(98>d?98:d,function(){a(!0);});cg(97<d?97:d,function(){var d=kh.suspense;kh.suspense=void 0===b?null:b;try{a(!1),c();}finally{kh.suspense=d;}});}
	function zh(a,b,c){var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e={expirationTime:d,suspenseConfig:e,action:c,eagerReducer:null,eagerState:null,next:null};var f=b.pending;null===f?e.next=e:(e.next=f.next,f.next=e);b.pending=e;f=a.alternate;if(a===N||null!==f&&f===N)mh=!0,e.expirationTime=lh,N.expirationTime=lh;else {if(0===a.expirationTime&&(null===f||0===f.expirationTime)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.eagerReducer=f;e.eagerState=h;if($e(h,g))return}catch(k){}finally{}Ig(a,
	d);}}
	var sh={readContext:sg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useResponder:Q,useDeferredValue:Q,useTransition:Q},ph={readContext:sg,useCallback:Kh,useContext:sg,useEffect:Eh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Ch(4,2,Hh.bind(null,b,a),c)},useLayoutEffect:function(a,b){return Ch(4,2,a,b)},useMemo:function(a,b){var c=th();b=void 0===b?null:b;a=a();c.memoizedState=[a,
	b];return a},useReducer:function(a,b,c){var d=th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=zh.bind(null,N,a);return [d.memoizedState,a]},useRef:function(a){var b=th();a={current:a};return b.memoizedState=a},useState:yh,useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=yh(a),d=c[0],e=c[1];Eh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a);}finally{kh.suspense=
	c;}},[a,b]);return d},useTransition:function(a){var b=yh(!1),c=b[0];b=b[1];return [Kh(Nh.bind(null,b,a),[b,a]),c]}},qh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:wh,useRef:Bh,useState:function(){return wh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=wh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a);}finally{kh.suspense=c;}},[a,b]);return d},useTransition:function(a){var b=
	wh(vh),c=b[0];b=b[1];return [Lh(Nh.bind(null,b,a),[b,a]),c]}},rh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:xh,useRef:Bh,useState:function(){return xh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=xh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a);}finally{kh.suspense=c;}},[a,b]);return d},useTransition:function(a){var b=xh(vh),c=b[0];b=b[1];return [Lh(Nh.bind(null,
	b,a),[b,a]),c]}},Oh=null,Ph=null,Qh=!1;function Rh(a,b){var c=Sh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c;}
	function Th(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return !1;default:return !1}}
	function Uh(a){if(Qh){var b=Ph;if(b){var c=b;if(!Th(a,b)){b=Jd(c.nextSibling);if(!b||!Th(a,b)){a.effectTag=a.effectTag&-1025|2;Qh=!1;Oh=a;return}Rh(Oh,c);}Oh=a;Ph=Jd(b.firstChild);}else a.effectTag=a.effectTag&-1025|2,Qh=!1,Oh=a;}}function Vh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;Oh=a;}
	function Wh(a){if(a!==Oh)return !1;if(!Qh)return Vh(a),Qh=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!Gd(b,a.memoizedProps))for(b=Ph;b;)Rh(a,b),b=Jd(b.nextSibling);Vh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(u(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(c===Ad){if(0===b){Ph=Jd(a.nextSibling);break a}b--;}else c!==zd&&c!==Cd&&c!==Bd||b++;}a=a.nextSibling;}Ph=null;}}else Ph=Oh?Jd(a.stateNode.nextSibling):null;return !0}
	function Xh(){Ph=Oh=null;Qh=!1;}var Yh=Wa.ReactCurrentOwner,rg=!1;function R(a,b,c,d){b.child=null===a?Yg(b,null,c,d):Xg(b,a.child,c,d);}function Zh(a,b,c,d,e){c=c.render;var f=b.ref;qg(b,e);d=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,d,e);return b.child}
	function ai(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!bi(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ci(a,b,g,d,e,f);a=Ug(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:bf,c(e,d)&&a.ref===b.ref))return $h(a,b,f);b.effectTag|=1;a=Sg(g,d);a.ref=b.ref;a.return=b;return b.child=a}
	function ci(a,b,c,d,e,f){return null!==a&&bf(a.memoizedProps,d)&&a.ref===b.ref&&(rg=!1,e<f)?(b.expirationTime=a.expirationTime,$h(a,b,f)):di(a,b,c,d,f)}function ei(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128;}function di(a,b,c,d,e){var f=L(c)?Bf:J.current;f=Cf(b,f);qg(b,e);c=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,c,e);return b.child}
	function fi(a,b,c,d,e){if(L(c)){var f=!0;Gf(b);}else f=!1;qg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Lg(b,c,d),Ng(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l));var m=c.getDerivedStateFromProps,p="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;p||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
	"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l);tg=!1;var x=b.memoizedState;g.state=x;zg(b,d,g,e);k=b.memoizedState;h!==d||x!==k||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),k=b.memoizedState),(h=tg||Kg(b,c,h,d,x,k,l))?(p||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===
	typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1);}else g=b.stateNode,vg(a,b),h=b.memoizedProps,g.props=b.type===b.elementType?h:ig(b.type,h),k=g.context,l=c.contextType,"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l)),m=c.getDerivedStateFromProps,(p="function"===typeof m||"function"===
	typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l),tg=!1,k=b.memoizedState,g.state=k,zg(b,d,g,e),x=b.memoizedState,h!==d||k!==x||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),x=b.memoizedState),(m=tg||Kg(b,c,h,d,k,x,l))?(p||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,
	x,l),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,l)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=l,d=m):
	("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return gi(a,b,c,d,f,e)}
	function gi(a,b,c,d,e,f){ei(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Hf(b,c,!1),$h(a,b,f);d=b.stateNode;Yh.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=Xg(b,a.child,null,f),b.child=Xg(b,null,h,f)):R(a,b,h,f);b.memoizedState=d.state;e&&Hf(b,c,!0);return b.child}function hi(a){var b=a.stateNode;b.pendingContext?Ef(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Ef(a,b.context,!1);dh(a,b.containerInfo);}
	var ii={dehydrated:null,retryTime:0};
	function ji(a,b,c){var d=b.mode,e=b.pendingProps,f=M.current,g=!1,h;(h=0!==(b.effectTag&64))||(h=0!==(f&2)&&(null===a||null!==a.memoizedState));h?(g=!0,b.effectTag&=-65):null!==a&&null===a.memoizedState||void 0===e.fallback||!0===e.unstable_avoidThisFallback||(f|=1);I(M,f&1);if(null===a){void 0!==e.fallback&&Uh(b);if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=
	b;e.sibling=c;b.memoizedState=ii;b.child=e;return c}d=e.children;b.memoizedState=null;return b.child=Yg(b,null,d,c)}if(null!==a.memoizedState){a=a.child;d=a.sibling;if(g){e=e.fallback;c=Sg(a,a.pendingProps);c.return=b;if(0===(b.mode&2)&&(g=null!==b.memoizedState?b.child.child:b.child,g!==a.child))for(c.child=g;null!==g;)g.return=c,g=g.sibling;d=Sg(d,e);d.return=b;c.sibling=d;c.childExpirationTime=0;b.memoizedState=ii;b.child=c;return d}c=Xg(b,a.child,e.children,c);b.memoizedState=null;return b.child=
	c}a=a.child;if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;e.child=a;null!==a&&(a.return=e);if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=b;e.sibling=c;c.effectTag|=2;e.childExpirationTime=0;b.memoizedState=ii;b.child=e;return c}b.memoizedState=null;return b.child=Xg(b,a,e.children,c)}
	function ki(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);pg(a.return,b);}function li(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailExpiration:0,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailExpiration=0,g.tailMode=e,g.lastEffect=f);}
	function mi(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;R(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.effectTag|=64;else {if(null!==a&&0!==(a.effectTag&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&ki(a,c);else if(19===a.tag)ki(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return;}a.sibling.return=a.return;a=a.sibling;}d&=1;}I(M,d);if(0===(b.mode&2))b.memoizedState=
	null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===hh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);li(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===hh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a;}li(b,!0,c,null,f,b.lastEffect);break;case "together":li(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null;}return b.child}
	function $h(a,b,c){null!==a&&(b.dependencies=a.dependencies);var d=b.expirationTime;0!==d&&Bg(d);if(b.childExpirationTime<c)return null;if(null!==a&&b.child!==a.child)throw Error(u(153));if(null!==b.child){a=b.child;c=Sg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Sg(a,a.pendingProps),c.return=b;c.sibling=null;}return b.child}var ni,oi,pi,qi;
	ni=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}};oi=function(){};
	pi=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;ch($g.current);a=null;switch(c){case "input":f=zb(g,f);d=zb(g,d);a=[];break;case "option":f=Gb(g,f);d=Gb(g,d);a=[];break;case "select":f=n({},f,{value:void 0});d=n({},d,{value:void 0});a=[];break;case "textarea":f=Ib(g,f);d=Ib(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=sd);}od(c,d);var h,k;c=null;for(h in f)if(!d.hasOwnProperty(h)&&f.hasOwnProperty(h)&&null!=f[h])if("style"===
	h)for(k in g=f[h],g)g.hasOwnProperty(k)&&(c||(c={}),c[k]="");else "dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(va.hasOwnProperty(h)?a||(a=[]):(a=a||[]).push(h,null));for(h in d){var l=d[h];g=null!=f?f[h]:void 0;if(d.hasOwnProperty(h)&&l!==g&&(null!=l||null!=g))if("style"===h)if(g){for(k in g)!g.hasOwnProperty(k)||l&&l.hasOwnProperty(k)||(c||(c={}),c[k]="");for(k in l)l.hasOwnProperty(k)&&g[k]!==l[k]&&(c||(c={}),
	c[k]=l[k]);}else c||(a||(a=[]),a.push(h,c)),c=l;else "dangerouslySetInnerHTML"===h?(l=l?l.__html:void 0,g=g?g.__html:void 0,null!=l&&g!==l&&(a=a||[]).push(h,l)):"children"===h?g===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(h,""+l):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(va.hasOwnProperty(h)?(null!=l&&rd(e,h),a||g===l||(a=[])):(a=a||[]).push(h,l));}c&&(a=a||[]).push("style",c);e=a;if(b.updateQueue=e)b.effectTag|=4;}};
	qi=function(a,b,c,d){c!==d&&(b.effectTag|=4);};function ri(a,b){switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null;}}
	function si(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return L(b.type)&&Df(),null;case 3:return eh(),H(K),H(J),c=b.stateNode,c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==a&&null!==a.child||!Wh(b)||(b.effectTag|=4),oi(b),null;case 5:gh(b);c=ch(bh.current);var e=b.type;if(null!==a&&null!=b.stateNode)pi(a,b,e,d,c),a.ref!==b.ref&&(b.effectTag|=128);else {if(!d){if(null===b.stateNode)throw Error(u(166));
	return null}a=ch($g.current);if(Wh(b)){d=b.stateNode;e=b.type;var f=b.memoizedProps;d[Md]=b;d[Nd]=f;switch(e){case "iframe":case "object":case "embed":F("load",d);break;case "video":case "audio":for(a=0;a<ac.length;a++)F(ac[a],d);break;case "source":F("error",d);break;case "img":case "image":case "link":F("error",d);F("load",d);break;case "form":F("reset",d);F("submit",d);break;case "details":F("toggle",d);break;case "input":Ab(d,f);F("invalid",d);rd(c,"onChange");break;case "select":d._wrapperState=
	{wasMultiple:!!f.multiple};F("invalid",d);rd(c,"onChange");break;case "textarea":Jb(d,f),F("invalid",d),rd(c,"onChange");}od(e,f);a=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(a=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(a=["children",""+h]):va.hasOwnProperty(g)&&null!=h&&rd(c,g);}switch(e){case "input":xb(d);Eb(d,f,!0);break;case "textarea":xb(d);Lb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&
	(d.onclick=sd);}c=a;b.updateQueue=c;null!==c&&(b.effectTag|=4);}else {g=9===c.nodeType?c:c.ownerDocument;a===qd&&(a=Nb(e));a===qd?"script"===e?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(e,{is:d.is}):(a=g.createElement(e),"select"===e&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,e);a[Md]=b;a[Nd]=d;ni(a,b,!1,!1);b.stateNode=a;g=pd(e,d);switch(e){case "iframe":case "object":case "embed":F("load",
	a);h=d;break;case "video":case "audio":for(h=0;h<ac.length;h++)F(ac[h],a);h=d;break;case "source":F("error",a);h=d;break;case "img":case "image":case "link":F("error",a);F("load",a);h=d;break;case "form":F("reset",a);F("submit",a);h=d;break;case "details":F("toggle",a);h=d;break;case "input":Ab(a,d);h=zb(a,d);F("invalid",a);rd(c,"onChange");break;case "option":h=Gb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};h=n({},d,{value:void 0});F("invalid",a);rd(c,"onChange");break;case "textarea":Jb(a,
	d);h=Ib(a,d);F("invalid",a);rd(c,"onChange");break;default:h=d;}od(e,h);var k=h;for(f in k)if(k.hasOwnProperty(f)){var l=k[f];"style"===f?md(a,l):"dangerouslySetInnerHTML"===f?(l=l?l.__html:void 0,null!=l&&Qb(a,l)):"children"===f?"string"===typeof l?("textarea"!==e||""!==l)&&Rb(a,l):"number"===typeof l&&Rb(a,""+l):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(va.hasOwnProperty(f)?null!=l&&rd(c,f):null!=l&&Xa(a,f,l,g));}switch(e){case "input":xb(a);Eb(a,d,!1);
	break;case "textarea":xb(a);Lb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+rb(d.value));break;case "select":a.multiple=!!d.multiple;c=d.value;null!=c?Hb(a,!!d.multiple,c,!1):null!=d.defaultValue&&Hb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof h.onClick&&(a.onclick=sd);}Fd(e,d)&&(b.effectTag|=4);}null!==b.ref&&(b.effectTag|=128);}return null;case 6:if(a&&null!=b.stateNode)qi(a,b,a.memoizedProps,d);else {if("string"!==typeof d&&null===b.stateNode)throw Error(u(166));
	c=ch(bh.current);ch($g.current);Wh(b)?(c=b.stateNode,d=b.memoizedProps,c[Md]=b,c.nodeValue!==d&&(b.effectTag|=4)):(c=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),c[Md]=b,b.stateNode=c);}return null;case 13:H(M);d=b.memoizedState;if(0!==(b.effectTag&64))return b.expirationTime=c,b;c=null!==d;d=!1;null===a?void 0!==b.memoizedProps.fallback&&Wh(b):(e=a.memoizedState,d=null!==e,c||null===e||(e=a.child.sibling,null!==e&&(f=b.firstEffect,null!==f?(b.firstEffect=e,e.nextEffect=f):(b.firstEffect=b.lastEffect=
	e,e.nextEffect=null),e.effectTag=8)));if(c&&!d&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(M.current&1))S===ti&&(S=ui);else {if(S===ti||S===ui)S=vi;0!==wi&&null!==T&&(xi(T,U),yi(T,wi));}if(c||d)b.effectTag|=4;return null;case 4:return eh(),oi(b),null;case 10:return og(b),null;case 17:return L(b.type)&&Df(),null;case 19:H(M);d=b.memoizedState;if(null===d)return null;e=0!==(b.effectTag&64);f=d.rendering;if(null===f)if(e)ri(d,!1);else {if(S!==ti||null!==a&&0!==(a.effectTag&
	64))for(f=b.child;null!==f;){a=hh(f);if(null!==a){b.effectTag|=64;ri(d,!1);e=a.updateQueue;null!==e&&(b.updateQueue=e,b.effectTag|=4);null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;for(d=b.child;null!==d;)e=d,f=c,e.effectTag&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null,a=e.alternate,null===a?(e.childExpirationTime=0,e.expirationTime=f,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null):(e.childExpirationTime=a.childExpirationTime,
	e.expirationTime=a.expirationTime,e.child=a.child,e.memoizedProps=a.memoizedProps,e.memoizedState=a.memoizedState,e.updateQueue=a.updateQueue,f=a.dependencies,e.dependencies=null===f?null:{expirationTime:f.expirationTime,firstContext:f.firstContext,responders:f.responders}),d=d.sibling;I(M,M.current&1|2);return b.child}f=f.sibling;}}else {if(!e)if(a=hh(f),null!==a){if(b.effectTag|=64,e=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.effectTag|=4),ri(d,!0),null===d.tail&&"hidden"===d.tailMode&&!f.alternate)return b=
	b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*$f()-d.renderingStartTime>d.tailExpiration&&1<c&&(b.effectTag|=64,e=!0,ri(d,!1),b.expirationTime=b.childExpirationTime=c-1);d.isBackwards?(f.sibling=b.child,b.child=f):(c=d.last,null!==c?c.sibling=f:b.child=f,d.last=f);}return null!==d.tail?(0===d.tailExpiration&&(d.tailExpiration=$f()+500),c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=$f(),c.sibling=null,b=M.current,I(M,e?b&1|2:b&1),c):null}throw Error(u(156,
	b.tag));}function zi(a){switch(a.tag){case 1:L(a.type)&&Df();var b=a.effectTag;return b&4096?(a.effectTag=b&-4097|64,a):null;case 3:eh();H(K);H(J);b=a.effectTag;if(0!==(b&64))throw Error(u(285));a.effectTag=b&-4097|64;return a;case 5:return gh(a),null;case 13:return H(M),b=a.effectTag,b&4096?(a.effectTag=b&-4097|64,a):null;case 19:return H(M),null;case 4:return eh(),null;case 10:return og(a),null;default:return null}}function Ai(a,b){return {value:a,source:b,stack:qb(b)}}
	var Bi="function"===typeof WeakSet?WeakSet:Set;function Ci(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=qb(c));null!==c&&pb(c.type);b=b.value;null!==a&&1===a.tag&&pb(a.type);try{console.error(b);}catch(e){setTimeout(function(){throw e;});}}function Di(a,b){try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount();}catch(c){Ei(a,c);}}function Fi(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null);}catch(c){Ei(a,c);}else b.current=null;}
	function Gi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.effectTag&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:ig(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b;}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(u(163));}
	function Hi(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.destroy;c.destroy=void 0;void 0!==d&&d();}c=c.next;}while(c!==b)}}function Ii(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d();}c=c.next;}while(c!==b)}}
	function Ji(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:Ii(3,c);return;case 1:a=c.stateNode;if(c.effectTag&4)if(null===b)a.componentDidMount();else {var d=c.elementType===c.type?b.memoizedProps:ig(c.type,b.memoizedProps);a.componentDidUpdate(d,b.memoizedState,a.__reactInternalSnapshotBeforeUpdate);}b=c.updateQueue;null!==b&&Cg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode;}Cg(c,b,a);}return;
	case 5:a=c.stateNode;null===b&&c.effectTag&4&&Fd(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Vc(c))));return;case 19:case 17:case 20:case 21:return}throw Error(u(163));}
	function Ki(a,b,c){"function"===typeof Li&&Li(b);switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var d=a.next;cg(97<c?97:c,function(){var a=d;do{var c=a.destroy;if(void 0!==c){var g=b;try{c();}catch(h){Ei(g,h);}}a=a.next;}while(a!==d)});}break;case 1:Fi(b);c=b.stateNode;"function"===typeof c.componentWillUnmount&&Di(b,c);break;case 5:Fi(b);break;case 4:Mi(a,b,c);}}
	function Ni(a){var b=a.alternate;a.return=null;a.child=null;a.memoizedState=null;a.updateQueue=null;a.dependencies=null;a.alternate=null;a.firstEffect=null;a.lastEffect=null;a.pendingProps=null;a.memoizedProps=null;a.stateNode=null;null!==b&&Ni(b);}function Oi(a){return 5===a.tag||3===a.tag||4===a.tag}
	function Pi(a){a:{for(var b=a.return;null!==b;){if(Oi(b)){var c=b;break a}b=b.return;}throw Error(u(160));}b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(u(161));}c.effectTag&16&&(Rb(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Oi(c.return)){c=null;break a}c=c.return;}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.effectTag&2)continue b;
	if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child;}if(!(c.effectTag&2)){c=c.stateNode;break a}}d?Qi(a,c,b):Ri(a,c,b);}
	function Qi(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=sd));else if(4!==d&&(a=a.child,null!==a))for(Qi(a,b,c),a=a.sibling;null!==a;)Qi(a,b,c),a=a.sibling;}
	function Ri(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Ri(a,b,c),a=a.sibling;null!==a;)Ri(a,b,c),a=a.sibling;}
	function Mi(a,b,c){for(var d=b,e=!1,f,g;;){if(!e){e=d.return;a:for(;;){if(null===e)throw Error(u(160));f=e.stateNode;switch(e.tag){case 5:g=!1;break a;case 3:f=f.containerInfo;g=!0;break a;case 4:f=f.containerInfo;g=!0;break a}e=e.return;}e=!0;}if(5===d.tag||6===d.tag){a:for(var h=a,k=d,l=c,m=k;;)if(Ki(h,m,l),null!==m.child&&4!==m.tag)m.child.return=m,m=m.child;else {if(m===k)break a;for(;null===m.sibling;){if(null===m.return||m.return===k)break a;m=m.return;}m.sibling.return=m.return;m=m.sibling;}g?(h=
	f,k=d.stateNode,8===h.nodeType?h.parentNode.removeChild(k):h.removeChild(k)):f.removeChild(d.stateNode);}else if(4===d.tag){if(null!==d.child){f=d.stateNode.containerInfo;g=!0;d.child.return=d;d=d.child;continue}}else if(Ki(a,d,c),null!==d.child){d.child.return=d;d=d.child;continue}if(d===b)break;for(;null===d.sibling;){if(null===d.return||d.return===b)return;d=d.return;4===d.tag&&(e=!1);}d.sibling.return=d.return;d=d.sibling;}}
	function Si(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:Hi(3,b);return;case 1:return;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Nd]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Bb(c,d);pd(a,e);b=pd(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?md(c,h):"dangerouslySetInnerHTML"===g?Qb(c,h):"children"===g?Rb(c,h):Xa(c,g,h,b);}switch(a){case "input":Cb(c,d);break;
	case "textarea":Kb(c,d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?Hb(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?Hb(c,!!d.multiple,d.defaultValue,!0):Hb(c,!!d.multiple,d.multiple?[]:"",!1));}}}return;case 6:if(null===b.stateNode)throw Error(u(162));b.stateNode.nodeValue=b.memoizedProps;return;case 3:b=b.stateNode;b.hydrate&&(b.hydrate=!1,Vc(b.containerInfo));return;case 12:return;case 13:c=b;null===b.memoizedState?
	d=!1:(d=!0,c=b.child,Ti=$f());if(null!==c)a:for(a=c;;){if(5===a.tag)f=a.stateNode,d?(f=f.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(f=a.stateNode,e=a.memoizedProps.style,e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null,f.style.display=ld("display",e));else if(6===a.tag)a.stateNode.nodeValue=d?"":a.memoizedProps;else if(13===a.tag&&null!==a.memoizedState&&null===a.memoizedState.dehydrated){f=a.child.sibling;f.return=a;a=
	f;continue}else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===c)break;for(;null===a.sibling;){if(null===a.return||a.return===c)break a;a=a.return;}a.sibling.return=a.return;a=a.sibling;}Ui(b);return;case 19:Ui(b);return;case 17:return}throw Error(u(163));}function Ui(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Bi);b.forEach(function(b){var d=Vi.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d));});}}
	var Wi="function"===typeof WeakMap?WeakMap:Map;function Xi(a,b,c){c=wg(c,null);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Yi||(Yi=!0,Zi=d);Ci(a,b);};return c}
	function $i(a,b,c){c=wg(c,null);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ci(a,b);return d(e)};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===aj?aj=new Set([this]):aj.add(this),Ci(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""});});return c}
	var bj=Math.ceil,cj=Wa.ReactCurrentDispatcher,dj=Wa.ReactCurrentOwner,V=0,ej=8,fj=16,gj=32,ti=0,hj=1,ij=2,ui=3,vi=4,jj=5,W=V,T=null,X=null,U=0,S=ti,kj=null,lj=1073741823,mj=1073741823,nj=null,wi=0,oj=!1,Ti=0,pj=500,Y=null,Yi=!1,Zi=null,aj=null,qj=!1,rj=null,sj=90,tj=null,uj=0,vj=null,wj=0;function Gg(){return (W&(fj|gj))!==V?1073741821-($f()/10|0):0!==wj?wj:wj=1073741821-($f()/10|0)}
	function Hg(a,b,c){b=b.mode;if(0===(b&2))return 1073741823;var d=ag();if(0===(b&4))return 99===d?1073741823:1073741822;if((W&fj)!==V)return U;if(null!==c)a=hg(a,c.timeoutMs|0||5E3,250);else switch(d){case 99:a=1073741823;break;case 98:a=hg(a,150,100);break;case 97:case 96:a=hg(a,5E3,250);break;case 95:a=2;break;default:throw Error(u(326));}null!==T&&a===U&&--a;return a}
	function Ig(a,b){if(50<uj)throw uj=0,vj=null,Error(u(185));a=xj(a,b);if(null!==a){var c=ag();1073741823===b?(W&ej)!==V&&(W&(fj|gj))===V?yj(a):(Z(a),W===V&&gg()):Z(a);(W&4)===V||98!==c&&99!==c||(null===tj?tj=new Map([[a,b]]):(c=tj.get(a),(void 0===c||c>b)&&tj.set(a,b)));}}
	function xj(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return;}null!==e&&(T===e&&(Bg(b),S===vi&&xi(e,U)),yi(e,b));return e}
	function zj(a){var b=a.lastExpiredTime;if(0!==b)return b;b=a.firstPendingTime;if(!Aj(a,b))return b;var c=a.lastPingedTime;a=a.nextKnownPendingLevel;a=c>a?c:a;return 2>=a&&b!==a?0:a}
	function Z(a){if(0!==a.lastExpiredTime)a.callbackExpirationTime=1073741823,a.callbackPriority=99,a.callbackNode=eg(yj.bind(null,a));else {var b=zj(a),c=a.callbackNode;if(0===b)null!==c&&(a.callbackNode=null,a.callbackExpirationTime=0,a.callbackPriority=90);else {var d=Gg();1073741823===b?d=99:1===b||2===b?d=95:(d=10*(1073741821-b)-10*(1073741821-d),d=0>=d?99:250>=d?98:5250>=d?97:95);if(null!==c){var e=a.callbackPriority;if(a.callbackExpirationTime===b&&e>=d)return;c!==Tf&&Kf(c);}a.callbackExpirationTime=
	b;a.callbackPriority=d;b=1073741823===b?eg(yj.bind(null,a)):dg(d,Bj.bind(null,a),{timeout:10*(1073741821-b)-$f()});a.callbackNode=b;}}}
	function Bj(a,b){wj=0;if(b)return b=Gg(),Cj(a,b),Z(a),null;var c=zj(a);if(0!==c){b=a.callbackNode;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&c===U||Ej(a,c);if(null!==X){var d=W;W|=fj;var e=Fj();do try{Gj();break}catch(h){Hj(a,h);}while(1);ng();W=d;cj.current=e;if(S===hj)throw b=kj,Ej(a,c),xi(a,c),Z(a),b;if(null===X)switch(e=a.finishedWork=a.current.alternate,a.finishedExpirationTime=c,d=S,T=null,d){case ti:case hj:throw Error(u(345));case ij:Cj(a,2<c?2:c);break;case ui:xi(a,c);d=a.lastSuspendedTime;
	c===d&&(a.nextKnownPendingLevel=Ij(e));if(1073741823===lj&&(e=Ti+pj-$f(),10<e)){if(oj){var f=a.lastPingedTime;if(0===f||f>=c){a.lastPingedTime=c;Ej(a,c);break}}f=zj(a);if(0!==f&&f!==c)break;if(0!==d&&d!==c){a.lastPingedTime=d;break}a.timeoutHandle=Hd(Jj.bind(null,a),e);break}Jj(a);break;case vi:xi(a,c);d=a.lastSuspendedTime;c===d&&(a.nextKnownPendingLevel=Ij(e));if(oj&&(e=a.lastPingedTime,0===e||e>=c)){a.lastPingedTime=c;Ej(a,c);break}e=zj(a);if(0!==e&&e!==c)break;if(0!==d&&d!==c){a.lastPingedTime=
	d;break}1073741823!==mj?d=10*(1073741821-mj)-$f():1073741823===lj?d=0:(d=10*(1073741821-lj)-5E3,e=$f(),c=10*(1073741821-c)-e,d=e-d,0>d&&(d=0),d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*bj(d/1960))-d,c<d&&(d=c));if(10<d){a.timeoutHandle=Hd(Jj.bind(null,a),d);break}Jj(a);break;case jj:if(1073741823!==lj&&null!==nj){f=lj;var g=nj;d=g.busyMinDurationMs|0;0>=d?d=0:(e=g.busyDelayMs|0,f=$f()-(10*(1073741821-f)-(g.timeoutMs|0||5E3)),d=f<=e?0:e+d-f);if(10<d){xi(a,c);a.timeoutHandle=
	Hd(Jj.bind(null,a),d);break}}Jj(a);break;default:throw Error(u(329));}Z(a);if(a.callbackNode===b)return Bj.bind(null,a)}}return null}
	function yj(a){var b=a.lastExpiredTime;b=0!==b?b:1073741823;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&b===U||Ej(a,b);if(null!==X){var c=W;W|=fj;var d=Fj();do try{Kj();break}catch(e){Hj(a,e);}while(1);ng();W=c;cj.current=d;if(S===hj)throw c=kj,Ej(a,b),xi(a,b),Z(a),c;if(null!==X)throw Error(u(261));a.finishedWork=a.current.alternate;a.finishedExpirationTime=b;T=null;Jj(a);Z(a);}return null}function Lj(){if(null!==tj){var a=tj;tj=null;a.forEach(function(a,c){Cj(c,a);Z(c);});gg();}}
	function Mj(a,b){var c=W;W|=1;try{return a(b)}finally{W=c,W===V&&gg();}}function Nj(a,b){var c=W;W&=-2;W|=ej;try{return a(b)}finally{W=c,W===V&&gg();}}
	function Ej(a,b){a.finishedWork=null;a.finishedExpirationTime=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Id(c));if(null!==X)for(c=X.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Df();break;case 3:eh();H(K);H(J);break;case 5:gh(d);break;case 4:eh();break;case 13:H(M);break;case 19:H(M);break;case 10:og(d);}c=c.return;}T=a;X=Sg(a.current,null);U=b;S=ti;kj=null;mj=lj=1073741823;nj=null;wi=0;oj=!1;}
	function Hj(a,b){do{try{ng();jh.current=sh;if(mh)for(var c=N.memoizedState;null!==c;){var d=c.queue;null!==d&&(d.pending=null);c=c.next;}lh=0;P=O=N=null;mh=!1;if(null===X||null===X.return)return S=hj,kj=b,X=null;a:{var e=a,f=X.return,g=X,h=b;b=U;g.effectTag|=2048;g.firstEffect=g.lastEffect=null;if(null!==h&&"object"===typeof h&&"function"===typeof h.then){var k=h;if(0===(g.mode&2)){var l=g.alternate;l?(g.updateQueue=l.updateQueue,g.memoizedState=l.memoizedState,g.expirationTime=l.expirationTime):(g.updateQueue=
	null,g.memoizedState=null);}var m=0!==(M.current&1),p=f;do{var x;if(x=13===p.tag){var z=p.memoizedState;if(null!==z)x=null!==z.dehydrated?!0:!1;else {var ca=p.memoizedProps;x=void 0===ca.fallback?!1:!0!==ca.unstable_avoidThisFallback?!0:m?!1:!0;}}if(x){var D=p.updateQueue;if(null===D){var t=new Set;t.add(k);p.updateQueue=t;}else D.add(k);if(0===(p.mode&2)){p.effectTag|=64;g.effectTag&=-2981;if(1===g.tag)if(null===g.alternate)g.tag=17;else {var y=wg(1073741823,null);y.tag=2;xg(g,y);}g.expirationTime=1073741823;
	break a}h=void 0;g=b;var A=e.pingCache;null===A?(A=e.pingCache=new Wi,h=new Set,A.set(k,h)):(h=A.get(k),void 0===h&&(h=new Set,A.set(k,h)));if(!h.has(g)){h.add(g);var q=Oj.bind(null,e,k,g);k.then(q,q);}p.effectTag|=4096;p.expirationTime=b;break a}p=p.return;}while(null!==p);h=Error((pb(g.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+qb(g));}S!==
	jj&&(S=ij);h=Ai(h,g);p=f;do{switch(p.tag){case 3:k=h;p.effectTag|=4096;p.expirationTime=b;var B=Xi(p,k,b);yg(p,B);break a;case 1:k=h;var w=p.type,ub=p.stateNode;if(0===(p.effectTag&64)&&("function"===typeof w.getDerivedStateFromError||null!==ub&&"function"===typeof ub.componentDidCatch&&(null===aj||!aj.has(ub)))){p.effectTag|=4096;p.expirationTime=b;var vb=$i(p,k,b);yg(p,vb);break a}}p=p.return;}while(null!==p)}X=Pj(X);}catch(Xc){b=Xc;continue}break}while(1)}
	function Fj(){var a=cj.current;cj.current=sh;return null===a?sh:a}function Ag(a,b){a<lj&&2<a&&(lj=a);null!==b&&a<mj&&2<a&&(mj=a,nj=b);}function Bg(a){a>wi&&(wi=a);}function Kj(){for(;null!==X;)X=Qj(X);}function Gj(){for(;null!==X&&!Uf();)X=Qj(X);}function Qj(a){var b=Rj(a.alternate,a,U);a.memoizedProps=a.pendingProps;null===b&&(b=Pj(a));dj.current=null;return b}
	function Pj(a){X=a;do{var b=X.alternate;a=X.return;if(0===(X.effectTag&2048)){b=si(b,X,U);if(1===U||1!==X.childExpirationTime){for(var c=0,d=X.child;null!==d;){var e=d.expirationTime,f=d.childExpirationTime;e>c&&(c=e);f>c&&(c=f);d=d.sibling;}X.childExpirationTime=c;}if(null!==b)return b;null!==a&&0===(a.effectTag&2048)&&(null===a.firstEffect&&(a.firstEffect=X.firstEffect),null!==X.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=X.firstEffect),a.lastEffect=X.lastEffect),1<X.effectTag&&(null!==
	a.lastEffect?a.lastEffect.nextEffect=X:a.firstEffect=X,a.lastEffect=X));}else {b=zi(X);if(null!==b)return b.effectTag&=2047,b;null!==a&&(a.firstEffect=a.lastEffect=null,a.effectTag|=2048);}b=X.sibling;if(null!==b)return b;X=a;}while(null!==X);S===ti&&(S=jj);return null}function Ij(a){var b=a.expirationTime;a=a.childExpirationTime;return b>a?b:a}function Jj(a){var b=ag();cg(99,Sj.bind(null,a,b));return null}
	function Sj(a,b){do Dj();while(null!==rj);if((W&(fj|gj))!==V)throw Error(u(327));var c=a.finishedWork,d=a.finishedExpirationTime;if(null===c)return null;a.finishedWork=null;a.finishedExpirationTime=0;if(c===a.current)throw Error(u(177));a.callbackNode=null;a.callbackExpirationTime=0;a.callbackPriority=90;a.nextKnownPendingLevel=0;var e=Ij(c);a.firstPendingTime=e;d<=a.lastSuspendedTime?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:d<=a.firstSuspendedTime&&(a.firstSuspendedTime=
	d-1);d<=a.lastPingedTime&&(a.lastPingedTime=0);d<=a.lastExpiredTime&&(a.lastExpiredTime=0);a===T&&(X=T=null,U=0);1<c.effectTag?null!==c.lastEffect?(c.lastEffect.nextEffect=c,e=c.firstEffect):e=c:e=c.firstEffect;if(null!==e){var f=W;W|=gj;dj.current=null;Dd=fd;var g=xd();if(yd(g)){if("selectionStart"in g)var h={start:g.selectionStart,end:g.selectionEnd};else a:{h=(h=g.ownerDocument)&&h.defaultView||window;var k=h.getSelection&&h.getSelection();if(k&&0!==k.rangeCount){h=k.anchorNode;var l=k.anchorOffset,
	m=k.focusNode;k=k.focusOffset;try{h.nodeType,m.nodeType;}catch(wb){h=null;break a}var p=0,x=-1,z=-1,ca=0,D=0,t=g,y=null;b:for(;;){for(var A;;){t!==h||0!==l&&3!==t.nodeType||(x=p+l);t!==m||0!==k&&3!==t.nodeType||(z=p+k);3===t.nodeType&&(p+=t.nodeValue.length);if(null===(A=t.firstChild))break;y=t;t=A;}for(;;){if(t===g)break b;y===h&&++ca===l&&(x=p);y===m&&++D===k&&(z=p);if(null!==(A=t.nextSibling))break;t=y;y=t.parentNode;}t=A;}h=-1===x||-1===z?null:{start:x,end:z};}else h=null;}h=h||{start:0,end:0};}else h=
	null;Ed={activeElementDetached:null,focusedElem:g,selectionRange:h};fd=!1;Y=e;do try{Tj();}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect;}while(null!==Y);Y=e;do try{for(g=a,h=b;null!==Y;){var q=Y.effectTag;q&16&&Rb(Y.stateNode,"");if(q&128){var B=Y.alternate;if(null!==B){var w=B.ref;null!==w&&("function"===typeof w?w(null):w.current=null);}}switch(q&1038){case 2:Pi(Y);Y.effectTag&=-3;break;case 6:Pi(Y);Y.effectTag&=-3;Si(Y.alternate,Y);break;case 1024:Y.effectTag&=-1025;break;case 1028:Y.effectTag&=
	-1025;Si(Y.alternate,Y);break;case 4:Si(Y.alternate,Y);break;case 8:l=Y,Mi(g,l,h),Ni(l);}Y=Y.nextEffect;}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect;}while(null!==Y);w=Ed;B=xd();q=w.focusedElem;h=w.selectionRange;if(B!==q&&q&&q.ownerDocument&&wd(q.ownerDocument.documentElement,q)){null!==h&&yd(q)&&(B=h.start,w=h.end,void 0===w&&(w=B),"selectionStart"in q?(q.selectionStart=B,q.selectionEnd=Math.min(w,q.value.length)):(w=(B=q.ownerDocument||document)&&B.defaultView||window,w.getSelection&&
	(w=w.getSelection(),l=q.textContent.length,g=Math.min(h.start,l),h=void 0===h.end?g:Math.min(h.end,l),!w.extend&&g>h&&(l=h,h=g,g=l),l=vd(q,g),m=vd(q,h),l&&m&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==m.node||w.focusOffset!==m.offset)&&(B=B.createRange(),B.setStart(l.node,l.offset),w.removeAllRanges(),g>h?(w.addRange(B),w.extend(m.node,m.offset)):(B.setEnd(m.node,m.offset),w.addRange(B))))));B=[];for(w=q;w=w.parentNode;)1===w.nodeType&&B.push({element:w,left:w.scrollLeft,
	top:w.scrollTop});"function"===typeof q.focus&&q.focus();for(q=0;q<B.length;q++)w=B[q],w.element.scrollLeft=w.left,w.element.scrollTop=w.top;}fd=!!Dd;Ed=Dd=null;a.current=c;Y=e;do try{for(q=a;null!==Y;){var ub=Y.effectTag;ub&36&&Ji(q,Y.alternate,Y);if(ub&128){B=void 0;var vb=Y.ref;if(null!==vb){var Xc=Y.stateNode;switch(Y.tag){case 5:B=Xc;break;default:B=Xc;}"function"===typeof vb?vb(B):vb.current=B;}}Y=Y.nextEffect;}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect;}while(null!==Y);Y=
	null;Vf();W=f;}else a.current=c;if(qj)qj=!1,rj=a,sj=b;else for(Y=e;null!==Y;)b=Y.nextEffect,Y.nextEffect=null,Y=b;b=a.firstPendingTime;0===b&&(aj=null);1073741823===b?a===vj?uj++:(uj=0,vj=a):uj=0;"function"===typeof Uj&&Uj(c.stateNode,d);Z(a);if(Yi)throw Yi=!1,a=Zi,Zi=null,a;if((W&ej)!==V)return null;gg();return null}function Tj(){for(;null!==Y;){var a=Y.effectTag;0!==(a&256)&&Gi(Y.alternate,Y);0===(a&512)||qj||(qj=!0,dg(97,function(){Dj();return null}));Y=Y.nextEffect;}}
	function Dj(){if(90!==sj){var a=97<sj?97:sj;sj=90;return cg(a,Vj)}}function Vj(){if(null===rj)return !1;var a=rj;rj=null;if((W&(fj|gj))!==V)throw Error(u(331));var b=W;W|=gj;for(a=a.current.firstEffect;null!==a;){try{var c=a;if(0!==(c.effectTag&512))switch(c.tag){case 0:case 11:case 15:case 22:Hi(5,c),Ii(5,c);}}catch(d){if(null===a)throw Error(u(330));Ei(a,d);}c=a.nextEffect;a.nextEffect=null;a=c;}W=b;gg();return !0}
	function Wj(a,b,c){b=Ai(c,b);b=Xi(a,b,1073741823);xg(a,b);a=xj(a,1073741823);null!==a&&Z(a);}function Ei(a,b){if(3===a.tag)Wj(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){Wj(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===aj||!aj.has(d))){a=Ai(b,a);a=$i(c,a,1073741823);xg(c,a);c=xj(c,1073741823);null!==c&&Z(c);break}}c=c.return;}}
	function Oj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);T===a&&U===c?S===vi||S===ui&&1073741823===lj&&$f()-Ti<pj?Ej(a,U):oj=!0:Aj(a,c)&&(b=a.lastPingedTime,0!==b&&b<c||(a.lastPingedTime=c,Z(a)));}function Vi(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=Gg(),b=Hg(b,a,null));a=xj(a,b);null!==a&&Z(a);}var Rj;
	Rj=function(a,b,c){var d=b.expirationTime;if(null!==a){var e=b.pendingProps;if(a.memoizedProps!==e||K.current)rg=!0;else {if(d<c){rg=!1;switch(b.tag){case 3:hi(b);Xh();break;case 5:fh(b);if(b.mode&4&&1!==c&&e.hidden)return b.expirationTime=b.childExpirationTime=1,null;break;case 1:L(b.type)&&Gf(b);break;case 4:dh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;e=b.type._context;I(jg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;
	if(0!==d&&d>=c)return ji(a,b,c);I(M,M.current&1);b=$h(a,b,c);return null!==b?b.sibling:null}I(M,M.current&1);break;case 19:d=b.childExpirationTime>=c;if(0!==(a.effectTag&64)){if(d)return mi(a,b,c);b.effectTag|=64;}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null);I(M,M.current);if(!d)return null}return $h(a,b,c)}rg=!1;}}else rg=!1;b.expirationTime=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;e=Cf(b,J.current);qg(b,c);e=oh(null,
	b,d,a,e,c);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(L(d)){var f=!0;Gf(b);}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;ug(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Fg(b,d,g,a);e.updater=Jg;b.stateNode=e;e._reactInternalFiber=b;Ng(b,d,a,c);b=gi(null,b,d,!0,f,c);}else b.tag=0,R(null,b,e,c),b=b.child;return b;case 16:a:{e=b.elementType;null!==a&&(a.alternate=
	null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;ob(e);if(1!==e._status)throw e._result;e=e._result;b.type=e;f=b.tag=Xj(e);a=ig(e,a);switch(f){case 0:b=di(null,b,e,a,c);break a;case 1:b=fi(null,b,e,a,c);break a;case 11:b=Zh(null,b,e,a,c);break a;case 14:b=ai(null,b,e,ig(e.type,a),d,c);break a}throw Error(u(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),di(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),fi(a,b,d,e,c);
	case 3:hi(b);d=b.updateQueue;if(null===a||null===d)throw Error(u(282));d=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;vg(a,b);zg(b,d,null,c);d=b.memoizedState.element;if(d===e)Xh(),b=$h(a,b,c);else {if(e=b.stateNode.hydrate)Ph=Jd(b.stateNode.containerInfo.firstChild),Oh=b,e=Qh=!0;if(e)for(c=Yg(b,null,d,c),b.child=c;c;)c.effectTag=c.effectTag&-3|1024,c=c.sibling;else R(a,b,d,c),Xh();b=b.child;}return b;case 5:return fh(b),null===a&&Uh(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:
	null,g=e.children,Gd(d,e)?g=null:null!==f&&Gd(d,f)&&(b.effectTag|=16),ei(a,b),b.mode&4&&1!==c&&e.hidden?(b.expirationTime=b.childExpirationTime=1,b=null):(R(a,b,g,c),b=b.child),b;case 6:return null===a&&Uh(b),null;case 13:return ji(a,b,c);case 4:return dh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Xg(b,null,d,c):R(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),Zh(a,b,d,e,c);case 7:return R(a,b,b.pendingProps,c),b.child;case 8:return R(a,
	b,b.pendingProps.children,c),b.child;case 12:return R(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(jg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=$e(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!K.current){b=$h(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==
	k){g=h.child;for(var l=k.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=wg(c,null),l.tag=2,xg(h,l));h.expirationTime<c&&(h.expirationTime=c);l=h.alternate;null!==l&&l.expirationTime<c&&(l.expirationTime=c);pg(h.return,c);k.expirationTime<c&&(k.expirationTime=c);break}l=l.next;}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return;}h=
	g;}R(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,qg(b,c),e=sg(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,R(a,b,d,c),b.child;case 14:return e=b.type,f=ig(e,b.pendingProps),f=ig(e.type,f),ai(a,b,e,f,d,c);case 15:return ci(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L(d)?(a=!0,Gf(b)):a=!1,qg(b,c),Lg(b,d,e),Ng(b,d,e,c),gi(null,
	b,d,!0,a,c);case 19:return mi(a,b,c)}throw Error(u(156,b.tag));};var Uj=null,Li=null;function Yj(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return !1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return !0;try{var c=b.inject(a);Uj=function(a){try{b.onCommitFiberRoot(c,a,void 0,64===(a.current.effectTag&64));}catch(e){}};Li=function(a){try{b.onCommitFiberUnmount(c,a);}catch(e){}};}catch(d){}return !0}
	function Zj(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null;}function Sh(a,b,c,d){return new Zj(a,b,c,d)}
	function bi(a){a=a.prototype;return !(!a||!a.isReactComponent)}function Xj(a){if("function"===typeof a)return bi(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===gb)return 11;if(a===jb)return 14}return 2}
	function Sg(a,b){var c=a.alternate;null===c?(c=Sh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{expirationTime:b.expirationTime,
	firstContext:b.firstContext,responders:b.responders};c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
	function Ug(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)bi(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ab:return Wg(c.children,e,f,b);case fb:g=8;e|=7;break;case bb:g=8;e|=1;break;case cb:return a=Sh(12,c,b,e|8),a.elementType=cb,a.type=cb,a.expirationTime=f,a;case hb:return a=Sh(13,c,b,e),a.type=hb,a.elementType=hb,a.expirationTime=f,a;case ib:return a=Sh(19,c,b,e),a.elementType=ib,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case db:g=
	10;break a;case eb:g=9;break a;case gb:g=11;break a;case jb:g=14;break a;case kb:g=16;d=null;break a;case lb:g=22;break a}throw Error(u(130,null==a?a:typeof a,""));}b=Sh(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function Wg(a,b,c,d){a=Sh(7,a,d,b);a.expirationTime=c;return a}function Tg(a,b,c){a=Sh(6,a,null,b);a.expirationTime=c;return a}
	function Vg(a,b,c){b=Sh(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
	function ak(a,b,c){this.tag=b;this.current=null;this.containerInfo=a;this.pingCache=this.pendingChildren=null;this.finishedExpirationTime=0;this.finishedWork=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=90;this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0;}
	function Aj(a,b){var c=a.firstSuspendedTime;a=a.lastSuspendedTime;return 0!==c&&c>=b&&a<=b}function xi(a,b){var c=a.firstSuspendedTime,d=a.lastSuspendedTime;c<b&&(a.firstSuspendedTime=b);if(d>b||0===c)a.lastSuspendedTime=b;b<=a.lastPingedTime&&(a.lastPingedTime=0);b<=a.lastExpiredTime&&(a.lastExpiredTime=0);}
	function yi(a,b){b>a.firstPendingTime&&(a.firstPendingTime=b);var c=a.firstSuspendedTime;0!==c&&(b>=c?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:b>=a.lastSuspendedTime&&(a.lastSuspendedTime=b+1),b>a.nextKnownPendingLevel&&(a.nextKnownPendingLevel=b));}function Cj(a,b){var c=a.lastExpiredTime;if(0===c||c>b)a.lastExpiredTime=b;}
	function bk(a,b,c,d){var e=b.current,f=Gg(),g=Dg.suspense;f=Hg(f,e,g);a:if(c){c=c._reactInternalFiber;b:{if(dc(c)!==c||1!==c.tag)throw Error(u(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(L(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return;}while(null!==h);throw Error(u(171));}if(1===c.tag){var k=c.type;if(L(k)){c=Ff(c,k,h);break a}}c=h;}else c=Af;null===b.context?b.context=c:b.pendingContext=c;b=wg(f,g);b.payload={element:a};d=void 0===
	d?null:d;null!==d&&(b.callback=d);xg(e,b);Ig(e,f);return f}function ck(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function dk(a,b){a=a.memoizedState;null!==a&&null!==a.dehydrated&&a.retryTime<b&&(a.retryTime=b);}function ek(a,b){dk(a,b);(a=a.alternate)&&dk(a,b);}
	function fk(a,b,c){c=null!=c&&!0===c.hydrate;var d=new ak(a,b,c),e=Sh(3,null,null,2===b?7:1===b?3:0);d.current=e;e.stateNode=d;ug(e);a[Od]=d.current;c&&0!==b&&Jc(a,9===a.nodeType?a:a.ownerDocument);this._internalRoot=d;}fk.prototype.render=function(a){bk(a,this._internalRoot,null,null);};fk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;bk(null,a,null,function(){b[Od]=null;});};
	function gk(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function hk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new fk(a,0,b?{hydrate:!0}:void 0)}
	function ik(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=ck(g);h.call(a);};}bk(b,g,a,e);}else {f=c._reactRootContainer=hk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=ck(g);k.call(a);};}Nj(function(){bk(b,g,a,e);});}return ck(g)}function jk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return {$$typeof:$a,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
	wc=function(a){if(13===a.tag){var b=hg(Gg(),150,100);Ig(a,b);ek(a,b);}};xc=function(a){13===a.tag&&(Ig(a,3),ek(a,3));};yc=function(a){if(13===a.tag){var b=Gg();b=Hg(b,a,null);Ig(a,b);ek(a,b);}};
	za=function(a,b,c){switch(b){case "input":Cb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Qd(d);if(!e)throw Error(u(90));yb(d);Cb(d,e);}}}break;case "textarea":Kb(a,c);break;case "select":b=c.value,null!=b&&Hb(a,!!c.multiple,b,!1);}};Fa=Mj;
	Ga=function(a,b,c,d,e){var f=W;W|=4;try{return cg(98,a.bind(null,b,c,d,e))}finally{W=f,W===V&&gg();}};Ha=function(){(W&(1|fj|gj))===V&&(Lj(),Dj());};Ia=function(a,b){var c=W;W|=2;try{return a(b)}finally{W=c,W===V&&gg();}};function kk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!gk(b))throw Error(u(200));return jk(a,b,null,c)}var lk={Events:[Nc,Pd,Qd,xa,ta,Xd,function(a){jc(a,Wd);},Da,Ea,id,mc,Dj,{current:!1}]};
	(function(a){var b=a.findFiberByHostInstance;return Yj(n({},a,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Wa.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=hc(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))})({findFiberByHostInstance:tc,bundleType:0,version:"16.14.0",
	rendererPackageName:"react-dom"});reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=lk;reactDom_production_min.createPortal=kk;reactDom_production_min.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(void 0===b){if("function"===typeof a.render)throw Error(u(188));throw Error(u(268,Object.keys(a)));}a=hc(b);a=null===a?null:a.stateNode;return a};
	reactDom_production_min.flushSync=function(a,b){if((W&(fj|gj))!==V)throw Error(u(187));var c=W;W|=1;try{return cg(99,a.bind(null,b))}finally{W=c,gg();}};reactDom_production_min.hydrate=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!0,c)};reactDom_production_min.render=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!1,c)};
	reactDom_production_min.unmountComponentAtNode=function(a){if(!gk(a))throw Error(u(40));return a._reactRootContainer?(Nj(function(){ik(null,null,a,!1,function(){a._reactRootContainer=null;a[Od]=null;});}),!0):!1};reactDom_production_min.unstable_batchedUpdates=Mj;reactDom_production_min.unstable_createPortal=function(a,b){return kk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};
	reactDom_production_min.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!gk(c))throw Error(u(200));if(null==a||void 0===a._reactInternalFiber)throw Error(u(38));return ik(a,b,c,!1,d)};reactDom_production_min.version="16.14.0";
	return reactDom_production_min;
}

var reactDom_development = {};

var tracing = {exports: {}};

var schedulerTracing_production_min = {};

/** @license React v0.19.1
 * scheduler-tracing.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredSchedulerTracing_production_min;

function requireSchedulerTracing_production_min () {
	if (hasRequiredSchedulerTracing_production_min) return schedulerTracing_production_min;
	hasRequiredSchedulerTracing_production_min = 1;
var b=0;schedulerTracing_production_min.__interactionsRef=null;schedulerTracing_production_min.__subscriberRef=null;schedulerTracing_production_min.unstable_clear=function(a){return a()};schedulerTracing_production_min.unstable_getCurrent=function(){return null};schedulerTracing_production_min.unstable_getThreadID=function(){return ++b};schedulerTracing_production_min.unstable_subscribe=function(){};schedulerTracing_production_min.unstable_trace=function(a,d,c){return c()};schedulerTracing_production_min.unstable_unsubscribe=function(){};schedulerTracing_production_min.unstable_wrap=function(a){return a};
	return schedulerTracing_production_min;
}

var schedulerTracing_development = {};

/** @license React v0.19.1
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredSchedulerTracing_development;

function requireSchedulerTracing_development () {
	if (hasRequiredSchedulerTracing_development) return schedulerTracing_development;
	hasRequiredSchedulerTracing_development = 1;
	(function (exports) {



		if (process.env.NODE_ENV !== "production") {
		  (function() {

		var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

		var interactionIDCounter = 0;
		var threadIDCounter = 0; // Set of currently traced interactions.
		// Interactions "stack"–
		// Meaning that newly traced interactions are appended to the previously active set.
		// When an interaction goes out of scope, the previous set (if any) is restored.

		exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

		exports.__subscriberRef = null;

		{
		  exports.__interactionsRef = {
		    current: new Set()
		  };
		  exports.__subscriberRef = {
		    current: null
		  };
		}
		function unstable_clear(callback) {

		  var prevInteractions = exports.__interactionsRef.current;
		  exports.__interactionsRef.current = new Set();

		  try {
		    return callback();
		  } finally {
		    exports.__interactionsRef.current = prevInteractions;
		  }
		}
		function unstable_getCurrent() {
		  {
		    return exports.__interactionsRef.current;
		  }
		}
		function unstable_getThreadID() {
		  return ++threadIDCounter;
		}
		function unstable_trace(name, timestamp, callback) {
		  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

		  var interaction = {
		    __count: 1,
		    id: interactionIDCounter++,
		    name: name,
		    timestamp: timestamp
		  };
		  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
		  // To do that, clone the current interactions.
		  // The previous set will be restored upon completion.

		  var interactions = new Set(prevInteractions);
		  interactions.add(interaction);
		  exports.__interactionsRef.current = interactions;
		  var subscriber = exports.__subscriberRef.current;
		  var returnValue;

		  try {
		    if (subscriber !== null) {
		      subscriber.onInteractionTraced(interaction);
		    }
		  } finally {
		    try {
		      if (subscriber !== null) {
		        subscriber.onWorkStarted(interactions, threadID);
		      }
		    } finally {
		      try {
		        returnValue = callback();
		      } finally {
		        exports.__interactionsRef.current = prevInteractions;

		        try {
		          if (subscriber !== null) {
		            subscriber.onWorkStopped(interactions, threadID);
		          }
		        } finally {
		          interaction.__count--; // If no async work was scheduled for this interaction,
		          // Notify subscribers that it's completed.

		          if (subscriber !== null && interaction.__count === 0) {
		            subscriber.onInteractionScheduledWorkCompleted(interaction);
		          }
		        }
		      }
		    }
		  }

		  return returnValue;
		}
		function unstable_wrap(callback) {
		  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

		  var wrappedInteractions = exports.__interactionsRef.current;
		  var subscriber = exports.__subscriberRef.current;

		  if (subscriber !== null) {
		    subscriber.onWorkScheduled(wrappedInteractions, threadID);
		  } // Update the pending async work count for the current interactions.
		  // Update after calling subscribers in case of error.


		  wrappedInteractions.forEach(function (interaction) {
		    interaction.__count++;
		  });
		  var hasRun = false;

		  function wrapped() {
		    var prevInteractions = exports.__interactionsRef.current;
		    exports.__interactionsRef.current = wrappedInteractions;
		    subscriber = exports.__subscriberRef.current;

		    try {
		      var returnValue;

		      try {
		        if (subscriber !== null) {
		          subscriber.onWorkStarted(wrappedInteractions, threadID);
		        }
		      } finally {
		        try {
		          returnValue = callback.apply(undefined, arguments);
		        } finally {
		          exports.__interactionsRef.current = prevInteractions;

		          if (subscriber !== null) {
		            subscriber.onWorkStopped(wrappedInteractions, threadID);
		          }
		        }
		      }

		      return returnValue;
		    } finally {
		      if (!hasRun) {
		        // We only expect a wrapped function to be executed once,
		        // But in the event that it's executed more than once–
		        // Only decrement the outstanding interaction counts once.
		        hasRun = true; // Update pending async counts for all wrapped interactions.
		        // If this was the last scheduled async work for any of them,
		        // Mark them as completed.

		        wrappedInteractions.forEach(function (interaction) {
		          interaction.__count--;

		          if (subscriber !== null && interaction.__count === 0) {
		            subscriber.onInteractionScheduledWorkCompleted(interaction);
		          }
		        });
		      }
		    }
		  }

		  wrapped.cancel = function cancel() {
		    subscriber = exports.__subscriberRef.current;

		    try {
		      if (subscriber !== null) {
		        subscriber.onWorkCanceled(wrappedInteractions, threadID);
		      }
		    } finally {
		      // Update pending async counts for all wrapped interactions.
		      // If this was the last scheduled async work for any of them,
		      // Mark them as completed.
		      wrappedInteractions.forEach(function (interaction) {
		        interaction.__count--;

		        if (subscriber && interaction.__count === 0) {
		          subscriber.onInteractionScheduledWorkCompleted(interaction);
		        }
		      });
		    }
		  };

		  return wrapped;
		}

		var subscribers = null;

		{
		  subscribers = new Set();
		}

		function unstable_subscribe(subscriber) {
		  {
		    subscribers.add(subscriber);

		    if (subscribers.size === 1) {
		      exports.__subscriberRef.current = {
		        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
		        onInteractionTraced: onInteractionTraced,
		        onWorkCanceled: onWorkCanceled,
		        onWorkScheduled: onWorkScheduled,
		        onWorkStarted: onWorkStarted,
		        onWorkStopped: onWorkStopped
		      };
		    }
		  }
		}
		function unstable_unsubscribe(subscriber) {
		  {
		    subscribers.delete(subscriber);

		    if (subscribers.size === 0) {
		      exports.__subscriberRef.current = null;
		    }
		  }
		}

		function onInteractionTraced(interaction) {
		  var didCatchError = false;
		  var caughtError = null;
		  subscribers.forEach(function (subscriber) {
		    try {
		      subscriber.onInteractionTraced(interaction);
		    } catch (error) {
		      if (!didCatchError) {
		        didCatchError = true;
		        caughtError = error;
		      }
		    }
		  });

		  if (didCatchError) {
		    throw caughtError;
		  }
		}

		function onInteractionScheduledWorkCompleted(interaction) {
		  var didCatchError = false;
		  var caughtError = null;
		  subscribers.forEach(function (subscriber) {
		    try {
		      subscriber.onInteractionScheduledWorkCompleted(interaction);
		    } catch (error) {
		      if (!didCatchError) {
		        didCatchError = true;
		        caughtError = error;
		      }
		    }
		  });

		  if (didCatchError) {
		    throw caughtError;
		  }
		}

		function onWorkScheduled(interactions, threadID) {
		  var didCatchError = false;
		  var caughtError = null;
		  subscribers.forEach(function (subscriber) {
		    try {
		      subscriber.onWorkScheduled(interactions, threadID);
		    } catch (error) {
		      if (!didCatchError) {
		        didCatchError = true;
		        caughtError = error;
		      }
		    }
		  });

		  if (didCatchError) {
		    throw caughtError;
		  }
		}

		function onWorkStarted(interactions, threadID) {
		  var didCatchError = false;
		  var caughtError = null;
		  subscribers.forEach(function (subscriber) {
		    try {
		      subscriber.onWorkStarted(interactions, threadID);
		    } catch (error) {
		      if (!didCatchError) {
		        didCatchError = true;
		        caughtError = error;
		      }
		    }
		  });

		  if (didCatchError) {
		    throw caughtError;
		  }
		}

		function onWorkStopped(interactions, threadID) {
		  var didCatchError = false;
		  var caughtError = null;
		  subscribers.forEach(function (subscriber) {
		    try {
		      subscriber.onWorkStopped(interactions, threadID);
		    } catch (error) {
		      if (!didCatchError) {
		        didCatchError = true;
		        caughtError = error;
		      }
		    }
		  });

		  if (didCatchError) {
		    throw caughtError;
		  }
		}

		function onWorkCanceled(interactions, threadID) {
		  var didCatchError = false;
		  var caughtError = null;
		  subscribers.forEach(function (subscriber) {
		    try {
		      subscriber.onWorkCanceled(interactions, threadID);
		    } catch (error) {
		      if (!didCatchError) {
		        didCatchError = true;
		        caughtError = error;
		      }
		    }
		  });

		  if (didCatchError) {
		    throw caughtError;
		  }
		}

		exports.unstable_clear = unstable_clear;
		exports.unstable_getCurrent = unstable_getCurrent;
		exports.unstable_getThreadID = unstable_getThreadID;
		exports.unstable_subscribe = unstable_subscribe;
		exports.unstable_trace = unstable_trace;
		exports.unstable_unsubscribe = unstable_unsubscribe;
		exports.unstable_wrap = unstable_wrap;
		  })();
		} 
	} (schedulerTracing_development));
	return schedulerTracing_development;
}

var hasRequiredTracing;

function requireTracing () {
	if (hasRequiredTracing) return tracing.exports;
	hasRequiredTracing = 1;

	if (process.env.NODE_ENV === 'production') {
	  tracing.exports = requireSchedulerTracing_production_min();
	} else {
	  tracing.exports = requireSchedulerTracing_development();
	}
	return tracing.exports;
}

/** @license React v16.14.0
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactDom_development;

function requireReactDom_development () {
	if (hasRequiredReactDom_development) return reactDom_development;
	hasRequiredReactDom_development = 1;



	if (process.env.NODE_ENV !== "production") {
	  (function() {

	var React = reactExports;
	var _assign = requireObjectAssign();
	var Scheduler = requireScheduler();
	var checkPropTypes = require$$1;
	var tracing = requireTracing();

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
	// Current owner and dispatcher used to share the same ref,
	// but PR #14548 split them out to better support the react-debug-tools package.

	if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
	  ReactSharedInternals.ReactCurrentDispatcher = {
	    current: null
	  };
	}

	if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
	  ReactSharedInternals.ReactCurrentBatchConfig = {
	    suspense: null
	  };
	}

	// by calls to these methods by a Babel plugin.
	//
	// In PROD (or in packages without access to React internals),
	// they are left as they are instead.

	function warn(format) {
	  {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    printWarning('warn', format, args);
	  }
	}
	function error(format) {
	  {
	    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	      args[_key2 - 1] = arguments[_key2];
	    }

	    printWarning('error', format, args);
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

	    if (!hasExistingStack) {
	      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	      var stack = ReactDebugCurrentFrame.getStackAddendum();

	      if (stack !== '') {
	        format += '%s';
	        args = args.concat([stack]);
	      }
	    }

	    var argsWithFormat = args.map(function (item) {
	      return '' + item;
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      throw new Error(message);
	    } catch (x) {}
	  }
	}

	if (!React) {
	  {
	    throw Error( "ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM." );
	  }
	}

	var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
	  var funcArgs = Array.prototype.slice.call(arguments, 3);

	  try {
	    func.apply(context, funcArgs);
	  } catch (error) {
	    this.onError(error);
	  }
	};

	{
	  // In DEV mode, we swap out invokeGuardedCallback for a special version
	  // that plays more nicely with the browser's DevTools. The idea is to preserve
	  // "Pause on exceptions" behavior. Because React wraps all user-provided
	  // functions in invokeGuardedCallback, and the production version of
	  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
	  // like caught exceptions, and the DevTools won't pause unless the developer
	  // takes the extra step of enabling pause on caught exceptions. This is
	  // unintuitive, though, because even though React has caught the error, from
	  // the developer's perspective, the error is uncaught.
	  //
	  // To preserve the expected "Pause on exceptions" behavior, we don't use a
	  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	  // DOM node, and call the user-provided callback from inside an event handler
	  // for that fake event. If the callback throws, the error is "captured" using
	  // a global event handler. But because the error happens in a different
	  // event loop context, it does not interrupt the normal program flow.
	  // Effectively, this gives us try-catch behavior without actually using
	  // try-catch. Neat!
	  // Check that the browser supports the APIs we need to implement our special
	  // DEV version of invokeGuardedCallback
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');

	    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
	      // If document doesn't exist we know for sure we will crash in this method
	      // when we call document.createEvent(). However this can cause confusing
	      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
	      // So we preemptively throw with a better message instead.
	      if (!(typeof document !== 'undefined')) {
	        {
	          throw Error( "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous." );
	        }
	      }

	      var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
	      // set this to true at the beginning, then set it to false right after
	      // calling the function. If the function errors, `didError` will never be
	      // set to false. This strategy works even if the browser is flaky and
	      // fails to call our global error handler, because it doesn't rely on
	      // the error event at all.

	      var didError = true; // Keeps track of the value of window.event so that we can reset it
	      // during the callback to let user code access window.event in the
	      // browsers that support it.

	      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
	      // dispatching: https://github.com/facebook/react/issues/13688

	      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
	      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
	      // call the user-provided callback.

	      var funcArgs = Array.prototype.slice.call(arguments, 3);

	      function callCallback() {
	        // We immediately remove the callback from event listeners so that
	        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
	        // nested call would trigger the fake event handlers of any call higher
	        // in the stack.
	        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
	        // window.event assignment in both IE <= 10 as they throw an error
	        // "Member not found" in strict mode, and in Firefox which does not
	        // support window.event.

	        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
	          window.event = windowEvent;
	        }

	        func.apply(context, funcArgs);
	        didError = false;
	      } // Create a global error event handler. We use this to capture the value
	      // that was thrown. It's possible that this error handler will fire more
	      // than once; for example, if non-React code also calls `dispatchEvent`
	      // and a handler for that event throws. We should be resilient to most of
	      // those cases. Even if our error event handler fires more than once, the
	      // last error event is always used. If the callback actually does error,
	      // we know that the last error event is the correct one, because it's not
	      // possible for anything else to have happened in between our callback
	      // erroring and the code that follows the `dispatchEvent` call below. If
	      // the callback doesn't error, but the error event was fired, we know to
	      // ignore it because `didError` will be false, as described above.


	      var error; // Use this to track whether the error event is ever called.

	      var didSetError = false;
	      var isCrossOriginError = false;

	      function handleWindowError(event) {
	        error = event.error;
	        didSetError = true;

	        if (error === null && event.colno === 0 && event.lineno === 0) {
	          isCrossOriginError = true;
	        }

	        if (event.defaultPrevented) {
	          // Some other error handler has prevented default.
	          // Browsers silence the error report if this happens.
	          // We'll remember this to later decide whether to log it or not.
	          if (error != null && typeof error === 'object') {
	            try {
	              error._suppressLogging = true;
	            } catch (inner) {// Ignore.
	            }
	          }
	        }
	      } // Create a fake event type.


	      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

	      window.addEventListener('error', handleWindowError);
	      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
	      // errors, it will trigger our global error handler.

	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);

	      if (windowEventDescriptor) {
	        Object.defineProperty(window, 'event', windowEventDescriptor);
	      }

	      if (didError) {
	        if (!didSetError) {
	          // The callback errored, but the error event never fired.
	          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
	        } else if (isCrossOriginError) {
	          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
	        }

	        this.onError(error);
	      } // Remove our event listeners


	      window.removeEventListener('error', handleWindowError);
	    };

	    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
	  }
	}

	var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

	var hasError = false;
	var caughtError = null; // Used by event system to capture/rethrow the first error.

	var hasRethrowError = false;
	var rethrowError = null;
	var reporter = {
	  onError: function (error) {
	    hasError = true;
	    caughtError = error;
	  }
	};
	/**
	 * Call a function while guarding against errors that happens within it.
	 * Returns an error if it throws, otherwise null.
	 *
	 * In production, this is implemented using a try-catch. The reason we don't
	 * use a try-catch directly is so that we can swap out a different
	 * implementation in DEV mode.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
	  hasError = false;
	  caughtError = null;
	  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
	}
	/**
	 * Same as invokeGuardedCallback, but instead of returning an error, it stores
	 * it in a global so it can be rethrown by `rethrowCaughtError` later.
	 * TODO: See if caughtError and rethrowError can be unified.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
	  invokeGuardedCallback.apply(this, arguments);

	  if (hasError) {
	    var error = clearCaughtError();

	    if (!hasRethrowError) {
	      hasRethrowError = true;
	      rethrowError = error;
	    }
	  }
	}
	/**
	 * During execution of guarded functions we will capture the first error which
	 * we will rethrow to be handled by the top level error handler.
	 */

	function rethrowCaughtError() {
	  if (hasRethrowError) {
	    var error = rethrowError;
	    hasRethrowError = false;
	    rethrowError = null;
	    throw error;
	  }
	}
	function hasCaughtError() {
	  return hasError;
	}
	function clearCaughtError() {
	  if (hasError) {
	    var error = caughtError;
	    hasError = false;
	    caughtError = null;
	    return error;
	  } else {
	    {
	      {
	        throw Error( "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }
	  }
	}

	var getFiberCurrentPropsFromNode = null;
	var getInstanceFromNode = null;
	var getNodeFromInstance = null;
	function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
	  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
	  getInstanceFromNode = getInstanceFromNodeImpl;
	  getNodeFromInstance = getNodeFromInstanceImpl;

	  {
	    if (!getNodeFromInstance || !getInstanceFromNode) {
	      error('EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
	    }
	  }
	}
	var validateEventDispatches;

	{
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
	      error('EventPluginUtils: Invalid `event`.');
	    }
	  };
	}
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */


	function executeDispatch(event, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = getNodeFromInstance(inst);
	  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
	  event.currentTarget = null;
	}
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */

	function executeDispatchesInOrder(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;

	  {
	    validateEventDispatches(event);
	  }

	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      } // Listeners and Instances are two parallel arrays that are always in sync.


	      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, dispatchListeners, dispatchInstances);
	  }

	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	var FunctionComponent = 0;
	var ClassComponent = 1;
	var IndeterminateComponent = 2; // Before we know whether it is function or class

	var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

	var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

	var HostComponent = 5;
	var HostText = 6;
	var Fragment = 7;
	var Mode = 8;
	var ContextConsumer = 9;
	var ContextProvider = 10;
	var ForwardRef = 11;
	var Profiler = 12;
	var SuspenseComponent = 13;
	var MemoComponent = 14;
	var SimpleMemoComponent = 15;
	var LazyComponent = 16;
	var IncompleteClassComponent = 17;
	var DehydratedFragment = 18;
	var SuspenseListComponent = 19;
	var FundamentalComponent = 20;
	var ScopeComponent = 21;
	var Block = 22;

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;
	/**
	 * Injectable mapping from names to event plugin modules.
	 */

	var namesToPlugins = {};
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */

	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }

	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);

	    if (!(pluginIndex > -1)) {
	      {
	        throw Error( "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`." );
	      }
	    }

	    if (plugins[pluginIndex]) {
	      continue;
	    }

	    if (!pluginModule.extractEvents) {
	      {
	        throw Error( "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not." );
	      }
	    }

	    plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;

	    for (var eventName in publishedEvents) {
	      if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
	        {
	          throw Error( "EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`." );
	        }
	      }
	    }
	  }
	}
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */


	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	    {
	      throw Error( "EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`." );
	    }
	  }

	  eventNameDispatchConfigs[eventName] = dispatchConfig;
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }

	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }

	  return false;
	}
	/**
	 * Publishes a registration name that is used to identify dispatched events.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */


	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  if (!!registrationNameModules[registrationName]) {
	    {
	      throw Error( "EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`." );
	    }
	  }

	  registrationNameModules[registrationName] = pluginModule;
	  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  {
	    var lowerCasedName = registrationName.toLowerCase();
	    possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 */

	/**
	 * Ordered list of injected plugins.
	 */


	var plugins = [];
	/**
	 * Mapping from event name to dispatch config
	 */

	var eventNameDispatchConfigs = {};
	/**
	 * Mapping from registration name to plugin module
	 */

	var registrationNameModules = {};
	/**
	 * Mapping from registration name to event name
	 */

	var registrationNameDependencies = {};
	/**
	 * Mapping from lowercase registration names to the properly cased version,
	 * used to warn in the case of missing event handlers. Available
	 * only in true.
	 * @type {Object}
	 */

	var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

	/**
	 * Injects an ordering of plugins (by plugin name). This allows the ordering
	 * to be decoupled from injection of the actual plugins so that ordering is
	 * always deterministic regardless of packaging, on-the-fly injection, etc.
	 *
	 * @param {array} InjectedEventPluginOrder
	 * @internal
	 */

	function injectEventPluginOrder(injectedEventPluginOrder) {
	  if (!!eventPluginOrder) {
	    {
	      throw Error( "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React." );
	    }
	  } // Clone the ordering so it cannot be dynamically mutated.


	  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	  recomputePluginOrdering();
	}
	/**
	 * Injects plugins to be used by plugin event system. The plugin names must be
	 * in the ordering injected by `injectEventPluginOrder`.
	 *
	 * Plugins can be injected as part of page initialization or on-the-fly.
	 *
	 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	 * @internal
	 */

	function injectEventPluginsByName(injectedNamesToPlugins) {
	  var isOrderingDirty = false;

	  for (var pluginName in injectedNamesToPlugins) {
	    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	      continue;
	    }

	    var pluginModule = injectedNamesToPlugins[pluginName];

	    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	      if (!!namesToPlugins[pluginName]) {
	        {
	          throw Error( "EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`." );
	        }
	      }

	      namesToPlugins[pluginName] = pluginModule;
	      isOrderingDirty = true;
	    }
	  }

	  if (isOrderingDirty) {
	    recomputePluginOrdering();
	  }
	}

	var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

	var PLUGIN_EVENT_SYSTEM = 1;
	var IS_REPLAYED = 1 << 5;
	var IS_FIRST_ANCESTOR = 1 << 6;

	var restoreImpl = null;
	var restoreTarget = null;
	var restoreQueue = null;

	function restoreStateOfTarget(target) {
	  // We perform this translation at the end of the event loop so that we
	  // always receive the correct fiber here
	  var internalInstance = getInstanceFromNode(target);

	  if (!internalInstance) {
	    // Unmounted
	    return;
	  }

	  if (!(typeof restoreImpl === 'function')) {
	    {
	      throw Error( "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

	  if (stateNode) {
	    var _props = getFiberCurrentPropsFromNode(stateNode);

	    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
	  }
	}

	function setRestoreImplementation(impl) {
	  restoreImpl = impl;
	}
	function enqueueStateRestore(target) {
	  if (restoreTarget) {
	    if (restoreQueue) {
	      restoreQueue.push(target);
	    } else {
	      restoreQueue = [target];
	    }
	  } else {
	    restoreTarget = target;
	  }
	}
	function needsStateRestore() {
	  return restoreTarget !== null || restoreQueue !== null;
	}
	function restoreStateIfNeeded() {
	  if (!restoreTarget) {
	    return;
	  }

	  var target = restoreTarget;
	  var queuedTargets = restoreQueue;
	  restoreTarget = null;
	  restoreQueue = null;
	  restoreStateOfTarget(target);

	  if (queuedTargets) {
	    for (var i = 0; i < queuedTargets.length; i++) {
	      restoreStateOfTarget(queuedTargets[i]);
	    }
	  }
	}

	var enableProfilerTimer = true; // Trace which interactions trigger each commit.

	var enableDeprecatedFlareAPI = false; // Experimental Host Component support.

	var enableFundamentalAPI = false; // Experimental Scope support.
	var warnAboutStringRefs = false;

	// the renderer. Such as when we're dispatching events or if third party
	// libraries need to call batchedUpdates. Eventually, this API will go away when
	// everything is batched by default. We'll then have a similar API to opt-out of
	// scheduled work and instead do synchronous work.
	// Defaults

	var batchedUpdatesImpl = function (fn, bookkeeping) {
	  return fn(bookkeeping);
	};

	var discreteUpdatesImpl = function (fn, a, b, c, d) {
	  return fn(a, b, c, d);
	};

	var flushDiscreteUpdatesImpl = function () {};

	var batchedEventUpdatesImpl = batchedUpdatesImpl;
	var isInsideEventHandler = false;
	var isBatchingEventUpdates = false;

	function finishEventHandler() {
	  // Here we wait until all updates have propagated, which is important
	  // when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  // Then we restore state of any controlled component.
	  var controlledComponentsHavePendingUpdates = needsStateRestore();

	  if (controlledComponentsHavePendingUpdates) {
	    // If a controlled event was fired, we may need to restore the state of
	    // the DOM node back to the controlled value. This is necessary when React
	    // bails out of the update without touching the DOM.
	    flushDiscreteUpdatesImpl();
	    restoreStateIfNeeded();
	  }
	}

	function batchedUpdates(fn, bookkeeping) {
	  if (isInsideEventHandler) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(bookkeeping);
	  }

	  isInsideEventHandler = true;

	  try {
	    return batchedUpdatesImpl(fn, bookkeeping);
	  } finally {
	    isInsideEventHandler = false;
	    finishEventHandler();
	  }
	}
	function batchedEventUpdates(fn, a, b) {
	  if (isBatchingEventUpdates) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(a, b);
	  }

	  isBatchingEventUpdates = true;

	  try {
	    return batchedEventUpdatesImpl(fn, a, b);
	  } finally {
	    isBatchingEventUpdates = false;
	    finishEventHandler();
	  }
	} // This is for the React Flare event system
	function discreteUpdates(fn, a, b, c, d) {
	  var prevIsInsideEventHandler = isInsideEventHandler;
	  isInsideEventHandler = true;

	  try {
	    return discreteUpdatesImpl(fn, a, b, c, d);
	  } finally {
	    isInsideEventHandler = prevIsInsideEventHandler;

	    if (!isInsideEventHandler) {
	      finishEventHandler();
	    }
	  }
	}
	function flushDiscreteUpdatesIfNeeded(timeStamp) {
	  // event.timeStamp isn't overly reliable due to inconsistencies in
	  // how different browsers have historically provided the time stamp.
	  // Some browsers provide high-resolution time stamps for all events,
	  // some provide low-resolution time stamps for all events. FF < 52
	  // even mixes both time stamps together. Some browsers even report
	  // negative time stamps or time stamps that are 0 (iOS9) in some cases.
	  // Given we are only comparing two time stamps with equality (!==),
	  // we are safe from the resolution differences. If the time stamp is 0
	  // we bail-out of preventing the flush, which can affect semantics,
	  // such as if an earlier flush removes or adds event listeners that
	  // are fired in the subsequent flush. However, this is the same
	  // behaviour as we had before this change, so the risks are low.
	  if (!isInsideEventHandler && (!enableDeprecatedFlareAPI  )) {
	    flushDiscreteUpdatesImpl();
	  }
	}
	function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
	  batchedUpdatesImpl = _batchedUpdatesImpl;
	  discreteUpdatesImpl = _discreteUpdatesImpl;
	  flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
	  batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
	}

	var DiscreteEvent = 0;
	var UserBlockingEvent = 1;
	var ContinuousEvent = 2;

	// A reserved attribute.
	// It is handled by React separately and shouldn't be written to the DOM.
	var RESERVED = 0; // A simple string attribute.
	// Attributes that aren't in the whitelist are presumed to have this type.

	var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
	// "enumerated" attributes with "true" and "false" as possible values.
	// When true, it should be set to a "true" string.
	// When false, it should be set to a "false" string.

	var BOOLEANISH_STRING = 2; // A real boolean attribute.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.

	var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	// For any other value, should be present with that value.

	var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
	// When falsy, it should be removed.

	var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
	// When falsy, it should be removed.

	var POSITIVE_NUMERIC = 6;

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
	/* eslint-enable max-len */

	var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
	var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	function isAttributeNameSafe(attributeName) {
	  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
	    return true;
	  }

	  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
	    return false;
	  }

	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }

	  illegalAttributeNameCache[attributeName] = true;

	  {
	    error('Invalid attribute name: `%s`', attributeName);
	  }

	  return false;
	}
	function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null) {
	    return propertyInfo.type === RESERVED;
	  }

	  if (isCustomComponentTag) {
	    return false;
	  }

	  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
	    return true;
	  }

	  return false;
	}
	function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
	    return false;
	  }

	  switch (typeof value) {
	    case 'function': // $FlowIssue symbol is perfectly valid here

	    case 'symbol':
	      // eslint-disable-line
	      return true;

	    case 'boolean':
	      {
	        if (isCustomComponentTag) {
	          return false;
	        }

	        if (propertyInfo !== null) {
	          return !propertyInfo.acceptsBooleans;
	        } else {
	          var prefix = name.toLowerCase().slice(0, 5);
	          return prefix !== 'data-' && prefix !== 'aria-';
	        }
	      }

	    default:
	      return false;
	  }
	}
	function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
	  if (value === null || typeof value === 'undefined') {
	    return true;
	  }

	  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
	    return true;
	  }

	  if (isCustomComponentTag) {
	    return false;
	  }

	  if (propertyInfo !== null) {
	    switch (propertyInfo.type) {
	      case BOOLEAN:
	        return !value;

	      case OVERLOADED_BOOLEAN:
	        return value === false;

	      case NUMERIC:
	        return isNaN(value);

	      case POSITIVE_NUMERIC:
	        return isNaN(value) || value < 1;
	    }
	  }

	  return false;
	}
	function getPropertyInfo(name) {
	  return properties.hasOwnProperty(name) ? properties[name] : null;
	}

	function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL) {
	  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
	  this.attributeName = attributeName;
	  this.attributeNamespace = attributeNamespace;
	  this.mustUseProperty = mustUseProperty;
	  this.propertyName = name;
	  this.type = type;
	  this.sanitizeURL = sanitizeURL;
	} // When adding attributes to this list, be sure to also add them to
	// the `possibleStandardNames` module to ensure casing and incorrect
	// name warnings.


	var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

	var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
	// elements (not just inputs). Now that ReactDOMInput assigns to the
	// defaultValue property -- do we need this?
	'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];

	reservedProps.forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // A few React string attributes have a different name.
	// This is a mapping from React prop names to the attribute names.

	[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
	  var name = _ref[0],
	      attributeName = _ref[1];
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are "enumerated" HTML attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).

	['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are "enumerated" SVG attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	// Since these are SVG attributes, their attribute names are case-sensitive.

	['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML boolean attributes.

	['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
	// on the client side because the browsers are inconsistent. Instead we call focus().
	'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
	'itemScope'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are the few React props that we set as DOM properties
	// rather than attributes. These are all booleans.

	['checked', // Note: `option.selected` is not updated if `select.multiple` is
	// disabled with `removeAttribute`. We have special logic for handling this.
	'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML attributes that are "overloaded booleans": they behave like
	// booleans, but can also accept a string value.

	['capture', 'download' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML attributes that must be positive numbers.

	['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML attributes that must be numbers.

	['rowSpan', 'start'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	});
	var CAMELIZE = /[\-\:]([a-z])/g;

	var capitalize = function (token) {
	  return token[1].toUpperCase();
	}; // This is a list of all SVG attributes that need special casing, namespacing,
	// or boolean value assignment. Regular attributes that just accept strings
	// and have the same names are omitted, just like in the HTML whitelist.
	// Some of these attributes can be hard to find. This list was created by
	// scraping the MDN documentation.


	['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, null, // attributeNamespace
	  false);
	}); // String SVG attributes with the xlink namespace.

	['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/1999/xlink', false);
	}); // String SVG attributes with the xml namespace.

	['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/XML/1998/namespace', false);
	}); // These attribute exists both in HTML and SVG.
	// The attribute name is case-sensitive in SVG so we can't just use
	// the React name like we do for attributes that exist only in HTML.

	['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	}); // These attributes accept URLs. These must not allow javascript: URLS.
	// These will also need to accept Trusted Types object in the future.

	var xlinkHref = 'xlinkHref';
	properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
	'xlink:href', 'http://www.w3.org/1999/xlink', true);
	['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  true);
	});

	{
	  ReactSharedInternals.ReactDebugCurrentFrame;
	} // A javascript: URL can contain leading C0 control or \u0020 SPACE,
	// and any newline or tab are filtered out as if they're not part of the URL.
	// https://url.spec.whatwg.org/#url-parsing
	// Tab or newline are defined as \r\n\t:
	// https://infra.spec.whatwg.org/#ascii-tab-or-newline
	// A C0 control is a code point in the range \u0000 NULL to \u001F
	// INFORMATION SEPARATOR ONE, inclusive:
	// https://infra.spec.whatwg.org/#c0-control-or-space

	/* eslint-disable max-len */


	var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
	var didWarn = false;

	function sanitizeURL(url) {
	  {
	    if (!didWarn && isJavaScriptProtocol.test(url)) {
	      didWarn = true;

	      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
	    }
	  }
	}

	/**
	 * Get the value for a property on a node. Only used in DEV for SSR validation.
	 * The "expected" argument is used as a hint of what the expected value is.
	 * Some properties have multiple equivalent values.
	 */
	function getValueForProperty(node, name, expected, propertyInfo) {
	  {
	    if (propertyInfo.mustUseProperty) {
	      var propertyName = propertyInfo.propertyName;
	      return node[propertyName];
	    } else {
	      if ( propertyInfo.sanitizeURL) {
	        // If we haven't fully disabled javascript: URLs, and if
	        // the hydration is successful of a javascript: URL, we
	        // still want to warn on the client.
	        sanitizeURL('' + expected);
	      }

	      var attributeName = propertyInfo.attributeName;
	      var stringValue = null;

	      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
	        if (node.hasAttribute(attributeName)) {
	          var value = node.getAttribute(attributeName);

	          if (value === '') {
	            return true;
	          }

	          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	            return value;
	          }

	          if (value === '' + expected) {
	            return expected;
	          }

	          return value;
	        }
	      } else if (node.hasAttribute(attributeName)) {
	        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	          // We had an attribute but shouldn't have had one, so read it
	          // for the error message.
	          return node.getAttribute(attributeName);
	        }

	        if (propertyInfo.type === BOOLEAN) {
	          // If this was a boolean, it doesn't matter what the value is
	          // the fact that we have it is the same as the expected.
	          return expected;
	        } // Even if this property uses a namespace we use getAttribute
	        // because we assume its namespaced name is the same as our config.
	        // To use getAttributeNS we need the local name which we don't have
	        // in our config atm.


	        stringValue = node.getAttribute(attributeName);
	      }

	      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	        return stringValue === null ? expected : stringValue;
	      } else if (stringValue === '' + expected) {
	        return expected;
	      } else {
	        return stringValue;
	      }
	    }
	  }
	}
	/**
	 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
	 * The third argument is used as a hint of what the expected value is. Some
	 * attributes have multiple equivalent values.
	 */

	function getValueForAttribute(node, name, expected) {
	  {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }

	    if (!node.hasAttribute(name)) {
	      return expected === undefined ? undefined : null;
	    }

	    var value = node.getAttribute(name);

	    if (value === '' + expected) {
	      return expected;
	    }

	    return value;
	  }
	}
	/**
	 * Sets the value for a property on a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 * @param {*} value
	 */

	function setValueForProperty(node, name, value, isCustomComponentTag) {
	  var propertyInfo = getPropertyInfo(name);

	  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
	    return;
	  }

	  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
	    value = null;
	  } // If the prop isn't in the special list, treat it as a simple attribute.


	  if (isCustomComponentTag || propertyInfo === null) {
	    if (isAttributeNameSafe(name)) {
	      var _attributeName = name;

	      if (value === null) {
	        node.removeAttribute(_attributeName);
	      } else {
	        node.setAttribute(_attributeName,  '' + value);
	      }
	    }

	    return;
	  }

	  var mustUseProperty = propertyInfo.mustUseProperty;

	  if (mustUseProperty) {
	    var propertyName = propertyInfo.propertyName;

	    if (value === null) {
	      var type = propertyInfo.type;
	      node[propertyName] = type === BOOLEAN ? false : '';
	    } else {
	      // Contrary to `setAttribute`, object properties are properly
	      // `toString`ed by IE8/9.
	      node[propertyName] = value;
	    }

	    return;
	  } // The rest are treated as attributes with special cases.


	  var attributeName = propertyInfo.attributeName,
	      attributeNamespace = propertyInfo.attributeNamespace;

	  if (value === null) {
	    node.removeAttribute(attributeName);
	  } else {
	    var _type = propertyInfo.type;
	    var attributeValue;

	    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
	      // If attribute type is boolean, we know for sure it won't be an execution sink
	      // and we won't require Trusted Type here.
	      attributeValue = '';
	    } else {
	      // `setAttribute` with objects becomes only `[object]` in IE8/9,
	      // ('' + value) makes it output the correct toString()-value.
	      {
	        attributeValue = '' + value;
	      }

	      if (propertyInfo.sanitizeURL) {
	        sanitizeURL(attributeValue.toString());
	      }
	    }

	    if (attributeNamespace) {
	      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
	    } else {
	      node.setAttribute(attributeName, attributeValue);
	    }
	  }
	}

	var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
	function describeComponentFrame (name, source, ownerName) {
	  var sourceInfo = '';

	  if (source) {
	    var path = source.fileName;
	    var fileName = path.replace(BEFORE_SLASH_RE, '');

	    {
	      // In DEV, include code for a common special case:
	      // prefer "folder/index.js" instead of just "index.js".
	      if (/^index\./.test(fileName)) {
	        var match = path.match(BEFORE_SLASH_RE);

	        if (match) {
	          var pathBeforeSlash = match[1];

	          if (pathBeforeSlash) {
	            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
	            fileName = folderName + '/' + fileName;
	          }
	        }
	      }
	    }

	    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
	  } else if (ownerName) {
	    sourceInfo = ' (created by ' + ownerName + ')';
	  }

	  return '\n    in ' + (name || 'Unknown') + sourceInfo;
	}

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	var Uninitialized = -1;
	var Pending = 0;
	var Resolved = 1;
	var Rejected = 2;
	function refineResolvedLazyComponent(lazyComponent) {
	  return lazyComponent._status === Resolved ? lazyComponent._result : null;
	}
	function initializeLazyComponentType(lazyComponent) {
	  if (lazyComponent._status === Uninitialized) {
	    lazyComponent._status = Pending;
	    var ctor = lazyComponent._ctor;
	    var thenable = ctor();
	    lazyComponent._result = thenable;
	    thenable.then(function (moduleObject) {
	      if (lazyComponent._status === Pending) {
	        var defaultExport = moduleObject.default;

	        {
	          if (defaultExport === undefined) {
	            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
	          }
	        }

	        lazyComponent._status = Resolved;
	        lazyComponent._result = defaultExport;
	      }
	    }, function (error) {
	      if (lazyComponent._status === Pending) {
	        lazyComponent._status = Rejected;
	        lazyComponent._result = error;
	      }
	    });
	  }
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return "Profiler";

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return 'Context.Consumer';

	      case REACT_PROVIDER_TYPE:
	        return 'Context.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);

	      case REACT_BLOCK_TYPE:
	        return getComponentName(type.render);

	      case REACT_LAZY_TYPE:
	        {
	          var thenable = type;
	          var resolvedThenable = refineResolvedLazyComponent(thenable);

	          if (resolvedThenable) {
	            return getComponentName(resolvedThenable);
	          }

	          break;
	        }
	    }
	  }

	  return null;
	}

	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	function describeFiber(fiber) {
	  switch (fiber.tag) {
	    case HostRoot:
	    case HostPortal:
	    case HostText:
	    case Fragment:
	    case ContextProvider:
	    case ContextConsumer:
	      return '';

	    default:
	      var owner = fiber._debugOwner;
	      var source = fiber._debugSource;
	      var name = getComponentName(fiber.type);
	      var ownerName = null;

	      if (owner) {
	        ownerName = getComponentName(owner.type);
	      }

	      return describeComponentFrame(name, source, ownerName);
	  }
	}

	function getStackByFiberInDevAndProd(workInProgress) {
	  var info = '';
	  var node = workInProgress;

	  do {
	    info += describeFiber(node);
	    node = node.return;
	  } while (node);

	  return info;
	}
	var current = null;
	var isRendering = false;
	function getCurrentFiberOwnerNameInDevOrNull() {
	  {
	    if (current === null) {
	      return null;
	    }

	    var owner = current._debugOwner;

	    if (owner !== null && typeof owner !== 'undefined') {
	      return getComponentName(owner.type);
	    }
	  }

	  return null;
	}
	function getCurrentFiberStackInDev() {
	  {
	    if (current === null) {
	      return '';
	    } // Safe because if current fiber exists, we are reconciling,
	    // and it is guaranteed to be the work-in-progress version.


	    return getStackByFiberInDevAndProd(current);
	  }
	}
	function resetCurrentFiber() {
	  {
	    ReactDebugCurrentFrame$1.getCurrentStack = null;
	    current = null;
	    isRendering = false;
	  }
	}
	function setCurrentFiber(fiber) {
	  {
	    ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
	    current = fiber;
	    isRendering = false;
	  }
	}
	function setIsRendering(rendering) {
	  {
	    isRendering = rendering;
	  }
	}

	// Flow does not allow string concatenation of most non-string types. To work
	// around this limitation, we use an opaque type that can only be obtained by
	// passing the value through getToStringValue first.
	function toString(value) {
	  return '' + value;
	}
	function getToStringValue(value) {
	  switch (typeof value) {
	    case 'boolean':
	    case 'number':
	    case 'object':
	    case 'string':
	    case 'undefined':
	      return value;

	    default:
	      // function, symbol are assigned as empty strings
	      return '';
	  }
	}

	var ReactDebugCurrentFrame$2 = null;
	var ReactControlledValuePropTypes = {
	  checkPropTypes: null
	};

	{
	  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
	  var hasReadOnlyValue = {
	    button: true,
	    checkbox: true,
	    image: true,
	    hidden: true,
	    radio: true,
	    reset: true,
	    submit: true
	  };
	  var propTypes = {
	    value: function (props, propName, componentName) {
	      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI ) {
	        return null;
	      }

	      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    },
	    checked: function (props, propName, componentName) {
	      if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI ) {
	        return null;
	      }

	      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }
	  };
	  /**
	   * Provide a linked `value` attribute for controlled forms. You should not use
	   * this outside of the ReactDOM controlled form components.
	   */

	  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
	    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$2.getStackAddendum);
	  };
	}

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(node) {
	  return node._valueTracker;
	}

	function detachTracker(node) {
	  node._valueTracker = null;
	}

	function getValueFromNode(node) {
	  var value = '';

	  if (!node) {
	    return value;
	  }

	  if (isCheckable(node)) {
	    value = node.checked ? 'true' : 'false';
	  } else {
	    value = node.value;
	  }

	  return value;
	}

	function trackValueOnNode(node) {
	  var valueField = isCheckable(node) ? 'checked' : 'value';
	  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
	  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
	  // and don't track value will cause over reporting of changes,
	  // but it's better then a hard failure
	  // (needed for certain tests that spyOn input values and Safari)

	  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	    return;
	  }

	  var get = descriptor.get,
	      set = descriptor.set;
	  Object.defineProperty(node, valueField, {
	    configurable: true,
	    get: function () {
	      return get.call(this);
	    },
	    set: function (value) {
	      currentValue = '' + value;
	      set.call(this, value);
	    }
	  }); // We could've passed this the first time
	  // but it triggers a bug in IE11 and Edge 14/15.
	  // Calling defineProperty() again should be equivalent.
	  // https://github.com/facebook/react/issues/11768

	  Object.defineProperty(node, valueField, {
	    enumerable: descriptor.enumerable
	  });
	  var tracker = {
	    getValue: function () {
	      return currentValue;
	    },
	    setValue: function (value) {
	      currentValue = '' + value;
	    },
	    stopTracking: function () {
	      detachTracker(node);
	      delete node[valueField];
	    }
	  };
	  return tracker;
	}

	function track(node) {
	  if (getTracker(node)) {
	    return;
	  } // TODO: Once it's just Fiber we can move this to node._wrapperState


	  node._valueTracker = trackValueOnNode(node);
	}
	function updateValueIfChanged(node) {
	  if (!node) {
	    return false;
	  }

	  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
	  // that trying again will succeed

	  if (!tracker) {
	    return true;
	  }

	  var lastValue = tracker.getValue();
	  var nextValue = getValueFromNode(node);

	  if (nextValue !== lastValue) {
	    tracker.setValue(nextValue);
	    return true;
	  }

	  return false;
	}

	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */


	function getHostProps(element, props) {
	  var node = element;
	  var checked = props.checked;

	  var hostProps = _assign({}, props, {
	    defaultChecked: undefined,
	    defaultValue: undefined,
	    value: undefined,
	    checked: checked != null ? checked : node._wrapperState.initialChecked
	  });

	  return hostProps;
	}
	function initWrapperState(element, props) {
	  {
	    ReactControlledValuePropTypes.checkPropTypes('input', props);

	    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

	      didWarnCheckedDefaultChecked = true;
	    }

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

	      didWarnValueDefaultValue = true;
	    }
	  }

	  var node = element;
	  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
	  node._wrapperState = {
	    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
	    controlled: isControlled(props)
	  };
	}
	function updateChecked(element, props) {
	  var node = element;
	  var checked = props.checked;

	  if (checked != null) {
	    setValueForProperty(node, 'checked', checked, false);
	  }
	}
	function updateWrapper(element, props) {
	  var node = element;

	  {
	    var controlled = isControlled(props);

	    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	      error('A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);

	      didWarnUncontrolledToControlled = true;
	    }

	    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	      error('A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);

	      didWarnControlledToUncontrolled = true;
	    }
	  }

	  updateChecked(element, props);
	  var value = getToStringValue(props.value);
	  var type = props.type;

	  if (value != null) {
	    if (type === 'number') {
	      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
	      // eslint-disable-next-line
	      node.value != value) {
	        node.value = toString(value);
	      }
	    } else if (node.value !== toString(value)) {
	      node.value = toString(value);
	    }
	  } else if (type === 'submit' || type === 'reset') {
	    // Submit/reset inputs need the attribute removed completely to avoid
	    // blank-text buttons.
	    node.removeAttribute('value');
	    return;
	  }

	  {
	    // When syncing the value attribute, the value comes from a cascade of
	    // properties:
	    //  1. The value React property
	    //  2. The defaultValue React property
	    //  3. Otherwise there should be no change
	    if (props.hasOwnProperty('value')) {
	      setDefaultValue(node, props.type, value);
	    } else if (props.hasOwnProperty('defaultValue')) {
	      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
	    }
	  }

	  {
	    // When syncing the checked attribute, it only changes when it needs
	    // to be removed, such as transitioning from a checkbox into a text input
	    if (props.checked == null && props.defaultChecked != null) {
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  }
	}
	function postMountWrapper(element, props, isHydrating) {
	  var node = element; // Do not assign value if it is already set. This prevents user text input
	  // from being lost during SSR hydration.

	  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
	    var type = props.type;
	    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
	    // default value provided by the browser. See: #12872

	    if (isButton && (props.value === undefined || props.value === null)) {
	      return;
	    }

	    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
	    // from being lost during SSR hydration.

	    if (!isHydrating) {
	      {
	        // When syncing the value attribute, the value property should use
	        // the wrapperState._initialValue property. This uses:
	        //
	        //   1. The value React property when present
	        //   2. The defaultValue React property when present
	        //   3. An empty string
	        if (initialValue !== node.value) {
	          node.value = initialValue;
	        }
	      }
	    }

	    {
	      // Otherwise, the value attribute is synchronized to the property,
	      // so we assign defaultValue to the same thing as the value property
	      // assignment step above.
	      node.defaultValue = initialValue;
	    }
	  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	  // this is needed to work around a chrome bug where setting defaultChecked
	  // will sometimes influence the value of checked (even after detachment).
	  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	  // We need to temporarily unset name to avoid disrupting radio button groups.


	  var name = node.name;

	  if (name !== '') {
	    node.name = '';
	  }

	  {
	    // When syncing the checked attribute, both the checked property and
	    // attribute are assigned at the same time using defaultChecked. This uses:
	    //
	    //   1. The checked React property when present
	    //   2. The defaultChecked React property when present
	    //   3. Otherwise, false
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !!node._wrapperState.initialChecked;
	  }

	  if (name !== '') {
	    node.name = name;
	  }
	}
	function restoreControlledState(element, props) {
	  var node = element;
	  updateWrapper(node, props);
	  updateNamedCousins(node, props);
	}

	function updateNamedCousins(rootNode, props) {
	  var name = props.name;

	  if (props.type === 'radio' && name != null) {
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    } // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form. It might not even be in the
	    // document. Let's just use the local `querySelectorAll` to ensure we don't
	    // miss anything.


	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];

	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      } // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.


	      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);

	      if (!otherProps) {
	        {
	          throw Error( "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported." );
	        }
	      } // We need update the tracked value on the named cousin since the value
	      // was changed but the input saw no event or value set


	      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.

	      updateWrapper(otherNode, otherProps);
	    }
	  }
	} // In Chrome, assigning defaultValue to certain input types triggers input validation.
	// For number inputs, the display value loses trailing decimal points. For email inputs,
	// Chrome raises "The specified value <x> is not a valid email address".
	//
	// Here we check to see if the defaultValue has actually changed, avoiding these problems
	// when the user is inputting text
	//
	// https://github.com/facebook/react/issues/7253


	function setDefaultValue(node, type, value) {
	  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
	  type !== 'number' || node.ownerDocument.activeElement !== node) {
	    if (value == null) {
	      node.defaultValue = toString(node._wrapperState.initialValue);
	    } else if (node.defaultValue !== toString(value)) {
	      node.defaultValue = toString(value);
	    }
	  }
	}

	var didWarnSelectedSetOnOption = false;
	var didWarnInvalidChild = false;

	function flattenChildren(children) {
	  var content = ''; // Flatten children. We'll warn if they are invalid
	  // during validateProps() which runs for hydration too.
	  // Note that this would throw on non-element objects.
	  // Elements are stringified (which is normally irrelevant
	  // but matters for <fbt>).

	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }

	    content += child; // Note: we don't warn about invalid children here.
	    // Instead, this is done separately below so that
	    // it happens during the hydration codepath too.
	  });
	  return content;
	}
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */


	function validateProps(element, props) {
	  {
	    // This mirrors the codepath above, but runs for hydration too.
	    // Warn about invalid children here so that client and hydration are consistent.
	    // TODO: this seems like it could cause a DEV-only throw for hydration
	    // if children contains a non-element object. We should try to avoid that.
	    if (typeof props.children === 'object' && props.children !== null) {
	      React.Children.forEach(props.children, function (child) {
	        if (child == null) {
	          return;
	        }

	        if (typeof child === 'string' || typeof child === 'number') {
	          return;
	        }

	        if (typeof child.type !== 'string') {
	          return;
	        }

	        if (!didWarnInvalidChild) {
	          didWarnInvalidChild = true;

	          error('Only strings and numbers are supported as <option> children.');
	        }
	      });
	    } // TODO: Remove support for `selected` in <option>.


	    if (props.selected != null && !didWarnSelectedSetOnOption) {
	      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

	      didWarnSelectedSetOnOption = true;
	    }
	  }
	}
	function postMountWrapper$1(element, props) {
	  // value="" should make a value attribute (#6219)
	  if (props.value != null) {
	    element.setAttribute('value', toString(getToStringValue(props.value)));
	  }
	}
	function getHostProps$1(element, props) {
	  var hostProps = _assign({
	    children: undefined
	  }, props);

	  var content = flattenChildren(props.children);

	  if (content) {
	    hostProps.children = content;
	  }

	  return hostProps;
	}

	var didWarnValueDefaultValue$1;

	{
	  didWarnValueDefaultValue$1 = false;
	}

	function getDeclarationErrorAddendum() {
	  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	  if (ownerName) {
	    return '\n\nCheck the render method of `' + ownerName + '`.';
	  }

	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];
	/**
	 * Validation function for `value` and `defaultValue`.
	 */

	function checkSelectPropTypes(props) {
	  {
	    ReactControlledValuePropTypes.checkPropTypes('select', props);

	    for (var i = 0; i < valuePropNames.length; i++) {
	      var propName = valuePropNames[i];

	      if (props[propName] == null) {
	        continue;
	      }

	      var isArray = Array.isArray(props[propName]);

	      if (props.multiple && !isArray) {
	        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
	      } else if (!props.multiple && isArray) {
	        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
	      }
	    }
	  }
	}

	function updateOptions(node, multiple, propValue, setDefaultSelected) {
	  var options = node.options;

	  if (multiple) {
	    var selectedValues = propValue;
	    var selectedValue = {};

	    for (var i = 0; i < selectedValues.length; i++) {
	      // Prefix to avoid chaos with special keys.
	      selectedValue['$' + selectedValues[i]] = true;
	    }

	    for (var _i = 0; _i < options.length; _i++) {
	      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

	      if (options[_i].selected !== selected) {
	        options[_i].selected = selected;
	      }

	      if (selected && setDefaultSelected) {
	        options[_i].defaultSelected = true;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    var _selectedValue = toString(getToStringValue(propValue));

	    var defaultSelected = null;

	    for (var _i2 = 0; _i2 < options.length; _i2++) {
	      if (options[_i2].value === _selectedValue) {
	        options[_i2].selected = true;

	        if (setDefaultSelected) {
	          options[_i2].defaultSelected = true;
	        }

	        return;
	      }

	      if (defaultSelected === null && !options[_i2].disabled) {
	        defaultSelected = options[_i2];
	      }
	    }

	    if (defaultSelected !== null) {
	      defaultSelected.selected = true;
	    }
	  }
	}
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */


	function getHostProps$2(element, props) {
	  return _assign({}, props, {
	    value: undefined
	  });
	}
	function initWrapperState$1(element, props) {
	  var node = element;

	  {
	    checkSelectPropTypes(props);
	  }

	  node._wrapperState = {
	    wasMultiple: !!props.multiple
	  };

	  {
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
	      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');

	      didWarnValueDefaultValue$1 = true;
	    }
	  }
	}
	function postMountWrapper$2(element, props) {
	  var node = element;
	  node.multiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (props.defaultValue != null) {
	    updateOptions(node, !!props.multiple, props.defaultValue, true);
	  }
	}
	function postUpdateWrapper(element, props) {
	  var node = element;
	  var wasMultiple = node._wrapperState.wasMultiple;
	  node._wrapperState.wasMultiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (wasMultiple !== !!props.multiple) {
	    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	    if (props.defaultValue != null) {
	      updateOptions(node, !!props.multiple, props.defaultValue, true);
	    } else {
	      // Revert the select back to its default unselected state.
	      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
	    }
	  }
	}
	function restoreControlledState$1(element, props) {
	  var node = element;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  }
	}

	var didWarnValDefaultVal = false;

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	function getHostProps$3(element, props) {
	  var node = element;

	  if (!(props.dangerouslySetInnerHTML == null)) {
	    {
	      throw Error( "`dangerouslySetInnerHTML` does not make sense on <textarea>." );
	    }
	  } // Always set children to the same thing. In IE9, the selection range will
	  // get reset if `textContent` is mutated.  We could add a check in setTextContent
	  // to only set the value if/when the value differs from the node value (which would
	  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
	  // solution. The value can be a boolean or object so that's why it's forced
	  // to be a string.


	  var hostProps = _assign({}, props, {
	    value: undefined,
	    defaultValue: undefined,
	    children: toString(node._wrapperState.initialValue)
	  });

	  return hostProps;
	}
	function initWrapperState$2(element, props) {
	  var node = element;

	  {
	    ReactControlledValuePropTypes.checkPropTypes('textarea', props);

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

	      didWarnValDefaultVal = true;
	    }
	  }

	  var initialValue = props.value; // Only bother fetching default value if we're going to use it

	  if (initialValue == null) {
	    var children = props.children,
	        defaultValue = props.defaultValue;

	    if (children != null) {
	      {
	        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
	      }

	      {
	        if (!(defaultValue == null)) {
	          {
	            throw Error( "If you supply `defaultValue` on a <textarea>, do not pass children." );
	          }
	        }

	        if (Array.isArray(children)) {
	          if (!(children.length <= 1)) {
	            {
	              throw Error( "<textarea> can only have at most one child." );
	            }
	          }

	          children = children[0];
	        }

	        defaultValue = children;
	      }
	    }

	    if (defaultValue == null) {
	      defaultValue = '';
	    }

	    initialValue = defaultValue;
	  }

	  node._wrapperState = {
	    initialValue: getToStringValue(initialValue)
	  };
	}
	function updateWrapper$1(element, props) {
	  var node = element;
	  var value = getToStringValue(props.value);
	  var defaultValue = getToStringValue(props.defaultValue);

	  if (value != null) {
	    // Cast `value` to a string to ensure the value is set correctly. While
	    // browsers typically do this as necessary, jsdom doesn't.
	    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

	    if (newValue !== node.value) {
	      node.value = newValue;
	    }

	    if (props.defaultValue == null && node.defaultValue !== newValue) {
	      node.defaultValue = newValue;
	    }
	  }

	  if (defaultValue != null) {
	    node.defaultValue = toString(defaultValue);
	  }
	}
	function postMountWrapper$3(element, props) {
	  var node = element; // This is in postMount because we need access to the DOM node, which is not
	  // available until after the component has mounted.

	  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
	  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	  // will populate textContent as well.
	  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

	  if (textContent === node._wrapperState.initialValue) {
	    if (textContent !== '' && textContent !== null) {
	      node.value = textContent;
	    }
	  }
	}
	function restoreControlledState$2(element, props) {
	  // DOM component is still mounted; update
	  updateWrapper$1(element, props);
	}

	var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
	var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
	var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
	var Namespaces = {
	  html: HTML_NAMESPACE,
	  mathml: MATH_NAMESPACE,
	  svg: SVG_NAMESPACE
	}; // Assumes there is no parent namespace.

	function getIntrinsicNamespace(type) {
	  switch (type) {
	    case 'svg':
	      return SVG_NAMESPACE;

	    case 'math':
	      return MATH_NAMESPACE;

	    default:
	      return HTML_NAMESPACE;
	  }
	}
	function getChildNamespace(parentNamespace, type) {
	  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
	    // No (or default) parent namespace: potential entry point.
	    return getIntrinsicNamespace(type);
	  }

	  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
	    // We're leaving SVG.
	    return HTML_NAMESPACE;
	  } // By default, pass namespace below.


	  return parentNamespace;
	}

	/* globals MSApp */

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	var reusableSVGContainer;
	/**
	 * Set the innerHTML property of a node
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */

	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  if (node.namespaceURI === Namespaces.svg) {

	    if (!('innerHTML' in node)) {
	      // IE does not have innerHTML for SVG nodes, so instead we inject the
	      // new markup in a temp node and then move the child nodes across into
	      // the target node
	      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
	      var svgNode = reusableSVGContainer.firstChild;

	      while (node.firstChild) {
	        node.removeChild(node.firstChild);
	      }

	      while (svgNode.firstChild) {
	        node.appendChild(svgNode.firstChild);
	      }

	      return;
	    }
	  }

	  node.innerHTML = html;
	});

	/**
	 * HTML nodeType values that represent the type of the node
	 */
	var ELEMENT_NODE = 1;
	var TEXT_NODE = 3;
	var COMMENT_NODE = 8;
	var DOCUMENT_NODE = 9;
	var DOCUMENT_FRAGMENT_NODE = 11;

	/**
	 * Set the textContent property of a node. For text updates, it's faster
	 * to set the `nodeValue` of the Text node directly instead of using
	 * `.textContent` which will remove the existing node and create a new one.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */

	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }

	  node.textContent = text;
	};

	// Do not use the below two methods directly!
	// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
	// (It is the only module that is allowed to access these methods.)
	function unsafeCastStringToDOMTopLevelType(topLevelType) {
	  return topLevelType;
	}
	function unsafeCastDOMTopLevelTypeToString(topLevelType) {
	  return topLevelType;
	}

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */

	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  return prefixes;
	}
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */


	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */

	var prefixedEventNames = {};
	/**
	 * Element to check for prefixes on.
	 */

	var style = {};
	/**
	 * Bootstrap if a DOM exists.
	 */

	if (canUseDOM) {
	  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.

	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  } // Same as above


	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */


	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return eventName;
	}

	/**
	 * To identify top level events in ReactDOM, we use constants defined by this
	 * module. This is the only module that uses the unsafe* methods to express
	 * that the constants actually correspond to the browser event names. This lets
	 * us save some bundle size by avoiding a top level type -> event name map.
	 * The rest of ReactDOM code should import top level types from this file.
	 */

	var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
	var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
	var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
	var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
	var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
	var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
	var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
	var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
	var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
	var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
	var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
	var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
	var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
	var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
	var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
	var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
	var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
	var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
	var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
	var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
	var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
	var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
	var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
	var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
	var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
	var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
	var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
	var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
	var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
	var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
	var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
	var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
	var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
	var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
	var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
	var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
	var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
	var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
	var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
	var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
	var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
	var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
	var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
	var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
	var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
	var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
	var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
	var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
	var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
	var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
	var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
	var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
	var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
	var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
	var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
	var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
	var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
	var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
	var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
	var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
	var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
	var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
	var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
	var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
	var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
	var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
	var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
	var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
	var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
	var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
	var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
	var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
	var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
	var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
	var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
	var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
	var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
	var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
	var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
	var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
	// Note that events in this list will *not* be listened to at the top level
	// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

	var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
	function getRawEventName(topLevelType) {
	  return unsafeCastDOMTopLevelTypeToString(topLevelType);
	}

	var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // prettier-ignore

	var elementListenerMap = new PossiblyWeakMap();
	function getListenerMapForElement(element) {
	  var listenerMap = elementListenerMap.get(element);

	  if (listenerMap === undefined) {
	    listenerMap = new Map();
	    elementListenerMap.set(element, listenerMap);
	  }

	  return listenerMap;
	}

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 *
	 * Note that this module is currently shared and assumed to be stateless.
	 * If this becomes an actual Map, that will break.
	 */
	function get(key) {
	  return key._reactInternalFiber;
	}
	function has(key) {
	  return key._reactInternalFiber !== undefined;
	}
	function set(key, value) {
	  key._reactInternalFiber = value;
	}

	// Don't change these two values. They're used by React Dev Tools.
	var NoEffect =
	/*              */
	0;
	var PerformedWork =
	/*         */
	1; // You can change the rest (and add more).

	var Placement =
	/*             */
	2;
	var Update =
	/*                */
	4;
	var PlacementAndUpdate =
	/*    */
	6;
	var Deletion =
	/*              */
	8;
	var ContentReset =
	/*          */
	16;
	var Callback =
	/*              */
	32;
	var DidCapture =
	/*            */
	64;
	var Ref =
	/*                   */
	128;
	var Snapshot =
	/*              */
	256;
	var Passive =
	/*               */
	512;
	var Hydrating =
	/*             */
	1024;
	var HydratingAndUpdate =
	/*    */
	1028; // Passive & Update & Callback & Ref & Snapshot

	var LifecycleEffectMask =
	/*   */
	932; // Union of all host effects

	var HostEffectMask =
	/*        */
	2047;
	var Incomplete =
	/*            */
	2048;
	var ShouldCapture =
	/*         */
	4096;

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	function getNearestMountedFiber(fiber) {
	  var node = fiber;
	  var nearestMounted = fiber;

	  if (!fiber.alternate) {
	    // If there is no alternate, this might be a new tree that isn't inserted
	    // yet. If it is, then it will have a pending insertion effect on it.
	    var nextNode = node;

	    do {
	      node = nextNode;

	      if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
	        // This is an insertion or in-progress hydration. The nearest possible
	        // mounted fiber is the parent but we need to continue to figure out
	        // if that one is still mounted.
	        nearestMounted = node.return;
	      }

	      nextNode = node.return;
	    } while (nextNode);
	  } else {
	    while (node.return) {
	      node = node.return;
	    }
	  }

	  if (node.tag === HostRoot) {
	    // TODO: Check if this was a nested HostRoot when used with
	    // renderContainerIntoSubtree.
	    return nearestMounted;
	  } // If we didn't hit the root, that means that we're in an disconnected tree
	  // that has been unmounted.


	  return null;
	}
	function getSuspenseInstanceFromFiber(fiber) {
	  if (fiber.tag === SuspenseComponent) {
	    var suspenseState = fiber.memoizedState;

	    if (suspenseState === null) {
	      var current = fiber.alternate;

	      if (current !== null) {
	        suspenseState = current.memoizedState;
	      }
	    }

	    if (suspenseState !== null) {
	      return suspenseState.dehydrated;
	    }
	  }

	  return null;
	}
	function getContainerFromFiber(fiber) {
	  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
	}
	function isFiberMounted(fiber) {
	  return getNearestMountedFiber(fiber) === fiber;
	}
	function isMounted(component) {
	  {
	    var owner = ReactCurrentOwner.current;

	    if (owner !== null && owner.tag === ClassComponent) {
	      var ownerFiber = owner;
	      var instance = ownerFiber.stateNode;

	      if (!instance._warnedAboutRefsInRender) {
	        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
	      }

	      instance._warnedAboutRefsInRender = true;
	    }
	  }

	  var fiber = get(component);

	  if (!fiber) {
	    return false;
	  }

	  return getNearestMountedFiber(fiber) === fiber;
	}

	function assertIsMounted(fiber) {
	  if (!(getNearestMountedFiber(fiber) === fiber)) {
	    {
	      throw Error( "Unable to find node on an unmounted component." );
	    }
	  }
	}

	function findCurrentFiberUsingSlowPath(fiber) {
	  var alternate = fiber.alternate;

	  if (!alternate) {
	    // If there is no alternate, then we only need to check if it is mounted.
	    var nearestMounted = getNearestMountedFiber(fiber);

	    if (!(nearestMounted !== null)) {
	      {
	        throw Error( "Unable to find node on an unmounted component." );
	      }
	    }

	    if (nearestMounted !== fiber) {
	      return null;
	    }

	    return fiber;
	  } // If we have two possible branches, we'll walk backwards up to the root
	  // to see what path the root points to. On the way we may hit one of the
	  // special cases and we'll deal with them.


	  var a = fiber;
	  var b = alternate;

	  while (true) {
	    var parentA = a.return;

	    if (parentA === null) {
	      // We're at the root.
	      break;
	    }

	    var parentB = parentA.alternate;

	    if (parentB === null) {
	      // There is no alternate. This is an unusual case. Currently, it only
	      // happens when a Suspense component is hidden. An extra fragment fiber
	      // is inserted in between the Suspense fiber and its children. Skip
	      // over this extra fragment fiber and proceed to the next parent.
	      var nextParent = parentA.return;

	      if (nextParent !== null) {
	        a = b = nextParent;
	        continue;
	      } // If there's no parent, we're at the root.


	      break;
	    } // If both copies of the parent fiber point to the same child, we can
	    // assume that the child is current. This happens when we bailout on low
	    // priority: the bailed out fiber's child reuses the current child.


	    if (parentA.child === parentB.child) {
	      var child = parentA.child;

	      while (child) {
	        if (child === a) {
	          // We've determined that A is the current branch.
	          assertIsMounted(parentA);
	          return fiber;
	        }

	        if (child === b) {
	          // We've determined that B is the current branch.
	          assertIsMounted(parentA);
	          return alternate;
	        }

	        child = child.sibling;
	      } // We should never have an alternate for any mounting node. So the only
	      // way this could possibly happen is if this was unmounted, if at all.


	      {
	        {
	          throw Error( "Unable to find node on an unmounted component." );
	        }
	      }
	    }

	    if (a.return !== b.return) {
	      // The return pointer of A and the return pointer of B point to different
	      // fibers. We assume that return pointers never criss-cross, so A must
	      // belong to the child set of A.return, and B must belong to the child
	      // set of B.return.
	      a = parentA;
	      b = parentB;
	    } else {
	      // The return pointers point to the same fiber. We'll have to use the
	      // default, slow path: scan the child sets of each parent alternate to see
	      // which child belongs to which set.
	      //
	      // Search parent A's child set
	      var didFindChild = false;
	      var _child = parentA.child;

	      while (_child) {
	        if (_child === a) {
	          didFindChild = true;
	          a = parentA;
	          b = parentB;
	          break;
	        }

	        if (_child === b) {
	          didFindChild = true;
	          b = parentA;
	          a = parentB;
	          break;
	        }

	        _child = _child.sibling;
	      }

	      if (!didFindChild) {
	        // Search parent B's child set
	        _child = parentB.child;

	        while (_child) {
	          if (_child === a) {
	            didFindChild = true;
	            a = parentB;
	            b = parentA;
	            break;
	          }

	          if (_child === b) {
	            didFindChild = true;
	            b = parentB;
	            a = parentA;
	            break;
	          }

	          _child = _child.sibling;
	        }

	        if (!didFindChild) {
	          {
	            throw Error( "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue." );
	          }
	        }
	      }
	    }

	    if (!(a.alternate === b)) {
	      {
	        throw Error( "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }
	  } // If the root is not a host container, we're in a disconnected tree. I.e.
	  // unmounted.


	  if (!(a.tag === HostRoot)) {
	    {
	      throw Error( "Unable to find node on an unmounted component." );
	    }
	  }

	  if (a.stateNode.current === a) {
	    // We've determined that A is the current branch.
	    return fiber;
	  } // Otherwise B has to be current branch.


	  return alternate;
	}
	function findCurrentHostFiber(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);

	  if (!currentParent) {
	    return null;
	  } // Next we'll drill down this component to find the first HostComponent/Text.


	  var node = currentParent;

	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      return node;
	    } else if (node.child) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === currentParent) {
	      return null;
	    }

	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  } // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable


	  return null;
	}
	function findCurrentHostFiberWithNoPortals(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);

	  if (!currentParent) {
	    return null;
	  } // Next we'll drill down this component to find the first HostComponent/Text.


	  var node = currentParent;

	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {
	      return node;
	    } else if (node.child && node.tag !== HostPortal) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === currentParent) {
	      return null;
	    }

	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  } // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable


	  return null;
	}

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  if (!(next != null)) {
	    {
	      throw Error( "accumulateInto(...): Accumulated items must not be null or undefined." );
	    }
	  }

	  if (current == null) {
	    return next;
	  } // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).


	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }

	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 * @param {function} cb Callback invoked with each element or a collection.
	 * @param {?} [scope] Scope used as `this` in a callback.
	 */
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */

	var eventQueue = null;
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */

	var executeDispatchesAndRelease = function (event) {
	  if (event) {
	    executeDispatchesInOrder(event);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e);
	};

	function runEventsInBatch(events) {
	  if (events !== null) {
	    eventQueue = accumulateInto(eventQueue, events);
	  } // Set `eventQueue` to null before processing it so that we can tell if more
	  // events get enqueued while processing.


	  var processingEventQueue = eventQueue;
	  eventQueue = null;

	  if (!processingEventQueue) {
	    return;
	  }

	  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

	  if (!!eventQueue) {
	    {
	      throw Error( "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented." );
	    }
	  } // This would be a good time to rethrow if any of the event handlers threw.


	  rethrowCaughtError();
	}

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  // Fallback to nativeEvent.srcElement for IE9
	  // https://github.com/facebook/react/issues/12506
	  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html


	  return target.nodeType === TEXT_NODE ? target.parentNode : target;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */

	function isEventSupported(eventNameSuffix) {
	  if (!canUseDOM) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  return isSupported;
	}

	/**
	 * Summary of `DOMEventPluginSystem` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactDOMEventListener, which is injected and can therefore support
	 *    pluggable event sources. This is the only work that occurs in the main
	 *    thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginRegistry`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginRegistry` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginRegistry` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|PluginRegistry|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
	var callbackBookkeepingPool = [];

	function releaseTopLevelCallbackBookKeeping(instance) {
	  instance.topLevelType = null;
	  instance.nativeEvent = null;
	  instance.targetInst = null;
	  instance.ancestors.length = 0;

	  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
	    callbackBookkeepingPool.push(instance);
	  }
	} // Used to store ancestor hierarchy in top level callback


	function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
	  if (callbackBookkeepingPool.length) {
	    var instance = callbackBookkeepingPool.pop();
	    instance.topLevelType = topLevelType;
	    instance.eventSystemFlags = eventSystemFlags;
	    instance.nativeEvent = nativeEvent;
	    instance.targetInst = targetInst;
	    return instance;
	  }

	  return {
	    topLevelType: topLevelType,
	    eventSystemFlags: eventSystemFlags,
	    nativeEvent: nativeEvent,
	    targetInst: targetInst,
	    ancestors: []
	  };
	}
	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */


	function findRootContainerNode(inst) {
	  if (inst.tag === HostRoot) {
	    return inst.stateNode.containerInfo;
	  } // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.


	  while (inst.return) {
	    inst = inst.return;
	  }

	  if (inst.tag !== HostRoot) {
	    // This can happen if we're in a detached tree.
	    return null;
	  }

	  return inst.stateNode.containerInfo;
	}
	/**
	 * Allows registered plugins an opportunity to extract events from top-level
	 * native browser events.
	 *
	 * @return {*} An accumulation of synthetic events.
	 * @internal
	 */


	function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	  var events = null;

	  for (var i = 0; i < plugins.length; i++) {
	    // Not every plugin in the ordering may be loaded at runtime.
	    var possiblePlugin = plugins[i];

	    if (possiblePlugin) {
	      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);

	      if (extractedEvents) {
	        events = accumulateInto(events, extractedEvents);
	      }
	    }
	  }

	  return events;
	}

	function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	  var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
	  runEventsInBatch(events);
	}

	function handleTopLevel(bookKeeping) {
	  var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.

	  var ancestor = targetInst;

	  do {
	    if (!ancestor) {
	      var ancestors = bookKeeping.ancestors;
	      ancestors.push(ancestor);
	      break;
	    }

	    var root = findRootContainerNode(ancestor);

	    if (!root) {
	      break;
	    }

	    var tag = ancestor.tag;

	    if (tag === HostComponent || tag === HostText) {
	      bookKeeping.ancestors.push(ancestor);
	    }

	    ancestor = getClosestInstanceFromNode(root);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    var eventTarget = getEventTarget(bookKeeping.nativeEvent);
	    var topLevelType = bookKeeping.topLevelType;
	    var nativeEvent = bookKeeping.nativeEvent;
	    var eventSystemFlags = bookKeeping.eventSystemFlags; // If this is the first ancestor, we mark it on the system flags

	    if (i === 0) {
	      eventSystemFlags |= IS_FIRST_ANCESTOR;
	    }

	    runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
	  }
	}

	function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
	  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);

	  try {
	    // Event queue being processed in the same cycle allows
	    // `preventDefault`.
	    batchedEventUpdates(handleTopLevel, bookKeeping);
	  } finally {
	    releaseTopLevelCallbackBookKeeping(bookKeeping);
	  }
	}
	/**
	 * We listen for bubbled touch events on the document object.
	 *
	 * Firefox v8.01 (and possibly others) exhibited strange behavior when
	 * mounting `onmousemove` events at some node that was not the document
	 * element. The symptoms were that if your mouse is not moving over something
	 * contained within that mount point (for example on the background) the
	 * top-level listeners for `onmousemove` won't be called. However, if you
	 * register the `mousemove` on the document object, then it will of course
	 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	 * top-level listeners to the document object only, at least for these
	 * movement types of events and possibly all events.
	 *
	 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	 *
	 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	 * they bubble to document.
	 *
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @param {object} mountAt Container where to mount the listener
	 */

	function legacyListenToEvent(registrationName, mountAt) {
	  var listenerMap = getListenerMapForElement(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];

	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];
	    legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
	  }
	}
	function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
	  if (!listenerMap.has(topLevelType)) {
	    switch (topLevelType) {
	      case TOP_SCROLL:
	        trapCapturedEvent(TOP_SCROLL, mountAt);
	        break;

	      case TOP_FOCUS:
	      case TOP_BLUR:
	        trapCapturedEvent(TOP_FOCUS, mountAt);
	        trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
	        // but this ensures we mark both as attached rather than just one.

	        listenerMap.set(TOP_BLUR, null);
	        listenerMap.set(TOP_FOCUS, null);
	        break;

	      case TOP_CANCEL:
	      case TOP_CLOSE:
	        if (isEventSupported(getRawEventName(topLevelType))) {
	          trapCapturedEvent(topLevelType, mountAt);
	        }

	        break;

	      case TOP_INVALID:
	      case TOP_SUBMIT:
	      case TOP_RESET:
	        // We listen to them on the target DOM elements.
	        // Some of them bubble so we don't want them to fire twice.
	        break;

	      default:
	        // By default, listen on the top level to all non-media events.
	        // Media events don't bubble so adding the listener wouldn't do anything.
	        var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;

	        if (!isMediaEvent) {
	          trapBubbledEvent(topLevelType, mountAt);
	        }

	        break;
	    }

	    listenerMap.set(topLevelType, null);
	  }
	}
	function isListeningToAllDependencies(registrationName, mountAt) {
	  var listenerMap = getListenerMapForElement(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];

	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];

	    if (!listenerMap.has(dependency)) {
	      return false;
	    }
	  }

	  return true;
	}

	var attemptUserBlockingHydration;
	function setAttemptUserBlockingHydration(fn) {
	  attemptUserBlockingHydration = fn;
	}
	var attemptContinuousHydration;
	function setAttemptContinuousHydration(fn) {
	  attemptContinuousHydration = fn;
	}
	var attemptHydrationAtCurrentPriority;
	function setAttemptHydrationAtCurrentPriority(fn) {
	  attemptHydrationAtCurrentPriority = fn;
	} // TODO: Upgrade this definition once we're on a newer version of Flow that
	var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

	var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
	// if the last target was dehydrated.

	var queuedFocus = null;
	var queuedDrag = null;
	var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

	var queuedPointers = new Map();
	var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

	var queuedExplicitHydrationTargets = [];
	function hasQueuedDiscreteEvents() {
	  return queuedDiscreteEvents.length > 0;
	}
	var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
	var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
	function isReplayableDiscreteEvent(eventType) {
	  return discreteReplayableEvents.indexOf(eventType) > -1;
	}

	function trapReplayableEventForDocument(topLevelType, document, listenerMap) {
	  legacyListenToTopLevelEvent(topLevelType, document, listenerMap);
	}

	function eagerlyTrapReplayableEvents(container, document) {
	  var listenerMapForDoc = getListenerMapForElement(document); // Discrete

	  discreteReplayableEvents.forEach(function (topLevelType) {
	    trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
	  }); // Continuous

	  continuousReplayableEvents.forEach(function (topLevelType) {
	    trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
	  });
	}

	function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
	  return {
	    blockedOn: blockedOn,
	    topLevelType: topLevelType,
	    eventSystemFlags: eventSystemFlags | IS_REPLAYED,
	    nativeEvent: nativeEvent,
	    container: container
	  };
	}

	function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
	  var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
	  queuedDiscreteEvents.push(queuedEvent);
	} // Resets the replaying for this type of continuous event to no event.

	function clearIfContinuousEvent(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_FOCUS:
	    case TOP_BLUR:
	      queuedFocus = null;
	      break;

	    case TOP_DRAG_ENTER:
	    case TOP_DRAG_LEAVE:
	      queuedDrag = null;
	      break;

	    case TOP_MOUSE_OVER:
	    case TOP_MOUSE_OUT:
	      queuedMouse = null;
	      break;

	    case TOP_POINTER_OVER:
	    case TOP_POINTER_OUT:
	      {
	        var pointerId = nativeEvent.pointerId;
	        queuedPointers.delete(pointerId);
	        break;
	      }

	    case TOP_GOT_POINTER_CAPTURE:
	    case TOP_LOST_POINTER_CAPTURE:
	      {
	        var _pointerId = nativeEvent.pointerId;
	        queuedPointerCaptures.delete(_pointerId);
	        break;
	      }
	  }
	}

	function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
	  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
	    var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);

	    if (blockedOn !== null) {
	      var _fiber2 = getInstanceFromNode$1(blockedOn);

	      if (_fiber2 !== null) {
	        // Attempt to increase the priority of this target.
	        attemptContinuousHydration(_fiber2);
	      }
	    }

	    return queuedEvent;
	  } // If we have already queued this exact event, then it's because
	  // the different event systems have different DOM event listeners.
	  // We can accumulate the flags and store a single event to be
	  // replayed.


	  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
	  return existingQueuedEvent;
	}

	function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
	  // These set relatedTarget to null because the replayed event will be treated as if we
	  // moved from outside the window (no target) onto the target once it hydrates.
	  // Instead of mutating we could clone the event.
	  switch (topLevelType) {
	    case TOP_FOCUS:
	      {
	        var focusEvent = nativeEvent;
	        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
	        return true;
	      }

	    case TOP_DRAG_ENTER:
	      {
	        var dragEvent = nativeEvent;
	        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
	        return true;
	      }

	    case TOP_MOUSE_OVER:
	      {
	        var mouseEvent = nativeEvent;
	        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
	        return true;
	      }

	    case TOP_POINTER_OVER:
	      {
	        var pointerEvent = nativeEvent;
	        var pointerId = pointerEvent.pointerId;
	        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
	        return true;
	      }

	    case TOP_GOT_POINTER_CAPTURE:
	      {
	        var _pointerEvent = nativeEvent;
	        var _pointerId2 = _pointerEvent.pointerId;
	        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
	        return true;
	      }
	  }

	  return false;
	} // Check if this target is unblocked. Returns true if it's unblocked.

	function attemptExplicitHydrationTarget(queuedTarget) {
	  // TODO: This function shares a lot of logic with attemptToDispatchEvent.
	  // Try to unify them. It's a bit tricky since it would require two return
	  // values.
	  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted !== null) {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // We're blocked on hydrating this boundary.
	          // Increase its priority.
	          queuedTarget.blockedOn = instance;
	          Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
	            attemptHydrationAtCurrentPriority(nearestMounted);
	          });
	          return;
	        }
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (root.hydrate) {
	          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
	          // a root other than sync.

	          return;
	        }
	      }
	    }
	  }

	  queuedTarget.blockedOn = null;
	}

	function attemptReplayContinuousQueuedEvent(queuedEvent) {
	  if (queuedEvent.blockedOn !== null) {
	    return false;
	  }

	  var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);

	  if (nextBlockedOn !== null) {
	    // We're still blocked. Try again later.
	    var _fiber3 = getInstanceFromNode$1(nextBlockedOn);

	    if (_fiber3 !== null) {
	      attemptContinuousHydration(_fiber3);
	    }

	    queuedEvent.blockedOn = nextBlockedOn;
	    return false;
	  }

	  return true;
	}

	function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
	  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
	    map.delete(key);
	  }
	}

	function replayUnblockedEvents() {
	  hasScheduledReplayAttempt = false; // First replay discrete events.

	  while (queuedDiscreteEvents.length > 0) {
	    var nextDiscreteEvent = queuedDiscreteEvents[0];

	    if (nextDiscreteEvent.blockedOn !== null) {
	      // We're still blocked.
	      // Increase the priority of this boundary to unblock
	      // the next discrete event.
	      var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);

	      if (_fiber4 !== null) {
	        attemptUserBlockingHydration(_fiber4);
	      }

	      break;
	    }

	    var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);

	    if (nextBlockedOn !== null) {
	      // We're still blocked. Try again later.
	      nextDiscreteEvent.blockedOn = nextBlockedOn;
	    } else {
	      // We've successfully replayed the first event. Let's try the next one.
	      queuedDiscreteEvents.shift();
	    }
	  } // Next replay any continuous events.


	  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
	    queuedFocus = null;
	  }

	  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
	    queuedDrag = null;
	  }

	  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
	    queuedMouse = null;
	  }

	  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
	  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
	}

	function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
	  if (queuedEvent.blockedOn === unblocked) {
	    queuedEvent.blockedOn = null;

	    if (!hasScheduledReplayAttempt) {
	      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
	      // now unblocked. This first might not actually be unblocked yet.
	      // We could check it early to avoid scheduling an unnecessary callback.

	      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
	    }
	  }
	}

	function retryIfBlockedOn(unblocked) {
	  // Mark anything that was blocked on this as no longer blocked
	  // and eligible for a replay.
	  if (queuedDiscreteEvents.length > 0) {
	    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
	    // worth it because we expect very few discrete events to queue up and once
	    // we are actually fully unblocked it will be fast to replay them.

	    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
	      var queuedEvent = queuedDiscreteEvents[i];

	      if (queuedEvent.blockedOn === unblocked) {
	        queuedEvent.blockedOn = null;
	      }
	    }
	  }

	  if (queuedFocus !== null) {
	    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
	  }

	  if (queuedDrag !== null) {
	    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
	  }

	  if (queuedMouse !== null) {
	    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
	  }

	  var unblock = function (queuedEvent) {
	    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
	  };

	  queuedPointers.forEach(unblock);
	  queuedPointerCaptures.forEach(unblock);

	  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
	    var queuedTarget = queuedExplicitHydrationTargets[_i];

	    if (queuedTarget.blockedOn === unblocked) {
	      queuedTarget.blockedOn = null;
	    }
	  }

	  while (queuedExplicitHydrationTargets.length > 0) {
	    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

	    if (nextExplicitTarget.blockedOn !== null) {
	      // We're still blocked.
	      break;
	    } else {
	      attemptExplicitHydrationTarget(nextExplicitTarget);

	      if (nextExplicitTarget.blockedOn === null) {
	        // We're unblocked.
	        queuedExplicitHydrationTargets.shift();
	      }
	    }
	  }
	}

	function addEventBubbleListener(element, eventType, listener) {
	  element.addEventListener(eventType, listener, false);
	}
	function addEventCaptureListener(element, eventType, listener) {
	  element.addEventListener(eventType, listener, true);
	}

	// do it in two places, which duplicates logic
	// and increases the bundle size, we do it all
	// here once. If we remove or refactor the
	// SimpleEventPlugin, we should also remove or
	// update the below line.

	var simpleEventPluginEventTypes = {};
	var topLevelEventsToDispatchConfig = new Map();
	var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
	// the code required to apply the same logic for event prioritization and that of the
	// SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
	// duplication (for which there would be quite a bit). For the events that are not needed
	// for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
	// array of top level events.
	// Lastly, we ignore prettier so we can keep the formatting sane.
	// prettier-ignore

	var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, 'blur', TOP_CANCEL, 'cancel', TOP_CLICK, 'click', TOP_CLOSE, 'close', TOP_CONTEXT_MENU, 'contextMenu', TOP_COPY, 'copy', TOP_CUT, 'cut', TOP_AUX_CLICK, 'auxClick', TOP_DOUBLE_CLICK, 'doubleClick', TOP_DRAG_END, 'dragEnd', TOP_DRAG_START, 'dragStart', TOP_DROP, 'drop', TOP_FOCUS, 'focus', TOP_INPUT, 'input', TOP_INVALID, 'invalid', TOP_KEY_DOWN, 'keyDown', TOP_KEY_PRESS, 'keyPress', TOP_KEY_UP, 'keyUp', TOP_MOUSE_DOWN, 'mouseDown', TOP_MOUSE_UP, 'mouseUp', TOP_PASTE, 'paste', TOP_PAUSE, 'pause', TOP_PLAY, 'play', TOP_POINTER_CANCEL, 'pointerCancel', TOP_POINTER_DOWN, 'pointerDown', TOP_POINTER_UP, 'pointerUp', TOP_RATE_CHANGE, 'rateChange', TOP_RESET, 'reset', TOP_SEEKED, 'seeked', TOP_SUBMIT, 'submit', TOP_TOUCH_CANCEL, 'touchCancel', TOP_TOUCH_END, 'touchEnd', TOP_TOUCH_START, 'touchStart', TOP_VOLUME_CHANGE, 'volumeChange'];
	var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE]; // prettier-ignore

	var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, 'drag', TOP_DRAG_ENTER, 'dragEnter', TOP_DRAG_EXIT, 'dragExit', TOP_DRAG_LEAVE, 'dragLeave', TOP_DRAG_OVER, 'dragOver', TOP_MOUSE_MOVE, 'mouseMove', TOP_MOUSE_OUT, 'mouseOut', TOP_MOUSE_OVER, 'mouseOver', TOP_POINTER_MOVE, 'pointerMove', TOP_POINTER_OUT, 'pointerOut', TOP_POINTER_OVER, 'pointerOver', TOP_SCROLL, 'scroll', TOP_TOGGLE, 'toggle', TOP_TOUCH_MOVE, 'touchMove', TOP_WHEEL, 'wheel']; // prettier-ignore

	var continuousPairsForSimpleEventPlugin = [TOP_ABORT, 'abort', TOP_ANIMATION_END, 'animationEnd', TOP_ANIMATION_ITERATION, 'animationIteration', TOP_ANIMATION_START, 'animationStart', TOP_CAN_PLAY, 'canPlay', TOP_CAN_PLAY_THROUGH, 'canPlayThrough', TOP_DURATION_CHANGE, 'durationChange', TOP_EMPTIED, 'emptied', TOP_ENCRYPTED, 'encrypted', TOP_ENDED, 'ended', TOP_ERROR, 'error', TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture', TOP_LOAD, 'load', TOP_LOADED_DATA, 'loadedData', TOP_LOADED_METADATA, 'loadedMetadata', TOP_LOAD_START, 'loadStart', TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture', TOP_PLAYING, 'playing', TOP_PROGRESS, 'progress', TOP_SEEKING, 'seeking', TOP_STALLED, 'stalled', TOP_SUSPEND, 'suspend', TOP_TIME_UPDATE, 'timeUpdate', TOP_TRANSITION_END, 'transitionEnd', TOP_WAITING, 'waiting'];
	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: [TOP_ABORT],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = new Map([
	 *   [TOP_ABORT, { sameConfig }],
	 * ]);
	 */

	function processSimpleEventPluginPairsByPriority(eventTypes, priority) {
	  // As the event types are in pairs of two, we need to iterate
	  // through in twos. The events are in pairs of two to save code
	  // and improve init perf of processing this array, as it will
	  // result in far fewer object allocations and property accesses
	  // if we only use three arrays to process all the categories of
	  // instead of tuples.
	  for (var i = 0; i < eventTypes.length; i += 2) {
	    var topEvent = eventTypes[i];
	    var event = eventTypes[i + 1];
	    var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	    var onEvent = 'on' + capitalizedEvent;
	    var config = {
	      phasedRegistrationNames: {
	        bubbled: onEvent,
	        captured: onEvent + 'Capture'
	      },
	      dependencies: [topEvent],
	      eventPriority: priority
	    };
	    eventPriorities.set(topEvent, priority);
	    topLevelEventsToDispatchConfig.set(topEvent, config);
	    simpleEventPluginEventTypes[event] = config;
	  }
	}

	function processTopEventPairsByPriority(eventTypes, priority) {
	  for (var i = 0; i < eventTypes.length; i++) {
	    eventPriorities.set(eventTypes[i], priority);
	  }
	} // SimpleEventPlugin


	processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
	processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
	processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent); // Not used by SimpleEventPlugin

	processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
	function getEventPriorityForPluginSystem(topLevelType) {
	  var priority = eventPriorities.get(topLevelType); // Default to a ContinuousEvent. Note: we might
	  // want to warn if we can't detect the priority
	  // for the event.

	  return priority === undefined ? ContinuousEvent : priority;
	}

	// Intentionally not named imports because Rollup would use dynamic dispatch for
	var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
	    runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

	var _enabled = true;
	function setEnabled(enabled) {
	  _enabled = !!enabled;
	}
	function isEnabled() {
	  return _enabled;
	}
	function trapBubbledEvent(topLevelType, element) {
	  trapEventForPluginEventSystem(element, topLevelType, false);
	}
	function trapCapturedEvent(topLevelType, element) {
	  trapEventForPluginEventSystem(element, topLevelType, true);
	}

	function trapEventForPluginEventSystem(container, topLevelType, capture) {
	  var listener;

	  switch (getEventPriorityForPluginSystem(topLevelType)) {
	    case DiscreteEvent:
	      listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
	      break;

	    case UserBlockingEvent:
	      listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
	      break;

	    case ContinuousEvent:
	    default:
	      listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
	      break;
	  }

	  var rawEventName = getRawEventName(topLevelType);

	  if (capture) {
	    addEventCaptureListener(container, rawEventName, listener);
	  } else {
	    addEventBubbleListener(container, rawEventName, listener);
	  }
	}

	function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
	  flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
	  discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
	}

	function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
	  runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
	}

	function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
	  if (!_enabled) {
	    return;
	  }

	  if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
	    // If we already have a queue of discrete events, and this is another discrete
	    // event, then we can't dispatch it regardless of its target, since they
	    // need to dispatch in order.
	    queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
	    topLevelType, eventSystemFlags, container, nativeEvent);
	    return;
	  }

	  var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);

	  if (blockedOn === null) {
	    // We successfully dispatched this event.
	    clearIfContinuousEvent(topLevelType, nativeEvent);
	    return;
	  }

	  if (isReplayableDiscreteEvent(topLevelType)) {
	    // This this to be replayed later once the target is available.
	    queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
	    return;
	  }

	  if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
	    return;
	  } // We need to clear only if we didn't queue because
	  // queueing is accummulative.


	  clearIfContinuousEvent(topLevelType, nativeEvent); // This is not replayable so we'll invoke it but without a target,
	  // in case the event system needs to trace it.

	  {
	    dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
	  }
	} // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

	function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
	  // TODO: Warn if _enabled is false.
	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted === null) {
	      // This tree has been unmounted already. Dispatch without a target.
	      targetInst = null;
	    } else {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // Queue the event to be replayed later. Abort dispatching since we
	          // don't want this event dispatched twice through the event system.
	          // TODO: If this is the first discrete event in the queue. Schedule an increased
	          // priority for this boundary.
	          return instance;
	        } // This shouldn't happen, something went wrong but to avoid blocking
	        // the whole system, dispatch the event without a target.
	        // TODO: Warn.


	        targetInst = null;
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (root.hydrate) {
	          // If this happens during a replay something went wrong and it might block
	          // the whole system.
	          return getContainerFromFiber(nearestMounted);
	        }

	        targetInst = null;
	      } else if (nearestMounted !== targetInst) {
	        // If we get an event (ex: img onload) before committing that
	        // component's mount, ignore it for now (that is, treat it as if it was an
	        // event on a non-React tree). We might also consider queueing events and
	        // dispatching them after the mount.
	        targetInst = null;
	      }
	    }
	  }

	  {
	    dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
	  } // We're not blocked on anything.


	  return null;
	}

	// List derived from Gecko source code:
	// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
	var shorthandToLonghand = {
	  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
	  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
	  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
	  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
	  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
	  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
	  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
	  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
	  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
	  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
	  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
	  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
	  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
	  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
	  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
	  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
	  columns: ['columnCount', 'columnWidth'],
	  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
	  flexFlow: ['flexDirection', 'flexWrap'],
	  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
	  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
	  gap: ['columnGap', 'rowGap'],
	  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
	  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
	  gridColumnGap: ['columnGap'],
	  gridGap: ['columnGap', 'rowGap'],
	  gridRow: ['gridRowEnd', 'gridRowStart'],
	  gridRowGap: ['rowGap'],
	  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
	  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
	  marker: ['markerEnd', 'markerMid', 'markerStart'],
	  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
	  maskPosition: ['maskPositionX', 'maskPositionY'],
	  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
	  overflow: ['overflowX', 'overflowY'],
	  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
	  placeContent: ['alignContent', 'justifyContent'],
	  placeItems: ['alignItems', 'justifyItems'],
	  placeSelf: ['alignSelf', 'justifySelf'],
	  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
	  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
	  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
	  wordWrap: ['overflowWrap']
	};

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridArea: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */

	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */


	var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.

	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */

	function dangerousStyleValue(name, value, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';

	  if (isEmpty) {
	    return '';
	  }

	  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
	    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
	  }

	  return ('' + value).trim();
	}

	var uppercasePattern = /([A-Z])/g;
	var msPattern = /^ms-/;
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 */

	function hyphenateStyleName(name) {
	  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
	}

	var warnValidStyle = function () {};

	{
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	  var msPattern$1 = /^-ms-/;
	  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	  var warnedForInfinityValue = false;

	  var camelize = function (string) {
	    return string.replace(hyphenPattern, function (_, character) {
	      return character.toUpperCase();
	    });
	  };

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;

	    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
	    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	    // is converted to lowercase `ms`.
	    camelize(name.replace(msPattern$1, 'ms-')));
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;

	    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;

	    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
	  };

	  var warnStyleValueIsNaN = function (name, value) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;

	    error('`NaN` is an invalid value for the `%s` css style property.', name);
	  };

	  var warnStyleValueIsInfinity = function (name, value) {
	    if (warnedForInfinityValue) {
	      return;
	    }

	    warnedForInfinityValue = true;

	    error('`Infinity` is an invalid value for the `%s` css style property.', name);
	  };

	  warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }

	    if (typeof value === 'number') {
	      if (isNaN(value)) {
	        warnStyleValueIsNaN(name, value);
	      } else if (!isFinite(value)) {
	        warnStyleValueIsInfinity(name, value);
	      }
	    }
	  };
	}

	var warnValidStyle$1 = warnValidStyle;

	/**
	 * Operations for dealing with CSS properties.
	 */

	/**
	 * This creates a string that is expected to be equivalent to the style
	 * attribute generated by server-side rendering. It by-passes warnings and
	 * security checks so it's not safe to use this value for anything other than
	 * comparison. It is only used in DEV for SSR validation.
	 */

	function createDangerousStringForStyles(styles) {
	  {
	    var serialized = '';
	    var delimiter = '';

	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }

	      var styleValue = styles[styleName];

	      if (styleValue != null) {
	        var isCustomProperty = styleName.indexOf('--') === 0;
	        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
	        delimiter = ';';
	      }
	    }

	    return serialized || null;
	  }
	}
	/**
	 * Sets the value for multiple styles on a node.  If a value is specified as
	 * '' (empty string), the corresponding style property will be unset.
	 *
	 * @param {DOMElement} node
	 * @param {object} styles
	 */

	function setValueForStyles(node, styles) {
	  var style = node.style;

	  for (var styleName in styles) {
	    if (!styles.hasOwnProperty(styleName)) {
	      continue;
	    }

	    var isCustomProperty = styleName.indexOf('--') === 0;

	    {
	      if (!isCustomProperty) {
	        warnValidStyle$1(styleName, styles[styleName]);
	      }
	    }

	    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

	    if (styleName === 'float') {
	      styleName = 'cssFloat';
	    }

	    if (isCustomProperty) {
	      style.setProperty(styleName, styleValue);
	    } else {
	      style[styleName] = styleValue;
	    }
	  }
	}

	function isValueEmpty(value) {
	  return value == null || typeof value === 'boolean' || value === '';
	}
	/**
	 * Given {color: 'red', overflow: 'hidden'} returns {
	 *   color: 'color',
	 *   overflowX: 'overflow',
	 *   overflowY: 'overflow',
	 * }. This can be read as "the overflowY property was set by the overflow
	 * shorthand". That is, the values are the property that each was derived from.
	 */


	function expandShorthandMap(styles) {
	  var expanded = {};

	  for (var key in styles) {
	    var longhands = shorthandToLonghand[key] || [key];

	    for (var i = 0; i < longhands.length; i++) {
	      expanded[longhands[i]] = key;
	    }
	  }

	  return expanded;
	}
	/**
	 * When mixing shorthand and longhand property names, we warn during updates if
	 * we expect an incorrect result to occur. In particular, we warn for:
	 *
	 * Updating a shorthand property (longhand gets overwritten):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
	 *   becomes .style.font = 'baz'
	 * Removing a shorthand property (longhand gets lost too):
	 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
	 *   becomes .style.font = ''
	 * Removing a longhand property (should revert to shorthand; doesn't):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
	 *   becomes .style.fontVariant = ''
	 */


	function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
	  {

	    if (!nextStyles) {
	      return;
	    }

	    var expandedUpdates = expandShorthandMap(styleUpdates);
	    var expandedStyles = expandShorthandMap(nextStyles);
	    var warnedAbout = {};

	    for (var key in expandedUpdates) {
	      var originalKey = expandedUpdates[key];
	      var correctOriginalKey = expandedStyles[key];

	      if (correctOriginalKey && originalKey !== correctOriginalKey) {
	        var warningKey = originalKey + ',' + correctOriginalKey;

	        if (warnedAbout[warningKey]) {
	          continue;
	        }

	        warnedAbout[warningKey] = true;

	        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
	      }
	    }
	  }
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.
	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

	};

	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  menuitem: true
	}, omittedCloseTags);

	var HTML = '__html';
	var ReactDebugCurrentFrame$3 = null;

	{
	  ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
	}

	function assertValidProps(tag, props) {
	  if (!props) {
	    return;
	  } // Note the use of `==` which checks for null or undefined.


	  if (voidElementTags[tag]) {
	    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
	      {
	        throw Error( tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ( ReactDebugCurrentFrame$3.getStackAddendum() ) );
	      }
	    }
	  }

	  if (props.dangerouslySetInnerHTML != null) {
	    if (!(props.children == null)) {
	      {
	        throw Error( "Can only set one of `children` or `props.dangerouslySetInnerHTML`." );
	      }
	    }

	    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
	      {
	        throw Error( "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information." );
	      }
	    }
	  }

	  {
	    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
	      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
	    }
	  }

	  if (!(props.style == null || typeof props.style === 'object')) {
	    {
	      throw Error( "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ( ReactDebugCurrentFrame$3.getStackAddendum() ) );
	    }
	  }
	}

	function isCustomComponent(tagName, props) {
	  if (tagName.indexOf('-') === -1) {
	    return typeof props.is === 'string';
	  }

	  switch (tagName) {
	    // These are reserved SVG and MathML elements.
	    // We don't mind this whitelist too much because we expect it to never grow.
	    // The alternative is to track the namespace in a few places which is convoluted.
	    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
	    case 'annotation-xml':
	    case 'color-profile':
	    case 'font-face':
	    case 'font-face-src':
	    case 'font-face-uri':
	    case 'font-face-format':
	    case 'font-face-name':
	    case 'missing-glyph':
	      return false;

	    default:
	      return true;
	  }
	}

	// When adding attributes to the HTML or SVG whitelist, be sure to
	// also add them to this module to ensure casing and incorrect name
	// warnings.
	var possibleStandardNames = {
	  // HTML
	  accept: 'accept',
	  acceptcharset: 'acceptCharset',
	  'accept-charset': 'acceptCharset',
	  accesskey: 'accessKey',
	  action: 'action',
	  allowfullscreen: 'allowFullScreen',
	  alt: 'alt',
	  as: 'as',
	  async: 'async',
	  autocapitalize: 'autoCapitalize',
	  autocomplete: 'autoComplete',
	  autocorrect: 'autoCorrect',
	  autofocus: 'autoFocus',
	  autoplay: 'autoPlay',
	  autosave: 'autoSave',
	  capture: 'capture',
	  cellpadding: 'cellPadding',
	  cellspacing: 'cellSpacing',
	  challenge: 'challenge',
	  charset: 'charSet',
	  checked: 'checked',
	  children: 'children',
	  cite: 'cite',
	  class: 'className',
	  classid: 'classID',
	  classname: 'className',
	  cols: 'cols',
	  colspan: 'colSpan',
	  content: 'content',
	  contenteditable: 'contentEditable',
	  contextmenu: 'contextMenu',
	  controls: 'controls',
	  controlslist: 'controlsList',
	  coords: 'coords',
	  crossorigin: 'crossOrigin',
	  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
	  data: 'data',
	  datetime: 'dateTime',
	  default: 'default',
	  defaultchecked: 'defaultChecked',
	  defaultvalue: 'defaultValue',
	  defer: 'defer',
	  dir: 'dir',
	  disabled: 'disabled',
	  disablepictureinpicture: 'disablePictureInPicture',
	  download: 'download',
	  draggable: 'draggable',
	  enctype: 'encType',
	  for: 'htmlFor',
	  form: 'form',
	  formmethod: 'formMethod',
	  formaction: 'formAction',
	  formenctype: 'formEncType',
	  formnovalidate: 'formNoValidate',
	  formtarget: 'formTarget',
	  frameborder: 'frameBorder',
	  headers: 'headers',
	  height: 'height',
	  hidden: 'hidden',
	  high: 'high',
	  href: 'href',
	  hreflang: 'hrefLang',
	  htmlfor: 'htmlFor',
	  httpequiv: 'httpEquiv',
	  'http-equiv': 'httpEquiv',
	  icon: 'icon',
	  id: 'id',
	  innerhtml: 'innerHTML',
	  inputmode: 'inputMode',
	  integrity: 'integrity',
	  is: 'is',
	  itemid: 'itemID',
	  itemprop: 'itemProp',
	  itemref: 'itemRef',
	  itemscope: 'itemScope',
	  itemtype: 'itemType',
	  keyparams: 'keyParams',
	  keytype: 'keyType',
	  kind: 'kind',
	  label: 'label',
	  lang: 'lang',
	  list: 'list',
	  loop: 'loop',
	  low: 'low',
	  manifest: 'manifest',
	  marginwidth: 'marginWidth',
	  marginheight: 'marginHeight',
	  max: 'max',
	  maxlength: 'maxLength',
	  media: 'media',
	  mediagroup: 'mediaGroup',
	  method: 'method',
	  min: 'min',
	  minlength: 'minLength',
	  multiple: 'multiple',
	  muted: 'muted',
	  name: 'name',
	  nomodule: 'noModule',
	  nonce: 'nonce',
	  novalidate: 'noValidate',
	  open: 'open',
	  optimum: 'optimum',
	  pattern: 'pattern',
	  placeholder: 'placeholder',
	  playsinline: 'playsInline',
	  poster: 'poster',
	  preload: 'preload',
	  profile: 'profile',
	  radiogroup: 'radioGroup',
	  readonly: 'readOnly',
	  referrerpolicy: 'referrerPolicy',
	  rel: 'rel',
	  required: 'required',
	  reversed: 'reversed',
	  role: 'role',
	  rows: 'rows',
	  rowspan: 'rowSpan',
	  sandbox: 'sandbox',
	  scope: 'scope',
	  scoped: 'scoped',
	  scrolling: 'scrolling',
	  seamless: 'seamless',
	  selected: 'selected',
	  shape: 'shape',
	  size: 'size',
	  sizes: 'sizes',
	  span: 'span',
	  spellcheck: 'spellCheck',
	  src: 'src',
	  srcdoc: 'srcDoc',
	  srclang: 'srcLang',
	  srcset: 'srcSet',
	  start: 'start',
	  step: 'step',
	  style: 'style',
	  summary: 'summary',
	  tabindex: 'tabIndex',
	  target: 'target',
	  title: 'title',
	  type: 'type',
	  usemap: 'useMap',
	  value: 'value',
	  width: 'width',
	  wmode: 'wmode',
	  wrap: 'wrap',
	  // SVG
	  about: 'about',
	  accentheight: 'accentHeight',
	  'accent-height': 'accentHeight',
	  accumulate: 'accumulate',
	  additive: 'additive',
	  alignmentbaseline: 'alignmentBaseline',
	  'alignment-baseline': 'alignmentBaseline',
	  allowreorder: 'allowReorder',
	  alphabetic: 'alphabetic',
	  amplitude: 'amplitude',
	  arabicform: 'arabicForm',
	  'arabic-form': 'arabicForm',
	  ascent: 'ascent',
	  attributename: 'attributeName',
	  attributetype: 'attributeType',
	  autoreverse: 'autoReverse',
	  azimuth: 'azimuth',
	  basefrequency: 'baseFrequency',
	  baselineshift: 'baselineShift',
	  'baseline-shift': 'baselineShift',
	  baseprofile: 'baseProfile',
	  bbox: 'bbox',
	  begin: 'begin',
	  bias: 'bias',
	  by: 'by',
	  calcmode: 'calcMode',
	  capheight: 'capHeight',
	  'cap-height': 'capHeight',
	  clip: 'clip',
	  clippath: 'clipPath',
	  'clip-path': 'clipPath',
	  clippathunits: 'clipPathUnits',
	  cliprule: 'clipRule',
	  'clip-rule': 'clipRule',
	  color: 'color',
	  colorinterpolation: 'colorInterpolation',
	  'color-interpolation': 'colorInterpolation',
	  colorinterpolationfilters: 'colorInterpolationFilters',
	  'color-interpolation-filters': 'colorInterpolationFilters',
	  colorprofile: 'colorProfile',
	  'color-profile': 'colorProfile',
	  colorrendering: 'colorRendering',
	  'color-rendering': 'colorRendering',
	  contentscripttype: 'contentScriptType',
	  contentstyletype: 'contentStyleType',
	  cursor: 'cursor',
	  cx: 'cx',
	  cy: 'cy',
	  d: 'd',
	  datatype: 'datatype',
	  decelerate: 'decelerate',
	  descent: 'descent',
	  diffuseconstant: 'diffuseConstant',
	  direction: 'direction',
	  display: 'display',
	  divisor: 'divisor',
	  dominantbaseline: 'dominantBaseline',
	  'dominant-baseline': 'dominantBaseline',
	  dur: 'dur',
	  dx: 'dx',
	  dy: 'dy',
	  edgemode: 'edgeMode',
	  elevation: 'elevation',
	  enablebackground: 'enableBackground',
	  'enable-background': 'enableBackground',
	  end: 'end',
	  exponent: 'exponent',
	  externalresourcesrequired: 'externalResourcesRequired',
	  fill: 'fill',
	  fillopacity: 'fillOpacity',
	  'fill-opacity': 'fillOpacity',
	  fillrule: 'fillRule',
	  'fill-rule': 'fillRule',
	  filter: 'filter',
	  filterres: 'filterRes',
	  filterunits: 'filterUnits',
	  floodopacity: 'floodOpacity',
	  'flood-opacity': 'floodOpacity',
	  floodcolor: 'floodColor',
	  'flood-color': 'floodColor',
	  focusable: 'focusable',
	  fontfamily: 'fontFamily',
	  'font-family': 'fontFamily',
	  fontsize: 'fontSize',
	  'font-size': 'fontSize',
	  fontsizeadjust: 'fontSizeAdjust',
	  'font-size-adjust': 'fontSizeAdjust',
	  fontstretch: 'fontStretch',
	  'font-stretch': 'fontStretch',
	  fontstyle: 'fontStyle',
	  'font-style': 'fontStyle',
	  fontvariant: 'fontVariant',
	  'font-variant': 'fontVariant',
	  fontweight: 'fontWeight',
	  'font-weight': 'fontWeight',
	  format: 'format',
	  from: 'from',
	  fx: 'fx',
	  fy: 'fy',
	  g1: 'g1',
	  g2: 'g2',
	  glyphname: 'glyphName',
	  'glyph-name': 'glyphName',
	  glyphorientationhorizontal: 'glyphOrientationHorizontal',
	  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
	  glyphorientationvertical: 'glyphOrientationVertical',
	  'glyph-orientation-vertical': 'glyphOrientationVertical',
	  glyphref: 'glyphRef',
	  gradienttransform: 'gradientTransform',
	  gradientunits: 'gradientUnits',
	  hanging: 'hanging',
	  horizadvx: 'horizAdvX',
	  'horiz-adv-x': 'horizAdvX',
	  horizoriginx: 'horizOriginX',
	  'horiz-origin-x': 'horizOriginX',
	  ideographic: 'ideographic',
	  imagerendering: 'imageRendering',
	  'image-rendering': 'imageRendering',
	  in2: 'in2',
	  in: 'in',
	  inlist: 'inlist',
	  intercept: 'intercept',
	  k1: 'k1',
	  k2: 'k2',
	  k3: 'k3',
	  k4: 'k4',
	  k: 'k',
	  kernelmatrix: 'kernelMatrix',
	  kernelunitlength: 'kernelUnitLength',
	  kerning: 'kerning',
	  keypoints: 'keyPoints',
	  keysplines: 'keySplines',
	  keytimes: 'keyTimes',
	  lengthadjust: 'lengthAdjust',
	  letterspacing: 'letterSpacing',
	  'letter-spacing': 'letterSpacing',
	  lightingcolor: 'lightingColor',
	  'lighting-color': 'lightingColor',
	  limitingconeangle: 'limitingConeAngle',
	  local: 'local',
	  markerend: 'markerEnd',
	  'marker-end': 'markerEnd',
	  markerheight: 'markerHeight',
	  markermid: 'markerMid',
	  'marker-mid': 'markerMid',
	  markerstart: 'markerStart',
	  'marker-start': 'markerStart',
	  markerunits: 'markerUnits',
	  markerwidth: 'markerWidth',
	  mask: 'mask',
	  maskcontentunits: 'maskContentUnits',
	  maskunits: 'maskUnits',
	  mathematical: 'mathematical',
	  mode: 'mode',
	  numoctaves: 'numOctaves',
	  offset: 'offset',
	  opacity: 'opacity',
	  operator: 'operator',
	  order: 'order',
	  orient: 'orient',
	  orientation: 'orientation',
	  origin: 'origin',
	  overflow: 'overflow',
	  overlineposition: 'overlinePosition',
	  'overline-position': 'overlinePosition',
	  overlinethickness: 'overlineThickness',
	  'overline-thickness': 'overlineThickness',
	  paintorder: 'paintOrder',
	  'paint-order': 'paintOrder',
	  panose1: 'panose1',
	  'panose-1': 'panose1',
	  pathlength: 'pathLength',
	  patterncontentunits: 'patternContentUnits',
	  patterntransform: 'patternTransform',
	  patternunits: 'patternUnits',
	  pointerevents: 'pointerEvents',
	  'pointer-events': 'pointerEvents',
	  points: 'points',
	  pointsatx: 'pointsAtX',
	  pointsaty: 'pointsAtY',
	  pointsatz: 'pointsAtZ',
	  prefix: 'prefix',
	  preservealpha: 'preserveAlpha',
	  preserveaspectratio: 'preserveAspectRatio',
	  primitiveunits: 'primitiveUnits',
	  property: 'property',
	  r: 'r',
	  radius: 'radius',
	  refx: 'refX',
	  refy: 'refY',
	  renderingintent: 'renderingIntent',
	  'rendering-intent': 'renderingIntent',
	  repeatcount: 'repeatCount',
	  repeatdur: 'repeatDur',
	  requiredextensions: 'requiredExtensions',
	  requiredfeatures: 'requiredFeatures',
	  resource: 'resource',
	  restart: 'restart',
	  result: 'result',
	  results: 'results',
	  rotate: 'rotate',
	  rx: 'rx',
	  ry: 'ry',
	  scale: 'scale',
	  security: 'security',
	  seed: 'seed',
	  shaperendering: 'shapeRendering',
	  'shape-rendering': 'shapeRendering',
	  slope: 'slope',
	  spacing: 'spacing',
	  specularconstant: 'specularConstant',
	  specularexponent: 'specularExponent',
	  speed: 'speed',
	  spreadmethod: 'spreadMethod',
	  startoffset: 'startOffset',
	  stddeviation: 'stdDeviation',
	  stemh: 'stemh',
	  stemv: 'stemv',
	  stitchtiles: 'stitchTiles',
	  stopcolor: 'stopColor',
	  'stop-color': 'stopColor',
	  stopopacity: 'stopOpacity',
	  'stop-opacity': 'stopOpacity',
	  strikethroughposition: 'strikethroughPosition',
	  'strikethrough-position': 'strikethroughPosition',
	  strikethroughthickness: 'strikethroughThickness',
	  'strikethrough-thickness': 'strikethroughThickness',
	  string: 'string',
	  stroke: 'stroke',
	  strokedasharray: 'strokeDasharray',
	  'stroke-dasharray': 'strokeDasharray',
	  strokedashoffset: 'strokeDashoffset',
	  'stroke-dashoffset': 'strokeDashoffset',
	  strokelinecap: 'strokeLinecap',
	  'stroke-linecap': 'strokeLinecap',
	  strokelinejoin: 'strokeLinejoin',
	  'stroke-linejoin': 'strokeLinejoin',
	  strokemiterlimit: 'strokeMiterlimit',
	  'stroke-miterlimit': 'strokeMiterlimit',
	  strokewidth: 'strokeWidth',
	  'stroke-width': 'strokeWidth',
	  strokeopacity: 'strokeOpacity',
	  'stroke-opacity': 'strokeOpacity',
	  suppresscontenteditablewarning: 'suppressContentEditableWarning',
	  suppresshydrationwarning: 'suppressHydrationWarning',
	  surfacescale: 'surfaceScale',
	  systemlanguage: 'systemLanguage',
	  tablevalues: 'tableValues',
	  targetx: 'targetX',
	  targety: 'targetY',
	  textanchor: 'textAnchor',
	  'text-anchor': 'textAnchor',
	  textdecoration: 'textDecoration',
	  'text-decoration': 'textDecoration',
	  textlength: 'textLength',
	  textrendering: 'textRendering',
	  'text-rendering': 'textRendering',
	  to: 'to',
	  transform: 'transform',
	  typeof: 'typeof',
	  u1: 'u1',
	  u2: 'u2',
	  underlineposition: 'underlinePosition',
	  'underline-position': 'underlinePosition',
	  underlinethickness: 'underlineThickness',
	  'underline-thickness': 'underlineThickness',
	  unicode: 'unicode',
	  unicodebidi: 'unicodeBidi',
	  'unicode-bidi': 'unicodeBidi',
	  unicoderange: 'unicodeRange',
	  'unicode-range': 'unicodeRange',
	  unitsperem: 'unitsPerEm',
	  'units-per-em': 'unitsPerEm',
	  unselectable: 'unselectable',
	  valphabetic: 'vAlphabetic',
	  'v-alphabetic': 'vAlphabetic',
	  values: 'values',
	  vectoreffect: 'vectorEffect',
	  'vector-effect': 'vectorEffect',
	  version: 'version',
	  vertadvy: 'vertAdvY',
	  'vert-adv-y': 'vertAdvY',
	  vertoriginx: 'vertOriginX',
	  'vert-origin-x': 'vertOriginX',
	  vertoriginy: 'vertOriginY',
	  'vert-origin-y': 'vertOriginY',
	  vhanging: 'vHanging',
	  'v-hanging': 'vHanging',
	  videographic: 'vIdeographic',
	  'v-ideographic': 'vIdeographic',
	  viewbox: 'viewBox',
	  viewtarget: 'viewTarget',
	  visibility: 'visibility',
	  vmathematical: 'vMathematical',
	  'v-mathematical': 'vMathematical',
	  vocab: 'vocab',
	  widths: 'widths',
	  wordspacing: 'wordSpacing',
	  'word-spacing': 'wordSpacing',
	  writingmode: 'writingMode',
	  'writing-mode': 'writingMode',
	  x1: 'x1',
	  x2: 'x2',
	  x: 'x',
	  xchannelselector: 'xChannelSelector',
	  xheight: 'xHeight',
	  'x-height': 'xHeight',
	  xlinkactuate: 'xlinkActuate',
	  'xlink:actuate': 'xlinkActuate',
	  xlinkarcrole: 'xlinkArcrole',
	  'xlink:arcrole': 'xlinkArcrole',
	  xlinkhref: 'xlinkHref',
	  'xlink:href': 'xlinkHref',
	  xlinkrole: 'xlinkRole',
	  'xlink:role': 'xlinkRole',
	  xlinkshow: 'xlinkShow',
	  'xlink:show': 'xlinkShow',
	  xlinktitle: 'xlinkTitle',
	  'xlink:title': 'xlinkTitle',
	  xlinktype: 'xlinkType',
	  'xlink:type': 'xlinkType',
	  xmlbase: 'xmlBase',
	  'xml:base': 'xmlBase',
	  xmllang: 'xmlLang',
	  'xml:lang': 'xmlLang',
	  xmlns: 'xmlns',
	  'xml:space': 'xmlSpace',
	  xmlnsxlink: 'xmlnsXlink',
	  'xmlns:xlink': 'xmlnsXlink',
	  xmlspace: 'xmlSpace',
	  y1: 'y1',
	  y2: 'y2',
	  y: 'y',
	  ychannelselector: 'yChannelSelector',
	  z: 'z',
	  zoomandpan: 'zoomAndPan'
	};

	var ariaProperties = {
	  'aria-current': 0,
	  // state
	  'aria-details': 0,
	  'aria-disabled': 0,
	  // state
	  'aria-hidden': 0,
	  // state
	  'aria-invalid': 0,
	  // state
	  'aria-keyshortcuts': 0,
	  'aria-label': 0,
	  'aria-roledescription': 0,
	  // Widget Attributes
	  'aria-autocomplete': 0,
	  'aria-checked': 0,
	  'aria-expanded': 0,
	  'aria-haspopup': 0,
	  'aria-level': 0,
	  'aria-modal': 0,
	  'aria-multiline': 0,
	  'aria-multiselectable': 0,
	  'aria-orientation': 0,
	  'aria-placeholder': 0,
	  'aria-pressed': 0,
	  'aria-readonly': 0,
	  'aria-required': 0,
	  'aria-selected': 0,
	  'aria-sort': 0,
	  'aria-valuemax': 0,
	  'aria-valuemin': 0,
	  'aria-valuenow': 0,
	  'aria-valuetext': 0,
	  // Live Region Attributes
	  'aria-atomic': 0,
	  'aria-busy': 0,
	  'aria-live': 0,
	  'aria-relevant': 0,
	  // Drag-and-Drop Attributes
	  'aria-dropeffect': 0,
	  'aria-grabbed': 0,
	  // Relationship Attributes
	  'aria-activedescendant': 0,
	  'aria-colcount': 0,
	  'aria-colindex': 0,
	  'aria-colspan': 0,
	  'aria-controls': 0,
	  'aria-describedby': 0,
	  'aria-errormessage': 0,
	  'aria-flowto': 0,
	  'aria-labelledby': 0,
	  'aria-owns': 0,
	  'aria-posinset': 0,
	  'aria-rowcount': 0,
	  'aria-rowindex': 0,
	  'aria-rowspan': 0,
	  'aria-setsize': 0
	};

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

	function validateProperty(tagName, name) {
	  {
	    if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
	      return true;
	    }

	    if (rARIACamel.test(name)) {
	      var ariaName = 'aria-' + name.slice(4).toLowerCase();
	      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	      // DOM properties, then it is an invalid aria-* attribute.

	      if (correctName == null) {
	        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

	        warnedProperties[name] = true;
	        return true;
	      } // aria-* attributes should be lowercase; suggest the lowercase version.


	      if (name !== correctName) {
	        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

	        warnedProperties[name] = true;
	        return true;
	      }
	    }

	    if (rARIA.test(name)) {
	      var lowerCasedName = name.toLowerCase();
	      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	      // DOM properties, then it is an invalid aria-* attribute.

	      if (standardName == null) {
	        warnedProperties[name] = true;
	        return false;
	      } // aria-* attributes should be lowercase; suggest the lowercase version.


	      if (name !== standardName) {
	        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

	        warnedProperties[name] = true;
	        return true;
	      }
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(type, props) {
	  {
	    var invalidProps = [];

	    for (var key in props) {
	      var isValid = validateProperty(type, key);

	      if (!isValid) {
	        invalidProps.push(key);
	      }
	    }

	    var unknownPropString = invalidProps.map(function (prop) {
	      return '`' + prop + '`';
	    }).join(', ');

	    if (invalidProps.length === 1) {
	      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
	    } else if (invalidProps.length > 1) {
	      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
	    }
	  }
	}

	function validateProperties(type, props) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnInvalidARIAProps(type, props);
	}

	var didWarnValueNull = false;
	function validateProperties$1(type, props) {
	  {
	    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
	      return;
	    }

	    if (props != null && props.value === null && !didWarnValueNull) {
	      didWarnValueNull = true;

	      if (type === 'select' && props.multiple) {
	        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
	      } else {
	        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
	      }
	    }
	  }
	}

	var validateProperty$1 = function () {};

	{
	  var warnedProperties$1 = {};
	  var _hasOwnProperty = Object.prototype.hasOwnProperty;
	  var EVENT_NAME_REGEX = /^on./;
	  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
	  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
	    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
	      return true;
	    }

	    var lowerCasedName = name.toLowerCase();

	    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
	      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

	      warnedProperties$1[name] = true;
	      return true;
	    } // We can't rely on the event system being injected on the server.


	    if (canUseEventSystem) {
	      if (registrationNameModules.hasOwnProperty(name)) {
	        return true;
	      }

	      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

	      if (registrationName != null) {
	        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

	        warnedProperties$1[name] = true;
	        return true;
	      }

	      if (EVENT_NAME_REGEX.test(name)) {
	        error('Unknown event handler property `%s`. It will be ignored.', name);

	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (EVENT_NAME_REGEX.test(name)) {
	      // If no event plugins have been injected, we are in a server environment.
	      // So we can't tell if the event name is correct for sure, but we can filter
	      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
	      if (INVALID_EVENT_NAME_REGEX.test(name)) {
	        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Let the ARIA attribute hook validate ARIA attributes


	    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
	      return true;
	    }

	    if (lowerCasedName === 'innerhtml') {
	      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'aria') {
	      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
	      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    var propertyInfo = getPropertyInfo(name);
	    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

	    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      var standardName = possibleStandardNames[lowerCasedName];

	      if (standardName !== name) {
	        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (!isReserved && name !== lowerCasedName) {
	      // Unknown attributes should have lowercase casing since that's how they
	      // will be cased anyway with server rendering.
	      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      if (value) {
	        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
	      } else {
	        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Now that we've validated casing, do not validate
	    // data types for reserved props


	    if (isReserved) {
	      return true;
	    } // Warn when a known attribute is a bad type


	    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      warnedProperties$1[name] = true;
	      return false;
	    } // Warn when passing the strings 'false' or 'true' into a boolean prop


	    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
	      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    return true;
	  };
	}

	var warnUnknownProperties = function (type, props, canUseEventSystem) {
	  {
	    var unknownProps = [];

	    for (var key in props) {
	      var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);

	      if (!isValid) {
	        unknownProps.push(key);
	      }
	    }

	    var unknownPropString = unknownProps.map(function (prop) {
	      return '`' + prop + '`';
	    }).join(', ');

	    if (unknownProps.length === 1) {
	      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
	    } else if (unknownProps.length > 1) {
	      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
	    }
	  }
	};

	function validateProperties$2(type, props, canUseEventSystem) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnUnknownProperties(type, props, canUseEventSystem);
	}

	var didWarnInvalidHydration = false;
	var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
	var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
	var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
	var AUTOFOCUS = 'autoFocus';
	var CHILDREN = 'children';
	var STYLE = 'style';
	var HTML$1 = '__html';
	var HTML_NAMESPACE$1 = Namespaces.html;
	var warnedUnknownTags;
	var suppressHydrationWarning;
	var validatePropertiesInDevelopment;
	var warnForTextDifference;
	var warnForPropDifference;
	var warnForExtraAttributes;
	var warnForInvalidEventListener;
	var canDiffStyleForHydrationWarning;
	var normalizeMarkupForTextOrAttribute;
	var normalizeHTML;

	{
	  warnedUnknownTags = {
	    // Chrome is the only major browser not shipping <time>. But as of July
	    // 2017 it intends to ship it due to widespread usage. We intentionally
	    // *don't* warn for <time> even if it's unrecognized by Chrome because
	    // it soon will be, and many apps have been using it anyway.
	    time: true,
	    // There are working polyfills for <dialog>. Let people use it.
	    dialog: true,
	    // Electron ships a custom <webview> tag to display external web content in
	    // an isolated frame and process.
	    // This tag is not present in non Electron environments such as JSDom which
	    // is often used for testing purposes.
	    // @see https://electronjs.org/docs/api/webview-tag
	    webview: true
	  };

	  validatePropertiesInDevelopment = function (type, props) {
	    validateProperties(type, props);
	    validateProperties$1(type, props);
	    validateProperties$2(type, props,
	    /* canUseEventSystem */
	    true);
	  }; // IE 11 parses & normalizes the style attribute as opposed to other
	  // browsers. It adds spaces and sorts the properties in some
	  // non-alphabetical order. Handling that would require sorting CSS
	  // properties in the client & server versions or applying
	  // `expectedStyle` to a temporary DOM node to read its `style` attribute
	  // normalized. Since it only affects IE, we're skipping style warnings
	  // in that browser completely in favor of doing all that work.
	  // See https://github.com/facebook/react/issues/11807


	  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
	  // It also can turn \u0000 into \uFFFD inside attributes.
	  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
	  // If we have a mismatch, it might be caused by that.
	  // We will still patch up in this case but not fire the warning.

	  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
	  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

	  normalizeMarkupForTextOrAttribute = function (markup) {
	    var markupString = typeof markup === 'string' ? markup : '' + markup;
	    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
	  };

	  warnForTextDifference = function (serverText, clientText) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
	    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

	    if (normalizedServerText === normalizedClientText) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
	  };

	  warnForPropDifference = function (propName, serverValue, clientValue) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
	    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

	    if (normalizedServerValue === normalizedClientValue) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
	  };

	  warnForExtraAttributes = function (attributeNames) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;
	    var names = [];
	    attributeNames.forEach(function (name) {
	      names.push(name);
	    });

	    error('Extra attributes from the server: %s', names);
	  };

	  warnForInvalidEventListener = function (registrationName, listener) {
	    if (listener === false) {
	      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
	    } else {
	      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
	    }
	  }; // Parse the HTML and read it back to normalize the HTML string so that it
	  // can be used for comparison.


	  normalizeHTML = function (parent, html) {
	    // We could have created a separate document here to avoid
	    // re-initializing custom elements if they exist. But this breaks
	    // how <noscript> is being handled. So we use the same document.
	    // See the discussion in https://github.com/facebook/react/pull/11157.
	    var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
	    testElement.innerHTML = html;
	    return testElement.innerHTML;
	  };
	}

	function ensureListeningTo(rootContainerElement, registrationName) {
	  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
	  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
	  legacyListenToEvent(registrationName, doc);
	}

	function getOwnerDocumentFromRootContainer(rootContainerElement) {
	  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
	}

	function noop() {}

	function trapClickOnNonInteractiveElement(node) {
	  // Mobile Safari does not fire properly bubble click events on
	  // non-interactive elements, which means delegated click listeners do not
	  // fire. The workaround for this bug involves attaching an empty click
	  // listener on the target node.
	  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	  // Just set it using the onclick property so that we don't have to manage any
	  // bookkeeping for it. Not sure if we need to clear it when the listener is
	  // removed.
	  // TODO: Only do this for the relevant Safaris maybe?
	  node.onclick = noop;
	}

	function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
	  for (var propKey in nextProps) {
	    if (!nextProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = nextProps[propKey];

	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


	      setValueForStyles(domElement, nextProp);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

	      if (nextHtml != null) {
	        setInnerHTML(domElement, nextHtml);
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string') {
	        // Avoid setting initial textContent when the text is empty. In IE11 setting
	        // textContent on a <textarea> will cause the placeholder to not
	        // show within the <textarea> until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

	        if (canSetTextContent) {
	          setTextContent(domElement, nextProp);
	        }
	      } else if (typeof nextProp === 'number') {
	        setTextContent(domElement, '' + nextProp);
	      }
	    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if (nextProp != null) {
	      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
	    }
	  }
	}

	function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
	  // TODO: Handle wasCustomComponentTag
	  for (var i = 0; i < updatePayload.length; i += 2) {
	    var propKey = updatePayload[i];
	    var propValue = updatePayload[i + 1];

	    if (propKey === STYLE) {
	      setValueForStyles(domElement, propValue);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      setInnerHTML(domElement, propValue);
	    } else if (propKey === CHILDREN) {
	      setTextContent(domElement, propValue);
	    } else {
	      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
	    }
	  }
	}

	function createElement(type, props, rootContainerElement, parentNamespace) {
	  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
	  // tags get no namespace.

	  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
	  var domElement;
	  var namespaceURI = parentNamespace;

	  if (namespaceURI === HTML_NAMESPACE$1) {
	    namespaceURI = getIntrinsicNamespace(type);
	  }

	  if (namespaceURI === HTML_NAMESPACE$1) {
	    {
	      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
	      // allow <SVG> or <mATH>.

	      if (!isCustomComponentTag && type !== type.toLowerCase()) {
	        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
	      }
	    }

	    if (type === 'script') {
	      // Create the script via .innerHTML so its "parser-inserted" flag is
	      // set to true and it does not execute
	      var div = ownerDocument.createElement('div');

	      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
	      // This is guaranteed to yield a script element.

	      var firstChild = div.firstChild;
	      domElement = div.removeChild(firstChild);
	    } else if (typeof props.is === 'string') {
	      // $FlowIssue `createElement` should be updated for Web Components
	      domElement = ownerDocument.createElement(type, {
	        is: props.is
	      });
	    } else {
	      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
	      // See discussion in https://github.com/facebook/react/pull/6896
	      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
	      // attributes on `select`s needs to be added before `option`s are inserted.
	      // This prevents:
	      // - a bug where the `select` does not scroll to the correct option because singular
	      //  `select` elements automatically pick the first item #13222
	      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
	      // See https://github.com/facebook/react/issues/13222
	      // and https://github.com/facebook/react/issues/14239

	      if (type === 'select') {
	        var node = domElement;

	        if (props.multiple) {
	          node.multiple = true;
	        } else if (props.size) {
	          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
	          // it is possible that no option is selected.
	          //
	          // This is only necessary when a select in "single selection mode".
	          node.size = props.size;
	        }
	      }
	    }
	  } else {
	    domElement = ownerDocument.createElementNS(namespaceURI, type);
	  }

	  {
	    if (namespaceURI === HTML_NAMESPACE$1) {
	      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
	        warnedUnknownTags[type] = true;

	        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
	      }
	    }
	  }

	  return domElement;
	}
	function createTextNode(text, rootContainerElement) {
	  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
	}
	function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
	  var isCustomComponentTag = isCustomComponent(tag, rawProps);

	  {
	    validatePropertiesInDevelopment(tag, rawProps);
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  var props;

	  switch (tag) {
	    case 'iframe':
	    case 'object':
	    case 'embed':
	      trapBubbledEvent(TOP_LOAD, domElement);
	      props = rawProps;
	      break;

	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        trapBubbledEvent(mediaEventTypes[i], domElement);
	      }

	      props = rawProps;
	      break;

	    case 'source':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      props = rawProps;
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      trapBubbledEvent(TOP_LOAD, domElement);
	      props = rawProps;
	      break;

	    case 'form':
	      trapBubbledEvent(TOP_RESET, domElement);
	      trapBubbledEvent(TOP_SUBMIT, domElement);
	      props = rawProps;
	      break;

	    case 'details':
	      trapBubbledEvent(TOP_TOGGLE, domElement);
	      props = rawProps;
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps);
	      props = getHostProps(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      props = getHostProps$1(domElement, rawProps);
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      props = getHostProps$2(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      props = getHostProps$3(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    default:
	      props = rawProps;
	  }

	  assertValidProps(tag, props);
	  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, false);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'option':
	      postMountWrapper$1(domElement, rawProps);
	      break;

	    case 'select':
	      postMountWrapper$2(domElement, rawProps);
	      break;

	    default:
	      if (typeof props.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }
	} // Calculate the diff between the two objects.

	function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
	  {
	    validatePropertiesInDevelopment(tag, nextRawProps);
	  }

	  var updatePayload = null;
	  var lastProps;
	  var nextProps;

	  switch (tag) {
	    case 'input':
	      lastProps = getHostProps(domElement, lastRawProps);
	      nextProps = getHostProps(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'option':
	      lastProps = getHostProps$1(domElement, lastRawProps);
	      nextProps = getHostProps$1(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'select':
	      lastProps = getHostProps$2(domElement, lastRawProps);
	      nextProps = getHostProps$2(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'textarea':
	      lastProps = getHostProps$3(domElement, lastRawProps);
	      nextProps = getHostProps$3(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    default:
	      lastProps = lastRawProps;
	      nextProps = nextRawProps;

	      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  assertValidProps(tag, nextProps);
	  var propKey;
	  var styleName;
	  var styleUpdates = null;

	  for (propKey in lastProps) {
	    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	      continue;
	    }

	    if (propKey === STYLE) {
	      var lastStyle = lastProps[propKey];

	      for (styleName in lastStyle) {
	        if (lastStyle.hasOwnProperty(styleName)) {
	          if (!styleUpdates) {
	            styleUpdates = {};
	          }

	          styleUpdates[styleName] = '';
	        }
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      // This is a special case. If any listener updates we need to ensure
	      // that the "current" fiber pointer gets updated so we need a commit
	      // to update this element.
	      if (!updatePayload) {
	        updatePayload = [];
	      }
	    } else {
	      // For all other deleted properties we add it to the queue. We use
	      // the whitelist in the commit phase instead.
	      (updatePayload = updatePayload || []).push(propKey, null);
	    }
	  }

	  for (propKey in nextProps) {
	    var nextProp = nextProps[propKey];
	    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

	    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	      continue;
	    }

	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }

	      if (lastProp) {
	        // Unset styles on `lastProp` but not on `nextProp`.
	        for (styleName in lastProp) {
	          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = '';
	          }
	        } // Update styles that changed since `lastProp`.


	        for (styleName in nextProp) {
	          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = nextProp[styleName];
	          }
	        }
	      } else {
	        // Relies on `updateStylesByID` not mutating `styleUpdates`.
	        if (!styleUpdates) {
	          if (!updatePayload) {
	            updatePayload = [];
	          }

	          updatePayload.push(propKey, styleUpdates);
	        }

	        styleUpdates = nextProp;
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
	      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

	      if (nextHtml != null) {
	        if (lastHtml !== nextHtml) {
	          (updatePayload = updatePayload || []).push(propKey, nextHtml);
	        }
	      }
	    } else if (propKey === CHILDREN) {
	      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
	        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
	      }
	    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        // We eagerly listen to this even though we haven't committed yet.
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        ensureListeningTo(rootContainerElement, propKey);
	      }

	      if (!updatePayload && lastProp !== nextProp) {
	        // This is a special case. If any listener updates we need to ensure
	        // that the "current" props pointer gets updated so we need a commit
	        // to update this element.
	        updatePayload = [];
	      }
	    } else {
	      // For any other property we always add it to the queue and then we
	      // filter it out using the whitelist during the commit.
	      (updatePayload = updatePayload || []).push(propKey, nextProp);
	    }
	  }

	  if (styleUpdates) {
	    {
	      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
	    }

	    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
	  }

	  return updatePayload;
	} // Apply the diff.

	function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
	  // Update checked *before* name.
	  // In the middle of an update, it is possible to have multiple checked.
	  // When a checked radio tries to change name, browser makes another radio's checked false.
	  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
	    updateChecked(domElement, nextRawProps);
	  }

	  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
	  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

	  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
	  // changed.

	  switch (tag) {
	    case 'input':
	      // Update the wrapper around inputs *after* updating props. This has to
	      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
	      // raise warnings and prevent the new value from being assigned.
	      updateWrapper(domElement, nextRawProps);
	      break;

	    case 'textarea':
	      updateWrapper$1(domElement, nextRawProps);
	      break;

	    case 'select':
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      postUpdateWrapper(domElement, nextRawProps);
	      break;
	  }
	}

	function getPossibleStandardName(propName) {
	  {
	    var lowerCasedName = propName.toLowerCase();

	    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      return null;
	    }

	    return possibleStandardNames[lowerCasedName] || null;
	  }
	}

	function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
	  var isCustomComponentTag;
	  var extraAttributeNames;

	  {
	    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
	    isCustomComponentTag = isCustomComponent(tag, rawProps);
	    validatePropertiesInDevelopment(tag, rawProps);
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  switch (tag) {
	    case 'iframe':
	    case 'object':
	    case 'embed':
	      trapBubbledEvent(TOP_LOAD, domElement);
	      break;

	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        trapBubbledEvent(mediaEventTypes[i], domElement);
	      }

	      break;

	    case 'source':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      trapBubbledEvent(TOP_LOAD, domElement);
	      break;

	    case 'form':
	      trapBubbledEvent(TOP_RESET, domElement);
	      trapBubbledEvent(TOP_SUBMIT, domElement);
	      break;

	    case 'details':
	      trapBubbledEvent(TOP_TOGGLE, domElement);
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	  }

	  assertValidProps(tag, rawProps);

	  {
	    extraAttributeNames = new Set();
	    var attributes = domElement.attributes;

	    for (var _i = 0; _i < attributes.length; _i++) {
	      var name = attributes[_i].name.toLowerCase();

	      switch (name) {
	        // Built-in SSR attribute is whitelisted
	        case 'data-reactroot':
	          break;
	        // Controlled attributes are not validated
	        // TODO: Only ignore them on controlled tags.

	        case 'value':
	          break;

	        case 'checked':
	          break;

	        case 'selected':
	          break;

	        default:
	          // Intentionally use the original name.
	          // See discussion in https://github.com/facebook/react/pull/10676.
	          extraAttributeNames.add(attributes[_i].name);
	      }
	    }
	  }

	  var updatePayload = null;

	  for (var propKey in rawProps) {
	    if (!rawProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = rawProps[propKey];

	    if (propKey === CHILDREN) {
	      // For text content children we compare against textContent. This
	      // might match additional HTML that is hidden when we read it using
	      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
	      // satisfies our requirement. Our requirement is not to produce perfect
	      // HTML and attributes. Ideally we should preserve structure but it's
	      // ok not to if the visible content is still enough to indicate what
	      // even listeners these nodes might be wired up to.
	      // TODO: Warn if there is more than a single textNode as a child.
	      // TODO: Should we use domElement.firstChild.nodeValue to compare?
	      if (typeof nextProp === 'string') {
	        if (domElement.textContent !== nextProp) {
	          if ( !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }

	          updatePayload = [CHILDREN, nextProp];
	        }
	      } else if (typeof nextProp === 'number') {
	        if (domElement.textContent !== '' + nextProp) {
	          if ( !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }

	          updatePayload = [CHILDREN, '' + nextProp];
	        }
	      }
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
	    typeof isCustomComponentTag === 'boolean') {
	      // Validate that the properties correspond to their expected values.
	      var serverValue = void 0;
	      var propertyInfo = getPropertyInfo(propKey);

	      if (suppressHydrationWarning) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
	      // TODO: Only ignore them on controlled tags.
	      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	        var serverHTML = domElement.innerHTML;
	        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
	        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');

	        if (expectedHTML !== serverHTML) {
	          warnForPropDifference(propKey, serverHTML, expectedHTML);
	        }
	      } else if (propKey === STYLE) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey);

	        if (canDiffStyleForHydrationWarning) {
	          var expectedStyle = createDangerousStringForStyles(nextProp);
	          serverValue = domElement.getAttribute('style');

	          if (expectedStyle !== serverValue) {
	            warnForPropDifference(propKey, serverValue, expectedStyle);
	          }
	        }
	      } else if (isCustomComponentTag) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey.toLowerCase());
	        serverValue = getValueForAttribute(domElement, propKey, nextProp);

	        if (nextProp !== serverValue) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
	        var isMismatchDueToBadCasing = false;

	        if (propertyInfo !== null) {
	          // $FlowFixMe - Should be inferred as not undefined.
	          extraAttributeNames.delete(propertyInfo.attributeName);
	          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
	        } else {
	          var ownNamespace = parentNamespace;

	          if (ownNamespace === HTML_NAMESPACE$1) {
	            ownNamespace = getIntrinsicNamespace(tag);
	          }

	          if (ownNamespace === HTML_NAMESPACE$1) {
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames.delete(propKey.toLowerCase());
	          } else {
	            var standardName = getPossibleStandardName(propKey);

	            if (standardName !== null && standardName !== propKey) {
	              // If an SVG prop is supplied with bad casing, it will
	              // be successfully parsed from HTML, but will produce a mismatch
	              // (and would be incorrectly rendered on the client).
	              // However, we already warn about bad casing elsewhere.
	              // So we'll skip the misleading extra mismatch warning in this case.
	              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

	              extraAttributeNames.delete(standardName);
	            } // $FlowFixMe - Should be inferred as not undefined.


	            extraAttributeNames.delete(propKey);
	          }

	          serverValue = getValueForAttribute(domElement, propKey, nextProp);
	        }

	        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      }
	    }
	  }

	  {
	    // $FlowFixMe - Should be inferred as not undefined.
	    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
	      // $FlowFixMe - Should be inferred as not undefined.
	      warnForExtraAttributes(extraAttributeNames);
	    }
	  }

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, true);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'select':
	    case 'option':
	      // For input and textarea we current always set the value property at
	      // post mount to force it to diverge from attributes. However, for
	      // option and select we don't quite do the same thing and select
	      // is not resilient to the DOM state changing so we don't do that here.
	      // TODO: Consider not doing this for input and textarea.
	      break;

	    default:
	      if (typeof rawProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  return updatePayload;
	}
	function diffHydratedText(textNode, text) {
	  var isDifferent = textNode.nodeValue !== text;
	  return isDifferent;
	}
	function warnForUnmatchedText(textNode, text) {
	  {
	    warnForTextDifference(textNode.nodeValue, text);
	  }
	}
	function warnForDeletedHydratableElement(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForDeletedHydratableText(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedElement(parentNode, tag, props) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedText(parentNode, text) {
	  {
	    if (text === '') {
	      // We expect to insert empty text nodes since they're not represented in
	      // the HTML.
	      // TODO: Remove this special case if we can just avoid inserting empty
	      // text nodes.
	      return;
	    }

	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
	  }
	}
	function restoreControlledState$3(domElement, tag, props) {
	  switch (tag) {
	    case 'input':
	      restoreControlledState(domElement, props);
	      return;

	    case 'textarea':
	      restoreControlledState$2(domElement, props);
	      return;

	    case 'select':
	      restoreControlledState$1(domElement, props);
	      return;
	  }
	}

	function getActiveElement(doc) {
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);

	  if (typeof doc === 'undefined') {
	    return null;
	  }

	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }

	  return node;
	}
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */


	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }

	    node = node.parentNode;
	  }
	}
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */


	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === TEXT_NODE) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	/**
	 * @param {DOMElement} outerNode
	 * @return {?object}
	 */

	function getOffsets(outerNode) {
	  var ownerDocument = outerNode.ownerDocument;
	  var win = ownerDocument && ownerDocument.defaultView || window;
	  var selection = win.getSelection && win.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode,
	      anchorOffset = selection.anchorOffset,
	      focusNode = selection.focusNode,
	      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
	  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
	  // expose properties, triggering a "Permission denied error" if any of its
	  // properties are accessed. The only seemingly possible way to avoid erroring
	  // is to access a property that typically works for non-anonymous divs and
	  // catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

	  try {
	    /* eslint-disable no-unused-expressions */
	    anchorNode.nodeType;
	    focusNode.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
	}
	/**
	 * Returns {start, end} where `start` is the character/codepoint index of
	 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
	 * `end` is the index of (focusNode, focusOffset).
	 *
	 * Returns null if you pass in garbage input but we should probably just crash.
	 *
	 * Exported only for testing.
	 */

	function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
	  var length = 0;
	  var start = -1;
	  var end = -1;
	  var indexWithinAnchor = 0;
	  var indexWithinFocus = 0;
	  var node = outerNode;
	  var parentNode = null;

	  outer: while (true) {
	    var next = null;

	    while (true) {
	      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
	        start = length + anchorOffset;
	      }

	      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
	        end = length + focusOffset;
	      }

	      if (node.nodeType === TEXT_NODE) {
	        length += node.nodeValue.length;
	      }

	      if ((next = node.firstChild) === null) {
	        break;
	      } // Moving from `node` to its first child `next`.


	      parentNode = node;
	      node = next;
	    }

	    while (true) {
	      if (node === outerNode) {
	        // If `outerNode` has children, this is always the second time visiting
	        // it. If it has no children, this is still the first loop, and the only
	        // valid selection is anchorNode and focusNode both equal to this node
	        // and both offsets 0, in which case we will have handled above.
	        break outer;
	      }

	      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
	        start = length;
	      }

	      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
	        end = length;
	      }

	      if ((next = node.nextSibling) !== null) {
	        break;
	      }

	      node = parentNode;
	      parentNode = node.parentNode;
	    } // Moving from `node` to its next sibling `next`.


	    node = next;
	  }

	  if (start === -1 || end === -1) {
	    // This should never happen. (Would happen if the anchor/focus nodes aren't
	    // actually inside the passed-in node.)
	    return null;
	  }

	  return {
	    start: start,
	    end: end
	  };
	}
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */

	function setOffsets(node, offsets) {
	  var doc = node.ownerDocument || document;
	  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
	  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
	  // fails when pasting 100+ items)

	  if (!win.getSelection) {
	    return;
	  }

	  var selection = win.getSelection();
	  var length = node.textContent.length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.

	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
	      return;
	    }

	    var range = doc.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	function isTextNode(node) {
	  return node && node.nodeType === TEXT_NODE;
	}

	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	function isInDocument(node) {
	  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
	}

	function isSameOriginFrame(iframe) {
	  try {
	    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
	    // to throw, e.g. if it has a cross-origin src attribute.
	    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
	    // iframe.contentDocument.defaultView;
	    // A safety way is to access one of the cross origin properties: Window or Location
	    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
	    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
	    return typeof iframe.contentWindow.location.href === 'string';
	  } catch (err) {
	    return false;
	  }
	}

	function getActiveElementDeep() {
	  var win = window;
	  var element = getActiveElement();

	  while (element instanceof win.HTMLIFrameElement) {
	    if (isSameOriginFrame(element)) {
	      win = element.contentWindow;
	    } else {
	      return element;
	    }

	    element = getActiveElement(win.document);
	  }

	  return element;
	}
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */

	/**
	 * @hasSelectionCapabilities: we get the element types that support selection
	 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
	 * and `selectionEnd` rows.
	 */


	function hasSelectionCapabilities(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
	}
	function getSelectionInformation() {
	  var focusedElem = getActiveElementDeep();
	  return {
	    // Used by Flare
	    activeElementDetached: null,
	    focusedElem: focusedElem,
	    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
	  };
	}
	/**
	 * @restoreSelection: If any selection information was potentially lost,
	 * restore it. This is useful when performing operations that could remove dom
	 * nodes and place them back in, resulting in focus being lost.
	 */

	function restoreSelection(priorSelectionInformation) {
	  var curFocusedElem = getActiveElementDeep();
	  var priorFocusedElem = priorSelectionInformation.focusedElem;
	  var priorSelectionRange = priorSelectionInformation.selectionRange;

	  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
	      setSelection(priorFocusedElem, priorSelectionRange);
	    } // Focusing a node can change the scroll position, which is undesirable


	    var ancestors = [];
	    var ancestor = priorFocusedElem;

	    while (ancestor = ancestor.parentNode) {
	      if (ancestor.nodeType === ELEMENT_NODE) {
	        ancestors.push({
	          element: ancestor,
	          left: ancestor.scrollLeft,
	          top: ancestor.scrollTop
	        });
	      }
	    }

	    if (typeof priorFocusedElem.focus === 'function') {
	      priorFocusedElem.focus();
	    }

	    for (var i = 0; i < ancestors.length; i++) {
	      var info = ancestors[i];
	      info.element.scrollLeft = info.left;
	      info.element.scrollTop = info.top;
	    }
	  }
	}
	/**
	 * @getSelection: Gets the selection bounds of a focused textarea, input or
	 * contentEditable node.
	 * -@input: Look up selection bounds of this input
	 * -@return {start: selectionStart, end: selectionEnd}
	 */

	function getSelection(input) {
	  var selection;

	  if ('selectionStart' in input) {
	    // Modern browser with input or textarea.
	    selection = {
	      start: input.selectionStart,
	      end: input.selectionEnd
	    };
	  } else {
	    // Content editable or old IE textarea.
	    selection = getOffsets(input);
	  }

	  return selection || {
	    start: 0,
	    end: 0
	  };
	}
	/**
	 * @setSelection: Sets the selection bounds of a textarea or input and focuses
	 * the input.
	 * -@input     Set selection bounds of this input or textarea
	 * -@offsets   Object of same form that is returned from get*
	 */

	function setSelection(input, offsets) {
	  var start = offsets.start,
	      end = offsets.end;

	  if (end === undefined) {
	    end = start;
	  }

	  if ('selectionStart' in input) {
	    input.selectionStart = start;
	    input.selectionEnd = Math.min(end, input.value.length);
	  } else {
	    setOffsets(input, offsets);
	  }
	}

	var validateDOMNesting = function () {};

	var updatedAncestorInfo = function () {};

	{
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

	  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	  var emptyAncestorInfo = {
	    current: null,
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  updatedAncestorInfo = function (oldInfo, tag) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

	    var info = {
	      tag: tag
	    };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }

	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    } // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }

	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }

	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }

	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }

	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }

	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }

	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };
	  /**
	   * Returns whether
	   */


	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';

	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but

	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

	      case 'html':
	        return tag === 'head' || tag === 'body' || tag === 'frameset';

	      case 'frameset':
	        return tag === 'frame';

	      case '#document':
	        return tag === 'html';
	    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frameset':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };
	  /**
	   * Returns whether
	   */


	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  var didWarn$1 = {};

	  validateDOMNesting = function (childTag, childText, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      if (childTag != null) {
	        error('validateDOMNesting: when childText is passed, childTag should be null');
	      }

	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var invalidParentOrAncestor = invalidParent || invalidAncestor;

	    if (!invalidParentOrAncestor) {
	      return;
	    }

	    var ancestorTag = invalidParentOrAncestor.tag;
	    var addendum = getCurrentFiberStackInDev();
	    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;

	    if (didWarn$1[warnKey]) {
	      return;
	    }

	    didWarn$1[warnKey] = true;
	    var tagDisplayName = childTag;
	    var whitespaceInfo = '';

	    if (childTag === '#text') {
	      if (/\S/.test(childText)) {
	        tagDisplayName = 'Text nodes';
	      } else {
	        tagDisplayName = 'Whitespace text nodes';
	        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	      }
	    } else {
	      tagDisplayName = '<' + childTag + '>';
	    }

	    if (invalidParent) {
	      var info = '';

	      if (ancestorTag === 'table' && childTag === 'tr') {
	        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
	      }

	      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
	    } else {
	      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
	    }
	  };
	}

	var SUPPRESS_HYDRATION_WARNING$1;

	{
	  SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
	}

	var SUSPENSE_START_DATA = '$';
	var SUSPENSE_END_DATA = '/$';
	var SUSPENSE_PENDING_START_DATA = '$?';
	var SUSPENSE_FALLBACK_START_DATA = '$!';
	var STYLE$1 = 'style';
	var eventsEnabled = null;
	var selectionInformation = null;

	function shouldAutoFocusHostComponent(type, props) {
	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      return !!props.autoFocus;
	  }

	  return false;
	}
	function getRootHostContext(rootContainerInstance) {
	  var type;
	  var namespace;
	  var nodeType = rootContainerInstance.nodeType;

	  switch (nodeType) {
	    case DOCUMENT_NODE:
	    case DOCUMENT_FRAGMENT_NODE:
	      {
	        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
	        var root = rootContainerInstance.documentElement;
	        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
	        break;
	      }

	    default:
	      {
	        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
	        var ownNamespace = container.namespaceURI || null;
	        type = container.tagName;
	        namespace = getChildNamespace(ownNamespace, type);
	        break;
	      }
	  }

	  {
	    var validatedTag = type.toLowerCase();
	    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getChildHostContext(parentHostContext, type, rootContainerInstance) {
	  {
	    var parentHostContextDev = parentHostContext;
	    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
	    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getPublicInstance(instance) {
	  return instance;
	}
	function prepareForCommit(containerInfo) {
	  eventsEnabled = isEnabled();
	  selectionInformation = getSelectionInformation();
	  setEnabled(false);
	}
	function resetAfterCommit(containerInfo) {
	  restoreSelection(selectionInformation);
	  setEnabled(eventsEnabled);
	  eventsEnabled = null;

	  selectionInformation = null;
	}
	function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  var parentNamespace;

	  {
	    // TODO: take namespace into account when validating.
	    var hostContextDev = hostContext;
	    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

	    if (typeof props.children === 'string' || typeof props.children === 'number') {
	      var string = '' + props.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }

	    parentNamespace = hostContextDev.namespace;
	  }

	  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
	  precacheFiberNode(internalInstanceHandle, domElement);
	  updateFiberProps(domElement, props);
	  return domElement;
	}
	function appendInitialChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
	  setInitialProperties(domElement, type, props, rootContainerInstance);
	  return shouldAutoFocusHostComponent(type, props);
	}
	function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
	  {
	    var hostContextDev = hostContext;

	    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
	      var string = '' + newProps.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }
	  }

	  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
	}
	function shouldSetTextContent(type, props) {
	  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
	}
	function shouldDeprioritizeSubtree(type, props) {
	  return !!props.hidden;
	}
	function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
	  {
	    var hostContextDev = hostContext;
	    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
	  }

	  var textNode = createTextNode(text, rootContainerInstance);
	  precacheFiberNode(internalInstanceHandle, textNode);
	  return textNode;
	}
	// if a component just imports ReactDOM (e.g. for findDOMNode).
	// Some environments might not have setTimeout or clearTimeout.

	var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
	var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
	var noTimeout = -1; // -------------------
	function commitMount(domElement, type, newProps, internalInstanceHandle) {
	  // Despite the naming that might imply otherwise, this method only
	  // fires if there is an `Update` effect scheduled during mounting.
	  // This happens if `finalizeInitialChildren` returns `true` (which it
	  // does to implement the `autoFocus` attribute on the client). But
	  // there are also other cases when this might happen (such as patching
	  // up text content during hydration mismatch). So we'll check this again.
	  if (shouldAutoFocusHostComponent(type, newProps)) {
	    domElement.focus();
	  }
	}
	function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
	  // Update the props handle so that we know which props are the ones with
	  // with current event handlers.
	  updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

	  updateProperties(domElement, updatePayload, type, oldProps, newProps);
	}
	function resetTextContent(domElement) {
	  setTextContent(domElement, '');
	}
	function commitTextUpdate(textInstance, oldText, newText) {
	  textInstance.nodeValue = newText;
	}
	function appendChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function appendChildToContainer(container, child) {
	  var parentNode;

	  if (container.nodeType === COMMENT_NODE) {
	    parentNode = container.parentNode;
	    parentNode.insertBefore(child, container);
	  } else {
	    parentNode = container;
	    parentNode.appendChild(child);
	  } // This container might be used for a portal.
	  // If something inside a portal is clicked, that click should bubble
	  // through the React tree. However, on Mobile Safari the click would
	  // never bubble through the *DOM* tree unless an ancestor with onclick
	  // event exists. So we wouldn't see it and dispatch it.
	  // This is why we ensure that non React root containers have inline onclick
	  // defined.
	  // https://github.com/facebook/react/issues/11918


	  var reactRootContainer = container._reactRootContainer;

	  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
	    // TODO: This cast may not be sound for SVG, MathML or custom elements.
	    trapClickOnNonInteractiveElement(parentNode);
	  }
	}
	function insertBefore(parentInstance, child, beforeChild) {
	  parentInstance.insertBefore(child, beforeChild);
	}
	function insertInContainerBefore(container, child, beforeChild) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.insertBefore(child, beforeChild);
	  } else {
	    container.insertBefore(child, beforeChild);
	  }
	}
	function removeChild(parentInstance, child) {
	  parentInstance.removeChild(child);
	}
	function removeChildFromContainer(container, child) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.removeChild(child);
	  } else {
	    container.removeChild(child);
	  }
	}

	function hideInstance(instance) {
	  // pass host context to this method?


	  instance = instance;
	  var style = instance.style;

	  if (typeof style.setProperty === 'function') {
	    style.setProperty('display', 'none', 'important');
	  } else {
	    style.display = 'none';
	  }
	}
	function hideTextInstance(textInstance) {
	  textInstance.nodeValue = '';
	}
	function unhideInstance(instance, props) {
	  instance = instance;
	  var styleProp = props[STYLE$1];
	  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
	  instance.style.display = dangerousStyleValue('display', display);
	}
	function unhideTextInstance(textInstance, text) {
	  textInstance.nodeValue = text;
	} // -------------------
	function canHydrateInstance(instance, type, props) {
	  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
	    return null;
	  } // This has now been refined to an element node.


	  return instance;
	}
	function canHydrateTextInstance(instance, text) {
	  if (text === '' || instance.nodeType !== TEXT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  } // This has now been refined to a text node.


	  return instance;
	}
	function isSuspenseInstancePending(instance) {
	  return instance.data === SUSPENSE_PENDING_START_DATA;
	}
	function isSuspenseInstanceFallback(instance) {
	  return instance.data === SUSPENSE_FALLBACK_START_DATA;
	}

	function getNextHydratable(node) {
	  // Skip non-hydratable nodes.
	  for (; node != null; node = node.nextSibling) {
	    var nodeType = node.nodeType;

	    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
	      break;
	    }
	  }

	  return node;
	}

	function getNextHydratableSibling(instance) {
	  return getNextHydratable(instance.nextSibling);
	}
	function getFirstHydratableChild(parentInstance) {
	  return getNextHydratable(parentInstance.firstChild);
	}
	function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
	  // get attached.

	  updateFiberProps(instance, props);
	  var parentNamespace;

	  {
	    var hostContextDev = hostContext;
	    parentNamespace = hostContextDev.namespace;
	  }

	  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
	}
	function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, textInstance);
	  return diffHydratedText(textInstance, text);
	}
	function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
	  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_END_DATA) {
	        if (depth === 0) {
	          return getNextHydratableSibling(node);
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        depth++;
	      }
	    }

	    node = node.nextSibling;
	  } // TODO: Warn, we didn't find the end comment boundary.


	  return null;
	} // Returns the SuspenseInstance if this node is a direct child of a
	// SuspenseInstance. I.e. if its previous sibling is a Comment with
	// SUSPENSE_x_START_DATA. Otherwise, null.

	function getParentSuspenseInstance(targetInstance) {
	  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        if (depth === 0) {
	          return node;
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_END_DATA) {
	        depth++;
	      }
	    }

	    node = node.previousSibling;
	  }

	  return null;
	}
	function commitHydratedContainer(container) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(container);
	}
	function commitHydratedSuspenseInstance(suspenseInstance) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(suspenseInstance);
	}
	function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
	  {
	    warnForUnmatchedText(textInstance, text);
	  }
	}
	function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    warnForUnmatchedText(textInstance, text);
	  }
	}
	function didNotHydrateContainerInstance(parentContainer, instance) {
	  {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentContainer, instance);
	    } else if (instance.nodeType === COMMENT_NODE) ; else {
	      warnForDeletedHydratableText(parentContainer, instance);
	    }
	  }
	}
	function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentInstance, instance);
	    } else if (instance.nodeType === COMMENT_NODE) ; else {
	      warnForDeletedHydratableText(parentInstance, instance);
	    }
	  }
	}
	function didNotFindHydratableContainerInstance(parentContainer, type, props) {
	  {
	    warnForInsertedHydratedElement(parentContainer, type);
	  }
	}
	function didNotFindHydratableContainerTextInstance(parentContainer, text) {
	  {
	    warnForInsertedHydratedText(parentContainer, text);
	  }
	}
	function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    warnForInsertedHydratedElement(parentInstance, type);
	  }
	}
	function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    warnForInsertedHydratedText(parentInstance, text);
	  }
	}
	function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
	}

	var randomKey = Math.random().toString(36).slice(2);
	var internalInstanceKey = '__reactInternalInstance$' + randomKey;
	var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
	var internalContainerInstanceKey = '__reactContainere$' + randomKey;
	function precacheFiberNode(hostInst, node) {
	  node[internalInstanceKey] = hostInst;
	}
	function markContainerAsRoot(hostRoot, node) {
	  node[internalContainerInstanceKey] = hostRoot;
	}
	function unmarkContainerAsRoot(node) {
	  node[internalContainerInstanceKey] = null;
	}
	function isContainerMarkedAsRoot(node) {
	  return !!node[internalContainerInstanceKey];
	} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
	// If the target node is part of a hydrated or not yet rendered subtree, then
	// this may also return a SuspenseComponent or HostRoot to indicate that.
	// Conceptually the HostRoot fiber is a child of the Container node. So if you
	// pass the Container node as the targetNode, you will not actually get the
	// HostRoot back. To get to the HostRoot, you need to pass a child of it.
	// The same thing applies to Suspense boundaries.

	function getClosestInstanceFromNode(targetNode) {
	  var targetInst = targetNode[internalInstanceKey];

	  if (targetInst) {
	    // Don't return HostRoot or SuspenseComponent here.
	    return targetInst;
	  } // If the direct event target isn't a React owned DOM node, we need to look
	  // to see if one of its parents is a React owned DOM node.


	  var parentNode = targetNode.parentNode;

	  while (parentNode) {
	    // We'll check if this is a container root that could include
	    // React nodes in the future. We need to check this first because
	    // if we're a child of a dehydrated container, we need to first
	    // find that inner container before moving on to finding the parent
	    // instance. Note that we don't check this field on  the targetNode
	    // itself because the fibers are conceptually between the container
	    // node and the first child. It isn't surrounding the container node.
	    // If it's not a container, we check if it's an instance.
	    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

	    if (targetInst) {
	      // Since this wasn't the direct target of the event, we might have
	      // stepped past dehydrated DOM nodes to get here. However they could
	      // also have been non-React nodes. We need to answer which one.
	      // If we the instance doesn't have any children, then there can't be
	      // a nested suspense boundary within it. So we can use this as a fast
	      // bailout. Most of the time, when people add non-React children to
	      // the tree, it is using a ref to a child-less DOM node.
	      // Normally we'd only need to check one of the fibers because if it
	      // has ever gone from having children to deleting them or vice versa
	      // it would have deleted the dehydrated boundary nested inside already.
	      // However, since the HostRoot starts out with an alternate it might
	      // have one on the alternate so we need to check in case this was a
	      // root.
	      var alternate = targetInst.alternate;

	      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
	        // Next we need to figure out if the node that skipped past is
	        // nested within a dehydrated boundary and if so, which one.
	        var suspenseInstance = getParentSuspenseInstance(targetNode);

	        while (suspenseInstance !== null) {
	          // We found a suspense instance. That means that we haven't
	          // hydrated it yet. Even though we leave the comments in the
	          // DOM after hydrating, and there are boundaries in the DOM
	          // that could already be hydrated, we wouldn't have found them
	          // through this pass since if the target is hydrated it would
	          // have had an internalInstanceKey on it.
	          // Let's get the fiber associated with the SuspenseComponent
	          // as the deepest instance.
	          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

	          if (targetSuspenseInst) {
	            return targetSuspenseInst;
	          } // If we don't find a Fiber on the comment, it might be because
	          // we haven't gotten to hydrate it yet. There might still be a
	          // parent boundary that hasn't above this one so we need to find
	          // the outer most that is known.


	          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
	          // host component also hasn't hydrated yet. We can return it
	          // below since it will bail out on the isMounted check later.
	        }
	      }

	      return targetInst;
	    }

	    targetNode = parentNode;
	    parentNode = targetNode.parentNode;
	  }

	  return null;
	}
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */

	function getInstanceFromNode$1(node) {
	  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

	  if (inst) {
	    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
	      return inst;
	    } else {
	      return null;
	    }
	  }

	  return null;
	}
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */

	function getNodeFromInstance$1(inst) {
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber this, is just the state node right now. We assume it will be
	    // a host component or host text.
	    return inst.stateNode;
	  } // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.


	  {
	    {
	      throw Error( "getNodeFromInstance: Invalid argument." );
	    }
	  }
	}
	function getFiberCurrentPropsFromNode$1(node) {
	  return node[internalEventHandlersKey] || null;
	}
	function updateFiberProps(node, props) {
	  node[internalEventHandlersKey] = props;
	}

	function getParent(inst) {
	  do {
	    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
	    // That is depending on if we want nested subtrees (layers) to bubble
	    // events to their parent. We could also go through parentNode on the
	    // host node but that wouldn't work for React Native and doesn't let us
	    // do the portal feature.
	  } while (inst && inst.tag !== HostComponent);

	  if (inst) {
	    return inst;
	  }

	  return null;
	}
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */


	function getLowestCommonAncestor(instA, instB) {
	  var depthA = 0;

	  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
	    depthA++;
	  }

	  var depthB = 0;

	  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
	    depthB++;
	  } // If A is deeper, crawl up.


	  while (depthA - depthB > 0) {
	    instA = getParent(instA);
	    depthA--;
	  } // If B is deeper, crawl up.


	  while (depthB - depthA > 0) {
	    instB = getParent(instB);
	    depthB--;
	  } // Walk in lockstep until we find a match.


	  var depth = depthA;

	  while (depth--) {
	    if (instA === instB || instA === instB.alternate) {
	      return instA;
	    }

	    instA = getParent(instA);
	    instB = getParent(instB);
	  }

	  return null;
	}
	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */

	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];

	  while (inst) {
	    path.push(inst);
	    inst = getParent(inst);
	  }

	  var i;

	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }

	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}
	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */

	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];

	  while (true) {
	    if (!from) {
	      break;
	    }

	    if (from === common) {
	      break;
	    }

	    var alternate = from.alternate;

	    if (alternate !== null && alternate === common) {
	      break;
	    }

	    pathFrom.push(from);
	    from = getParent(from);
	  }

	  var pathTo = [];

	  while (true) {
	    if (!to) {
	      break;
	    }

	    if (to === common) {
	      break;
	    }

	    var _alternate = to.alternate;

	    if (_alternate !== null && _alternate === common) {
	      break;
	    }

	    pathTo.push(to);
	    to = getParent(to);
	  }

	  for (var i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }

	  for (var _i = pathTo.length; _i-- > 0;) {
	    fn(pathTo[_i], 'captured', argTo);
	  }
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	    case 'onMouseEnter':
	      return !!(props.disabled && isInteractive(type));

	    default:
	      return false;
	  }
	}
	/**
	 * @param {object} inst The instance, which is the source of events.
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @return {?function} The stored callback.
	 */


	function getListener(inst, registrationName) {
	  var listener; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	  // live here; needs to be moved to a better place soon

	  var stateNode = inst.stateNode;

	  if (!stateNode) {
	    // Work in progress (ex: onload events in incremental mode).
	    return null;
	  }

	  var props = getFiberCurrentPropsFromNode(stateNode);

	  if (!props) {
	    // Work in progress.
	    return null;
	  }

	  listener = props[registrationName];

	  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
	    return null;
	  }

	  if (!(!listener || typeof listener === 'function')) {
	    {
	      throw Error( "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type." );
	    }
	  }

	  return listener;
	}

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing even a
	 * single one.
	 */

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */


	function accumulateDirectionalDispatches(inst, phase, event) {
	  {
	    if (!inst) {
	      error('Dispatching inst must not be null');
	    }
	  }

	  var listener = listenerAtPhase(inst, event, phase);

	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */


	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */


	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (inst && event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);

	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */


	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * These variables store information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 *
	 */
	var root = null;
	var startText = null;
	var fallbackText = null;
	function initialize(nativeEventTarget) {
	  root = nativeEventTarget;
	  startText = getText();
	  return true;
	}
	function reset() {
	  root = null;
	  startText = null;
	  fallbackText = null;
	}
	function getData() {
	  if (fallbackText) {
	    return fallbackText;
	  }

	  var start;
	  var startValue = startText;
	  var startLength = startValue.length;
	  var end;
	  var endValue = getText();
	  var endLength = endValue.length;

	  for (start = 0; start < startLength; start++) {
	    if (startValue[start] !== endValue[start]) {
	      break;
	    }
	  }

	  var minEnd = startLength - start;

	  for (end = 1; end <= minEnd; end++) {
	    if (startValue[startLength - end] !== endValue[endLength - end]) {
	      break;
	    }
	  }

	  var sliceTail = end > 1 ? 1 - end : undefined;
	  fallbackText = endValue.slice(start, sliceTail);
	  return fallbackText;
	}
	function getText() {
	  if ('value' in root) {
	    return root.value;
	  }

	  return root.textContent;
	}

	var EVENT_POOL_SIZE = 10;
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: function () {
	    return null;
	  },
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	function functionThatReturnsTrue() {
	  return true;
	}

	function functionThatReturnsFalse() {
	  return false;
	}
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */


	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	    delete this.isDefaultPrevented;
	    delete this.isPropagationStopped;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;
	  var Interface = this.constructor.Interface;

	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }

	    {
	      delete this[propName]; // this has a getter/setter for warnings
	    }

	    var normalize = Interface[propName];

	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

	  if (defaultPrevented) {
	    this.isDefaultPrevented = functionThatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = functionThatReturnsFalse;
	  }

	  this.isPropagationStopped = functionThatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;

	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      event.returnValue = false;
	    }

	    this.isDefaultPrevented = functionThatReturnsTrue;
	  },
	  stopPropagation: function () {
	    var event = this.nativeEvent;

	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = functionThatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = functionThatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: functionThatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;

	    for (var propName in Interface) {
	      {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      }
	    }

	    this.dispatchConfig = null;
	    this._targetInst = null;
	    this.nativeEvent = null;
	    this.isDefaultPrevented = functionThatReturnsFalse;
	    this.isPropagationStopped = functionThatReturnsFalse;
	    this._dispatchListeners = null;
	    this._dispatchInstances = null;

	    {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
	      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
	    }
	  }
	});

	SyntheticEvent.Interface = EventInterface;
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 */

	SyntheticEvent.extend = function (Interface) {
	  var Super = this;

	  var E = function () {};

	  E.prototype = Super.prototype;
	  var prototype = new E();

	  function Class() {
	    return Super.apply(this, arguments);
	  }

	  _assign(prototype, Class.prototype);

	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.extend = Super.extend;
	  addEventPoolingTo(Class);
	  return Class;
	};

	addEventPoolingTo(SyntheticEvent);
	/**
	 * Helper to nullify syntheticEvent instance properties when destructing
	 *
	 * @param {String} propName
	 * @param {?object} getVal
	 * @return {object} defineProperty object
	 */

	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    {
	      error("This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
	    }
	  }
	}

	function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
	  var EventConstructor = this;

	  if (EventConstructor.eventPool.length) {
	    var instance = EventConstructor.eventPool.pop();
	    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
	    return instance;
	  }

	  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
	}

	function releasePooledEvent(event) {
	  var EventConstructor = this;

	  if (!(event instanceof EventConstructor)) {
	    {
	      throw Error( "Trying to release an event instance into a pool of a different type." );
	    }
	  }

	  event.destructor();

	  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
	    EventConstructor.eventPool.push(event);
	  }
	}

	function addEventPoolingTo(EventConstructor) {
	  EventConstructor.eventPool = [];
	  EventConstructor.getPooled = getPooledEvent;
	  EventConstructor.release = releasePooledEvent;
	}

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */

	var SyntheticCompositionEvent = SyntheticEvent.extend({
	  data: null
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */

	var SyntheticInputEvent = SyntheticEvent.extend({
	  data: null
	});

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

	var START_KEYCODE = 229;
	var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
	var documentMode = null;

	if (canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	} // Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.


	var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.

	var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  }
	}; // Track whether we've ever handled a keypress on the space key.

	var hasSpaceKeypress = false;
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */

	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */


	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case TOP_COMPOSITION_START:
	      return eventTypes.compositionStart;

	    case TOP_COMPOSITION_END:
	      return eventTypes.compositionEnd;

	    case TOP_COMPOSITION_UPDATE:
	      return eventTypes.compositionUpdate;
	  }
	}
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
	}
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_KEY_UP:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

	    case TOP_KEY_DOWN:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;

	    case TOP_KEY_PRESS:
	    case TOP_MOUSE_DOWN:
	    case TOP_BLUR:
	      // Events are not possible without cancelling IME.
	      return true;

	    default:
	      return false;
	  }
	}
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */


	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;

	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }

	  return null;
	}
	/**
	 * Check if a composition event was triggered by Korean IME.
	 * Our fallback mode does not work well with IE's Korean IME,
	 * so just use native composition events when Korean IME is used.
	 * Although CompositionEvent.locale property is deprecated,
	 * it is available in IE, where our fallback mode is enabled.
	 *
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isUsingKoreanIME(nativeEvent) {
	  return nativeEvent.locale === 'ko';
	} // Track the current IME composition status, if any.


	var isComposing = false;
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */

	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!isComposing) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!isComposing && eventType === eventTypes.compositionStart) {
	      isComposing = initialize(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (isComposing) {
	        fallbackData = getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);

	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */


	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_COMPOSITION_END:
	      return getDataFromCustomEvent(nativeEvent);

	    case TOP_KEY_PRESS:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;

	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case TOP_TEXT_INPUT:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to ignore it.

	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {number} topLevelType Number from `TopLevelEventTypes`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */


	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (isComposing) {
	    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = getData();
	      reset();
	      isComposing = false;
	      return chars;
	    }

	    return null;
	  }

	  switch (topLevelType) {
	    case TOP_PASTE:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;

	    case TOP_KEY_PRESS:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (!isKeypressCommand(nativeEvent)) {
	        // IE fires the `keypress` event when a user types an emoji via
	        // Touch keyboard of Windows.  In such a case, the `char` property
	        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
	        // is 2, the property `which` does not represent an emoji correctly.
	        // In such a case, we directly return the `char` property instead of
	        // using `which`.
	        if (nativeEvent.char && nativeEvent.char.length > 1) {
	          return nativeEvent.char;
	        } else if (nativeEvent.which) {
	          return String.fromCharCode(nativeEvent.which);
	        }
	      }

	      return null;

	    case TOP_COMPOSITION_END:
	      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

	    default:
	      return null;
	  }
	}
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */


	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  } // If no characters are being inserted, no BeforeInput event should
	  // be fired.


	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
	  event.data = chars;
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */


	var BeforeInputEventPlugin = {
	  eventTypes: eventTypes,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

	    if (composition === null) {
	      return beforeInput;
	    }

	    if (beforeInput === null) {
	      return composition;
	    }

	    return [composition, beforeInput];
	  }
	};

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	var eventTypes$1 = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
	  }
	};

	function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
	  var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
	  event.type = 'change'; // Flag this event loop as needing state restore.

	  enqueueStateRestore(target);
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * For IE shims
	 */


	var activeElement = null;
	var activeElementInst = null;
	/**
	 * SECTION: handle `change` event
	 */

	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.

	  batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  runEventsInBatch(event);
	}

	function getInstIfValueChanged(targetInst) {
	  var targetNode = getNodeFromInstance$1(targetInst);

	  if (updateValueIfChanged(targetNode)) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_CHANGE) {
	    return targetInst;
	  }
	}
	/**
	 * SECTION: handle `input` event
	 */


	var isInputEventSupported = false;

	if (canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}
	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */


	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */


	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  activeElement = null;
	  activeElementInst = null;
	}
	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */


	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }

	  if (getInstIfValueChanged(activeElementInst)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
	  if (topLevelType === TOP_FOCUS) {
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === TOP_BLUR) {
	    stopWatchingForValueChange();
	  }
	} // For IE8 and IE9.


	function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
	  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst);
	  }
	}
	/**
	 * SECTION: handle `click` event
	 */


	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_CLICK) {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function handleControlledInputBlur(node) {
	  var state = node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  {
	    // If controlled, assign the value attribute to the current value on blur
	    setDefaultValue(node, 'number', node.value);
	  }
	}
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */


	var ChangeEventPlugin = {
	  eventTypes: eventTypes$1,
	  _isInputEventSupported: isInputEventSupported,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
	    var getTargetInstFunc, handleEventFunc;

	    if (shouldUseChangeEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForChangeEvent;
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventPolyfill;
	        handleEventFunc = handleEventsForInputEventPolyfill;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);

	      if (inst) {
	        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    } // When blurring, set the value attribute for number inputs


	    if (topLevelType === TOP_BLUR) {
	      handleControlledInputBlur(targetNode);
	    }
	  }
	};

	var SyntheticUIEvent = SyntheticEvent.extend({
	  view: null,
	  detail: null
	});

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
	// getModifierState. If getModifierState is not supported, we map it to a set of
	// modifier keys exposed by the event. In this case, Lock-keys are not supported.

	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;

	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }

	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	var previousScreenX = 0;
	var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

	var isMovementXSet = false;
	var isMovementYSet = false;
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticMouseEvent = SyntheticUIEvent.extend({
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  pageX: null,
	  pageY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: null,
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  movementX: function (event) {
	    if ('movementX' in event) {
	      return event.movementX;
	    }

	    var screenX = previousScreenX;
	    previousScreenX = event.screenX;

	    if (!isMovementXSet) {
	      isMovementXSet = true;
	      return 0;
	    }

	    return event.type === 'mousemove' ? event.screenX - screenX : 0;
	  },
	  movementY: function (event) {
	    if ('movementY' in event) {
	      return event.movementY;
	    }

	    var screenY = previousScreenY;
	    previousScreenY = event.screenY;

	    if (!isMovementYSet) {
	      isMovementYSet = true;
	      return 0;
	    }

	    return event.type === 'mousemove' ? event.screenY - screenY : 0;
	  }
	});

	/**
	 * @interface PointerEvent
	 * @see http://www.w3.org/TR/pointerevents/
	 */

	var SyntheticPointerEvent = SyntheticMouseEvent.extend({
	  pointerId: null,
	  width: null,
	  height: null,
	  pressure: null,
	  tangentialPressure: null,
	  tiltX: null,
	  tiltY: null,
	  twist: null,
	  pointerType: null,
	  isPrimary: null
	});

	var eventTypes$2 = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
	  },
	  pointerEnter: {
	    registrationName: 'onPointerEnter',
	    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
	  },
	  pointerLeave: {
	    registrationName: 'onPointerLeave',
	    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
	  }
	};
	var EnterLeaveEventPlugin = {
	  eventTypes: eventTypes$2,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
	    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

	    if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      // If this is an over event with a target, then we've already dispatched
	      // the event in the out event of the other target. If this is replayed,
	      // then it's because we couldn't dispatch against this target previously
	      // so we have to do it now instead.
	      return null;
	    }

	    if (!isOutEvent && !isOverEvent) {
	      // Must not be a mouse or pointer in or out - ignoring.
	      return null;
	    }

	    var win;

	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;

	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;

	    if (isOutEvent) {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? getClosestInstanceFromNode(related) : null;

	      if (to !== null) {
	        var nearestMounted = getNearestMountedFiber(to);

	        if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
	          to = null;
	        }
	      }
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var eventInterface, leaveEventType, enterEventType, eventTypePrefix;

	    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
	      eventInterface = SyntheticMouseEvent;
	      leaveEventType = eventTypes$2.mouseLeave;
	      enterEventType = eventTypes$2.mouseEnter;
	      eventTypePrefix = 'mouse';
	    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
	      eventInterface = SyntheticPointerEvent;
	      leaveEventType = eventTypes$2.pointerLeave;
	      enterEventType = eventTypes$2.pointerEnter;
	      eventTypePrefix = 'pointer';
	    }

	    var fromNode = from == null ? win : getNodeFromInstance$1(from);
	    var toNode = to == null ? win : getNodeFromInstance$1(to);
	    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
	    leave.type = eventTypePrefix + 'leave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;
	    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
	    enter.type = eventTypePrefix + 'enter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;
	    accumulateEnterLeaveDispatches(leave, enter, from, to); // If we are not processing the first ancestor, then we
	    // should not process the same nativeEvent again, as we
	    // will have already processed it in the first ancestor.

	    if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
	      return [leave];
	    }

	    return [leave, enter];
	  }
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
	  ;
	}

	var objectIs = typeof Object.is === 'function' ? Object.is : is;

	var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */

	function shallowEqual(objA, objB) {
	  if (objectIs(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  } // Test for A's keys different from B.


	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	var eventTypes$3 = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
	  }
	};
	var activeElement$1 = null;
	var activeElementInst$1 = null;
	var lastSelection = null;
	var mouseDown = false;
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */

	function getSelection$1(node) {
	  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else {
	    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
	    var selection = win.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  }
	}
	/**
	 * Get document associated with the event target.
	 *
	 * @param {object} nativeEventTarget
	 * @return {Document}
	 */


	function getEventTargetDocument(eventTarget) {
	  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
	}
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @param {object} nativeEventTarget
	 * @return {?SyntheticEvent}
	 */


	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  var doc = getEventTargetDocument(nativeEventTarget);

	  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
	    return null;
	  } // Only fire when selection has actually changed.


	  var currentSelection = getSelection$1(activeElement$1);

	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement$1;
	    accumulateTwoPhaseDispatches(syntheticEvent);
	    return syntheticEvent;
	  }

	  return null;
	}
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */


	var SelectEventPlugin = {
	  eventTypes: eventTypes$3,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
	    var containerOrDoc = container || getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
	    // not extract events. See #3639.

	    if (!containerOrDoc || !isListeningToAllDependencies('onSelect', containerOrDoc)) {
	      return null;
	    }

	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case TOP_FOCUS:
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement$1 = targetNode;
	          activeElementInst$1 = targetInst;
	          lastSelection = null;
	        }

	        break;

	      case TOP_BLUR:
	        activeElement$1 = null;
	        activeElementInst$1 = null;
	        lastSelection = null;
	        break;
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.

	      case TOP_MOUSE_DOWN:
	        mouseDown = true;
	        break;

	      case TOP_CONTEXT_MENU:
	      case TOP_MOUSE_UP:
	      case TOP_DRAG_END:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.

	      case TOP_SELECTION_CHANGE:
	        if (skipSelectionChangeEvent) {
	          break;
	        }

	      // falls through

	      case TOP_KEY_DOWN:
	      case TOP_KEY_UP:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  }
	};

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */

	var SyntheticAnimationEvent = SyntheticEvent.extend({
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */

	var SyntheticClipboardEvent = SyntheticEvent.extend({
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	});

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticFocusEvent = SyntheticUIEvent.extend({
	  relatedTarget: null
	});

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
	  // report Enter as charCode 10 when ctrl is pressed.


	  if (charCode === 10) {
	    charCode = 13;
	  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.


	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var translateToKey = {
	  '8': 'Backspace',
	  '9': 'Tab',
	  '12': 'Clear',
	  '13': 'Enter',
	  '16': 'Shift',
	  '17': 'Control',
	  '18': 'Alt',
	  '19': 'Pause',
	  '20': 'CapsLock',
	  '27': 'Escape',
	  '32': ' ',
	  '33': 'PageUp',
	  '34': 'PageDown',
	  '35': 'End',
	  '36': 'Home',
	  '37': 'ArrowLeft',
	  '38': 'ArrowUp',
	  '39': 'ArrowRight',
	  '40': 'ArrowDown',
	  '45': 'Insert',
	  '46': 'Delete',
	  '112': 'F1',
	  '113': 'F2',
	  '114': 'F3',
	  '115': 'F4',
	  '116': 'F5',
	  '117': 'F6',
	  '118': 'F7',
	  '119': 'F8',
	  '120': 'F9',
	  '121': 'F10',
	  '122': 'F11',
	  '123': 'F12',
	  '144': 'NumLock',
	  '145': 'ScrollLock',
	  '224': 'Meta'
	};
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */

	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

	    if (key !== 'Unidentified') {
	      return key;
	    }
	  } // Browser does not implement `key`, polyfill as much of it as we can.


	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.

	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }

	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }

	  return '';
	}

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  }
	});

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticDragEvent = SyntheticMouseEvent.extend({
	  dataTransfer: null
	});

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */

	var SyntheticTouchEvent = SyntheticUIEvent.extend({
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */

	var SyntheticTransitionEvent = SyntheticEvent.extend({
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	});

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticWheelEvent = SyntheticMouseEvent.extend({
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	});

	var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
	var SimpleEventPlugin = {
	  // simpleEventPluginEventTypes gets populated from
	  // the DOMEventProperties module.
	  eventTypes: simpleEventPluginEventTypes,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);

	    if (!dispatchConfig) {
	      return null;
	    }

	    var EventConstructor;

	    switch (topLevelType) {
	      case TOP_KEY_PRESS:
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }

	      /* falls through */

	      case TOP_KEY_DOWN:
	      case TOP_KEY_UP:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;

	      case TOP_BLUR:
	      case TOP_FOCUS:
	        EventConstructor = SyntheticFocusEvent;
	        break;

	      case TOP_CLICK:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }

	      /* falls through */

	      case TOP_AUX_CLICK:
	      case TOP_DOUBLE_CLICK:
	      case TOP_MOUSE_DOWN:
	      case TOP_MOUSE_MOVE:
	      case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

	      /* falls through */

	      case TOP_MOUSE_OUT:
	      case TOP_MOUSE_OVER:
	      case TOP_CONTEXT_MENU:
	        EventConstructor = SyntheticMouseEvent;
	        break;

	      case TOP_DRAG:
	      case TOP_DRAG_END:
	      case TOP_DRAG_ENTER:
	      case TOP_DRAG_EXIT:
	      case TOP_DRAG_LEAVE:
	      case TOP_DRAG_OVER:
	      case TOP_DRAG_START:
	      case TOP_DROP:
	        EventConstructor = SyntheticDragEvent;
	        break;

	      case TOP_TOUCH_CANCEL:
	      case TOP_TOUCH_END:
	      case TOP_TOUCH_MOVE:
	      case TOP_TOUCH_START:
	        EventConstructor = SyntheticTouchEvent;
	        break;

	      case TOP_ANIMATION_END:
	      case TOP_ANIMATION_ITERATION:
	      case TOP_ANIMATION_START:
	        EventConstructor = SyntheticAnimationEvent;
	        break;

	      case TOP_TRANSITION_END:
	        EventConstructor = SyntheticTransitionEvent;
	        break;

	      case TOP_SCROLL:
	        EventConstructor = SyntheticUIEvent;
	        break;

	      case TOP_WHEEL:
	        EventConstructor = SyntheticWheelEvent;
	        break;

	      case TOP_COPY:
	      case TOP_CUT:
	      case TOP_PASTE:
	        EventConstructor = SyntheticClipboardEvent;
	        break;

	      case TOP_GOT_POINTER_CAPTURE:
	      case TOP_LOST_POINTER_CAPTURE:
	      case TOP_POINTER_CANCEL:
	      case TOP_POINTER_DOWN:
	      case TOP_POINTER_MOVE:
	      case TOP_POINTER_OUT:
	      case TOP_POINTER_OVER:
	      case TOP_POINTER_UP:
	        EventConstructor = SyntheticPointerEvent;
	        break;

	      default:
	        {
	          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
	            error('SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
	          }
	        } // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0


	        EventConstructor = SyntheticEvent;
	        break;
	    }

	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    accumulateTwoPhaseDispatches(event);
	    return event;
	  }
	};

	/**
	 * Specifies a deterministic ordering of `EventPlugin`s. A convenient way to
	 * reason about plugins, without having to package every one of them. This
	 * is better than having plugins be ordered in the same order that they
	 * are injected because that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */

	var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
	/**
	 * Inject modules for resolving DOM hierarchy and plugin ordering.
	 */

	injectEventPluginOrder(DOMEventPluginOrder);
	setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
	/**
	 * Some important event plugins included by default (without having to require
	 * them).
	 */

	injectEventPluginsByName({
	  SimpleEventPlugin: SimpleEventPlugin,
	  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	  ChangeEventPlugin: ChangeEventPlugin,
	  SelectEventPlugin: SelectEventPlugin,
	  BeforeInputEventPlugin: BeforeInputEventPlugin
	});

	// Prefix measurements so that it's possible to filter them.
	// Longer prefixes are hard to read in DevTools.
	var reactEmoji = "\u269B";
	var warningEmoji = "\u26D4";
	var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
	// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

	var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
	// Reusing `currentFiber` would be confusing for this because user code fiber
	// can change during commit phase too, but we don't need to unwind it (since
	// lifecycles in the commit phase don't resemble a tree).

	var currentPhase = null;
	var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
	// so we will keep track of it, and include it in the report.
	// Track commits caused by cascading updates.

	var isCommitting = false;
	var hasScheduledUpdateInCurrentCommit = false;
	var hasScheduledUpdateInCurrentPhase = false;
	var commitCountInCurrentWorkLoop = 0;
	var effectCountInCurrentCommit = 0;
	// to avoid stretch the commit phase with measurement overhead.

	var labelsInCurrentCommit = new Set();

	var formatMarkName = function (markName) {
	  return reactEmoji + " " + markName;
	};

	var formatLabel = function (label, warning) {
	  var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
	  var suffix = warning ? " Warning: " + warning : '';
	  return "" + prefix + label + suffix;
	};

	var beginMark = function (markName) {
	  performance.mark(formatMarkName(markName));
	};

	var clearMark = function (markName) {
	  performance.clearMarks(formatMarkName(markName));
	};

	var endMark = function (label, markName, warning) {
	  var formattedMarkName = formatMarkName(markName);
	  var formattedLabel = formatLabel(label, warning);

	  try {
	    performance.measure(formattedLabel, formattedMarkName);
	  } catch (err) {} // If previous mark was missing for some reason, this will throw.
	  // This could only happen if React crashed in an unexpected place earlier.
	  // Don't pile on with more errors.
	  // Clear marks immediately to avoid growing buffer.


	  performance.clearMarks(formattedMarkName);
	  performance.clearMeasures(formattedLabel);
	};

	var getFiberMarkName = function (label, debugID) {
	  return label + " (#" + debugID + ")";
	};

	var getFiberLabel = function (componentName, isMounted, phase) {
	  if (phase === null) {
	    // These are composite component total time measurements.
	    return componentName + " [" + (isMounted ? 'update' : 'mount') + "]";
	  } else {
	    // Composite component methods.
	    return componentName + "." + phase;
	  }
	};

	var beginFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);

	  if (isCommitting && labelsInCurrentCommit.has(label)) {
	    // During the commit phase, we don't show duplicate labels because
	    // there is a fixed overhead for every measurement, and we don't
	    // want to stretch the commit phase beyond necessary.
	    return false;
	  }

	  labelsInCurrentCommit.add(label);
	  var markName = getFiberMarkName(label, debugID);
	  beginMark(markName);
	  return true;
	};

	var clearFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  clearMark(markName);
	};

	var endFiberMark = function (fiber, phase, warning) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  endMark(label, markName, warning);
	};

	var shouldIgnoreFiber = function (fiber) {
	  // Host components should be skipped in the timeline.
	  // We could check typeof fiber.type, but does this work with RN?
	  switch (fiber.tag) {
	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case Fragment:
	    case ContextProvider:
	    case ContextConsumer:
	    case Mode:
	      return true;

	    default:
	      return false;
	  }
	};

	var clearPendingPhaseMeasurement = function () {
	  if (currentPhase !== null && currentPhaseFiber !== null) {
	    clearFiberMark(currentPhaseFiber, currentPhase);
	  }

	  currentPhaseFiber = null;
	  currentPhase = null;
	  hasScheduledUpdateInCurrentPhase = false;
	};

	var pauseTimers = function () {
	  // Stops all currently active measurements so that they can be resumed
	  // if we continue in a later deferred loop from the same unit of work.
	  var fiber = currentFiber;

	  while (fiber) {
	    if (fiber._debugIsCurrentlyTiming) {
	      endFiberMark(fiber, null, null);
	    }

	    fiber = fiber.return;
	  }
	};

	var resumeTimersRecursively = function (fiber) {
	  if (fiber.return !== null) {
	    resumeTimersRecursively(fiber.return);
	  }

	  if (fiber._debugIsCurrentlyTiming) {
	    beginFiberMark(fiber, null);
	  }
	};

	var resumeTimers = function () {
	  // Resumes all measurements that were active during the last deferred loop.
	  if (currentFiber !== null) {
	    resumeTimersRecursively(currentFiber);
	  }
	};

	function recordEffect() {
	  {
	    effectCountInCurrentCommit++;
	  }
	}
	function recordScheduleUpdate() {
	  {
	    if (isCommitting) {
	      hasScheduledUpdateInCurrentCommit = true;
	    }

	    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
	      hasScheduledUpdateInCurrentPhase = true;
	    }
	  }
	}
	function startWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // If we pause, this is the fiber to unwind from.


	    currentFiber = fiber;

	    if (!beginFiberMark(fiber, null)) {
	      return;
	    }

	    fiber._debugIsCurrentlyTiming = true;
	  }
	}
	function cancelWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // Remember we shouldn't complete measurement for this fiber.
	    // Otherwise flamechart will be deep even for small updates.


	    fiber._debugIsCurrentlyTiming = false;
	    clearFiberMark(fiber, null);
	  }
	}
	function stopWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // If we pause, its parent is the fiber to unwind from.


	    currentFiber = fiber.return;

	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }

	    fiber._debugIsCurrentlyTiming = false;
	    endFiberMark(fiber, null, null);
	  }
	}
	function stopFailedWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // If we pause, its parent is the fiber to unwind from.


	    currentFiber = fiber.return;

	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }

	    fiber._debugIsCurrentlyTiming = false;
	    var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
	    endFiberMark(fiber, null, warning);
	  }
	}
	function startPhaseTimer(fiber, phase) {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    clearPendingPhaseMeasurement();

	    if (!beginFiberMark(fiber, phase)) {
	      return;
	    }

	    currentPhaseFiber = fiber;
	    currentPhase = phase;
	  }
	}
	function stopPhaseTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    if (currentPhase !== null && currentPhaseFiber !== null) {
	      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
	      endFiberMark(currentPhaseFiber, currentPhase, warning);
	    }

	    currentPhase = null;
	    currentPhaseFiber = null;
	  }
	}
	function startWorkLoopTimer(nextUnitOfWork) {
	  {
	    currentFiber = nextUnitOfWork;

	    if (!supportsUserTiming) {
	      return;
	    }

	    commitCountInCurrentWorkLoop = 0; // This is top level call.
	    // Any other measurements are performed within.

	    beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

	    resumeTimers();
	  }
	}
	function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var warning = null;

	    if (interruptedBy !== null) {
	      if (interruptedBy.tag === HostRoot) {
	        warning = 'A top-level update interrupted the previous render';
	      } else {
	        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
	        warning = "An update to " + componentName + " interrupted the previous render";
	      }
	    } else if (commitCountInCurrentWorkLoop > 1) {
	      warning = 'There were cascading updates';
	    }

	    commitCountInCurrentWorkLoop = 0;
	    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

	    pauseTimers();
	    endMark(label, '(React Tree Reconciliation)', warning);
	  }
	}
	function startCommitTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    isCommitting = true;
	    hasScheduledUpdateInCurrentCommit = false;
	    labelsInCurrentCommit.clear();
	    beginMark('(Committing Changes)');
	  }
	}
	function stopCommitTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var warning = null;

	    if (hasScheduledUpdateInCurrentCommit) {
	      warning = 'Lifecycle hook scheduled a cascading update';
	    } else if (commitCountInCurrentWorkLoop > 0) {
	      warning = 'Caused by a cascading update in earlier commit';
	    }

	    hasScheduledUpdateInCurrentCommit = false;
	    commitCountInCurrentWorkLoop++;
	    isCommitting = false;
	    labelsInCurrentCommit.clear();
	    endMark('(Committing Changes)', '(Committing Changes)', warning);
	  }
	}
	function startCommitSnapshotEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Snapshot Effects)');
	  }
	}
	function stopCommitSnapshotEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
	  }
	}
	function startCommitHostEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Host Effects)');
	  }
	}
	function stopCommitHostEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
	  }
	}
	function startCommitLifeCyclesTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    effectCountInCurrentCommit = 0;
	    beginMark('(Calling Lifecycle Methods)');
	  }
	}
	function stopCommitLifeCyclesTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
	  }
	}

	var valueStack = [];
	var fiberStack;

	{
	  fiberStack = [];
	}

	var index = -1;

	function createCursor(defaultValue) {
	  return {
	    current: defaultValue
	  };
	}

	function pop(cursor, fiber) {
	  if (index < 0) {
	    {
	      error('Unexpected pop.');
	    }

	    return;
	  }

	  {
	    if (fiber !== fiberStack[index]) {
	      error('Unexpected Fiber popped.');
	    }
	  }

	  cursor.current = valueStack[index];
	  valueStack[index] = null;

	  {
	    fiberStack[index] = null;
	  }

	  index--;
	}

	function push(cursor, value, fiber) {
	  index++;
	  valueStack[index] = cursor.current;

	  {
	    fiberStack[index] = fiber;
	  }

	  cursor.current = value;
	}

	var warnedAboutMissingGetChildContext;

	{
	  warnedAboutMissingGetChildContext = {};
	}

	var emptyContextObject = {};

	{
	  Object.freeze(emptyContextObject);
	} // A cursor to the current merged context object on the stack.


	var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

	var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
	// We use this to get access to the parent context after we have already
	// pushed the next context provider, and now need to merge their contexts.

	var previousContext = emptyContextObject;

	function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
	  {
	    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
	      // If the fiber is a context provider itself, when we read its context
	      // we may have already pushed its own child context on the stack. A context
	      // provider should not "see" its own child context. Therefore we read the
	      // previous (parent) context instead for a context provider.
	      return previousContext;
	    }

	    return contextStackCursor.current;
	  }
	}

	function cacheContext(workInProgress, unmaskedContext, maskedContext) {
	  {
	    var instance = workInProgress.stateNode;
	    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
	    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
	  }
	}

	function getMaskedContext(workInProgress, unmaskedContext) {
	  {
	    var type = workInProgress.type;
	    var contextTypes = type.contextTypes;

	    if (!contextTypes) {
	      return emptyContextObject;
	    } // Avoid recreating masked context unless unmasked context has changed.
	    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	    // This may trigger infinite loops if componentWillReceiveProps calls setState.


	    var instance = workInProgress.stateNode;

	    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
	      return instance.__reactInternalMemoizedMaskedChildContext;
	    }

	    var context = {};

	    for (var key in contextTypes) {
	      context[key] = unmaskedContext[key];
	    }

	    {
	      var name = getComponentName(type) || 'Unknown';
	      checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
	    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	    // Context is created before the class component is instantiated so check for instance.


	    if (instance) {
	      cacheContext(workInProgress, unmaskedContext, context);
	    }

	    return context;
	  }
	}

	function hasContextChanged() {
	  {
	    return didPerformWorkStackCursor.current;
	  }
	}

	function isContextProvider(type) {
	  {
	    var childContextTypes = type.childContextTypes;
	    return childContextTypes !== null && childContextTypes !== undefined;
	  }
	}

	function popContext(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function popTopLevelContextObject(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function pushTopLevelContextObject(fiber, context, didChange) {
	  {
	    if (!(contextStackCursor.current === emptyContextObject)) {
	      {
	        throw Error( "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    push(contextStackCursor, context, fiber);
	    push(didPerformWorkStackCursor, didChange, fiber);
	  }
	}

	function processChildContext(fiber, type, parentContext) {
	  {
	    var instance = fiber.stateNode;
	    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
	    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

	    if (typeof instance.getChildContext !== 'function') {
	      {
	        var componentName = getComponentName(type) || 'Unknown';

	        if (!warnedAboutMissingGetChildContext[componentName]) {
	          warnedAboutMissingGetChildContext[componentName] = true;

	          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
	        }
	      }

	      return parentContext;
	    }

	    var childContext;
	    startPhaseTimer(fiber, 'getChildContext');
	    childContext = instance.getChildContext();
	    stopPhaseTimer();

	    for (var contextKey in childContext) {
	      if (!(contextKey in childContextTypes)) {
	        {
	          throw Error( (getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes." );
	        }
	      }
	    }

	    {
	      var name = getComponentName(type) || 'Unknown';
	      checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
	      // somebody calls unstable_renderSubtreeIntoContainer() and we process
	      // context from the parent component instance. The stack will be missing
	      // because it's outside of the reconciliation, and so the pointer has not
	      // been set. This is rare and doesn't matter. We'll also remove that API.
	      getCurrentFiberStackInDev);
	    }

	    return _assign({}, parentContext, {}, childContext);
	  }
	}

	function pushContextProvider(workInProgress) {
	  {
	    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
	    // If the instance does not exist yet, we will push null at first,
	    // and replace it on the stack later when invalidating the context.

	    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
	    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

	    previousContext = contextStackCursor.current;
	    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
	    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
	    return true;
	  }
	}

	function invalidateContextProvider(workInProgress, type, didChange) {
	  {
	    var instance = workInProgress.stateNode;

	    if (!instance) {
	      {
	        throw Error( "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    if (didChange) {
	      // Merge parent and own context.
	      // Skip this if we're not updating due to sCU.
	      // This avoids unnecessarily recomputing memoized values.
	      var mergedContext = processChildContext(workInProgress, type, previousContext);
	      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
	      // It is important to unwind the context in the reverse order.

	      pop(didPerformWorkStackCursor, workInProgress);
	      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

	      push(contextStackCursor, mergedContext, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    } else {
	      pop(didPerformWorkStackCursor, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    }
	  }
	}

	function findCurrentUnmaskedContext(fiber) {
	  {
	    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
	    // makes sense elsewhere
	    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
	      {
	        throw Error( "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    var node = fiber;

	    do {
	      switch (node.tag) {
	        case HostRoot:
	          return node.stateNode.context;

	        case ClassComponent:
	          {
	            var Component = node.type;

	            if (isContextProvider(Component)) {
	              return node.stateNode.__reactInternalMemoizedMergedChildContext;
	            }

	            break;
	          }
	      }

	      node = node.return;
	    } while (node !== null);

	    {
	      {
	        throw Error( "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }
	  }
	}

	var LegacyRoot = 0;
	var BlockingRoot = 1;
	var ConcurrentRoot = 2;

	var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
	    Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
	    Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
	    Scheduler_shouldYield = Scheduler.unstable_shouldYield,
	    Scheduler_requestPaint = Scheduler.unstable_requestPaint,
	    Scheduler_now = Scheduler.unstable_now,
	    Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
	    Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
	    Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
	    Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
	    Scheduler_LowPriority = Scheduler.unstable_LowPriority,
	    Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

	{
	  // Provide explicit error message when production+profiling bundle of e.g.
	  // react-dom is used with production (non-profiling) bundle of
	  // scheduler/tracing
	  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
	    {
	      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling" );
	    }
	  }
	}

	var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
	// ascending numbers so we can compare them like numbers. They start at 90 to
	// avoid clashing with Scheduler's priorities.

	var ImmediatePriority = 99;
	var UserBlockingPriority$1 = 98;
	var NormalPriority = 97;
	var LowPriority = 96;
	var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

	var NoPriority = 90;
	var shouldYield = Scheduler_shouldYield;
	var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
	Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
	var syncQueue = null;
	var immediateQueueCallbackNode = null;
	var isFlushingSyncQueue = false;
	var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
	// This will be the case for modern browsers that support `performance.now`. In
	// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
	// timestamp. In that case, subtract the module initialization time to simulate
	// the behavior of performance.now and keep our times small enough to fit
	// within 32 bits.
	// TODO: Consider lifting this into Scheduler.

	var now = initialTimeMs < 10000 ? Scheduler_now : function () {
	  return Scheduler_now() - initialTimeMs;
	};
	function getCurrentPriorityLevel() {
	  switch (Scheduler_getCurrentPriorityLevel()) {
	    case Scheduler_ImmediatePriority:
	      return ImmediatePriority;

	    case Scheduler_UserBlockingPriority:
	      return UserBlockingPriority$1;

	    case Scheduler_NormalPriority:
	      return NormalPriority;

	    case Scheduler_LowPriority:
	      return LowPriority;

	    case Scheduler_IdlePriority:
	      return IdlePriority;

	    default:
	      {
	        {
	          throw Error( "Unknown priority level." );
	        }
	      }

	  }
	}

	function reactPriorityToSchedulerPriority(reactPriorityLevel) {
	  switch (reactPriorityLevel) {
	    case ImmediatePriority:
	      return Scheduler_ImmediatePriority;

	    case UserBlockingPriority$1:
	      return Scheduler_UserBlockingPriority;

	    case NormalPriority:
	      return Scheduler_NormalPriority;

	    case LowPriority:
	      return Scheduler_LowPriority;

	    case IdlePriority:
	      return Scheduler_IdlePriority;

	    default:
	      {
	        {
	          throw Error( "Unknown priority level." );
	        }
	      }

	  }
	}

	function runWithPriority$1(reactPriorityLevel, fn) {
	  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
	  return Scheduler_runWithPriority(priorityLevel, fn);
	}
	function scheduleCallback(reactPriorityLevel, callback, options) {
	  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
	  return Scheduler_scheduleCallback(priorityLevel, callback, options);
	}
	function scheduleSyncCallback(callback) {
	  // Push this callback into an internal queue. We'll flush these either in
	  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
	  if (syncQueue === null) {
	    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

	    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
	  } else {
	    // Push onto existing queue. Don't need to schedule a callback because
	    // we already scheduled one when we created the queue.
	    syncQueue.push(callback);
	  }

	  return fakeCallbackNode;
	}
	function cancelCallback(callbackNode) {
	  if (callbackNode !== fakeCallbackNode) {
	    Scheduler_cancelCallback(callbackNode);
	  }
	}
	function flushSyncCallbackQueue() {
	  if (immediateQueueCallbackNode !== null) {
	    var node = immediateQueueCallbackNode;
	    immediateQueueCallbackNode = null;
	    Scheduler_cancelCallback(node);
	  }

	  flushSyncCallbackQueueImpl();
	}

	function flushSyncCallbackQueueImpl() {
	  if (!isFlushingSyncQueue && syncQueue !== null) {
	    // Prevent re-entrancy.
	    isFlushingSyncQueue = true;
	    var i = 0;

	    try {
	      var _isSync = true;
	      var queue = syncQueue;
	      runWithPriority$1(ImmediatePriority, function () {
	        for (; i < queue.length; i++) {
	          var callback = queue[i];

	          do {
	            callback = callback(_isSync);
	          } while (callback !== null);
	        }
	      });
	      syncQueue = null;
	    } catch (error) {
	      // If something throws, leave the remaining callbacks on the queue.
	      if (syncQueue !== null) {
	        syncQueue = syncQueue.slice(i + 1);
	      } // Resume flushing in the next tick


	      Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
	      throw error;
	    } finally {
	      isFlushingSyncQueue = false;
	    }
	  }
	}

	var NoMode = 0;
	var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
	// tag instead

	var BlockingMode = 2;
	var ConcurrentMode = 4;
	var ProfileMode = 8;

	// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111
	var MAX_SIGNED_31_BIT_INT = 1073741823;

	var NoWork = 0; // TODO: Think of a better name for Never. The key difference with Idle is that
	// Never work can be committed in an inconsistent state without tearing the UI.
	// The main example is offscreen content, like a hidden subtree. So one possible
	// name is Offscreen. However, it also includes dehydrated Suspense boundaries,
	// which are inconsistent in the sense that they haven't finished yet, but
	// aren't visibly inconsistent because the server rendered HTML matches what the
	// hydrated tree would look like.

	var Never = 1; // Idle is slightly higher priority than Never. It must completely finish in
	// order to be consistent.

	var Idle = 2; // Continuous Hydration is slightly higher than Idle and is used to increase
	// priority of hover targets.

	var ContinuousHydration = 3;
	var Sync = MAX_SIGNED_31_BIT_INT;
	var Batched = Sync - 1;
	var UNIT_SIZE = 10;
	var MAGIC_NUMBER_OFFSET = Batched - 1; // 1 unit of expiration time represents 10ms.

	function msToExpirationTime(ms) {
	  // Always subtract from the offset so that we don't clash with the magic number for NoWork.
	  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
	}
	function expirationTimeToMs(expirationTime) {
	  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
	}

	function ceiling(num, precision) {
	  return ((num / precision | 0) + 1) * precision;
	}

	function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
	  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
	} // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
	// the names to reflect.


	var LOW_PRIORITY_EXPIRATION = 5000;
	var LOW_PRIORITY_BATCH_SIZE = 250;
	function computeAsyncExpiration(currentTime) {
	  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
	}
	function computeSuspenseExpiration(currentTime, timeoutMs) {
	  // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
	  return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
	} // We intentionally set a higher expiration time for interactive updates in
	// dev than in production.
	//
	// If the main thread is being blocked so long that you hit the expiration,
	// it's a problem that could be solved with better scheduling.
	//
	// People will be more likely to notice this and fix it with the long
	// expiration time in development.
	//
	// In production we opt for better UX at the risk of masking scheduling
	// problems, by expiring fast.

	var HIGH_PRIORITY_EXPIRATION =  500 ;
	var HIGH_PRIORITY_BATCH_SIZE = 100;
	function computeInteractiveExpiration(currentTime) {
	  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
	}
	function inferPriorityFromExpirationTime(currentTime, expirationTime) {
	  if (expirationTime === Sync) {
	    return ImmediatePriority;
	  }

	  if (expirationTime === Never || expirationTime === Idle) {
	    return IdlePriority;
	  }

	  var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

	  if (msUntil <= 0) {
	    return ImmediatePriority;
	  }

	  if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
	    return UserBlockingPriority$1;
	  }

	  if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
	    return NormalPriority;
	  } // TODO: Handle LowPriority
	  // Assume anything lower has idle priority


	  return IdlePriority;
	}

	var ReactStrictModeWarnings = {
	  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
	  flushPendingUnsafeLifecycleWarnings: function () {},
	  recordLegacyContextWarning: function (fiber, instance) {},
	  flushLegacyContextWarning: function () {},
	  discardPendingWarnings: function () {}
	};

	{
	  var findStrictRoot = function (fiber) {
	    var maybeStrictRoot = null;
	    var node = fiber;

	    while (node !== null) {
	      if (node.mode & StrictMode) {
	        maybeStrictRoot = node;
	      }

	      node = node.return;
	    }

	    return maybeStrictRoot;
	  };

	  var setToSortedString = function (set) {
	    var array = [];
	    set.forEach(function (value) {
	      array.push(value);
	    });
	    return array.sort().join(', ');
	  };

	  var pendingComponentWillMountWarnings = [];
	  var pendingUNSAFE_ComponentWillMountWarnings = [];
	  var pendingComponentWillReceivePropsWarnings = [];
	  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	  var pendingComponentWillUpdateWarnings = [];
	  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

	  var didWarnAboutUnsafeLifecycles = new Set();

	  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
	    // Dedup strategy: Warn once per component.
	    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
	      return;
	    }

	    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
	    instance.componentWillMount.__suppressDeprecationWarning !== true) {
	      pendingComponentWillMountWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
	      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	      pendingComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	      pendingComponentWillUpdateWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
	      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
	    // We do an initial pass to gather component names
	    var componentWillMountUniqueNames = new Set();

	    if (pendingComponentWillMountWarnings.length > 0) {
	      pendingComponentWillMountWarnings.forEach(function (fiber) {
	        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillMountWarnings = [];
	    }

	    var UNSAFE_componentWillMountUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillMountWarnings = [];
	    }

	    var componentWillReceivePropsUniqueNames = new Set();

	    if (pendingComponentWillReceivePropsWarnings.length > 0) {
	      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillReceivePropsWarnings = [];
	    }

	    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    }

	    var componentWillUpdateUniqueNames = new Set();

	    if (pendingComponentWillUpdateWarnings.length > 0) {
	      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
	        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillUpdateWarnings = [];
	    }

	    var UNSAFE_componentWillUpdateUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    } // Finally, we flush all the warnings
	    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


	    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
	      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

	      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
	    }

	    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

	      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
	    }

	    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

	      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
	    }

	    if (componentWillMountUniqueNames.size > 0) {
	      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

	      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
	    }

	    if (componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

	      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
	    }

	    if (componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

	      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
	    }
	  };

	  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

	  var didWarnAboutLegacyContext = new Set();

	  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);

	    if (strictRoot === null) {
	      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

	      return;
	    } // Dedup strategy: Warn once per component.


	    if (didWarnAboutLegacyContext.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

	    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
	      if (warningsForRoot === undefined) {
	        warningsForRoot = [];
	        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
	      }

	      warningsForRoot.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
	    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
	      if (fiberArray.length === 0) {
	        return;
	      }

	      var firstFiber = fiberArray[0];
	      var uniqueNames = new Set();
	      fiberArray.forEach(function (fiber) {
	        uniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutLegacyContext.add(fiber.type);
	      });
	      var sortedNames = setToSortedString(uniqueNames);
	      var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);

	      error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' + '%s', sortedNames, firstComponentStack);
	    });
	  };

	  ReactStrictModeWarnings.discardPendingWarnings = function () {
	    pendingComponentWillMountWarnings = [];
	    pendingUNSAFE_ComponentWillMountWarnings = [];
	    pendingComponentWillReceivePropsWarnings = [];
	    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    pendingComponentWillUpdateWarnings = [];
	    pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    pendingLegacyContextWarning = new Map();
	  };
	}

	var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

	var failedBoundaries = null;
	var setRefreshHandler = function (handler) {
	  {
	    resolveFamily = handler;
	  }
	};
	function resolveFunctionForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function resolveClassForHotReloading(type) {
	  // No implementation differences.
	  return resolveFunctionForHotReloading(type);
	}
	function resolveForwardRefForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      // Check if we're dealing with a real forwardRef. Don't want to crash early.
	      if (type !== null && type !== undefined && typeof type.render === 'function') {
	        // ForwardRef is special because its resolved .type is an object,
	        // but it's possible that we only have its inner render function in the map.
	        // If that inner render function is different, we'll build a new forwardRef type.
	        var currentRender = resolveFunctionForHotReloading(type.render);

	        if (type.render !== currentRender) {
	          var syntheticType = {
	            $$typeof: REACT_FORWARD_REF_TYPE,
	            render: currentRender
	          };

	          if (type.displayName !== undefined) {
	            syntheticType.displayName = type.displayName;
	          }

	          return syntheticType;
	        }
	      }

	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function isCompatibleFamilyForHotReloading(fiber, element) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return false;
	    }

	    var prevType = fiber.elementType;
	    var nextType = element.type; // If we got here, we know types aren't === equal.

	    var needsCompareFamilies = false;
	    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

	    switch (fiber.tag) {
	      case ClassComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case FunctionComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            // We don't know the inner type yet.
	            // We're going to assume that the lazy inner type is stable,
	            // and so it is sufficient to avoid reconciling it away.
	            // We're not going to unwrap or actually use the new lazy type.
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case ForwardRef:
	        {
	          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          if ($$typeofNextType === REACT_MEMO_TYPE) {
	            // TODO: if it was but can no longer be simple,
	            // we shouldn't set this.
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      default:
	        return false;
	    } // Check if both types have a family and it's the same one.


	    if (needsCompareFamilies) {
	      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
	      // This means both of them need to be registered to preserve state.
	      // If we unwrapped and compared the inner types for wrappers instead,
	      // then we would risk falsely saying two separate memo(Foo)
	      // calls are equivalent because they wrap the same Foo function.
	      var prevFamily = resolveFamily(prevType);

	      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
	        return true;
	      }
	    }

	    return false;
	  }
	}
	function markFailedErrorBoundaryForHotReloading(fiber) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    if (typeof WeakSet !== 'function') {
	      return;
	    }

	    if (failedBoundaries === null) {
	      failedBoundaries = new WeakSet();
	    }

	    failedBoundaries.add(fiber);
	  }
	}
	var scheduleRefresh = function (root, update) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    var staleFamilies = update.staleFamilies,
	        updatedFamilies = update.updatedFamilies;
	    flushPassiveEffects();
	    flushSync(function () {
	      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
	    });
	  }
	};
	var scheduleRoot = function (root, element) {
	  {
	    if (root.context !== emptyContextObject) {
	      // Super edge case: root has a legacy _renderSubtree context
	      // but we don't know the parentComponent so we can't pass it.
	      // Just ignore. We'll delete this with _renderSubtree code path later.
	      return;
	    }

	    flushPassiveEffects();
	    syncUpdates(function () {
	      updateContainer(element, root, null, null);
	    });
	  }
	};

	function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
	  {
	    var alternate = fiber.alternate,
	        child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    if (resolveFamily === null) {
	      throw new Error('Expected resolveFamily to be set during hot reload.');
	    }

	    var needsRender = false;
	    var needsRemount = false;

	    if (candidateType !== null) {
	      var family = resolveFamily(candidateType);

	      if (family !== undefined) {
	        if (staleFamilies.has(family)) {
	          needsRemount = true;
	        } else if (updatedFamilies.has(family)) {
	          if (tag === ClassComponent) {
	            needsRemount = true;
	          } else {
	            needsRender = true;
	          }
	        }
	      }
	    }

	    if (failedBoundaries !== null) {
	      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
	        needsRemount = true;
	      }
	    }

	    if (needsRemount) {
	      fiber._debugNeedsRemount = true;
	    }

	    if (needsRemount || needsRender) {
	      scheduleWork(fiber, Sync);
	    }

	    if (child !== null && !needsRemount) {
	      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
	    }

	    if (sibling !== null) {
	      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
	    }
	  }
	}

	var findHostInstancesForRefresh = function (root, families) {
	  {
	    var hostInstances = new Set();
	    var types = new Set(families.map(function (family) {
	      return family.current;
	    }));
	    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
	    return hostInstances;
	  }
	};

	function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
	  {
	    var child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    var didMatch = false;

	    if (candidateType !== null) {
	      if (types.has(candidateType)) {
	        didMatch = true;
	      }
	    }

	    if (didMatch) {
	      // We have a match. This only drills down to the closest host components.
	      // There's no need to search deeper because for the purpose of giving
	      // visual feedback, "flashing" outermost parent rectangles is sufficient.
	      findHostInstancesForFiberShallowly(fiber, hostInstances);
	    } else {
	      // If there's no match, maybe there will be one further down in the child tree.
	      if (child !== null) {
	        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
	      }
	    }

	    if (sibling !== null) {
	      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
	    }
	  }
	}

	function findHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

	    if (foundHostInstances) {
	      return;
	    } // If we didn't find any host children, fallback to closest host parent.


	    var node = fiber;

	    while (true) {
	      switch (node.tag) {
	        case HostComponent:
	          hostInstances.add(node.stateNode);
	          return;

	        case HostPortal:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;

	        case HostRoot:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;
	      }

	      if (node.return === null) {
	        throw new Error('Expected to reach root first.');
	      }

	      node = node.return;
	    }
	  }
	}

	function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var node = fiber;
	    var foundHostInstances = false;

	    while (true) {
	      if (node.tag === HostComponent) {
	        // We got a match.
	        foundHostInstances = true;
	        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === fiber) {
	        return foundHostInstances;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === fiber) {
	          return foundHostInstances;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }

	  return false;
	}

	function resolveDefaultProps(Component, baseProps) {
	  if (Component && Component.defaultProps) {
	    // Resolve default props. Taken from ReactElement
	    var props = _assign({}, baseProps);

	    var defaultProps = Component.defaultProps;

	    for (var propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }

	    return props;
	  }

	  return baseProps;
	}
	function readLazyComponentType(lazyComponent) {
	  initializeLazyComponentType(lazyComponent);

	  if (lazyComponent._status !== Resolved) {
	    throw lazyComponent._result;
	  }

	  return lazyComponent._result;
	}

	var valueCursor = createCursor(null);
	var rendererSigil;

	{
	  // Use this to detect multiple renderers using the same context
	  rendererSigil = {};
	}

	var currentlyRenderingFiber = null;
	var lastContextDependency = null;
	var lastContextWithAllBitsObserved = null;
	var isDisallowedContextReadInDEV = false;
	function resetContextDependencies() {
	  // This is called right before React yields execution, to ensure `readContext`
	  // cannot be called outside the render phase.
	  currentlyRenderingFiber = null;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;

	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function enterDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = true;
	  }
	}
	function exitDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function pushProvider(providerFiber, nextValue) {
	  var context = providerFiber.type._context;

	  {
	    push(valueCursor, context._currentValue, providerFiber);
	    context._currentValue = nextValue;

	    {
	      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
	        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
	      }

	      context._currentRenderer = rendererSigil;
	    }
	  }
	}
	function popProvider(providerFiber) {
	  var currentValue = valueCursor.current;
	  pop(valueCursor, providerFiber);
	  var context = providerFiber.type._context;

	  {
	    context._currentValue = currentValue;
	  }
	}
	function calculateChangedBits(context, newValue, oldValue) {
	  if (objectIs(oldValue, newValue)) {
	    // No change
	    return 0;
	  } else {
	    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

	    {
	      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
	        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
	      }
	    }

	    return changedBits | 0;
	  }
	}
	function scheduleWorkOnParentPath(parent, renderExpirationTime) {
	  // Update the child expiration time of all the ancestors, including
	  // the alternates.
	  var node = parent;

	  while (node !== null) {
	    var alternate = node.alternate;

	    if (node.childExpirationTime < renderExpirationTime) {
	      node.childExpirationTime = renderExpirationTime;

	      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
	        alternate.childExpirationTime = renderExpirationTime;
	      }
	    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
	      alternate.childExpirationTime = renderExpirationTime;
	    } else {
	      // Neither alternate was updated, which means the rest of the
	      // ancestor path already has sufficient priority.
	      break;
	    }

	    node = node.return;
	  }
	}
	function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
	  var fiber = workInProgress.child;

	  if (fiber !== null) {
	    // Set the return pointer of the child to the work-in-progress fiber.
	    fiber.return = workInProgress;
	  }

	  while (fiber !== null) {
	    var nextFiber = void 0; // Visit this fiber.

	    var list = fiber.dependencies;

	    if (list !== null) {
	      nextFiber = fiber.child;
	      var dependency = list.firstContext;

	      while (dependency !== null) {
	        // Check if the context matches.
	        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
	          // Match! Schedule an update on this fiber.
	          if (fiber.tag === ClassComponent) {
	            // Schedule a force update on the work-in-progress.
	            var update = createUpdate(renderExpirationTime, null);
	            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
	            // update to the current fiber, too, which means it will persist even if
	            // this render is thrown away. Since it's a race condition, not sure it's
	            // worth fixing.

	            enqueueUpdate(fiber, update);
	          }

	          if (fiber.expirationTime < renderExpirationTime) {
	            fiber.expirationTime = renderExpirationTime;
	          }

	          var alternate = fiber.alternate;

	          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
	            alternate.expirationTime = renderExpirationTime;
	          }

	          scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

	          if (list.expirationTime < renderExpirationTime) {
	            list.expirationTime = renderExpirationTime;
	          } // Since we already found a match, we can stop traversing the
	          // dependency list.


	          break;
	        }

	        dependency = dependency.next;
	      }
	    } else if (fiber.tag === ContextProvider) {
	      // Don't scan deeper if this is a matching provider
	      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
	    } else {
	      // Traverse down.
	      nextFiber = fiber.child;
	    }

	    if (nextFiber !== null) {
	      // Set the return pointer of the child to the work-in-progress fiber.
	      nextFiber.return = fiber;
	    } else {
	      // No child. Traverse to next sibling.
	      nextFiber = fiber;

	      while (nextFiber !== null) {
	        if (nextFiber === workInProgress) {
	          // We're back to the root of this subtree. Exit.
	          nextFiber = null;
	          break;
	        }

	        var sibling = nextFiber.sibling;

	        if (sibling !== null) {
	          // Set the return pointer of the sibling to the work-in-progress fiber.
	          sibling.return = nextFiber.return;
	          nextFiber = sibling;
	          break;
	        } // No more siblings. Traverse up.


	        nextFiber = nextFiber.return;
	      }
	    }

	    fiber = nextFiber;
	  }
	}
	function prepareToReadContext(workInProgress, renderExpirationTime) {
	  currentlyRenderingFiber = workInProgress;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;
	  var dependencies = workInProgress.dependencies;

	  if (dependencies !== null) {
	    var firstContext = dependencies.firstContext;

	    if (firstContext !== null) {
	      if (dependencies.expirationTime >= renderExpirationTime) {
	        // Context list has a pending update. Mark that this fiber performed work.
	        markWorkInProgressReceivedUpdate();
	      } // Reset the work-in-progress list


	      dependencies.firstContext = null;
	    }
	  }
	}
	function readContext(context, observedBits) {
	  {
	    // This warning would fire if you read context inside a Hook like useMemo.
	    // Unlike the class check below, it's not enforced in production for perf.
	    if (isDisallowedContextReadInDEV) {
	      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	    }
	  }

	  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
	    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

	    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
	      // Observe all updates.
	      lastContextWithAllBitsObserved = context;
	      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
	    } else {
	      resolvedObservedBits = observedBits;
	    }

	    var contextItem = {
	      context: context,
	      observedBits: resolvedObservedBits,
	      next: null
	    };

	    if (lastContextDependency === null) {
	      if (!(currentlyRenderingFiber !== null)) {
	        {
	          throw Error( "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()." );
	        }
	      } // This is the first dependency for this component. Create a new list.


	      lastContextDependency = contextItem;
	      currentlyRenderingFiber.dependencies = {
	        expirationTime: NoWork,
	        firstContext: contextItem,
	        responders: null
	      };
	    } else {
	      // Append a new context item.
	      lastContextDependency = lastContextDependency.next = contextItem;
	    }
	  }

	  return  context._currentValue ;
	}

	var UpdateState = 0;
	var ReplaceState = 1;
	var ForceUpdate = 2;
	var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
	// It should only be read right after calling `processUpdateQueue`, via
	// `checkHasForceUpdateAfterProcessing`.

	var hasForceUpdate = false;
	var didWarnUpdateInsideUpdate;
	var currentlyProcessingQueue;

	{
	  didWarnUpdateInsideUpdate = false;
	  currentlyProcessingQueue = null;
	}

	function initializeUpdateQueue(fiber) {
	  var queue = {
	    baseState: fiber.memoizedState,
	    baseQueue: null,
	    shared: {
	      pending: null
	    },
	    effects: null
	  };
	  fiber.updateQueue = queue;
	}
	function cloneUpdateQueue(current, workInProgress) {
	  // Clone the update queue from current. Unless it's already a clone.
	  var queue = workInProgress.updateQueue;
	  var currentQueue = current.updateQueue;

	  if (queue === currentQueue) {
	    var clone = {
	      baseState: currentQueue.baseState,
	      baseQueue: currentQueue.baseQueue,
	      shared: currentQueue.shared,
	      effects: currentQueue.effects
	    };
	    workInProgress.updateQueue = clone;
	  }
	}
	function createUpdate(expirationTime, suspenseConfig) {
	  var update = {
	    expirationTime: expirationTime,
	    suspenseConfig: suspenseConfig,
	    tag: UpdateState,
	    payload: null,
	    callback: null,
	    next: null
	  };
	  update.next = update;

	  {
	    update.priority = getCurrentPriorityLevel();
	  }

	  return update;
	}
	function enqueueUpdate(fiber, update) {
	  var updateQueue = fiber.updateQueue;

	  if (updateQueue === null) {
	    // Only occurs if the fiber has been unmounted.
	    return;
	  }

	  var sharedQueue = updateQueue.shared;
	  var pending = sharedQueue.pending;

	  if (pending === null) {
	    // This is the first update. Create a circular list.
	    update.next = update;
	  } else {
	    update.next = pending.next;
	    pending.next = update;
	  }

	  sharedQueue.pending = update;

	  {
	    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
	      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

	      didWarnUpdateInsideUpdate = true;
	    }
	  }
	}
	function enqueueCapturedUpdate(workInProgress, update) {
	  var current = workInProgress.alternate;

	  if (current !== null) {
	    // Ensure the work-in-progress queue is a clone
	    cloneUpdateQueue(current, workInProgress);
	  } // Captured updates go only on the work-in-progress queue.


	  var queue = workInProgress.updateQueue; // Append the update to the end of the list.

	  var last = queue.baseQueue;

	  if (last === null) {
	    queue.baseQueue = update.next = update;
	    update.next = update;
	  } else {
	    update.next = last.next;
	    last.next = update;
	  }
	}

	function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
	  switch (update.tag) {
	    case ReplaceState:
	      {
	        var payload = update.payload;

	        if (typeof payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();

	            if ( workInProgress.mode & StrictMode) {
	              payload.call(instance, prevState, nextProps);
	            }
	          }

	          var nextState = payload.call(instance, prevState, nextProps);

	          {
	            exitDisallowedContextReadInDEV();
	          }

	          return nextState;
	        } // State object


	        return payload;
	      }

	    case CaptureUpdate:
	      {
	        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
	      }
	    // Intentional fallthrough

	    case UpdateState:
	      {
	        var _payload = update.payload;
	        var partialState;

	        if (typeof _payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();

	            if ( workInProgress.mode & StrictMode) {
	              _payload.call(instance, prevState, nextProps);
	            }
	          }

	          partialState = _payload.call(instance, prevState, nextProps);

	          {
	            exitDisallowedContextReadInDEV();
	          }
	        } else {
	          // Partial state object
	          partialState = _payload;
	        }

	        if (partialState === null || partialState === undefined) {
	          // Null and undefined are treated as no-ops.
	          return prevState;
	        } // Merge the partial state and the previous state.


	        return _assign({}, prevState, partialState);
	      }

	    case ForceUpdate:
	      {
	        hasForceUpdate = true;
	        return prevState;
	      }
	  }

	  return prevState;
	}

	function processUpdateQueue(workInProgress, props, instance, renderExpirationTime) {
	  // This is always non-null on a ClassComponent or HostRoot
	  var queue = workInProgress.updateQueue;
	  hasForceUpdate = false;

	  {
	    currentlyProcessingQueue = queue.shared;
	  } // The last rebase update that is NOT part of the base state.


	  var baseQueue = queue.baseQueue; // The last pending update that hasn't been processed yet.

	  var pendingQueue = queue.shared.pending;

	  if (pendingQueue !== null) {
	    // We have new updates that haven't been processed yet.
	    // We'll add them to the base queue.
	    if (baseQueue !== null) {
	      // Merge the pending queue and the base queue.
	      var baseFirst = baseQueue.next;
	      var pendingFirst = pendingQueue.next;
	      baseQueue.next = pendingFirst;
	      pendingQueue.next = baseFirst;
	    }

	    baseQueue = pendingQueue;
	    queue.shared.pending = null; // TODO: Pass `current` as argument

	    var current = workInProgress.alternate;

	    if (current !== null) {
	      var currentQueue = current.updateQueue;

	      if (currentQueue !== null) {
	        currentQueue.baseQueue = pendingQueue;
	      }
	    }
	  } // These values may change as we process the queue.


	  if (baseQueue !== null) {
	    var first = baseQueue.next; // Iterate through the list of updates to compute the result.

	    var newState = queue.baseState;
	    var newExpirationTime = NoWork;
	    var newBaseState = null;
	    var newBaseQueueFirst = null;
	    var newBaseQueueLast = null;

	    if (first !== null) {
	      var update = first;

	      do {
	        var updateExpirationTime = update.expirationTime;

	        if (updateExpirationTime < renderExpirationTime) {
	          // Priority is insufficient. Skip this update. If this is the first
	          // skipped update, the previous update/state is the new base
	          // update/state.
	          var clone = {
	            expirationTime: update.expirationTime,
	            suspenseConfig: update.suspenseConfig,
	            tag: update.tag,
	            payload: update.payload,
	            callback: update.callback,
	            next: null
	          };

	          if (newBaseQueueLast === null) {
	            newBaseQueueFirst = newBaseQueueLast = clone;
	            newBaseState = newState;
	          } else {
	            newBaseQueueLast = newBaseQueueLast.next = clone;
	          } // Update the remaining priority in the queue.


	          if (updateExpirationTime > newExpirationTime) {
	            newExpirationTime = updateExpirationTime;
	          }
	        } else {
	          // This update does have sufficient priority.
	          if (newBaseQueueLast !== null) {
	            var _clone = {
	              expirationTime: Sync,
	              // This update is going to be committed so we never want uncommit it.
	              suspenseConfig: update.suspenseConfig,
	              tag: update.tag,
	              payload: update.payload,
	              callback: update.callback,
	              next: null
	            };
	            newBaseQueueLast = newBaseQueueLast.next = _clone;
	          } // Mark the event time of this update as relevant to this render pass.
	          // TODO: This should ideally use the true event time of this update rather than
	          // its priority which is a derived and not reverseable value.
	          // TODO: We should skip this update if it was already committed but currently
	          // we have no way of detecting the difference between a committed and suspended
	          // update here.


	          markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

	          newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
	          var callback = update.callback;

	          if (callback !== null) {
	            workInProgress.effectTag |= Callback;
	            var effects = queue.effects;

	            if (effects === null) {
	              queue.effects = [update];
	            } else {
	              effects.push(update);
	            }
	          }
	        }

	        update = update.next;

	        if (update === null || update === first) {
	          pendingQueue = queue.shared.pending;

	          if (pendingQueue === null) {
	            break;
	          } else {
	            // An update was scheduled from inside a reducer. Add the new
	            // pending updates to the end of the list and keep processing.
	            update = baseQueue.next = pendingQueue.next;
	            pendingQueue.next = first;
	            queue.baseQueue = baseQueue = pendingQueue;
	            queue.shared.pending = null;
	          }
	        }
	      } while (true);
	    }

	    if (newBaseQueueLast === null) {
	      newBaseState = newState;
	    } else {
	      newBaseQueueLast.next = newBaseQueueFirst;
	    }

	    queue.baseState = newBaseState;
	    queue.baseQueue = newBaseQueueLast; // Set the remaining expiration time to be whatever is remaining in the queue.
	    // This should be fine because the only two other things that contribute to
	    // expiration time are props and context. We're already in the middle of the
	    // begin phase by the time we start processing the queue, so we've already
	    // dealt with the props. Context in components that specify
	    // shouldComponentUpdate is tricky; but we'll have to account for
	    // that regardless.

	    markUnprocessedUpdateTime(newExpirationTime);
	    workInProgress.expirationTime = newExpirationTime;
	    workInProgress.memoizedState = newState;
	  }

	  {
	    currentlyProcessingQueue = null;
	  }
	}

	function callCallback(callback, context) {
	  if (!(typeof callback === 'function')) {
	    {
	      throw Error( "Invalid argument passed as callback. Expected a function. Instead received: " + callback );
	    }
	  }

	  callback.call(context);
	}

	function resetHasForceUpdateBeforeProcessing() {
	  hasForceUpdate = false;
	}
	function checkHasForceUpdateAfterProcessing() {
	  return hasForceUpdate;
	}
	function commitUpdateQueue(finishedWork, finishedQueue, instance) {
	  // Commit the effects
	  var effects = finishedQueue.effects;
	  finishedQueue.effects = null;

	  if (effects !== null) {
	    for (var i = 0; i < effects.length; i++) {
	      var effect = effects[i];
	      var callback = effect.callback;

	      if (callback !== null) {
	        effect.callback = null;
	        callCallback(callback, instance);
	      }
	    }
	  }
	}

	var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
	function requestCurrentSuspenseConfig() {
	  return ReactCurrentBatchConfig.suspense;
	}

	var fakeInternalInstance = {};
	var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
	// We'll use it to determine whether we need to initialize legacy refs.

	var emptyRefsObject = new React.Component().refs;
	var didWarnAboutStateAssignmentForComponent;
	var didWarnAboutUninitializedState;
	var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
	var didWarnAboutLegacyLifecyclesAndDerivedState;
	var didWarnAboutUndefinedDerivedState;
	var warnOnUndefinedDerivedState;
	var warnOnInvalidCallback;
	var didWarnAboutDirectlyAssigningPropsToState;
	var didWarnAboutContextTypeAndContextTypes;
	var didWarnAboutInvalidateContextType;

	{
	  didWarnAboutStateAssignmentForComponent = new Set();
	  didWarnAboutUninitializedState = new Set();
	  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
	  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
	  didWarnAboutDirectlyAssigningPropsToState = new Set();
	  didWarnAboutUndefinedDerivedState = new Set();
	  didWarnAboutContextTypeAndContextTypes = new Set();
	  didWarnAboutInvalidateContextType = new Set();
	  var didWarnOnInvalidCallback = new Set();

	  warnOnInvalidCallback = function (callback, callerName) {
	    if (callback === null || typeof callback === 'function') {
	      return;
	    }

	    var key = callerName + "_" + callback;

	    if (!didWarnOnInvalidCallback.has(key)) {
	      didWarnOnInvalidCallback.add(key);

	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  };

	  warnOnUndefinedDerivedState = function (type, partialState) {
	    if (partialState === undefined) {
	      var componentName = getComponentName(type) || 'Component';

	      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
	        didWarnAboutUndefinedDerivedState.add(componentName);

	        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
	      }
	    }
	  }; // This is so gross but it's at least non-critical and can be removed if
	  // it causes problems. This is meant to give a nicer error message for
	  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	  // ...)) which otherwise throws a "_processChildContext is not a function"
	  // exception.


	  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
	    enumerable: false,
	    value: function () {
	      {
	        {
	          throw Error( "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)." );
	        }
	      }
	    }
	  });
	  Object.freeze(fakeInternalInstance);
	}

	function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
	  var prevState = workInProgress.memoizedState;

	  {
	    if ( workInProgress.mode & StrictMode) {
	      // Invoke the function an extra time to help detect side-effects.
	      getDerivedStateFromProps(nextProps, prevState);
	    }
	  }

	  var partialState = getDerivedStateFromProps(nextProps, prevState);

	  {
	    warnOnUndefinedDerivedState(ctor, partialState);
	  } // Merge the partial state and the previous state.


	  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
	  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
	  // base state.

	  if (workInProgress.expirationTime === NoWork) {
	    // Queue is always non-null for classes
	    var updateQueue = workInProgress.updateQueue;
	    updateQueue.baseState = memoizedState;
	  }
	}
	var classComponentUpdater = {
	  isMounted: isMounted,
	  enqueueSetState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTimeForUpdate();
	    var suspenseConfig = requestCurrentSuspenseConfig();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	    var update = createUpdate(expirationTime, suspenseConfig);
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'setState');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  },
	  enqueueReplaceState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTimeForUpdate();
	    var suspenseConfig = requestCurrentSuspenseConfig();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	    var update = createUpdate(expirationTime, suspenseConfig);
	    update.tag = ReplaceState;
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'replaceState');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  },
	  enqueueForceUpdate: function (inst, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTimeForUpdate();
	    var suspenseConfig = requestCurrentSuspenseConfig();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	    var update = createUpdate(expirationTime, suspenseConfig);
	    update.tag = ForceUpdate;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'forceUpdate');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  }
	};

	function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
	  var instance = workInProgress.stateNode;

	  if (typeof instance.shouldComponentUpdate === 'function') {
	    {
	      if ( workInProgress.mode & StrictMode) {
	        // Invoke the function an extra time to help detect side-effects.
	        instance.shouldComponentUpdate(newProps, newState, nextContext);
	      }
	    }

	    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
	    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
	    stopPhaseTimer();

	    {
	      if (shouldUpdate === undefined) {
	        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
	      }
	    }

	    return shouldUpdate;
	  }

	  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
	    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
	  }

	  return true;
	}

	function checkClassInstance(workInProgress, ctor, newProps) {
	  var instance = workInProgress.stateNode;

	  {
	    var name = getComponentName(ctor) || 'Component';
	    var renderPresent = instance.render;

	    if (!renderPresent) {
	      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
	      } else {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
	      }
	    }

	    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
	      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
	    }

	    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
	    }

	    if (instance.propTypes) {
	      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
	    }

	    if (instance.contextType) {
	      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
	    }

	    {
	      if (instance.contextTypes) {
	        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
	      }

	      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
	        didWarnAboutContextTypeAndContextTypes.add(ctor);

	        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
	      }
	    }

	    if (typeof instance.componentShouldUpdate === 'function') {
	      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
	    }

	    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
	      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
	    }

	    if (typeof instance.componentDidUnmount === 'function') {
	      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
	    }

	    if (typeof instance.componentDidReceiveProps === 'function') {
	      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
	    }

	    if (typeof instance.componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
	    }

	    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
	    }

	    var hasMutatedProps = instance.props !== newProps;

	    if (instance.props !== undefined && hasMutatedProps) {
	      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
	    }

	    if (instance.defaultProps) {
	      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
	      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

	      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
	    }

	    if (typeof instance.getDerivedStateFromProps === 'function') {
	      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof instance.getDerivedStateFromError === 'function') {
	      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
	      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
	    }

	    var _state = instance.state;

	    if (_state && (typeof _state !== 'object' || isArray(_state))) {
	      error('%s.state: must be set to an object or null', name);
	    }

	    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
	      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
	    }
	  }
	}

	function adoptClassInstance(workInProgress, instance) {
	  instance.updater = classComponentUpdater;
	  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

	  set(instance, workInProgress);

	  {
	    instance._reactInternalInstance = fakeInternalInstance;
	  }
	}

	function constructClassInstance(workInProgress, ctor, props) {
	  var isLegacyContextConsumer = false;
	  var unmaskedContext = emptyContextObject;
	  var context = emptyContextObject;
	  var contextType = ctor.contextType;

	  {
	    if ('contextType' in ctor) {
	      var isValid = // Allow null for conditional declaration
	      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

	      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
	        didWarnAboutInvalidateContextType.add(ctor);
	        var addendum = '';

	        if (contextType === undefined) {
	          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
	        } else if (typeof contextType !== 'object') {
	          addendum = ' However, it is set to a ' + typeof contextType + '.';
	        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
	          addendum = ' Did you accidentally pass the Context.Provider instead?';
	        } else if (contextType._context !== undefined) {
	          // <Context.Consumer>
	          addendum = ' Did you accidentally pass the Context.Consumer instead?';
	        } else {
	          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
	        }

	        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
	      }
	    }
	  }

	  if (typeof contextType === 'object' && contextType !== null) {
	    context = readContext(contextType);
	  } else {
	    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    var contextTypes = ctor.contextTypes;
	    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
	    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
	  } // Instantiate twice to help detect side-effects.


	  {
	    if ( workInProgress.mode & StrictMode) {
	      new ctor(props, context); // eslint-disable-line no-new
	    }
	  }

	  var instance = new ctor(props, context);
	  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
	  adoptClassInstance(workInProgress, instance);

	  {
	    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
	      var componentName = getComponentName(ctor) || 'Component';

	      if (!didWarnAboutUninitializedState.has(componentName)) {
	        didWarnAboutUninitializedState.add(componentName);

	        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
	      }
	    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
	    // Warn about these lifecycles if they are present.
	    // Don't warn about react-lifecycles-compat polyfilled methods though.


	    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
	      var foundWillMountName = null;
	      var foundWillReceivePropsName = null;
	      var foundWillUpdateName = null;

	      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	        foundWillMountName = 'componentWillMount';
	      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        foundWillMountName = 'UNSAFE_componentWillMount';
	      }

	      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	        foundWillReceivePropsName = 'componentWillReceiveProps';
	      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	      }

	      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	        foundWillUpdateName = 'componentWillUpdate';
	      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	      }

	      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
	        var _componentName = getComponentName(ctor) || 'Component';

	        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

	        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
	          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

	          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
	        }
	      }
	    }
	  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // ReactFiberContext usually updates this cache but can't for newly-created instances.


	  if (isLegacyContextConsumer) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return instance;
	}

	function callComponentWillMount(workInProgress, instance) {
	  startPhaseTimer(workInProgress, 'componentWillMount');
	  var oldState = instance.state;

	  if (typeof instance.componentWillMount === 'function') {
	    instance.componentWillMount();
	  }

	  if (typeof instance.UNSAFE_componentWillMount === 'function') {
	    instance.UNSAFE_componentWillMount();
	  }

	  stopPhaseTimer();

	  if (oldState !== instance.state) {
	    {
	      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
	  var oldState = instance.state;
	  startPhaseTimer(workInProgress, 'componentWillReceiveProps');

	  if (typeof instance.componentWillReceiveProps === 'function') {
	    instance.componentWillReceiveProps(newProps, nextContext);
	  }

	  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	  }

	  stopPhaseTimer();

	  if (instance.state !== oldState) {
	    {
	      var componentName = getComponentName(workInProgress.type) || 'Component';

	      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
	        didWarnAboutStateAssignmentForComponent.add(componentName);

	        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
	      }
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	} // Invokes the mount life-cycles on a previously never rendered instance.


	function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
	  {
	    checkClassInstance(workInProgress, ctor, newProps);
	  }

	  var instance = workInProgress.stateNode;
	  instance.props = newProps;
	  instance.state = workInProgress.memoizedState;
	  instance.refs = emptyRefsObject;
	  initializeUpdateQueue(workInProgress);
	  var contextType = ctor.contextType;

	  if (typeof contextType === 'object' && contextType !== null) {
	    instance.context = readContext(contextType);
	  } else {
	    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    instance.context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  {
	    if (instance.state === newProps) {
	      var componentName = getComponentName(ctor) || 'Component';

	      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
	        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

	        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
	    }

	    {
	      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
	    }
	  }

	  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
	  instance.state = workInProgress.memoizedState;
	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    instance.state = workInProgress.memoizedState;
	  } // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.


	  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
	    // process them now.

	    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
	    instance.state = workInProgress.memoizedState;
	  }

	  if (typeof instance.componentDidMount === 'function') {
	    workInProgress.effectTag |= Update;
	  }
	}

	function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
	  var instance = workInProgress.stateNode;
	  var oldProps = workInProgress.memoizedProps;
	  instance.props = oldProps;
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
	  newState = workInProgress.memoizedState;

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	      startPhaseTimer(workInProgress, 'componentWillMount');

	      if (typeof instance.componentWillMount === 'function') {
	        instance.componentWillMount();
	      }

	      if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        instance.UNSAFE_componentWillMount();
	      }

	      stopPhaseTimer();
	    }

	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	} // Invokes the update life-cycles and returns false if it shouldn't rerender.


	function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
	  var instance = workInProgress.stateNode;
	  cloneUpdateQueue(current, workInProgress);
	  var oldProps = workInProgress.memoizedProps;
	  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
	  newState = workInProgress.memoizedState;

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Snapshot;
	      }
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
	      startPhaseTimer(workInProgress, 'componentWillUpdate');

	      if (typeof instance.componentWillUpdate === 'function') {
	        instance.componentWillUpdate(newProps, newState, nextContext);
	      }

	      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
	      }

	      stopPhaseTimer();
	    }

	    if (typeof instance.componentDidUpdate === 'function') {
	      workInProgress.effectTag |= Update;
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      workInProgress.effectTag |= Snapshot;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Snapshot;
	      }
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized props/state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	}

	var didWarnAboutMaps;
	var didWarnAboutGenerators;
	var didWarnAboutStringRefs;
	var ownerHasKeyUseWarning;
	var ownerHasFunctionTypeWarning;

	var warnForMissingKey = function (child) {};

	{
	  didWarnAboutMaps = false;
	  didWarnAboutGenerators = false;
	  didWarnAboutStringRefs = {};
	  /**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */

	  ownerHasKeyUseWarning = {};
	  ownerHasFunctionTypeWarning = {};

	  warnForMissingKey = function (child) {
	    if (child === null || typeof child !== 'object') {
	      return;
	    }

	    if (!child._store || child._store.validated || child.key != null) {
	      return;
	    }

	    if (!(typeof child._store === 'object')) {
	      {
	        throw Error( "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    child._store.validated = true;
	    var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

	    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	      return;
	    }

	    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

	    error('Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
	  };
	}

	var isArray$1 = Array.isArray;

	function coerceRef(returnFiber, current, element) {
	  var mixedRef = element.ref;

	  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
	    {
	      // TODO: Clean this up once we turn on the string ref warning for
	      // everyone, because the strict mode case will no longer be relevant
	      if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
	      // because these cannot be automatically converted to an arrow function
	      // using a codemod. Therefore, we don't have to warn about string refs again.
	      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
	        var componentName = getComponentName(returnFiber.type) || 'Component';

	        if (!didWarnAboutStringRefs[componentName]) {
	          {
	            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
	          }

	          didWarnAboutStringRefs[componentName] = true;
	        }
	      }
	    }

	    if (element._owner) {
	      var owner = element._owner;
	      var inst;

	      if (owner) {
	        var ownerFiber = owner;

	        if (!(ownerFiber.tag === ClassComponent)) {
	          {
	            throw Error( "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref" );
	          }
	        }

	        inst = ownerFiber.stateNode;
	      }

	      if (!inst) {
	        {
	          throw Error( "Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue." );
	        }
	      }

	      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

	      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
	        return current.ref;
	      }

	      var ref = function (value) {
	        var refs = inst.refs;

	        if (refs === emptyRefsObject) {
	          // This is a lazy pooled frozen object, so we need to initialize.
	          refs = inst.refs = {};
	        }

	        if (value === null) {
	          delete refs[stringRef];
	        } else {
	          refs[stringRef] = value;
	        }
	      };

	      ref._stringRef = stringRef;
	      return ref;
	    } else {
	      if (!(typeof mixedRef === 'string')) {
	        {
	          throw Error( "Expected ref to be a function, a string, an object returned by React.createRef(), or null." );
	        }
	      }

	      if (!element._owner) {
	        {
	          throw Error( "Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information." );
	        }
	      }
	    }
	  }

	  return mixedRef;
	}

	function throwOnInvalidObjectType(returnFiber, newChild) {
	  if (returnFiber.type !== 'textarea') {
	    var addendum = '';

	    {
	      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
	    }

	    {
	      {
	        throw Error( "Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum );
	      }
	    }
	  }
	}

	function warnOnFunctionType() {
	  {
	    var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

	    if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
	      return;
	    }

	    ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

	    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
	  }
	} // This wrapper function exists because I expect to clone the code in each path
	// to be able to optimize each path individually by branching early. This needs
	// a compiler or we can do it manually. Helpers that don't need this branching
	// live outside of this function.


	function ChildReconciler(shouldTrackSideEffects) {
	  function deleteChild(returnFiber, childToDelete) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return;
	    } // Deletions are added in reversed order so we add it to the front.
	    // At this point, the return fiber's effect list is empty except for
	    // deletions, so we can just append the deletion to the list. The remaining
	    // effects aren't added until the complete phase. Once we implement
	    // resuming, this may not be true.


	    var last = returnFiber.lastEffect;

	    if (last !== null) {
	      last.nextEffect = childToDelete;
	      returnFiber.lastEffect = childToDelete;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	    }

	    childToDelete.nextEffect = null;
	    childToDelete.effectTag = Deletion;
	  }

	  function deleteRemainingChildren(returnFiber, currentFirstChild) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return null;
	    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
	    // assuming that after the first child we've already added everything.


	    var childToDelete = currentFirstChild;

	    while (childToDelete !== null) {
	      deleteChild(returnFiber, childToDelete);
	      childToDelete = childToDelete.sibling;
	    }

	    return null;
	  }

	  function mapRemainingChildren(returnFiber, currentFirstChild) {
	    // Add the remaining children to a temporary map so that we can find them by
	    // keys quickly. Implicit (null) keys get added to this set with their index
	    // instead.
	    var existingChildren = new Map();
	    var existingChild = currentFirstChild;

	    while (existingChild !== null) {
	      if (existingChild.key !== null) {
	        existingChildren.set(existingChild.key, existingChild);
	      } else {
	        existingChildren.set(existingChild.index, existingChild);
	      }

	      existingChild = existingChild.sibling;
	    }

	    return existingChildren;
	  }

	  function useFiber(fiber, pendingProps) {
	    // We currently set sibling to null and index to 0 here because it is easy
	    // to forget to do before returning it. E.g. for the single child case.
	    var clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	  }

	  function placeChild(newFiber, lastPlacedIndex, newIndex) {
	    newFiber.index = newIndex;

	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return lastPlacedIndex;
	    }

	    var current = newFiber.alternate;

	    if (current !== null) {
	      var oldIndex = current.index;

	      if (oldIndex < lastPlacedIndex) {
	        // This is a move.
	        newFiber.effectTag = Placement;
	        return lastPlacedIndex;
	      } else {
	        // This item can stay in place.
	        return oldIndex;
	      }
	    } else {
	      // This is an insertion.
	      newFiber.effectTag = Placement;
	      return lastPlacedIndex;
	    }
	  }

	  function placeSingleChild(newFiber) {
	    // This is simpler for the single child case. We only need to do a
	    // placement for inserting new children.
	    if (shouldTrackSideEffects && newFiber.alternate === null) {
	      newFiber.effectTag = Placement;
	    }

	    return newFiber;
	  }

	  function updateTextNode(returnFiber, current, textContent, expirationTime) {
	    if (current === null || current.tag !== HostText) {
	      // Insert
	      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, textContent);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateElement(returnFiber, current, element, expirationTime) {
	    if (current !== null) {
	      if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
	       isCompatibleFamilyForHotReloading(current, element) )) {
	        // Move based on index
	        var existing = useFiber(current, element.props);
	        existing.ref = coerceRef(returnFiber, current, element);
	        existing.return = returnFiber;

	        {
	          existing._debugSource = element._source;
	          existing._debugOwner = element._owner;
	        }

	        return existing;
	      }
	    } // Insert


	    var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
	    created.ref = coerceRef(returnFiber, current, element);
	    created.return = returnFiber;
	    return created;
	  }

	  function updatePortal(returnFiber, current, portal, expirationTime) {
	    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
	      // Insert
	      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, portal.children || []);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateFragment(returnFiber, current, fragment, expirationTime, key) {
	    if (current === null || current.tag !== Fragment) {
	      // Insert
	      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, fragment);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function createChild(returnFiber, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

	            _created.ref = coerceRef(returnFiber, null, newChild);
	            _created.return = returnFiber;
	            return _created;
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

	            _created2.return = returnFiber;
	            return _created2;
	          }
	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

	        _created3.return = returnFiber;
	        return _created3;
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
	    // Update the fiber if the keys match, otherwise return null.
	    var key = oldFiber !== null ? oldFiber.key : null;

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      if (key !== null) {
	        return null;
	      }

	      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            if (newChild.key === key) {
	              if (newChild.type === REACT_FRAGMENT_TYPE) {
	                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
	              }

	              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            if (newChild.key === key) {
	              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }
	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        if (key !== null) {
	          return null;
	        }

	        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys, so we neither have to check the old nor
	      // new node for the key. If both are text nodes, they match.
	      var matchedFiber = existingChildren.get(newIdx) || null;
	      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            if (newChild.type === REACT_FRAGMENT_TYPE) {
	              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
	            }

	            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
	          }
	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        var _matchedFiber3 = existingChildren.get(newIdx) || null;

	        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }
	  /**
	   * Warns if there is a duplicate or missing key
	   */


	  function warnOnInvalidKey(child, knownKeys) {
	    {
	      if (typeof child !== 'object' || child === null) {
	        return knownKeys;
	      }

	      switch (child.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	        case REACT_PORTAL_TYPE:
	          warnForMissingKey(child);
	          var key = child.key;

	          if (typeof key !== 'string') {
	            break;
	          }

	          if (knownKeys === null) {
	            knownKeys = new Set();
	            knownKeys.add(key);
	            break;
	          }

	          if (!knownKeys.has(key)) {
	            knownKeys.add(key);
	            break;
	          }

	          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

	          break;
	      }
	    }

	    return knownKeys;
	  }

	  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
	    // This algorithm can't optimize by searching from both ends since we
	    // don't have backpointers on fibers. I'm trying to see how far we can get
	    // with that model. If it ends up not being worth the tradeoffs, we can
	    // add it later.
	    // Even with a two ended optimization, we'd want to optimize for the case
	    // where there are few changes and brute force the comparison instead of
	    // going for the Map. It'd like to explore hitting that path first in
	    // forward-only mode and only go for the Map once we notice that we need
	    // lots of look ahead. This doesn't handle reversal as well as two ended
	    // search but that's unusual. Besides, for the two ended optimization to
	    // work on Iterables, we'd need to copy the whole set.
	    // In this first iteration, we'll just live with hitting the bad case
	    // (adding everything to a Map) in for every insert/move.
	    // If you change this code, also update reconcileChildrenIterator() which
	    // uses the same algorithm.
	    {
	      // First, validate keys.
	      var knownKeys = null;

	      for (var i = 0; i < newChildren.length; i++) {
	        var child = newChildren[i];
	        knownKeys = warnOnInvalidKey(child, knownKeys);
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;

	    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (newIdx === newChildren.length) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; newIdx < newChildren.length; newIdx++) {
	        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

	        if (_newFiber === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber;
	        } else {
	          previousNewFiber.sibling = _newFiber;
	        }

	        previousNewFiber = _newFiber;
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; newIdx < newChildren.length; newIdx++) {
	      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

	      if (_newFiber2 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber2.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber2;
	        } else {
	          previousNewFiber.sibling = _newFiber2;
	        }

	        previousNewFiber = _newFiber2;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
	    // This is the same implementation as reconcileChildrenArray(),
	    // but using the iterator instead.
	    var iteratorFn = getIteratorFn(newChildrenIterable);

	    if (!(typeof iteratorFn === 'function')) {
	      {
	        throw Error( "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    {
	      // We don't support rendering Generators because it's a mutation.
	      // See https://github.com/facebook/react/issues/12995
	      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
	      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
	        if (!didWarnAboutGenerators) {
	          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
	        }

	        didWarnAboutGenerators = true;
	      } // Warn about using Maps as children


	      if (newChildrenIterable.entries === iteratorFn) {
	        if (!didWarnAboutMaps) {
	          error('Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.');
	        }

	        didWarnAboutMaps = true;
	      } // First, validate keys.
	      // We'll get a different iterator later for the main pass.


	      var _newChildren = iteratorFn.call(newChildrenIterable);

	      if (_newChildren) {
	        var knownKeys = null;

	        var _step = _newChildren.next();

	        for (; !_step.done; _step = _newChildren.next()) {
	          var child = _step.value;
	          knownKeys = warnOnInvalidKey(child, knownKeys);
	        }
	      }
	    }

	    var newChildren = iteratorFn.call(newChildrenIterable);

	    if (!(newChildren != null)) {
	      {
	        throw Error( "An iterable object provided no iterator." );
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;
	    var step = newChildren.next();

	    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (step.done) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; !step.done; newIdx++, step = newChildren.next()) {
	        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

	        if (_newFiber3 === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber3;
	        } else {
	          previousNewFiber.sibling = _newFiber3;
	        }

	        previousNewFiber = _newFiber3;
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; !step.done; newIdx++, step = newChildren.next()) {
	      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

	      if (_newFiber4 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber4.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber4;
	        } else {
	          previousNewFiber.sibling = _newFiber4;
	        }

	        previousNewFiber = _newFiber4;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
	    // There's no need to check for keys on text nodes since we don't have a
	    // way to define them.
	    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
	      // We already have an existing node so let's just update it and delete
	      // the rest.
	      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
	      var existing = useFiber(currentFirstChild, textContent);
	      existing.return = returnFiber;
	      return existing;
	    } // The existing first child is not a text node so we need to create one
	    // and delete the existing ones.


	    deleteRemainingChildren(returnFiber, currentFirstChild);
	    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
	    created.return = returnFiber;
	    return created;
	  }

	  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
	    var key = element.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        switch (child.tag) {
	          case Fragment:
	            {
	              if (element.type === REACT_FRAGMENT_TYPE) {
	                deleteRemainingChildren(returnFiber, child.sibling);
	                var existing = useFiber(child, element.props.children);
	                existing.return = returnFiber;

	                {
	                  existing._debugSource = element._source;
	                  existing._debugOwner = element._owner;
	                }

	                return existing;
	              }

	              break;
	            }

	          case Block:

	          // We intentionally fallthrough here if enableBlocksAPI is not on.
	          // eslint-disable-next-lined no-fallthrough

	          default:
	            {
	              if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
	               isCompatibleFamilyForHotReloading(child, element) )) {
	                deleteRemainingChildren(returnFiber, child.sibling);

	                var _existing3 = useFiber(child, element.props);

	                _existing3.ref = coerceRef(returnFiber, child, element);
	                _existing3.return = returnFiber;

	                {
	                  _existing3._debugSource = element._source;
	                  _existing3._debugOwner = element._owner;
	                }

	                return _existing3;
	              }

	              break;
	            }
	        } // Didn't match.


	        deleteRemainingChildren(returnFiber, child);
	        break;
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    if (element.type === REACT_FRAGMENT_TYPE) {
	      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

	      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
	      _created4.return = returnFiber;
	      return _created4;
	    }
	  }

	  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
	    var key = portal.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, portal.children || []);
	          existing.return = returnFiber;
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
	    created.return = returnFiber;
	    return created;
	  } // This API will tag the children with the side-effect of the reconciliation
	  // itself. They will be added to the side-effect list as we pass through the
	  // children and the parent.


	  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
	    // This function is not recursive.
	    // If the top level item is an array, we treat it as a set of children,
	    // not as a fragment. Nested arrays on the other hand will be treated as
	    // fragment nodes. Recursion happens at the normal flow.
	    // Handle top level unkeyed fragments as if they were arrays.
	    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
	    // We treat the ambiguous cases above the same.
	    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

	    if (isUnkeyedTopLevelFragment) {
	      newChild = newChild.props.children;
	    } // Handle object types


	    var isObject = typeof newChild === 'object' && newChild !== null;

	    if (isObject) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

	        case REACT_PORTAL_TYPE:
	          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
	      }
	    }

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
	    }

	    if (isArray$1(newChild)) {
	      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (getIteratorFn(newChild)) {
	      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (isObject) {
	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
	      // If the new child is undefined, and the return fiber is a composite
	      // component, throw an error. If Fiber return types are disabled,
	      // we already threw above.
	      switch (returnFiber.tag) {
	        case ClassComponent:
	          {
	            {
	              var instance = returnFiber.stateNode;

	              if (instance.render._isMockFunction) {
	                // We allow auto-mocks to proceed as if they're returning null.
	                break;
	              }
	            }
	          }
	        // Intentionally fall through to the next case, which handles both
	        // functions and classes
	        // eslint-disable-next-lined no-fallthrough

	        case FunctionComponent:
	          {
	            var Component = returnFiber.type;

	            {
	              {
	                throw Error( (Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null." );
	              }
	            }
	          }
	      }
	    } // Remaining cases are all treated as empty.


	    return deleteRemainingChildren(returnFiber, currentFirstChild);
	  }

	  return reconcileChildFibers;
	}

	var reconcileChildFibers = ChildReconciler(true);
	var mountChildFibers = ChildReconciler(false);
	function cloneChildFibers(current, workInProgress) {
	  if (!(current === null || workInProgress.child === current.child)) {
	    {
	      throw Error( "Resuming work not yet implemented." );
	    }
	  }

	  if (workInProgress.child === null) {
	    return;
	  }

	  var currentChild = workInProgress.child;
	  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
	  workInProgress.child = newChild;
	  newChild.return = workInProgress;

	  while (currentChild.sibling !== null) {
	    currentChild = currentChild.sibling;
	    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
	    newChild.return = workInProgress;
	  }

	  newChild.sibling = null;
	} // Reset a workInProgress child set to prepare it for a second pass.

	function resetChildFibers(workInProgress, renderExpirationTime) {
	  var child = workInProgress.child;

	  while (child !== null) {
	    resetWorkInProgress(child, renderExpirationTime);
	    child = child.sibling;
	  }
	}

	var NO_CONTEXT = {};
	var contextStackCursor$1 = createCursor(NO_CONTEXT);
	var contextFiberStackCursor = createCursor(NO_CONTEXT);
	var rootInstanceStackCursor = createCursor(NO_CONTEXT);

	function requiredContext(c) {
	  if (!(c !== NO_CONTEXT)) {
	    {
	      throw Error( "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  return c;
	}

	function getRootHostContainer() {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  return rootInstance;
	}

	function pushHostContainer(fiber, nextRootInstance) {
	  // Push current root instance onto the stack;
	  // This allows us to reset root when portals are popped.
	  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.

	  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
	  // However, we can't just call getRootHostContext() and push it because
	  // we'd have a different number of entries on the stack depending on
	  // whether getRootHostContext() throws somewhere in renderer code or not.
	  // So we push an empty value first. This lets us safely unwind on errors.

	  push(contextStackCursor$1, NO_CONTEXT, fiber);
	  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

	  pop(contextStackCursor$1, fiber);
	  push(contextStackCursor$1, nextRootContext, fiber);
	}

	function popHostContainer(fiber) {
	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	  pop(rootInstanceStackCursor, fiber);
	}

	function getHostContext() {
	  var context = requiredContext(contextStackCursor$1.current);
	  return context;
	}

	function pushHostContext(fiber) {
	  requiredContext(rootInstanceStackCursor.current);
	  var context = requiredContext(contextStackCursor$1.current);
	  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

	  if (context === nextContext) {
	    return;
	  } // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.


	  push(contextFiberStackCursor, fiber, fiber);
	  push(contextStackCursor$1, nextContext, fiber);
	}

	function popHostContext(fiber) {
	  // Do not pop unless this Fiber provided the current context.
	  // pushHostContext() only pushes Fibers that provide unique contexts.
	  if (contextFiberStackCursor.current !== fiber) {
	    return;
	  }

	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	}

	var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
	// inherited deeply down the subtree. The upper bits only affect
	// this immediate suspense boundary and gets reset each new
	// boundary or suspense list.

	var SubtreeSuspenseContextMask = 1; // Subtree Flags:
	// InvisibleParentSuspenseContext indicates that one of our parent Suspense
	// boundaries is not currently showing visible main content.
	// Either because it is already showing a fallback or is not mounted at all.
	// We can use this to determine if it is desirable to trigger a fallback at
	// the parent. If not, then we might need to trigger undesirable boundaries
	// and/or suspend the commit to avoid hiding the parent content.

	var InvisibleParentSuspenseContext = 1; // Shallow Flags:
	// ForceSuspenseFallback can be used by SuspenseList to force newly added
	// items into their fallback state during one of the render passes.

	var ForceSuspenseFallback = 2;
	var suspenseStackCursor = createCursor(DefaultSuspenseContext);
	function hasSuspenseContext(parentContext, flag) {
	  return (parentContext & flag) !== 0;
	}
	function setDefaultShallowSuspenseContext(parentContext) {
	  return parentContext & SubtreeSuspenseContextMask;
	}
	function setShallowSuspenseContext(parentContext, shallowContext) {
	  return parentContext & SubtreeSuspenseContextMask | shallowContext;
	}
	function addSubtreeSuspenseContext(parentContext, subtreeContext) {
	  return parentContext | subtreeContext;
	}
	function pushSuspenseContext(fiber, newContext) {
	  push(suspenseStackCursor, newContext, fiber);
	}
	function popSuspenseContext(fiber) {
	  pop(suspenseStackCursor, fiber);
	}

	function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
	  // If it was the primary children that just suspended, capture and render the
	  // fallback. Otherwise, don't capture and bubble to the next boundary.
	  var nextState = workInProgress.memoizedState;

	  if (nextState !== null) {
	    if (nextState.dehydrated !== null) {
	      // A dehydrated boundary always captures.
	      return true;
	    }

	    return false;
	  }

	  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

	  if (props.fallback === undefined) {
	    return false;
	  } // Regular boundaries always capture.


	  if (props.unstable_avoidThisFallback !== true) {
	    return true;
	  } // If it's a boundary we should avoid, then we prefer to bubble up to the
	  // parent boundary if it is currently invisible.


	  if (hasInvisibleParent) {
	    return false;
	  } // If the parent is not able to handle it, we must handle it.


	  return true;
	}
	function findFirstSuspended(row) {
	  var node = row;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        var dehydrated = state.dehydrated;

	        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
	          return node;
	        }
	      }
	    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
	    // keep track of whether it suspended or not.
	    node.memoizedProps.revealOrder !== undefined) {
	      var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

	      if (didSuspend) {
	        return node;
	      }
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === row) {
	      return null;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === row) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }

	  return null;
	}

	function createDeprecatedResponderListener(responder, props) {
	  var eventResponderListener = {
	    responder: responder,
	    props: props
	  };

	  {
	    Object.freeze(eventResponderListener);
	  }

	  return eventResponderListener;
	}

	var HasEffect =
	/* */
	1; // Represents the phase in which the effect (not the clean-up) fires.

	var Layout =
	/*    */
	2;
	var Passive$1 =
	/*   */
	4;

	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
	var didWarnAboutMismatchedHooksForComponent;

	{
	  didWarnAboutMismatchedHooksForComponent = new Set();
	}

	// These are set right before calling the component.
	var renderExpirationTime = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
	// the work-in-progress hook.

	var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
	// current hook list is the list that belongs to the current fiber. The
	// work-in-progress hook list is a new list that will be added to the
	// work-in-progress fiber.

	var currentHook = null;
	var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
	// does not get reset if we do another render pass; only when we're completely
	// finished evaluating this component. This is an optimization so we know
	// whether we need to clear render phase updates after a throw.

	var didScheduleRenderPhaseUpdate = false;
	var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

	var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
	// The list stores the order of hooks used during the initial render (mount).
	// Subsequent renders (updates) reference this list.

	var hookTypesDev = null;
	var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
	// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
	// When true, such Hooks will always be "remounted". Only used during hot reload.

	var ignorePreviousDependencies = false;

	function mountHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev === null) {
	      hookTypesDev = [hookName];
	    } else {
	      hookTypesDev.push(hookName);
	    }
	  }
	}

	function updateHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev !== null) {
	      hookTypesUpdateIndexDev++;

	      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
	        warnOnHookMismatchInDev(hookName);
	      }
	    }
	  }
	}

	function checkDepsAreArrayDev(deps) {
	  {
	    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
	      // Verify deps, but only on mount to avoid extra checks.
	      // It's unlikely their type would change as usually you define them inline.
	      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
	    }
	  }
	}

	function warnOnHookMismatchInDev(currentHookName) {
	  {
	    var componentName = getComponentName(currentlyRenderingFiber$1.type);

	    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
	      didWarnAboutMismatchedHooksForComponent.add(componentName);

	      if (hookTypesDev !== null) {
	        var table = '';
	        var secondColumnStart = 30;

	        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
	          var oldHookName = hookTypesDev[i];
	          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
	          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
	          // lol @ IE not supporting String#repeat

	          while (row.length < secondColumnStart) {
	            row += ' ';
	          }

	          row += newHookName + '\n';
	          table += row;
	        }

	        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
	      }
	    }
	  }
	}

	function throwInvalidHookError() {
	  {
	    {
	      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
	    }
	  }
	}

	function areHookInputsEqual(nextDeps, prevDeps) {
	  {
	    if (ignorePreviousDependencies) {
	      // Only true when this component is being hot reloaded.
	      return false;
	    }
	  }

	  if (prevDeps === null) {
	    {
	      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
	    }

	    return false;
	  }

	  {
	    // Don't bother comparing lengths in prod because these arrays should be
	    // passed inline.
	    if (nextDeps.length !== prevDeps.length) {
	      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
	    }
	  }

	  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
	    if (objectIs(nextDeps[i], prevDeps[i])) {
	      continue;
	    }

	    return false;
	  }

	  return true;
	}

	function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
	  renderExpirationTime = nextRenderExpirationTime;
	  currentlyRenderingFiber$1 = workInProgress;

	  {
	    hookTypesDev = current !== null ? current._debugHookTypes : null;
	    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

	    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
	  }

	  workInProgress.memoizedState = null;
	  workInProgress.updateQueue = null;
	  workInProgress.expirationTime = NoWork; // The following should have already been reset
	  // currentHook = null;
	  // workInProgressHook = null;
	  // didScheduleRenderPhaseUpdate = false;
	  // TODO Warn if no hooks are used at all during mount, then some are used during update.
	  // Currently we will identify the update render as a mount because memoizedState === null.
	  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
	  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
	  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
	  // so memoizedState would be null during updates and mounts.

	  {
	    if (current !== null && current.memoizedState !== null) {
	      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
	    } else if (hookTypesDev !== null) {
	      // This dispatcher handles an edge case where a component is updating,
	      // but no stateful hooks have been used.
	      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
	      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
	      // This dispatcher does that.
	      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
	    } else {
	      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
	    }
	  }

	  var children = Component(props, secondArg); // Check if there was a render phase update

	  if (workInProgress.expirationTime === renderExpirationTime) {
	    // Keep rendering in a loop for as long as render phase updates continue to
	    // be scheduled. Use a counter to prevent infinite loops.
	    var numberOfReRenders = 0;

	    do {
	      workInProgress.expirationTime = NoWork;

	      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
	        {
	          throw Error( "Too many re-renders. React limits the number of renders to prevent an infinite loop." );
	        }
	      }

	      numberOfReRenders += 1;

	      {
	        // Even when hot reloading, allow dependencies to stabilize
	        // after first render to prevent infinite render phase updates.
	        ignorePreviousDependencies = false;
	      } // Start over from the beginning of the list


	      currentHook = null;
	      workInProgressHook = null;
	      workInProgress.updateQueue = null;

	      {
	        // Also validate hook order for cascading updates.
	        hookTypesUpdateIndexDev = -1;
	      }

	      ReactCurrentDispatcher.current =  HooksDispatcherOnRerenderInDEV ;
	      children = Component(props, secondArg);
	    } while (workInProgress.expirationTime === renderExpirationTime);
	  } // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrancy.


	  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

	  {
	    workInProgress._debugHookTypes = hookTypesDev;
	  } // This check uses currentHook so that it works the same in DEV and prod bundles.
	  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


	  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
	  renderExpirationTime = NoWork;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    currentHookNameInDev = null;
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1;
	  }

	  didScheduleRenderPhaseUpdate = false;

	  if (!!didRenderTooFewHooks) {
	    {
	      throw Error( "Rendered fewer hooks than expected. This may be caused by an accidental early return statement." );
	    }
	  }

	  return children;
	}
	function bailoutHooks(current, workInProgress, expirationTime) {
	  workInProgress.updateQueue = current.updateQueue;
	  workInProgress.effectTag &= ~(Passive | Update);

	  if (current.expirationTime <= expirationTime) {
	    current.expirationTime = NoWork;
	  }
	}
	function resetHooksAfterThrow() {
	  // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrancy.
	  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

	  if (didScheduleRenderPhaseUpdate) {
	    // There were render phase updates. These are only valid for this render
	    // phase, which we are now aborting. Remove the updates from the queues so
	    // they do not persist to the next render. Do not remove updates from hooks
	    // that weren't processed.
	    //
	    // Only reset the updates from the queue if it has a clone. If it does
	    // not have a clone, that means it wasn't processed, and the updates were
	    // scheduled before we entered the render phase.
	    var hook = currentlyRenderingFiber$1.memoizedState;

	    while (hook !== null) {
	      var queue = hook.queue;

	      if (queue !== null) {
	        queue.pending = null;
	      }

	      hook = hook.next;
	    }
	  }

	  renderExpirationTime = NoWork;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1;
	    currentHookNameInDev = null;
	  }

	  didScheduleRenderPhaseUpdate = false;
	}

	function mountWorkInProgressHook() {
	  var hook = {
	    memoizedState: null,
	    baseState: null,
	    baseQueue: null,
	    queue: null,
	    next: null
	  };

	  if (workInProgressHook === null) {
	    // This is the first hook in the list
	    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
	  } else {
	    // Append to the end of the list
	    workInProgressHook = workInProgressHook.next = hook;
	  }

	  return workInProgressHook;
	}

	function updateWorkInProgressHook() {
	  // This function is used both for updates and for re-renders triggered by a
	  // render phase update. It assumes there is either a current hook we can
	  // clone, or a work-in-progress hook from a previous render pass that we can
	  // use as a base. When we reach the end of the base list, we must switch to
	  // the dispatcher used for mounts.
	  var nextCurrentHook;

	  if (currentHook === null) {
	    var current = currentlyRenderingFiber$1.alternate;

	    if (current !== null) {
	      nextCurrentHook = current.memoizedState;
	    } else {
	      nextCurrentHook = null;
	    }
	  } else {
	    nextCurrentHook = currentHook.next;
	  }

	  var nextWorkInProgressHook;

	  if (workInProgressHook === null) {
	    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
	  } else {
	    nextWorkInProgressHook = workInProgressHook.next;
	  }

	  if (nextWorkInProgressHook !== null) {
	    // There's already a work-in-progress. Reuse it.
	    workInProgressHook = nextWorkInProgressHook;
	    nextWorkInProgressHook = workInProgressHook.next;
	    currentHook = nextCurrentHook;
	  } else {
	    // Clone from the current hook.
	    if (!(nextCurrentHook !== null)) {
	      {
	        throw Error( "Rendered more hooks than during the previous render." );
	      }
	    }

	    currentHook = nextCurrentHook;
	    var newHook = {
	      memoizedState: currentHook.memoizedState,
	      baseState: currentHook.baseState,
	      baseQueue: currentHook.baseQueue,
	      queue: currentHook.queue,
	      next: null
	    };

	    if (workInProgressHook === null) {
	      // This is the first hook in the list.
	      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
	    } else {
	      // Append to the end of the list.
	      workInProgressHook = workInProgressHook.next = newHook;
	    }
	  }

	  return workInProgressHook;
	}

	function createFunctionComponentUpdateQueue() {
	  return {
	    lastEffect: null
	  };
	}

	function basicStateReducer(state, action) {
	  // $FlowFixMe: Flow doesn't like mixed types
	  return typeof action === 'function' ? action(state) : action;
	}

	function mountReducer(reducer, initialArg, init) {
	  var hook = mountWorkInProgressHook();
	  var initialState;

	  if (init !== undefined) {
	    initialState = init(initialArg);
	  } else {
	    initialState = initialArg;
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = hook.queue = {
	    pending: null,
	    dispatch: null,
	    lastRenderedReducer: reducer,
	    lastRenderedState: initialState
	  };
	  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (!(queue !== null)) {
	    {
	      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
	    }
	  }

	  queue.lastRenderedReducer = reducer;
	  var current = currentHook; // The last rebase update that is NOT part of the base state.

	  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

	  var pendingQueue = queue.pending;

	  if (pendingQueue !== null) {
	    // We have new updates that haven't been processed yet.
	    // We'll add them to the base queue.
	    if (baseQueue !== null) {
	      // Merge the pending queue and the base queue.
	      var baseFirst = baseQueue.next;
	      var pendingFirst = pendingQueue.next;
	      baseQueue.next = pendingFirst;
	      pendingQueue.next = baseFirst;
	    }

	    current.baseQueue = baseQueue = pendingQueue;
	    queue.pending = null;
	  }

	  if (baseQueue !== null) {
	    // We have a queue to process.
	    var first = baseQueue.next;
	    var newState = current.baseState;
	    var newBaseState = null;
	    var newBaseQueueFirst = null;
	    var newBaseQueueLast = null;
	    var update = first;

	    do {
	      var updateExpirationTime = update.expirationTime;

	      if (updateExpirationTime < renderExpirationTime) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        var clone = {
	          expirationTime: update.expirationTime,
	          suspenseConfig: update.suspenseConfig,
	          action: update.action,
	          eagerReducer: update.eagerReducer,
	          eagerState: update.eagerState,
	          next: null
	        };

	        if (newBaseQueueLast === null) {
	          newBaseQueueFirst = newBaseQueueLast = clone;
	          newBaseState = newState;
	        } else {
	          newBaseQueueLast = newBaseQueueLast.next = clone;
	        } // Update the remaining priority in the queue.


	        if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
	          currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
	          markUnprocessedUpdateTime(updateExpirationTime);
	        }
	      } else {
	        // This update does have sufficient priority.
	        if (newBaseQueueLast !== null) {
	          var _clone = {
	            expirationTime: Sync,
	            // This update is going to be committed so we never want uncommit it.
	            suspenseConfig: update.suspenseConfig,
	            action: update.action,
	            eagerReducer: update.eagerReducer,
	            eagerState: update.eagerState,
	            next: null
	          };
	          newBaseQueueLast = newBaseQueueLast.next = _clone;
	        } // Mark the event time of this update as relevant to this render pass.
	        // TODO: This should ideally use the true event time of this update rather than
	        // its priority which is a derived and not reverseable value.
	        // TODO: We should skip this update if it was already committed but currently
	        // we have no way of detecting the difference between a committed and suspended
	        // update here.


	        markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

	        if (update.eagerReducer === reducer) {
	          // If this update was processed eagerly, and its reducer matches the
	          // current reducer, we can use the eagerly computed state.
	          newState = update.eagerState;
	        } else {
	          var action = update.action;
	          newState = reducer(newState, action);
	        }
	      }

	      update = update.next;
	    } while (update !== null && update !== first);

	    if (newBaseQueueLast === null) {
	      newBaseState = newState;
	    } else {
	      newBaseQueueLast.next = newBaseQueueFirst;
	    } // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState;
	    hook.baseState = newBaseState;
	    hook.baseQueue = newBaseQueueLast;
	    queue.lastRenderedState = newState;
	  }

	  var dispatch = queue.dispatch;
	  return [hook.memoizedState, dispatch];
	}

	function rerenderReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (!(queue !== null)) {
	    {
	      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
	    }
	  }

	  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
	  // work-in-progress hook.

	  var dispatch = queue.dispatch;
	  var lastRenderPhaseUpdate = queue.pending;
	  var newState = hook.memoizedState;

	  if (lastRenderPhaseUpdate !== null) {
	    // The queue doesn't persist past this render pass.
	    queue.pending = null;
	    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
	    var update = firstRenderPhaseUpdate;

	    do {
	      // Process this render phase update. We don't have to check the
	      // priority because it will always be the same as the current
	      // render's.
	      var action = update.action;
	      newState = reducer(newState, action);
	      update = update.next;
	    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
	    // the base state unless the queue is empty.
	    // TODO: Not sure if this is the desired semantics, but it's what we
	    // do for gDSFP. I can't remember why.

	    if (hook.baseQueue === null) {
	      hook.baseState = newState;
	    }

	    queue.lastRenderedState = newState;
	  }

	  return [newState, dispatch];
	}

	function mountState(initialState) {
	  var hook = mountWorkInProgressHook();

	  if (typeof initialState === 'function') {
	    // $FlowFixMe: Flow doesn't like mixed types
	    initialState = initialState();
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = hook.queue = {
	    pending: null,
	    dispatch: null,
	    lastRenderedReducer: basicStateReducer,
	    lastRenderedState: initialState
	  };
	  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateState(initialState) {
	  return updateReducer(basicStateReducer);
	}

	function rerenderState(initialState) {
	  return rerenderReducer(basicStateReducer);
	}

	function pushEffect(tag, create, destroy, deps) {
	  var effect = {
	    tag: tag,
	    create: create,
	    destroy: destroy,
	    deps: deps,
	    // Circular
	    next: null
	  };
	  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
	    componentUpdateQueue.lastEffect = effect.next = effect;
	  } else {
	    var lastEffect = componentUpdateQueue.lastEffect;

	    if (lastEffect === null) {
	      componentUpdateQueue.lastEffect = effect.next = effect;
	    } else {
	      var firstEffect = lastEffect.next;
	      lastEffect.next = effect;
	      effect.next = firstEffect;
	      componentUpdateQueue.lastEffect = effect;
	    }
	  }

	  return effect;
	}

	function mountRef(initialValue) {
	  var hook = mountWorkInProgressHook();
	  var ref = {
	    current: initialValue
	  };

	  {
	    Object.seal(ref);
	  }

	  hook.memoizedState = ref;
	  return ref;
	}

	function updateRef(initialValue) {
	  var hook = updateWorkInProgressHook();
	  return hook.memoizedState;
	}

	function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
	  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, undefined, nextDeps);
	}

	function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var destroy = undefined;

	  if (currentHook !== null) {
	    var prevEffect = currentHook.memoizedState;
	    destroy = prevEffect.destroy;

	    if (nextDeps !== null) {
	      var prevDeps = prevEffect.deps;

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        pushEffect(hookEffectTag, create, destroy, nextDeps);
	        return;
	      }
	    }
	  }

	  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
	  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
	}

	function mountEffect(create, deps) {
	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
	    }
	  }

	  return mountEffectImpl(Update | Passive, Passive$1, create, deps);
	}

	function updateEffect(create, deps) {
	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
	    }
	  }

	  return updateEffectImpl(Update | Passive, Passive$1, create, deps);
	}

	function mountLayoutEffect(create, deps) {
	  return mountEffectImpl(Update, Layout, create, deps);
	}

	function updateLayoutEffect(create, deps) {
	  return updateEffectImpl(Update, Layout, create, deps);
	}

	function imperativeHandleEffect(create, ref) {
	  if (typeof ref === 'function') {
	    var refCallback = ref;

	    var _inst = create();

	    refCallback(_inst);
	    return function () {
	      refCallback(null);
	    };
	  } else if (ref !== null && ref !== undefined) {
	    var refObject = ref;

	    {
	      if (!refObject.hasOwnProperty('current')) {
	        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
	      }
	    }

	    var _inst2 = create();

	    refObject.current = _inst2;
	    return function () {
	      refObject.current = null;
	    };
	  }
	}

	function mountImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function updateImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
	  // The react-debug-hooks package injects its own implementation
	  // so that e.g. DevTools can display custom hook values.
	}

	var updateDebugValue = mountDebugValue;

	function mountCallback(callback, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function updateCallback(callback, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function mountMemo(nextCreate, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function updateMemo(nextCreate, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    // Assume these are defined. If they're not, areHookInputsEqual will warn.
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function mountDeferredValue(value, config) {
	  var _mountState = mountState(value),
	      prevValue = _mountState[0],
	      setValue = _mountState[1];

	  mountEffect(function () {
	    var previousConfig = ReactCurrentBatchConfig$1.suspense;
	    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	    try {
	      setValue(value);
	    } finally {
	      ReactCurrentBatchConfig$1.suspense = previousConfig;
	    }
	  }, [value, config]);
	  return prevValue;
	}

	function updateDeferredValue(value, config) {
	  var _updateState = updateState(),
	      prevValue = _updateState[0],
	      setValue = _updateState[1];

	  updateEffect(function () {
	    var previousConfig = ReactCurrentBatchConfig$1.suspense;
	    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	    try {
	      setValue(value);
	    } finally {
	      ReactCurrentBatchConfig$1.suspense = previousConfig;
	    }
	  }, [value, config]);
	  return prevValue;
	}

	function rerenderDeferredValue(value, config) {
	  var _rerenderState = rerenderState(),
	      prevValue = _rerenderState[0],
	      setValue = _rerenderState[1];

	  updateEffect(function () {
	    var previousConfig = ReactCurrentBatchConfig$1.suspense;
	    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	    try {
	      setValue(value);
	    } finally {
	      ReactCurrentBatchConfig$1.suspense = previousConfig;
	    }
	  }, [value, config]);
	  return prevValue;
	}

	function startTransition(setPending, config, callback) {
	  var priorityLevel = getCurrentPriorityLevel();
	  runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function () {
	    setPending(true);
	  });
	  runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function () {
	    var previousConfig = ReactCurrentBatchConfig$1.suspense;
	    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	    try {
	      setPending(false);
	      callback();
	    } finally {
	      ReactCurrentBatchConfig$1.suspense = previousConfig;
	    }
	  });
	}

	function mountTransition(config) {
	  var _mountState2 = mountState(false),
	      isPending = _mountState2[0],
	      setPending = _mountState2[1];

	  var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]);
	  return [start, isPending];
	}

	function updateTransition(config) {
	  var _updateState2 = updateState(),
	      isPending = _updateState2[0],
	      setPending = _updateState2[1];

	  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
	  return [start, isPending];
	}

	function rerenderTransition(config) {
	  var _rerenderState2 = rerenderState(),
	      isPending = _rerenderState2[0],
	      setPending = _rerenderState2[1];

	  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
	  return [start, isPending];
	}

	function dispatchAction(fiber, queue, action) {
	  {
	    if (typeof arguments[3] === 'function') {
	      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
	    }
	  }

	  var currentTime = requestCurrentTimeForUpdate();
	  var suspenseConfig = requestCurrentSuspenseConfig();
	  var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	  var update = {
	    expirationTime: expirationTime,
	    suspenseConfig: suspenseConfig,
	    action: action,
	    eagerReducer: null,
	    eagerState: null,
	    next: null
	  };

	  {
	    update.priority = getCurrentPriorityLevel();
	  } // Append the update to the end of the list.


	  var pending = queue.pending;

	  if (pending === null) {
	    // This is the first update. Create a circular list.
	    update.next = update;
	  } else {
	    update.next = pending.next;
	    pending.next = update;
	  }

	  queue.pending = update;
	  var alternate = fiber.alternate;

	  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
	    // This is a render phase update. Stash it in a lazily-created map of
	    // queue -> linked list of updates. After this render pass, we'll restart
	    // and apply the stashed updates on top of the work-in-progress hook.
	    didScheduleRenderPhaseUpdate = true;
	    update.expirationTime = renderExpirationTime;
	    currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
	  } else {
	    if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
	      // The queue is currently empty, which means we can eagerly compute the
	      // next state before entering the render phase. If the new state is the
	      // same as the current state, we may be able to bail out entirely.
	      var lastRenderedReducer = queue.lastRenderedReducer;

	      if (lastRenderedReducer !== null) {
	        var prevDispatcher;

	        {
	          prevDispatcher = ReactCurrentDispatcher.current;
	          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        }

	        try {
	          var currentState = queue.lastRenderedState;
	          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
	          // it, on the update object. If the reducer hasn't changed by the
	          // time we enter the render phase, then the eager state can be used
	          // without calling the reducer again.

	          update.eagerReducer = lastRenderedReducer;
	          update.eagerState = eagerState;

	          if (objectIs(eagerState, currentState)) {
	            // Fast path. We can bail out without scheduling React to re-render.
	            // It's still possible that we'll need to rebase this update later,
	            // if the component re-renders for a different reason and by that
	            // time the reducer has changed.
	            return;
	          }
	        } catch (error) {// Suppress the error. It will throw again in the render phase.
	        } finally {
	          {
	            ReactCurrentDispatcher.current = prevDispatcher;
	          }
	        }
	      }
	    }

	    {
	      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	      if ('undefined' !== typeof jest) {
	        warnIfNotScopedWithMatchingAct(fiber);
	        warnIfNotCurrentlyActingUpdatesInDev(fiber);
	      }
	    }

	    scheduleWork(fiber, expirationTime);
	  }
	}

	var ContextOnlyDispatcher = {
	  readContext: readContext,
	  useCallback: throwInvalidHookError,
	  useContext: throwInvalidHookError,
	  useEffect: throwInvalidHookError,
	  useImperativeHandle: throwInvalidHookError,
	  useLayoutEffect: throwInvalidHookError,
	  useMemo: throwInvalidHookError,
	  useReducer: throwInvalidHookError,
	  useRef: throwInvalidHookError,
	  useState: throwInvalidHookError,
	  useDebugValue: throwInvalidHookError,
	  useResponder: throwInvalidHookError,
	  useDeferredValue: throwInvalidHookError,
	  useTransition: throwInvalidHookError
	};
	var HooksDispatcherOnMountInDEV = null;
	var HooksDispatcherOnMountWithHookTypesInDEV = null;
	var HooksDispatcherOnUpdateInDEV = null;
	var HooksDispatcherOnRerenderInDEV = null;
	var InvalidNestedHooksDispatcherOnMountInDEV = null;
	var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
	var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

	{
	  var warnInvalidContextAccess = function () {
	    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	  };

	  var warnInvalidHookAccess = function () {
	    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
	  };

	  HooksDispatcherOnMountInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      mountHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      mountHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      mountHookTypesDev();
	      return mountDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      mountHookTypesDev();
	      return mountTransition(config);
	    }
	  };
	  HooksDispatcherOnMountWithHookTypesInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return mountDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return mountDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return mountTransition(config);
	    }
	  };
	  HooksDispatcherOnUpdateInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return updateDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return updateTransition(config);
	    }
	  };
	  HooksDispatcherOnRerenderInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return rerenderDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return rerenderTransition(config);
	    }
	  };
	  InvalidNestedHooksDispatcherOnMountInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountTransition(config);
	    }
	  };
	  InvalidNestedHooksDispatcherOnUpdateInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateTransition(config);
	    }
	  };
	  InvalidNestedHooksDispatcherOnRerenderInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderTransition(config);
	    }
	  };
	}

	var now$1 = Scheduler.unstable_now;
	var commitTime = 0;
	var profilerStartTime = -1;

	function getCommitTime() {
	  return commitTime;
	}

	function recordCommitTime() {

	  commitTime = now$1();
	}

	function startProfilerTimer(fiber) {

	  profilerStartTime = now$1();

	  if (fiber.actualStartTime < 0) {
	    fiber.actualStartTime = now$1();
	  }
	}

	function stopProfilerTimerIfRunning(fiber) {

	  profilerStartTime = -1;
	}

	function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

	  if (profilerStartTime >= 0) {
	    var elapsedTime = now$1() - profilerStartTime;
	    fiber.actualDuration += elapsedTime;

	    if (overrideBaseTime) {
	      fiber.selfBaseDuration = elapsedTime;
	    }

	    profilerStartTime = -1;
	  }
	}

	// This may have been an insertion or a hydration.

	var hydrationParentFiber = null;
	var nextHydratableInstance = null;
	var isHydrating = false;

	function enterHydrationState(fiber) {

	  var parentInstance = fiber.stateNode.containerInfo;
	  nextHydratableInstance = getFirstHydratableChild(parentInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  return true;
	}

	function deleteHydratableInstance(returnFiber, instance) {
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
	        break;

	      case HostComponent:
	        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
	        break;
	    }
	  }

	  var childToDelete = createFiberFromHostInstanceForDeletion();
	  childToDelete.stateNode = instance;
	  childToDelete.return = returnFiber;
	  childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
	  // these children are not part of the reconciliation list of children.
	  // Even if we abort and rereconcile the children, that will try to hydrate
	  // again and the nodes are still in the host tree so these will be
	  // recreated.

	  if (returnFiber.lastEffect !== null) {
	    returnFiber.lastEffect.nextEffect = childToDelete;
	    returnFiber.lastEffect = childToDelete;
	  } else {
	    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	  }
	}

	function insertNonHydratedInstance(returnFiber, fiber) {
	  fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;

	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          var parentContainer = returnFiber.stateNode.containerInfo;

	          switch (fiber.tag) {
	            case HostComponent:
	              var type = fiber.type;
	              fiber.pendingProps;
	              didNotFindHydratableContainerInstance(parentContainer, type);
	              break;

	            case HostText:
	              var text = fiber.pendingProps;
	              didNotFindHydratableContainerTextInstance(parentContainer, text);
	              break;
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          var parentType = returnFiber.type;
	          var parentProps = returnFiber.memoizedProps;
	          var parentInstance = returnFiber.stateNode;

	          switch (fiber.tag) {
	            case HostComponent:
	              var _type = fiber.type;
	              fiber.pendingProps;
	              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
	              break;

	            case HostText:
	              var _text = fiber.pendingProps;
	              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
	              break;

	            case SuspenseComponent:
	              didNotFindHydratableSuspenseInstance(parentType, parentProps);
	              break;
	          }

	          break;
	        }

	      default:
	        return;
	    }
	  }
	}

	function tryHydrate(fiber, nextInstance) {
	  switch (fiber.tag) {
	    case HostComponent:
	      {
	        var type = fiber.type;
	        fiber.pendingProps;
	        var instance = canHydrateInstance(nextInstance, type);

	        if (instance !== null) {
	          fiber.stateNode = instance;
	          return true;
	        }

	        return false;
	      }

	    case HostText:
	      {
	        var text = fiber.pendingProps;
	        var textInstance = canHydrateTextInstance(nextInstance, text);

	        if (textInstance !== null) {
	          fiber.stateNode = textInstance;
	          return true;
	        }

	        return false;
	      }

	    case SuspenseComponent:
	      {

	        return false;
	      }

	    default:
	      return false;
	  }
	}

	function tryToClaimNextHydratableInstance(fiber) {
	  if (!isHydrating) {
	    return;
	  }

	  var nextInstance = nextHydratableInstance;

	  if (!nextInstance) {
	    // Nothing to hydrate. Make it an insertion.
	    insertNonHydratedInstance(hydrationParentFiber, fiber);
	    isHydrating = false;
	    hydrationParentFiber = fiber;
	    return;
	  }

	  var firstAttemptedInstance = nextInstance;

	  if (!tryHydrate(fiber, nextInstance)) {
	    // If we can't hydrate this instance let's try the next one.
	    // We use this as a heuristic. It's based on intuition and not data so it
	    // might be flawed or unnecessary.
	    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

	    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
	      // Nothing to hydrate. Make it an insertion.
	      insertNonHydratedInstance(hydrationParentFiber, fiber);
	      isHydrating = false;
	      hydrationParentFiber = fiber;
	      return;
	    } // We matched the next one, we'll now assume that the first one was
	    // superfluous and we'll delete it. Since we can't eagerly delete it
	    // we'll have to schedule a deletion. To do that, this node needs a dummy
	    // fiber associated with it.


	    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
	  }

	  hydrationParentFiber = fiber;
	  nextHydratableInstance = getFirstHydratableChild(nextInstance);
	}

	function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

	  var instance = fiber.stateNode;
	  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

	  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	  // is a new ref we mark this as an update.

	  if (updatePayload !== null) {
	    return true;
	  }

	  return false;
	}

	function prepareToHydrateHostTextInstance(fiber) {

	  var textInstance = fiber.stateNode;
	  var textContent = fiber.memoizedProps;
	  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

	  {
	    if (shouldUpdate) {
	      // We assume that prepareToHydrateHostTextInstance is called in a context where the
	      // hydration parent is the parent host component of this host text.
	      var returnFiber = hydrationParentFiber;

	      if (returnFiber !== null) {
	        switch (returnFiber.tag) {
	          case HostRoot:
	            {
	              var parentContainer = returnFiber.stateNode.containerInfo;
	              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
	              break;
	            }

	          case HostComponent:
	            {
	              var parentType = returnFiber.type;
	              var parentProps = returnFiber.memoizedProps;
	              var parentInstance = returnFiber.stateNode;
	              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
	              break;
	            }
	        }
	      }
	    }
	  }

	  return shouldUpdate;
	}

	function skipPastDehydratedSuspenseInstance(fiber) {

	  var suspenseState = fiber.memoizedState;
	  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

	  if (!suspenseInstance) {
	    {
	      throw Error( "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
	}

	function popToNextHostParent(fiber) {
	  var parent = fiber.return;

	  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
	    parent = parent.return;
	  }

	  hydrationParentFiber = parent;
	}

	function popHydrationState(fiber) {

	  if (fiber !== hydrationParentFiber) {
	    // We're deeper than the current hydration context, inside an inserted
	    // tree.
	    return false;
	  }

	  if (!isHydrating) {
	    // If we're not currently hydrating but we're in a hydration context, then
	    // we were an insertion and now need to pop up reenter hydration of our
	    // siblings.
	    popToNextHostParent(fiber);
	    isHydrating = true;
	    return false;
	  }

	  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
	  // We only do this deeper than head and body since they tend to have random
	  // other nodes in them. We also ignore components with pure text content in
	  // side of them.
	  // TODO: Better heuristic.

	  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
	    var nextInstance = nextHydratableInstance;

	    while (nextInstance) {
	      deleteHydratableInstance(fiber, nextInstance);
	      nextInstance = getNextHydratableSibling(nextInstance);
	    }
	  }

	  popToNextHostParent(fiber);

	  if (fiber.tag === SuspenseComponent) {
	    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
	  } else {
	    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
	  }

	  return true;
	}

	function resetHydrationState() {

	  hydrationParentFiber = null;
	  nextHydratableInstance = null;
	  isHydrating = false;
	}

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	var didReceiveUpdate = false;
	var didWarnAboutBadClass;
	var didWarnAboutModulePatternComponent;
	var didWarnAboutContextTypeOnFunctionComponent;
	var didWarnAboutGetDerivedStateOnFunctionComponent;
	var didWarnAboutFunctionRefs;
	var didWarnAboutReassigningProps;
	var didWarnAboutRevealOrder;
	var didWarnAboutTailOptions;

	{
	  didWarnAboutBadClass = {};
	  didWarnAboutModulePatternComponent = {};
	  didWarnAboutContextTypeOnFunctionComponent = {};
	  didWarnAboutGetDerivedStateOnFunctionComponent = {};
	  didWarnAboutFunctionRefs = {};
	  didWarnAboutReassigningProps = false;
	  didWarnAboutRevealOrder = {};
	  didWarnAboutTailOptions = {};
	}

	function reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime) {
	  if (current === null) {
	    // If this is a fresh new component that hasn't been rendered yet, we
	    // won't update its child set by applying minimal side-effects. Instead,
	    // we will add them all to the child before it gets rendered. That means
	    // we can optimize this reconciliation pass by not tracking side-effects.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    // If the current child is the same as the work in progress, it means that
	    // we haven't yet started any work on these children. Therefore, we use
	    // the clone algorithm to create a copy of all the current children.
	    // If we had any progressed work already, that is invalid at this point so
	    // let's throw it out.
	    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
	  }
	}

	function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime) {
	  // This function is fork of reconcileChildren. It's used in cases where we
	  // want to reconcile without matching against the existing set. This has the
	  // effect of all current children being unmounted; even if the type and key
	  // are the same, the old child is unmounted and a new child is created.
	  //
	  // To do this, we're going to go through the reconcile algorithm twice. In
	  // the first pass, we schedule a deletion for all the current children by
	  // passing null.
	  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
	  // pass null in place of where we usually pass the current child set. This has
	  // the effect of remounting all children regardless of whether their
	  // identities match.

	  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	}

	function updateForwardRef(current, workInProgress, Component, nextProps, renderExpirationTime) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens after the first render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  }

	  var render = Component.render;
	  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

	  var nextChildren;
	  prepareToReadContext(workInProgress, renderExpirationTime);

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);

	    if ( workInProgress.mode & StrictMode) {
	      // Only double-render components with Hooks
	      if (workInProgress.memoizedState !== null) {
	        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);
	      }
	    }

	    setIsRendering(false);
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderExpirationTime);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
	  if (current === null) {
	    var type = Component.type;

	    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
	    Component.defaultProps === undefined) {
	      var resolvedType = type;

	      {
	        resolvedType = resolveFunctionForHotReloading(type);
	      } // If this is a plain function component without default props,
	      // and with only the default shallow comparison, we upgrade it
	      // to a SimpleMemoComponent to allow fast path updates.


	      workInProgress.tag = SimpleMemoComponent;
	      workInProgress.type = resolvedType;

	      {
	        validateFunctionComponentInDev(workInProgress, type);
	      }

	      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
	    }

	    {
	      var innerPropTypes = type.propTypes;

	      if (innerPropTypes) {
	        // Inner memo component props aren't currently validated in createElement.
	        // We could move it there, but we'd still need this for lazy code path.
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(type), getCurrentFiberStackInDev);
	      }
	    }

	    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
	    child.ref = workInProgress.ref;
	    child.return = workInProgress;
	    workInProgress.child = child;
	    return child;
	  }

	  {
	    var _type = Component.type;
	    var _innerPropTypes = _type.propTypes;

	    if (_innerPropTypes) {
	      // Inner memo component props aren't currently validated in createElement.
	      // We could move it there, but we'd still need this for lazy code path.
	      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
	      'prop', getComponentName(_type), getCurrentFiberStackInDev);
	    }
	  }

	  var currentChild = current.child; // This is always exactly one child

	  if (updateExpirationTime < renderExpirationTime) {
	    // This will be the props with resolved defaultProps,
	    // unlike current.memoizedProps which will be the unresolved ones.
	    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

	    var compare = Component.compare;
	    compare = compare !== null ? compare : shallowEqual;

	    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	    }
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  var newChild = createWorkInProgress(currentChild, nextProps);
	  newChild.ref = workInProgress.ref;
	  newChild.return = workInProgress;
	  workInProgress.child = newChild;
	  return newChild;
	}

	function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens when the inner render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var outerMemoType = workInProgress.elementType;

	      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
	        // We warn when you define propTypes on lazy()
	        // so let's just skip over it to find memo() outer wrapper.
	        // Inner props for memo are validated later.
	        outerMemoType = refineResolvedLazyComponent(outerMemoType);
	      }

	      var outerPropTypes = outerMemoType && outerMemoType.propTypes;

	      if (outerPropTypes) {
	        checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
	        'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
	      } // Inner propTypes will be validated in the function component path.

	    }
	  }

	  if (current !== null) {
	    var prevProps = current.memoizedProps;

	    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
	     workInProgress.type === current.type )) {
	      didReceiveUpdate = false;

	      if (updateExpirationTime < renderExpirationTime) {
	        // The pending update priority was cleared at the beginning of
	        // beginWork. We're about to bail out, but there might be additional
	        // updates at a lower priority. Usually, the priority level of the
	        // remaining updates is accumlated during the evaluation of the
	        // component (i.e. when processing the update queue). But since since
	        // we're bailing out early *without* evaluating the component, we need
	        // to account for it here, too. Reset to the value of the current fiber.
	        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
	        // because a MemoComponent fiber does not have hooks or an update queue;
	        // rather, it wraps around an inner component, which may or may not
	        // contains hooks.
	        // TODO: Move the reset at in beginWork out of the common path so that
	        // this is no longer necessary.
	        workInProgress.expirationTime = current.expirationTime;
	        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	      }
	    }
	  }

	  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime);
	}

	function updateFragment(current, workInProgress, renderExpirationTime) {
	  var nextChildren = workInProgress.pendingProps;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateMode(current, workInProgress, renderExpirationTime) {
	  var nextChildren = workInProgress.pendingProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateProfiler(current, workInProgress, renderExpirationTime) {
	  {
	    workInProgress.effectTag |= Update;
	  }

	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function markRef(current, workInProgress) {
	  var ref = workInProgress.ref;

	  if (current === null && ref !== null || current !== null && current.ref !== ref) {
	    // Schedule a Ref effect
	    workInProgress.effectTag |= Ref;
	  }
	}

	function updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  }

	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  var nextChildren;
	  prepareToReadContext(workInProgress, renderExpirationTime);

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);

	    if ( workInProgress.mode & StrictMode) {
	      // Only double-render components with Hooks
	      if (workInProgress.memoizedState !== null) {
	        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
	      }
	    }

	    setIsRendering(false);
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderExpirationTime);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateClassComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  } // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.


	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var instance = workInProgress.stateNode;
	  var shouldUpdate;

	  if (instance === null) {
	    if (current !== null) {
	      // A class component without an instance only mounts if it suspended
	      // inside a non-concurrent tree, in an inconsistent state. We want to
	      // treat it like a new mount, even though an empty version of it already
	      // committed. Disconnect the alternate pointers.
	      current.alternate = null;
	      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	      workInProgress.effectTag |= Placement;
	    } // In the initial pass we might need to construct the instance.


	    constructClassInstance(workInProgress, Component, nextProps);
	    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	    shouldUpdate = true;
	  } else if (current === null) {
	    // In a resume, we'll already have an instance we can reuse.
	    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	  } else {
	    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderExpirationTime);
	  }

	  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);

	  {
	    var inst = workInProgress.stateNode;

	    if (inst.props !== nextProps) {
	      if (!didWarnAboutReassigningProps) {
	        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
	      }

	      didWarnAboutReassigningProps = true;
	    }
	  }

	  return nextUnitOfWork;
	}

	function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
	  // Refs should update even if shouldComponentUpdate returns false
	  markRef(current, workInProgress);
	  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

	  if (!shouldUpdate && !didCaptureError) {
	    // Context providers should defer to sCU for rendering
	    if (hasContext) {
	      invalidateContextProvider(workInProgress, Component, false);
	    }

	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	  }

	  var instance = workInProgress.stateNode; // Rerender

	  ReactCurrentOwner$1.current = workInProgress;
	  var nextChildren;

	  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
	    // If we captured an error, but getDerivedStateFromError is not defined,
	    // unmount all the children. componentDidCatch will schedule an update to
	    // re-render a fallback. This is temporary until we migrate everyone to
	    // the new API.
	    // TODO: Warn in a future release.
	    nextChildren = null;

	    {
	      stopProfilerTimerIfRunning();
	    }
	  } else {
	    {
	      setIsRendering(true);
	      nextChildren = instance.render();

	      if ( workInProgress.mode & StrictMode) {
	        instance.render();
	      }

	      setIsRendering(false);
	    }
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;

	  if (current !== null && didCaptureError) {
	    // If we're recovering from an error, reconcile without reusing any of
	    // the existing children. Conceptually, the normal children and the children
	    // that are shown on error are two different sets, so we shouldn't reuse
	    // normal children even if their identities match.
	    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  } // Memoize state using the values we just used to render.
	  // TODO: Restructure so we never read values from the instance.


	  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

	  if (hasContext) {
	    invalidateContextProvider(workInProgress, Component, true);
	  }

	  return workInProgress.child;
	}

	function pushHostRootContext(workInProgress) {
	  var root = workInProgress.stateNode;

	  if (root.pendingContext) {
	    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
	  } else if (root.context) {
	    // Should always be set
	    pushTopLevelContextObject(workInProgress, root.context, false);
	  }

	  pushHostContainer(workInProgress, root.containerInfo);
	}

	function updateHostRoot(current, workInProgress, renderExpirationTime) {
	  pushHostRootContext(workInProgress);
	  var updateQueue = workInProgress.updateQueue;

	  if (!(current !== null && updateQueue !== null)) {
	    {
	      throw Error( "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  var nextProps = workInProgress.pendingProps;
	  var prevState = workInProgress.memoizedState;
	  var prevChildren = prevState !== null ? prevState.element : null;
	  cloneUpdateQueue(current, workInProgress);
	  processUpdateQueue(workInProgress, nextProps, null, renderExpirationTime);
	  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
	  // being called "element".

	  var nextChildren = nextState.element;

	  if (nextChildren === prevChildren) {
	    // If the state is the same as before, that's a bailout because we had
	    // no work that expires at this time.
	    resetHydrationState();
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	  }

	  var root = workInProgress.stateNode;

	  if (root.hydrate && enterHydrationState(workInProgress)) {
	    // If we don't have any current children this might be the first pass.
	    // We always try to hydrate. If this isn't a hydration pass there won't
	    // be any children to hydrate which is effectively the same thing as
	    // not hydrating.
	    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	    workInProgress.child = child;
	    var node = child;

	    while (node) {
	      // Mark each child as hydrating. This is a fast path to know whether this
	      // tree is part of a hydrating tree. This is used to determine if a child
	      // node has fully mounted yet, and for scheduling event replaying.
	      // Conceptually this is similar to Placement in that a new subtree is
	      // inserted into the React tree here. It just happens to not need DOM
	      // mutations because it already exists.
	      node.effectTag = node.effectTag & ~Placement | Hydrating;
	      node = node.sibling;
	    }
	  } else {
	    // Otherwise reset hydration state in case we aborted and resumed another
	    // root.
	    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	    resetHydrationState();
	  }

	  return workInProgress.child;
	}

	function updateHostComponent(current, workInProgress, renderExpirationTime) {
	  pushHostContext(workInProgress);

	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }

	  var type = workInProgress.type;
	  var nextProps = workInProgress.pendingProps;
	  var prevProps = current !== null ? current.memoizedProps : null;
	  var nextChildren = nextProps.children;
	  var isDirectTextChild = shouldSetTextContent(type, nextProps);

	  if (isDirectTextChild) {
	    // We special case a direct text child of a host node. This is a common
	    // case. We won't handle it as a reified child. We will instead handle
	    // this in the host environment that also has access to this prop. That
	    // avoids allocating another HostText fiber and traversing it.
	    nextChildren = null;
	  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
	    // If we're switching from a direct text child to a normal child, or to
	    // empty, we need to schedule the text content to be reset.
	    workInProgress.effectTag |= ContentReset;
	  }

	  markRef(current, workInProgress); // Check the host config to see if the children are offscreen/hidden.

	  if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
	    {
	      markSpawnedWork(Never);
	    } // Schedule this fiber to re-render at offscreen priority. Then bailout.


	    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
	    return null;
	  }

	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateHostText(current, workInProgress) {
	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  } // Nothing to do here. This is terminal. We'll do the completion step
	  // immediately after.


	  return null;
	}

	function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
	  if (_current !== null) {
	    // A lazy component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.effectTag |= Placement;
	  }

	  var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
	  // Cancel and resume right after we know the tag.

	  cancelWorkTimer(workInProgress);
	  var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

	  workInProgress.type = Component;
	  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
	  startWorkTimer(workInProgress);
	  var resolvedProps = resolveDefaultProps(Component, props);
	  var child;

	  switch (resolvedTag) {
	    case FunctionComponent:
	      {
	        {
	          validateFunctionComponentInDev(workInProgress, Component);
	          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
	        }

	        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        return child;
	      }

	    case ClassComponent:
	      {
	        {
	          workInProgress.type = Component = resolveClassForHotReloading(Component);
	        }

	        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        return child;
	      }

	    case ForwardRef:
	      {
	        {
	          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
	        }

	        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        return child;
	      }

	    case MemoComponent:
	      {
	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = Component.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
	              'prop', getComponentName(Component), getCurrentFiberStackInDev);
	            }
	          }
	        }

	        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
	        updateExpirationTime, renderExpirationTime);
	        return child;
	      }
	  }

	  var hint = '';

	  {
	    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
	      hint = ' Did you wrap a component in React.lazy() more than once?';
	    }
	  } // This message intentionally doesn't mention ForwardRef or MemoComponent
	  // because the fact that it's a separate type of work is an
	  // implementation detail.


	  {
	    {
	      throw Error( "Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint );
	    }
	  }
	}

	function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
	  if (_current !== null) {
	    // An incomplete component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.effectTag |= Placement;
	  } // Promote the fiber to a class and try rendering again.


	  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.

	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  constructClassInstance(workInProgress, Component, nextProps);
	  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
	}

	function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
	  if (_current !== null) {
	    // An indeterminate component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.effectTag |= Placement;
	  }

	  var props = workInProgress.pendingProps;
	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var value;

	  {
	    if (Component.prototype && typeof Component.prototype.render === 'function') {
	      var componentName = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutBadClass[componentName]) {
	        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

	        didWarnAboutBadClass[componentName] = true;
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
	    }

	    setIsRendering(true);
	    ReactCurrentOwner$1.current = workInProgress;
	    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
	    setIsRendering(false);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;

	  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	    {
	      var _componentName = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutModulePatternComponent[_componentName]) {
	        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

	        didWarnAboutModulePatternComponent[_componentName] = true;
	      }
	    } // Proceed under the assumption that this is a class instance


	    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
	    // During mounting we don't know the child context yet as the instance doesn't exist.
	    // We will invalidate the child context in finishClassComponent() right after rendering.

	    var hasContext = false;

	    if (isContextProvider(Component)) {
	      hasContext = true;
	      pushContextProvider(workInProgress);
	    } else {
	      hasContext = false;
	    }

	    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
	    initializeUpdateQueue(workInProgress);
	    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

	    if (typeof getDerivedStateFromProps === 'function') {
	      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
	    }

	    adoptClassInstance(workInProgress, value);
	    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
	    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
	  } else {
	    // Proceed under the assumption that this is a function component
	    workInProgress.tag = FunctionComponent;

	    {

	      if ( workInProgress.mode & StrictMode) {
	        // Only double-render components with Hooks
	        if (workInProgress.memoizedState !== null) {
	          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
	        }
	      }
	    }

	    reconcileChildren(null, workInProgress, value, renderExpirationTime);

	    {
	      validateFunctionComponentInDev(workInProgress, Component);
	    }

	    return workInProgress.child;
	  }
	}

	function validateFunctionComponentInDev(workInProgress, Component) {
	  {
	    if (Component) {
	      if (Component.childContextTypes) {
	        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
	      }
	    }

	    if (workInProgress.ref !== null) {
	      var info = '';
	      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	      if (ownerName) {
	        info += '\n\nCheck the render method of `' + ownerName + '`.';
	      }

	      var warningKey = ownerName || workInProgress._debugID || '';
	      var debugSource = workInProgress._debugSource;

	      if (debugSource) {
	        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
	      }

	      if (!didWarnAboutFunctionRefs[warningKey]) {
	        didWarnAboutFunctionRefs[warningKey] = true;

	        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
	      }
	    }

	    if (typeof Component.getDerivedStateFromProps === 'function') {
	      var _componentName2 = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
	        error('%s: Function components do not support getDerivedStateFromProps.', _componentName2);

	        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
	      }
	    }

	    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
	      var _componentName3 = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
	        error('%s: Function components do not support contextType.', _componentName3);

	        didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
	      }
	    }
	  }
	}

	var SUSPENDED_MARKER = {
	  dehydrated: null,
	  retryTime: NoWork
	};

	function shouldRemainOnFallback(suspenseContext, current, workInProgress) {
	  // If the context is telling us that we should show a fallback, and we're not
	  // already showing content, then we should show the fallback instead.
	  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current === null || current.memoizedState !== null);
	}

	function updateSuspenseComponent(current, workInProgress, renderExpirationTime) {
	  var mode = workInProgress.mode;
	  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

	  {
	    if (shouldSuspend(workInProgress)) {
	      workInProgress.effectTag |= DidCapture;
	    }
	  }

	  var suspenseContext = suspenseStackCursor.current;
	  var nextDidTimeout = false;
	  var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;

	  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
	    // Something in this boundary's subtree already suspended. Switch to
	    // rendering the fallback children.
	    nextDidTimeout = true;
	    workInProgress.effectTag &= ~DidCapture;
	  } else {
	    // Attempting the main content
	    if (current === null || current.memoizedState !== null) {
	      // This is a new mount or this boundary is already showing a fallback state.
	      // Mark this subtree context as having at least one invisible parent that could
	      // handle the fallback state.
	      // Boundaries without fallbacks or should be avoided are not considered since
	      // they cannot handle preferred fallback states.
	      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
	        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
	      }
	    }
	  }

	  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  pushSuspenseContext(workInProgress, suspenseContext); // This next part is a bit confusing. If the children timeout, we switch to
	  // showing the fallback children in place of the "primary" children.
	  // However, we don't want to delete the primary children because then their
	  // state will be lost (both the React state and the host state, e.g.
	  // uncontrolled form inputs). Instead we keep them mounted and hide them.
	  // Both the fallback children AND the primary children are rendered at the
	  // same time. Once the primary children are un-suspended, we can delete
	  // the fallback children — don't need to preserve their state.
	  //
	  // The two sets of children are siblings in the host environment, but
	  // semantically, for purposes of reconciliation, they are two separate sets.
	  // So we store them using two fragment fibers.
	  //
	  // However, we want to avoid allocating extra fibers for every placeholder.
	  // They're only necessary when the children time out, because that's the
	  // only time when both sets are mounted.
	  //
	  // So, the extra fragment fibers are only used if the children time out.
	  // Otherwise, we render the primary children directly. This requires some
	  // custom reconciliation logic to preserve the state of the primary
	  // children. It's essentially a very basic form of re-parenting.

	  if (current === null) {
	    // If we're currently hydrating, try to hydrate this boundary.
	    // But only if this has a fallback.
	    if (nextProps.fallback !== undefined) {
	      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
	    } // This is the initial mount. This branch is pretty simple because there's
	    // no previous state that needs to be preserved.


	    if (nextDidTimeout) {
	      // Mount separate fragments for primary and fallback children.
	      var nextFallbackChildren = nextProps.fallback;
	      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
	      primaryChildFragment.return = workInProgress;

	      if ((workInProgress.mode & BlockingMode) === NoMode) {
	        // Outside of blocking mode, we commit the effects from the
	        // partially completed, timed-out tree, too.
	        var progressedState = workInProgress.memoizedState;
	        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
	        primaryChildFragment.child = progressedPrimaryChild;
	        var progressedChild = progressedPrimaryChild;

	        while (progressedChild !== null) {
	          progressedChild.return = primaryChildFragment;
	          progressedChild = progressedChild.sibling;
	        }
	      }

	      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
	      fallbackChildFragment.return = workInProgress;
	      primaryChildFragment.sibling = fallbackChildFragment; // Skip the primary children, and continue working on the
	      // fallback children.

	      workInProgress.memoizedState = SUSPENDED_MARKER;
	      workInProgress.child = primaryChildFragment;
	      return fallbackChildFragment;
	    } else {
	      // Mount the primary children without an intermediate fragment fiber.
	      var nextPrimaryChildren = nextProps.children;
	      workInProgress.memoizedState = null;
	      return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
	    }
	  } else {
	    // This is an update. This branch is more complicated because we need to
	    // ensure the state of the primary children is preserved.
	    var prevState = current.memoizedState;

	    if (prevState !== null) {
	      // wrapped in a fragment fiber.


	      var currentPrimaryChildFragment = current.child;
	      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

	      if (nextDidTimeout) {
	        // Still timed out. Reuse the current primary children by cloning
	        // its fragment. We're going to skip over these entirely.
	        var _nextFallbackChildren2 = nextProps.fallback;

	        var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);

	        _primaryChildFragment2.return = workInProgress;

	        if ((workInProgress.mode & BlockingMode) === NoMode) {
	          // Outside of blocking mode, we commit the effects from the
	          // partially completed, timed-out tree, too.
	          var _progressedState = workInProgress.memoizedState;

	          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

	          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
	            _primaryChildFragment2.child = _progressedPrimaryChild;
	            var _progressedChild2 = _progressedPrimaryChild;

	            while (_progressedChild2 !== null) {
	              _progressedChild2.return = _primaryChildFragment2;
	              _progressedChild2 = _progressedChild2.sibling;
	            }
	          }
	        } // Because primaryChildFragment is a new fiber that we're inserting as the
	        // parent of a new tree, we need to set its treeBaseDuration.


	        if ( workInProgress.mode & ProfileMode) {
	          // treeBaseDuration is the sum of all the child tree base durations.
	          var _treeBaseDuration = 0;
	          var _hiddenChild = _primaryChildFragment2.child;

	          while (_hiddenChild !== null) {
	            _treeBaseDuration += _hiddenChild.treeBaseDuration;
	            _hiddenChild = _hiddenChild.sibling;
	          }

	          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
	        } // Clone the fallback child fragment, too. These we'll continue
	        // working on.


	        var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);

	        _fallbackChildFragment2.return = workInProgress;
	        _primaryChildFragment2.sibling = _fallbackChildFragment2;
	        _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
	        // fallback children.

	        workInProgress.memoizedState = SUSPENDED_MARKER;
	        workInProgress.child = _primaryChildFragment2;
	        return _fallbackChildFragment2;
	      } else {
	        // No longer suspended. Switch back to showing the primary children,
	        // and remove the intermediate fragment fiber.
	        var _nextPrimaryChildren = nextProps.children;
	        var currentPrimaryChild = currentPrimaryChildFragment.child;
	        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
	        // children. Wait until the complete phase, after we've confirmed the
	        // fallback is no longer needed.
	        // TODO: Would it be better to store the fallback fragment on
	        // the stateNode?
	        // Continue rendering the children, like we normally do.

	        workInProgress.memoizedState = null;
	        return workInProgress.child = primaryChild;
	      }
	    } else {
	      // The current tree has not already timed out. That means the primary
	      // children are not wrapped in a fragment fiber.
	      var _currentPrimaryChild = current.child;

	      if (nextDidTimeout) {
	        // Timed out. Wrap the children in a fragment fiber to keep them
	        // separate from the fallback children.
	        var _nextFallbackChildren3 = nextProps.fallback;

	        var _primaryChildFragment3 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
	        // going to render this fragment.
	        null, mode, NoWork, null);

	        _primaryChildFragment3.return = workInProgress;
	        _primaryChildFragment3.child = _currentPrimaryChild;

	        if (_currentPrimaryChild !== null) {
	          _currentPrimaryChild.return = _primaryChildFragment3;
	        } // Even though we're creating a new fiber, there are no new children,
	        // because we're reusing an already mounted tree. So we don't need to
	        // schedule a placement.
	        // primaryChildFragment.effectTag |= Placement;


	        if ((workInProgress.mode & BlockingMode) === NoMode) {
	          // Outside of blocking mode, we commit the effects from the
	          // partially completed, timed-out tree, too.
	          var _progressedState2 = workInProgress.memoizedState;

	          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

	          _primaryChildFragment3.child = _progressedPrimaryChild2;
	          var _progressedChild3 = _progressedPrimaryChild2;

	          while (_progressedChild3 !== null) {
	            _progressedChild3.return = _primaryChildFragment3;
	            _progressedChild3 = _progressedChild3.sibling;
	          }
	        } // Because primaryChildFragment is a new fiber that we're inserting as the
	        // parent of a new tree, we need to set its treeBaseDuration.


	        if ( workInProgress.mode & ProfileMode) {
	          // treeBaseDuration is the sum of all the child tree base durations.
	          var _treeBaseDuration2 = 0;
	          var _hiddenChild2 = _primaryChildFragment3.child;

	          while (_hiddenChild2 !== null) {
	            _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
	            _hiddenChild2 = _hiddenChild2.sibling;
	          }

	          _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
	        } // Create a fragment from the fallback children, too.


	        var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);

	        _fallbackChildFragment3.return = workInProgress;
	        _primaryChildFragment3.sibling = _fallbackChildFragment3;
	        _fallbackChildFragment3.effectTag |= Placement;
	        _primaryChildFragment3.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
	        // fallback children.

	        workInProgress.memoizedState = SUSPENDED_MARKER;
	        workInProgress.child = _primaryChildFragment3;
	        return _fallbackChildFragment3;
	      } else {
	        // Still haven't timed out. Continue rendering the children, like we
	        // normally do.
	        workInProgress.memoizedState = null;
	        var _nextPrimaryChildren2 = nextProps.children;
	        return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
	      }
	    }
	  }
	}

	function scheduleWorkOnFiber(fiber, renderExpirationTime) {
	  if (fiber.expirationTime < renderExpirationTime) {
	    fiber.expirationTime = renderExpirationTime;
	  }

	  var alternate = fiber.alternate;

	  if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
	    alternate.expirationTime = renderExpirationTime;
	  }

	  scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
	}

	function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
	  // Mark any Suspense boundaries with fallbacks as having work to do.
	  // If they were previously forced into fallbacks, they may now be able
	  // to unblock.
	  var node = firstChild;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        scheduleWorkOnFiber(node, renderExpirationTime);
	      }
	    } else if (node.tag === SuspenseListComponent) {
	      // If the tail is hidden there might not be an Suspense boundaries
	      // to schedule work on. In this case we have to schedule it on the
	      // list itself.
	      // We don't have to traverse to the children of the list since
	      // the list will propagate the change when it rerenders.
	      scheduleWorkOnFiber(node, renderExpirationTime);
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === workInProgress) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === workInProgress) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function findLastContentRow(firstChild) {
	  // This is going to find the last row among these children that is already
	  // showing content on the screen, as opposed to being in fallback state or
	  // new. If a row has multiple Suspense boundaries, any of them being in the
	  // fallback state, counts as the whole row being in a fallback state.
	  // Note that the "rows" will be workInProgress, but any nested children
	  // will still be current since we haven't rendered them yet. The mounted
	  // order may not be the same as the new order. We use the new order.
	  var row = firstChild;
	  var lastContentRow = null;

	  while (row !== null) {
	    var currentRow = row.alternate; // New rows can't be content rows.

	    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	      lastContentRow = row;
	    }

	    row = row.sibling;
	  }

	  return lastContentRow;
	}

	function validateRevealOrder(revealOrder) {
	  {
	    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
	      didWarnAboutRevealOrder[revealOrder] = true;

	      if (typeof revealOrder === 'string') {
	        switch (revealOrder.toLowerCase()) {
	          case 'together':
	          case 'forwards':
	          case 'backwards':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          case 'forward':
	          case 'backward':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          default:
	            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

	            break;
	        }
	      } else {
	        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
	      }
	    }
	  }
	}

	function validateTailOptions(tailMode, revealOrder) {
	  {
	    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
	      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
	      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
	      }
	    }
	  }
	}

	function validateSuspenseListNestedChild(childSlot, index) {
	  {
	    var isArray = Array.isArray(childSlot);
	    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

	    if (isArray || isIterable) {
	      var type = isArray ? 'array' : 'iterable';

	      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

	      return false;
	    }
	  }

	  return true;
	}

	function validateSuspenseListChildren(children, revealOrder) {
	  {
	    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
	      if (Array.isArray(children)) {
	        for (var i = 0; i < children.length; i++) {
	          if (!validateSuspenseListNestedChild(children[i], i)) {
	            return;
	          }
	        }
	      } else {
	        var iteratorFn = getIteratorFn(children);

	        if (typeof iteratorFn === 'function') {
	          var childrenIterator = iteratorFn.call(children);

	          if (childrenIterator) {
	            var step = childrenIterator.next();
	            var _i = 0;

	            for (; !step.done; step = childrenIterator.next()) {
	              if (!validateSuspenseListNestedChild(step.value, _i)) {
	                return;
	              }

	              _i++;
	            }
	          }
	        } else {
	          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
	        }
	      }
	    }
	  }
	}

	function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
	  var renderState = workInProgress.memoizedState;

	  if (renderState === null) {
	    workInProgress.memoizedState = {
	      isBackwards: isBackwards,
	      rendering: null,
	      renderingStartTime: 0,
	      last: lastContentRow,
	      tail: tail,
	      tailExpiration: 0,
	      tailMode: tailMode,
	      lastEffect: lastEffectBeforeRendering
	    };
	  } else {
	    // We can reuse the existing object from previous renders.
	    renderState.isBackwards = isBackwards;
	    renderState.rendering = null;
	    renderState.renderingStartTime = 0;
	    renderState.last = lastContentRow;
	    renderState.tail = tail;
	    renderState.tailExpiration = 0;
	    renderState.tailMode = tailMode;
	    renderState.lastEffect = lastEffectBeforeRendering;
	  }
	} // This can end up rendering this component multiple passes.
	// The first pass splits the children fibers into two sets. A head and tail.
	// We first render the head. If anything is in fallback state, we do another
	// pass through beginWork to rerender all children (including the tail) with
	// the force suspend context. If the first render didn't have anything in
	// in fallback state. Then we render each row in the tail one-by-one.
	// That happens in the completeWork phase without going back to beginWork.


	function updateSuspenseListComponent(current, workInProgress, renderExpirationTime) {
	  var nextProps = workInProgress.pendingProps;
	  var revealOrder = nextProps.revealOrder;
	  var tailMode = nextProps.tail;
	  var newChildren = nextProps.children;
	  validateRevealOrder(revealOrder);
	  validateTailOptions(tailMode, revealOrder);
	  validateSuspenseListChildren(newChildren, revealOrder);
	  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
	  var suspenseContext = suspenseStackCursor.current;
	  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

	  if (shouldForceFallback) {
	    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	    workInProgress.effectTag |= DidCapture;
	  } else {
	    var didSuspendBefore = current !== null && (current.effectTag & DidCapture) !== NoEffect;

	    if (didSuspendBefore) {
	      // If we previously forced a fallback, we need to schedule work
	      // on any nested boundaries to let them know to try to render
	      // again. This is the same as context updating.
	      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
	    }

	    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  }

	  pushSuspenseContext(workInProgress, suspenseContext);

	  if ((workInProgress.mode & BlockingMode) === NoMode) {
	    // Outside of blocking mode, SuspenseList doesn't work so we just
	    // use make it a noop by treating it as the default revealOrder.
	    workInProgress.memoizedState = null;
	  } else {
	    switch (revealOrder) {
	      case 'forwards':
	        {
	          var lastContentRow = findLastContentRow(workInProgress.child);
	          var tail;

	          if (lastContentRow === null) {
	            // The whole list is part of the tail.
	            // TODO: We could fast path by just rendering the tail now.
	            tail = workInProgress.child;
	            workInProgress.child = null;
	          } else {
	            // Disconnect the tail rows after the content row.
	            // We're going to render them separately later.
	            tail = lastContentRow.sibling;
	            lastContentRow.sibling = null;
	          }

	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          tail, lastContentRow, tailMode, workInProgress.lastEffect);
	          break;
	        }

	      case 'backwards':
	        {
	          // We're going to find the first row that has existing content.
	          // At the same time we're going to reverse the list of everything
	          // we pass in the meantime. That's going to be our tail in reverse
	          // order.
	          var _tail = null;
	          var row = workInProgress.child;
	          workInProgress.child = null;

	          while (row !== null) {
	            var currentRow = row.alternate; // New rows can't be content rows.

	            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	              // This is the beginning of the main content.
	              workInProgress.child = row;
	              break;
	            }

	            var nextRow = row.sibling;
	            row.sibling = _tail;
	            _tail = row;
	            row = nextRow;
	          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


	          initSuspenseListRenderState(workInProgress, true, // isBackwards
	          _tail, null, // last
	          tailMode, workInProgress.lastEffect);
	          break;
	        }

	      case 'together':
	        {
	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          null, // tail
	          null, // last
	          undefined, workInProgress.lastEffect);
	          break;
	        }

	      default:
	        {
	          // The default reveal order is the same as not having
	          // a boundary.
	          workInProgress.memoizedState = null;
	        }
	    }
	  }

	  return workInProgress.child;
	}

	function updatePortalComponent(current, workInProgress, renderExpirationTime) {
	  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	  var nextChildren = workInProgress.pendingProps;

	  if (current === null) {
	    // Portals are special because we don't append the children during mount
	    // but at commit. Therefore we need to track insertions which the normal
	    // flow doesn't do during mount. This doesn't happen at the root because
	    // the root always starts with a "current" with a null child.
	    // TODO: Consider unifying this with how the root works.
	    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  }

	  return workInProgress.child;
	}

	function updateContextProvider(current, workInProgress, renderExpirationTime) {
	  var providerType = workInProgress.type;
	  var context = providerType._context;
	  var newProps = workInProgress.pendingProps;
	  var oldProps = workInProgress.memoizedProps;
	  var newValue = newProps.value;

	  {
	    var providerPropTypes = workInProgress.type.propTypes;

	    if (providerPropTypes) {
	      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
	    }
	  }

	  pushProvider(workInProgress, newValue);

	  if (oldProps !== null) {
	    var oldValue = oldProps.value;
	    var changedBits = calculateChangedBits(context, newValue, oldValue);

	    if (changedBits === 0) {
	      // No change. Bailout early if children are the same.
	      if (oldProps.children === newProps.children && !hasContextChanged()) {
	        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	      }
	    } else {
	      // The context value changed. Search for matching consumers and schedule
	      // them to update.
	      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
	    }
	  }

	  var newChildren = newProps.children;
	  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	var hasWarnedAboutUsingContextAsConsumer = false;

	function updateContextConsumer(current, workInProgress, renderExpirationTime) {
	  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
	  // DEV mode, we create a separate object for Context.Consumer that acts
	  // like a proxy to Context. This proxy object adds unnecessary code in PROD
	  // so we use the old behaviour (Context.Consumer references Context) to
	  // reduce size and overhead. The separate object references context via
	  // a property called "_context", which also gives us the ability to check
	  // in DEV mode if this property exists or not and warn if it does not.

	  {
	    if (context._context === undefined) {
	      // This may be because it's a Context (rather than a Consumer).
	      // Or it may be because it's older React where they're the same thing.
	      // We only want to warn if we're sure it's a new React.
	      if (context !== context.Consumer) {
	        if (!hasWarnedAboutUsingContextAsConsumer) {
	          hasWarnedAboutUsingContextAsConsumer = true;

	          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	        }
	      }
	    } else {
	      context = context._context;
	    }
	  }

	  var newProps = workInProgress.pendingProps;
	  var render = newProps.children;

	  {
	    if (typeof render !== 'function') {
	      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
	    }
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var newValue = readContext(context, newProps.unstable_observedBits);
	  var newChildren;

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    newChildren = render(newValue);
	    setIsRendering(false);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function markWorkInProgressReceivedUpdate() {
	  didReceiveUpdate = true;
	}

	function bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) {
	  cancelWorkTimer(workInProgress);

	  if (current !== null) {
	    // Reuse previous dependencies
	    workInProgress.dependencies = current.dependencies;
	  }

	  {
	    // Don't update "base" render times for bailouts.
	    stopProfilerTimerIfRunning();
	  }

	  var updateExpirationTime = workInProgress.expirationTime;

	  if (updateExpirationTime !== NoWork) {
	    markUnprocessedUpdateTime(updateExpirationTime);
	  } // Check if the children have any pending work.


	  var childExpirationTime = workInProgress.childExpirationTime;

	  if (childExpirationTime < renderExpirationTime) {
	    // The children don't have any work either. We can skip them.
	    // TODO: Once we add back resuming, we should check if the children are
	    // a work-in-progress set. If so, we need to transfer their effects.
	    return null;
	  } else {
	    // This fiber doesn't have work, but its subtree does. Clone the child
	    // fibers and continue.
	    cloneChildFibers(current, workInProgress);
	    return workInProgress.child;
	  }
	}

	function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
	  {
	    var returnFiber = oldWorkInProgress.return;

	    if (returnFiber === null) {
	      throw new Error('Cannot swap the root fiber.');
	    } // Disconnect from the old current.
	    // It will get deleted.


	    current.alternate = null;
	    oldWorkInProgress.alternate = null; // Connect to the new tree.

	    newWorkInProgress.index = oldWorkInProgress.index;
	    newWorkInProgress.sibling = oldWorkInProgress.sibling;
	    newWorkInProgress.return = oldWorkInProgress.return;
	    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

	    if (oldWorkInProgress === returnFiber.child) {
	      returnFiber.child = newWorkInProgress;
	    } else {
	      var prevSibling = returnFiber.child;

	      if (prevSibling === null) {
	        throw new Error('Expected parent to have a child.');
	      }

	      while (prevSibling.sibling !== oldWorkInProgress) {
	        prevSibling = prevSibling.sibling;

	        if (prevSibling === null) {
	          throw new Error('Expected to find the previous sibling.');
	        }
	      }

	      prevSibling.sibling = newWorkInProgress;
	    } // Delete the old fiber and place the new one.
	    // Since the old fiber is disconnected, we have to schedule it manually.


	    var last = returnFiber.lastEffect;

	    if (last !== null) {
	      last.nextEffect = current;
	      returnFiber.lastEffect = current;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = current;
	    }

	    current.nextEffect = null;
	    current.effectTag = Deletion;
	    newWorkInProgress.effectTag |= Placement; // Restart work from the new fiber.

	    return newWorkInProgress;
	  }
	}

	function beginWork(current, workInProgress, renderExpirationTime) {
	  var updateExpirationTime = workInProgress.expirationTime;

	  {
	    if (workInProgress._debugNeedsRemount && current !== null) {
	      // This will restart the begin phase with a new fiber.
	      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
	    }
	  }

	  if (current !== null) {
	    var oldProps = current.memoizedProps;
	    var newProps = workInProgress.pendingProps;

	    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
	     workInProgress.type !== current.type )) {
	      // If props or context changed, mark the fiber as having performed work.
	      // This may be unset if the props are determined to be equal later (memo).
	      didReceiveUpdate = true;
	    } else if (updateExpirationTime < renderExpirationTime) {
	      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
	      // the begin phase. There's still some bookkeeping we that needs to be done
	      // in this optimized path, mostly pushing stuff onto the stack.

	      switch (workInProgress.tag) {
	        case HostRoot:
	          pushHostRootContext(workInProgress);
	          resetHydrationState();
	          break;

	        case HostComponent:
	          pushHostContext(workInProgress);

	          if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
	            {
	              markSpawnedWork(Never);
	            } // Schedule this fiber to re-render at offscreen priority. Then bailout.


	            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
	            return null;
	          }

	          break;

	        case ClassComponent:
	          {
	            var Component = workInProgress.type;

	            if (isContextProvider(Component)) {
	              pushContextProvider(workInProgress);
	            }

	            break;
	          }

	        case HostPortal:
	          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	          break;

	        case ContextProvider:
	          {
	            var newValue = workInProgress.memoizedProps.value;
	            pushProvider(workInProgress, newValue);
	            break;
	          }

	        case Profiler:
	          {
	            // Profiler should only call onRender when one of its descendants actually rendered.
	            var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

	            if (hasChildWork) {
	              workInProgress.effectTag |= Update;
	            }
	          }

	          break;

	        case SuspenseComponent:
	          {
	            var state = workInProgress.memoizedState;

	            if (state !== null) {
	              // whether to retry the primary children, or to skip over it and
	              // go straight to the fallback. Check the priority of the primary
	              // child fragment.


	              var primaryChildFragment = workInProgress.child;
	              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

	              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
	                // The primary children have pending work. Use the normal path
	                // to attempt to render the primary children again.
	                return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
	              } else {
	                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
	                // priority. Bailout.

	                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);

	                if (child !== null) {
	                  // The fallback children have pending work. Skip over the
	                  // primary children and work on the fallback.
	                  return child.sibling;
	                } else {
	                  return null;
	                }
	              }
	            } else {
	              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
	            }

	            break;
	          }

	        case SuspenseListComponent:
	          {
	            var didSuspendBefore = (current.effectTag & DidCapture) !== NoEffect;

	            var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

	            if (didSuspendBefore) {
	              if (_hasChildWork) {
	                // If something was in fallback state last time, and we have all the
	                // same children then we're still in progressive loading state.
	                // Something might get unblocked by state updates or retries in the
	                // tree which will affect the tail. So we need to use the normal
	                // path to compute the correct tail.
	                return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
	              } // If none of the children had any work, that means that none of
	              // them got retried so they'll still be blocked in the same way
	              // as before. We can fast bail out.


	              workInProgress.effectTag |= DidCapture;
	            } // If nothing suspended before and we're rendering the same children,
	            // then the tail doesn't matter. Anything new that suspends will work
	            // in the "together" mode, so we can continue from the state we had.


	            var renderState = workInProgress.memoizedState;

	            if (renderState !== null) {
	              // Reset to the "together" mode in case we've started a different
	              // update in the past but didn't complete it.
	              renderState.rendering = null;
	              renderState.tail = null;
	            }

	            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

	            if (_hasChildWork) {
	              break;
	            } else {
	              // If none of the children had any work, that means that none of
	              // them got retried so they'll still be blocked in the same way
	              // as before. We can fast bail out.
	              return null;
	            }
	          }
	      }

	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	    } else {
	      // An update was scheduled on this fiber, but there are no new props
	      // nor legacy context. Set this to false. If an update queue or context
	      // consumer produces a changed value, it will set this to true. Otherwise,
	      // the component will assume the children have not changed and bail out.
	      didReceiveUpdate = false;
	    }
	  } else {
	    didReceiveUpdate = false;
	  } // Before entering the begin phase, clear pending update priority.
	  // TODO: This assumes that we're about to evaluate the component and process
	  // the update queue. However, there's an exception: SimpleMemoComponent
	  // sometimes bails out later in the begin phase. This indicates that we should
	  // move this assignment out of the common path and into each branch.


	  workInProgress.expirationTime = NoWork;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      {
	        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderExpirationTime);
	      }

	    case LazyComponent:
	      {
	        var elementType = workInProgress.elementType;
	        return mountLazyComponent(current, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
	      }

	    case FunctionComponent:
	      {
	        var _Component = workInProgress.type;
	        var unresolvedProps = workInProgress.pendingProps;
	        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
	        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderExpirationTime);
	      }

	    case ClassComponent:
	      {
	        var _Component2 = workInProgress.type;
	        var _unresolvedProps = workInProgress.pendingProps;

	        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

	        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
	      }

	    case HostRoot:
	      return updateHostRoot(current, workInProgress, renderExpirationTime);

	    case HostComponent:
	      return updateHostComponent(current, workInProgress, renderExpirationTime);

	    case HostText:
	      return updateHostText(current, workInProgress);

	    case SuspenseComponent:
	      return updateSuspenseComponent(current, workInProgress, renderExpirationTime);

	    case HostPortal:
	      return updatePortalComponent(current, workInProgress, renderExpirationTime);

	    case ForwardRef:
	      {
	        var type = workInProgress.type;
	        var _unresolvedProps2 = workInProgress.pendingProps;

	        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

	        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderExpirationTime);
	      }

	    case Fragment:
	      return updateFragment(current, workInProgress, renderExpirationTime);

	    case Mode:
	      return updateMode(current, workInProgress, renderExpirationTime);

	    case Profiler:
	      return updateProfiler(current, workInProgress, renderExpirationTime);

	    case ContextProvider:
	      return updateContextProvider(current, workInProgress, renderExpirationTime);

	    case ContextConsumer:
	      return updateContextConsumer(current, workInProgress, renderExpirationTime);

	    case MemoComponent:
	      {
	        var _type2 = workInProgress.type;
	        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

	        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = _type2.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
	              'prop', getComponentName(_type2), getCurrentFiberStackInDev);
	            }
	          }
	        }

	        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
	        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
	      }

	    case SimpleMemoComponent:
	      {
	        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
	      }

	    case IncompleteClassComponent:
	      {
	        var _Component3 = workInProgress.type;
	        var _unresolvedProps4 = workInProgress.pendingProps;

	        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

	        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
	      }

	    case SuspenseListComponent:
	      {
	        return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
	      }
	  }

	  {
	    {
	      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function markUpdate(workInProgress) {
	  // Tag the fiber with an update effect. This turns a Placement into
	  // a PlacementAndUpdate.
	  workInProgress.effectTag |= Update;
	}

	function markRef$1(workInProgress) {
	  workInProgress.effectTag |= Ref;
	}

	var appendAllChildren;
	var updateHostContainer;
	var updateHostComponent$1;
	var updateHostText$1;

	{
	  // Mutation mode
	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;

	    while (node !== null) {
	      if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node.stateNode);
	      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === workInProgress) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  updateHostContainer = function (workInProgress) {// Noop
	  };

	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    // If we have an alternate, that means this is an update and we need to
	    // schedule a side-effect to do the updates.
	    var oldProps = current.memoizedProps;

	    if (oldProps === newProps) {
	      // In mutation mode, this is sufficient for a bailout because
	      // we won't touch this node even if children changed.
	      return;
	    } // If we get updated because one of our children updated, we don't
	    // have newProps so we'll have to reuse them.
	    // TODO: Split the update API as separate for the props vs. children.
	    // Even better would be if children weren't special cased at all tho.


	    var instance = workInProgress.stateNode;
	    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
	    // component is hitting the resume path. Figure out why. Possibly
	    // related to `hidden`.

	    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

	    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	    // is a new ref we mark this as an update. All the work is done in commitWork.

	    if (updatePayload) {
	      markUpdate(workInProgress);
	    }
	  };

	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    // If the text differs, mark it as an update. All the work in done in commitWork.
	    if (oldText !== newText) {
	      markUpdate(workInProgress);
	    }
	  };
	}

	function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
	  switch (renderState.tailMode) {
	    case 'hidden':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var tailNode = renderState.tail;
	        var lastTailNode = null;

	        while (tailNode !== null) {
	          if (tailNode.alternate !== null) {
	            lastTailNode = tailNode;
	          }

	          tailNode = tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          renderState.tail = null;
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          lastTailNode.sibling = null;
	        }

	        break;
	      }

	    case 'collapsed':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var _tailNode = renderState.tail;
	        var _lastTailNode = null;

	        while (_tailNode !== null) {
	          if (_tailNode.alternate !== null) {
	            _lastTailNode = _tailNode;
	          }

	          _tailNode = _tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (_lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          if (!hasRenderedATailFallback && renderState.tail !== null) {
	            // We suspended during the head. We want to show at least one
	            // row at the tail. So we'll keep on and cut off the rest.
	            renderState.tail.sibling = null;
	          } else {
	            renderState.tail = null;
	          }
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          _lastTailNode.sibling = null;
	        }

	        break;
	      }
	  }
	}

	function completeWork(current, workInProgress, renderExpirationTime) {
	  var newProps = workInProgress.pendingProps;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	    case LazyComponent:
	    case SimpleMemoComponent:
	    case FunctionComponent:
	    case ForwardRef:
	    case Fragment:
	    case Mode:
	    case Profiler:
	    case ContextConsumer:
	    case MemoComponent:
	      return null;

	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        return null;
	      }

	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        var fiberRoot = workInProgress.stateNode;

	        if (fiberRoot.pendingContext) {
	          fiberRoot.context = fiberRoot.pendingContext;
	          fiberRoot.pendingContext = null;
	        }

	        if (current === null || current.child === null) {
	          // If we hydrated, pop so that we can delete any remaining children
	          // that weren't hydrated.
	          var wasHydrated = popHydrationState(workInProgress);

	          if (wasHydrated) {
	            // If we hydrated, then we'll need to schedule an update for
	            // the commit side-effects on the root.
	            markUpdate(workInProgress);
	          }
	        }

	        updateHostContainer(workInProgress);
	        return null;
	      }

	    case HostComponent:
	      {
	        popHostContext(workInProgress);
	        var rootContainerInstance = getRootHostContainer();
	        var type = workInProgress.type;

	        if (current !== null && workInProgress.stateNode != null) {
	          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

	          if (current.ref !== workInProgress.ref) {
	            markRef$1(workInProgress);
	          }
	        } else {
	          if (!newProps) {
	            if (!(workInProgress.stateNode !== null)) {
	              {
	                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
	              }
	            } // This can happen when we abort work.


	            return null;
	          }

	          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
	          // "stack" as the parent. Then append children as we go in beginWork
	          // or completeWork depending on whether we want to add them top->down or
	          // bottom->up. Top->down is faster in IE11.

	          var _wasHydrated = popHydrationState(workInProgress);

	          if (_wasHydrated) {
	            // TODO: Move this and createInstance step into the beginPhase
	            // to consolidate.
	            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
	              // If changes to the hydrated node need to be applied at the
	              // commit-phase we mark this as such.
	              markUpdate(workInProgress);
	            }
	          } else {
	            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
	            appendAllChildren(instance, workInProgress, false, false); // This needs to be set before we mount Flare event listeners

	            workInProgress.stateNode = instance;
	            // (eg DOM renderer supports auto-focus for certain elements).
	            // Make sure such renderers get scheduled for later work.


	            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
	              markUpdate(workInProgress);
	            }
	          }

	          if (workInProgress.ref !== null) {
	            // If there is a ref on a host node we need to schedule a callback
	            markRef$1(workInProgress);
	          }
	        }

	        return null;
	      }

	    case HostText:
	      {
	        var newText = newProps;

	        if (current && workInProgress.stateNode != null) {
	          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
	          // to schedule a side-effect to do the updates.

	          updateHostText$1(current, workInProgress, oldText, newText);
	        } else {
	          if (typeof newText !== 'string') {
	            if (!(workInProgress.stateNode !== null)) {
	              {
	                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
	              }
	            } // This can happen when we abort work.

	          }

	          var _rootContainerInstance = getRootHostContainer();

	          var _currentHostContext = getHostContext();

	          var _wasHydrated2 = popHydrationState(workInProgress);

	          if (_wasHydrated2) {
	            if (prepareToHydrateHostTextInstance(workInProgress)) {
	              markUpdate(workInProgress);
	            }
	          } else {
	            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
	          }
	        }

	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var nextState = workInProgress.memoizedState;

	        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
	          // Something suspended. Re-render with the fallback children.
	          workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

	          return workInProgress;
	        }

	        var nextDidTimeout = nextState !== null;
	        var prevDidTimeout = false;

	        if (current === null) {
	          if (workInProgress.memoizedProps.fallback !== undefined) {
	            popHydrationState(workInProgress);
	          }
	        } else {
	          var prevState = current.memoizedState;
	          prevDidTimeout = prevState !== null;

	          if (!nextDidTimeout && prevState !== null) {
	            // We just switched from the fallback to the normal children.
	            // Delete the fallback.
	            // TODO: Would it be better to store the fallback fragment on
	            // the stateNode during the begin phase?
	            var currentFallbackChild = current.child.sibling;

	            if (currentFallbackChild !== null) {
	              // Deletions go at the beginning of the return fiber's effect list
	              var first = workInProgress.firstEffect;

	              if (first !== null) {
	                workInProgress.firstEffect = currentFallbackChild;
	                currentFallbackChild.nextEffect = first;
	              } else {
	                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
	                currentFallbackChild.nextEffect = null;
	              }

	              currentFallbackChild.effectTag = Deletion;
	            }
	          }
	        }

	        if (nextDidTimeout && !prevDidTimeout) {
	          // If this subtreee is running in blocking mode we can suspend,
	          // otherwise we won't suspend.
	          // TODO: This will still suspend a synchronous tree if anything
	          // in the concurrent tree already suspended during this render.
	          // This is a known bug.
	          if ((workInProgress.mode & BlockingMode) !== NoMode) {
	            // TODO: Move this back to throwException because this is too late
	            // if this is a large tree which is common for initial loads. We
	            // don't know if we should restart a render or not until we get
	            // this marker, and this is too late.
	            // If this render already had a ping or lower pri updates,
	            // and this is the first time we know we're going to suspend we
	            // should be able to immediately restart from within throwException.
	            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

	            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
	              // If this was in an invisible tree or a new render, then showing
	              // this boundary is ok.
	              renderDidSuspend();
	            } else {
	              // Otherwise, we're going to have to hide content so we should
	              // suspend for longer if possible.
	              renderDidSuspendDelayIfPossible();
	            }
	          }
	        }

	        {
	          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
	          if (nextDidTimeout || prevDidTimeout) {
	            // If this boundary just timed out, schedule an effect to attach a
	            // retry listener to the promise. This flag is also used to hide the
	            // primary children. In mutation mode, we also need the flag to
	            // *unhide* children that were previously hidden, so check if this
	            // is currently timed out, too.
	            workInProgress.effectTag |= Update;
	          }
	        }

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      updateHostContainer(workInProgress);
	      return null;

	    case ContextProvider:
	      // Pop provider fiber
	      popProvider(workInProgress);
	      return null;

	    case IncompleteClassComponent:
	      {
	        // Same as class component case. I put it down here so that the tags are
	        // sequential to ensure this switch is compiled to a jump table.
	        var _Component = workInProgress.type;

	        if (isContextProvider(_Component)) {
	          popContext(workInProgress);
	        }

	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var renderState = workInProgress.memoizedState;

	        if (renderState === null) {
	          // We're running in the default, "independent" mode.
	          // We don't do anything in this mode.
	          return null;
	        }

	        var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
	        var renderedTail = renderState.rendering;

	        if (renderedTail === null) {
	          // We just rendered the head.
	          if (!didSuspendAlready) {
	            // This is the first pass. We need to figure out if anything is still
	            // suspended in the rendered set.
	            // If new content unsuspended, but there's still some content that
	            // didn't. Then we need to do a second pass that forces everything
	            // to keep showing their fallbacks.
	            // We might be suspended if something in this render pass suspended, or
	            // something in the previous committed pass suspended. Otherwise,
	            // there's no chance so we can skip the expensive call to
	            // findFirstSuspended.
	            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

	            if (!cannotBeSuspended) {
	              var row = workInProgress.child;

	              while (row !== null) {
	                var suspended = findFirstSuspended(row);

	                if (suspended !== null) {
	                  didSuspendAlready = true;
	                  workInProgress.effectTag |= DidCapture;
	                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
	                  // part of the second pass. In that case nothing will subscribe to
	                  // its thennables. Instead, we'll transfer its thennables to the
	                  // SuspenseList so that it can retry if they resolve.
	                  // There might be multiple of these in the list but since we're
	                  // going to wait for all of them anyway, it doesn't really matter
	                  // which ones gets to ping. In theory we could get clever and keep
	                  // track of how many dependencies remain but it gets tricky because
	                  // in the meantime, we can add/remove/change items and dependencies.
	                  // We might bail out of the loop before finding any but that
	                  // doesn't matter since that means that the other boundaries that
	                  // we did find already has their listeners attached.

	                  var newThennables = suspended.updateQueue;

	                  if (newThennables !== null) {
	                    workInProgress.updateQueue = newThennables;
	                    workInProgress.effectTag |= Update;
	                  } // Rerender the whole list, but this time, we'll force fallbacks
	                  // to stay in place.
	                  // Reset the effect list before doing the second pass since that's now invalid.


	                  if (renderState.lastEffect === null) {
	                    workInProgress.firstEffect = null;
	                  }

	                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

	                  resetChildFibers(workInProgress, renderExpirationTime); // Set up the Suspense Context to force suspense and immediately
	                  // rerender the children.

	                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
	                  return workInProgress.child;
	                }

	                row = row.sibling;
	              }
	            }
	          } else {
	            cutOffTailIfNeeded(renderState, false);
	          } // Next we're going to render the tail.

	        } else {
	          // Append the rendered row to the child list.
	          if (!didSuspendAlready) {
	            var _suspended = findFirstSuspended(renderedTail);

	            if (_suspended !== null) {
	              workInProgress.effectTag |= DidCapture;
	              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
	              // get lost if this row ends up dropped during a second pass.

	              var _newThennables = _suspended.updateQueue;

	              if (_newThennables !== null) {
	                workInProgress.updateQueue = _newThennables;
	                workInProgress.effectTag |= Update;
	              }

	              cutOffTailIfNeeded(renderState, true); // This might have been modified.

	              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate) {
	                // We need to delete the row we just rendered.
	                // Reset the effect list to what it was before we rendered this
	                // child. The nested children have already appended themselves.
	                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

	                if (lastEffect !== null) {
	                  lastEffect.nextEffect = null;
	                } // We're done.


	                return null;
	              }
	            } else if ( // The time it took to render last row is greater than time until
	            // the expiration.
	            now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime > Never) {
	              // We have now passed our CPU deadline and we'll just give up further
	              // attempts to render the main content and only render fallbacks.
	              // The assumption is that this is usually faster.
	              workInProgress.effectTag |= DidCapture;
	              didSuspendAlready = true;
	              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
	              // to get it started back up to attempt the next item. If we can show
	              // them, then they really have the same priority as this render.
	              // So we'll pick it back up the very next render pass once we've had
	              // an opportunity to yield for paint.

	              var nextPriority = renderExpirationTime - 1;
	              workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;

	              {
	                markSpawnedWork(nextPriority);
	              }
	            }
	          }

	          if (renderState.isBackwards) {
	            // The effect list of the backwards tail will have been added
	            // to the end. This breaks the guarantee that life-cycles fire in
	            // sibling order but that isn't a strong guarantee promised by React.
	            // Especially since these might also just pop in during future commits.
	            // Append to the beginning of the list.
	            renderedTail.sibling = workInProgress.child;
	            workInProgress.child = renderedTail;
	          } else {
	            var previousSibling = renderState.last;

	            if (previousSibling !== null) {
	              previousSibling.sibling = renderedTail;
	            } else {
	              workInProgress.child = renderedTail;
	            }

	            renderState.last = renderedTail;
	          }
	        }

	        if (renderState.tail !== null) {
	          // We still have tail rows to render.
	          if (renderState.tailExpiration === 0) {
	            // Heuristic for how long we're willing to spend rendering rows
	            // until we just give up and show what we have so far.
	            var TAIL_EXPIRATION_TIMEOUT_MS = 500;
	            renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS; // TODO: This is meant to mimic the train model or JND but this
	            // is a per component value. It should really be since the start
	            // of the total render or last commit. Consider using something like
	            // globalMostRecentFallbackTime. That doesn't account for being
	            // suspended for part of the time or when it's a new render.
	            // It should probably use a global start time value instead.
	          } // Pop a row.


	          var next = renderState.tail;
	          renderState.rendering = next;
	          renderState.tail = next.sibling;
	          renderState.lastEffect = workInProgress.lastEffect;
	          renderState.renderingStartTime = now();
	          next.sibling = null; // Restore the context.
	          // TODO: We can probably just avoid popping it instead and only
	          // setting it the first time we go from not suspended to suspended.

	          var suspenseContext = suspenseStackCursor.current;

	          if (didSuspendAlready) {
	            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	          } else {
	            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	          }

	          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

	          return next;
	        }

	        return null;
	      }
	  }

	  {
	    {
	      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function unwindWork(workInProgress, renderExpirationTime) {
	  switch (workInProgress.tag) {
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        var effectTag = workInProgress.effectTag;

	        if (effectTag & ShouldCapture) {
	          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
	          return workInProgress;
	        }

	        return null;
	      }

	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        var _effectTag = workInProgress.effectTag;

	        if (!((_effectTag & DidCapture) === NoEffect)) {
	          {
	            throw Error( "The root failed to unmount after an error. This is likely a bug in React. Please file an issue." );
	          }
	        }

	        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
	        return workInProgress;
	      }

	    case HostComponent:
	      {
	        // TODO: popHydrationState
	        popHostContext(workInProgress);
	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);

	        var _effectTag2 = workInProgress.effectTag;

	        if (_effectTag2 & ShouldCapture) {
	          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

	          return workInProgress;
	        }

	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
	        // caught by a nested boundary. If not, it should bubble through.

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      return null;

	    case ContextProvider:
	      popProvider(workInProgress);
	      return null;

	    default:
	      return null;
	  }
	}

	function unwindInterruptedWork(interruptedWork) {
	  switch (interruptedWork.tag) {
	    case ClassComponent:
	      {
	        var childContextTypes = interruptedWork.type.childContextTypes;

	        if (childContextTypes !== null && childContextTypes !== undefined) {
	          popContext(interruptedWork);
	        }

	        break;
	      }

	    case HostRoot:
	      {
	        popHostContainer(interruptedWork);
	        popTopLevelContextObject(interruptedWork);
	        break;
	      }

	    case HostComponent:
	      {
	        popHostContext(interruptedWork);
	        break;
	      }

	    case HostPortal:
	      popHostContainer(interruptedWork);
	      break;

	    case SuspenseComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case SuspenseListComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case ContextProvider:
	      popProvider(interruptedWork);
	      break;
	  }
	}

	function createCapturedValue(value, source) {
	  // If the value is an error, call this function immediately after it is thrown
	  // so the stack is accurate.
	  return {
	    value: value,
	    source: source,
	    stack: getStackByFiberInDevAndProd(source)
	  };
	}

	function logCapturedError(capturedError) {

	  var error = capturedError.error;

	  {
	    var componentName = capturedError.componentName,
	        componentStack = capturedError.componentStack,
	        errorBoundaryName = capturedError.errorBoundaryName,
	        errorBoundaryFound = capturedError.errorBoundaryFound,
	        willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
	    // `preventDefault()` in window `error` handler.
	    // We record this information as an expando on the error.

	    if (error != null && error._suppressLogging) {
	      if (errorBoundaryFound && willRetry) {
	        // The error is recoverable and was silenced.
	        // Ignore it and don't print the stack addendum.
	        // This is handy for testing error boundaries without noise.
	        return;
	      } // The error is fatal. Since the silencing might have
	      // been accidental, we'll surface it anyway.
	      // However, the browser would have silenced the original error
	      // so we'll print it first, and then print the stack addendum.


	      console['error'](error); // Don't transform to our wrapper
	      // For a more detailed description of this block, see:
	      // https://github.com/facebook/react/pull/13384
	    }

	    var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
	    var errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

	    if (errorBoundaryFound && errorBoundaryName) {
	      if (willRetry) {
	        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
	      } else {
	        errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
	      }
	    } else {
	      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
	    }

	    var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
	    // We don't include the original error message and JS stack because the browser
	    // has already printed it. Even if the application swallows the error, it is still
	    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

	    console['error'](combinedMessage); // Don't transform to our wrapper
	  }
	}

	var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

	{
	  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
	}

	var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
	function logError(boundary, errorInfo) {
	  var source = errorInfo.source;
	  var stack = errorInfo.stack;

	  if (stack === null && source !== null) {
	    stack = getStackByFiberInDevAndProd(source);
	  }

	  var capturedError = {
	    componentName: source !== null ? getComponentName(source.type) : null,
	    componentStack: stack !== null ? stack : '',
	    error: errorInfo.value,
	    errorBoundary: null,
	    errorBoundaryName: null,
	    errorBoundaryFound: false,
	    willRetry: false
	  };

	  if (boundary !== null && boundary.tag === ClassComponent) {
	    capturedError.errorBoundary = boundary.stateNode;
	    capturedError.errorBoundaryName = getComponentName(boundary.type);
	    capturedError.errorBoundaryFound = true;
	    capturedError.willRetry = true;
	  }

	  try {
	    logCapturedError(capturedError);
	  } catch (e) {
	    // This method must not throw, or React internal state will get messed up.
	    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
	    // we want to report this error outside of the normal stack as a last resort.
	    // https://github.com/facebook/react/issues/13188
	    setTimeout(function () {
	      throw e;
	    });
	  }
	}

	var callComponentWillUnmountWithTimer = function (current, instance) {
	  startPhaseTimer(current, 'componentWillUnmount');
	  instance.props = current.memoizedProps;
	  instance.state = current.memoizedState;
	  instance.componentWillUnmount();
	  stopPhaseTimer();
	}; // Capture errors so they don't interrupt unmounting.


	function safelyCallComponentWillUnmount(current, instance) {
	  {
	    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

	    if (hasCaughtError()) {
	      var unmountError = clearCaughtError();
	      captureCommitPhaseError(current, unmountError);
	    }
	  }
	}

	function safelyDetachRef(current) {
	  var ref = current.ref;

	  if (ref !== null) {
	    if (typeof ref === 'function') {
	      {
	        invokeGuardedCallback(null, ref, null, null);

	        if (hasCaughtError()) {
	          var refError = clearCaughtError();
	          captureCommitPhaseError(current, refError);
	        }
	      }
	    } else {
	      ref.current = null;
	    }
	  }
	}

	function safelyCallDestroy(current, destroy) {
	  {
	    invokeGuardedCallback(null, destroy, null);

	    if (hasCaughtError()) {
	      var error = clearCaughtError();
	      captureCommitPhaseError(current, error);
	    }
	  }
	}

	function commitBeforeMutationLifeCycles(current, finishedWork) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        return;
	      }

	    case ClassComponent:
	      {
	        if (finishedWork.effectTag & Snapshot) {
	          if (current !== null) {
	            var prevProps = current.memoizedProps;
	            var prevState = current.memoizedState;
	            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
	            var instance = finishedWork.stateNode; // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }
	              }
	            }

	            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

	            {
	              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

	              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
	                didWarnSet.add(finishedWork.type);

	                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
	              }
	            }

	            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
	            stopPhaseTimer();
	          }
	        }

	        return;
	      }

	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case IncompleteClassComponent:
	      // Nothing to do for these component types
	      return;
	  }

	  {
	    {
	      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function commitHookEffectListUnmount(tag, finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & tag) === tag) {
	        // Unmount
	        var destroy = effect.destroy;
	        effect.destroy = undefined;

	        if (destroy !== undefined) {
	          destroy();
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitHookEffectListMount(tag, finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & tag) === tag) {
	        // Mount
	        var create = effect.create;
	        effect.destroy = create();

	        {
	          var destroy = effect.destroy;

	          if (destroy !== undefined && typeof destroy !== 'function') {
	            var addendum = void 0;

	            if (destroy === null) {
	              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
	            } else if (typeof destroy.then === 'function') {
	              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
	            } else {
	              addendum = ' You returned: ' + destroy;
	            }

	            error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
	          }
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitPassiveHookEffects(finishedWork) {
	  if ((finishedWork.effectTag & Passive) !== NoEffect) {
	    switch (finishedWork.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	      case Block:
	        {
	          // TODO (#17945) We should call all passive destroy functions (for all fibers)
	          // before calling any create functions. The current approach only serializes
	          // these for a single fiber.
	          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
	          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
	          break;
	        }
	    }
	  }
	}

	function commitLifeCycles(finishedRoot, current, finishedWork, committedExpirationTime) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        // At this point layout effects have already been destroyed (during mutation phase).
	        // This is done to prevent sibling component effects from interfering with each other,
	        // e.g. a destroy function in one component should never override a ref set
	        // by a create function in another component during the same commit.
	        commitHookEffectListMount(Layout | HasEffect, finishedWork);

	        return;
	      }

	    case ClassComponent:
	      {
	        var instance = finishedWork.stateNode;

	        if (finishedWork.effectTag & Update) {
	          if (current === null) {
	            startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }
	              }
	            }

	            instance.componentDidMount();
	            stopPhaseTimer();
	          } else {
	            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
	            var prevState = current.memoizedState;
	            startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }
	              }
	            }

	            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	            stopPhaseTimer();
	          }
	        }

	        var updateQueue = finishedWork.updateQueue;

	        if (updateQueue !== null) {
	          {
	            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	              if (instance.props !== finishedWork.memoizedProps) {
	                error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	              }

	              if (instance.state !== finishedWork.memoizedState) {
	                error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	              }
	            }
	          } // We could update instance props and state here,
	          // but instead we rely on them being set during last render.
	          // TODO: revisit this when we implement resuming.


	          commitUpdateQueue(finishedWork, updateQueue, instance);
	        }

	        return;
	      }

	    case HostRoot:
	      {
	        var _updateQueue = finishedWork.updateQueue;

	        if (_updateQueue !== null) {
	          var _instance = null;

	          if (finishedWork.child !== null) {
	            switch (finishedWork.child.tag) {
	              case HostComponent:
	                _instance = getPublicInstance(finishedWork.child.stateNode);
	                break;

	              case ClassComponent:
	                _instance = finishedWork.child.stateNode;
	                break;
	            }
	          }

	          commitUpdateQueue(finishedWork, _updateQueue, _instance);
	        }

	        return;
	      }

	    case HostComponent:
	      {
	        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
	        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
	        // These effects should only be committed when components are first mounted,
	        // aka when there is no current/alternate.

	        if (current === null && finishedWork.effectTag & Update) {
	          var type = finishedWork.type;
	          var props = finishedWork.memoizedProps;
	          commitMount(_instance2, type, props);
	        }

	        return;
	      }

	    case HostText:
	      {
	        // We have no life-cycles associated with text.
	        return;
	      }

	    case HostPortal:
	      {
	        // We have no life-cycles associated with portals.
	        return;
	      }

	    case Profiler:
	      {
	        {
	          var onRender = finishedWork.memoizedProps.onRender;

	          if (typeof onRender === 'function') {
	            {
	              onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
	            }
	          }
	        }

	        return;
	      }

	    case SuspenseComponent:
	      {
	        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	        return;
	      }

	    case SuspenseListComponent:
	    case IncompleteClassComponent:
	    case FundamentalComponent:
	    case ScopeComponent:
	      return;
	  }

	  {
	    {
	      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function hideOrUnhideAllChildren(finishedWork, isHidden) {
	  {
	    // We only have the top Fiber that was inserted but we need to recurse down its
	    // children to find all the terminal nodes.
	    var node = finishedWork;

	    while (true) {
	      if (node.tag === HostComponent) {
	        var instance = node.stateNode;

	        if (isHidden) {
	          hideInstance(instance);
	        } else {
	          unhideInstance(node.stateNode, node.memoizedProps);
	        }
	      } else if (node.tag === HostText) {
	        var _instance3 = node.stateNode;

	        if (isHidden) {
	          hideTextInstance(_instance3);
	        } else {
	          unhideTextInstance(_instance3, node.memoizedProps);
	        }
	      } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
	        // Found a nested Suspense component that timed out. Skip over the
	        // primary child fragment, which should remain hidden.
	        var fallbackChildFragment = node.child.sibling;
	        fallbackChildFragment.return = node;
	        node = fallbackChildFragment;
	        continue;
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === finishedWork) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === finishedWork) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }
	}

	function commitAttachRef(finishedWork) {
	  var ref = finishedWork.ref;

	  if (ref !== null) {
	    var instance = finishedWork.stateNode;
	    var instanceToUse;

	    switch (finishedWork.tag) {
	      case HostComponent:
	        instanceToUse = getPublicInstance(instance);
	        break;

	      default:
	        instanceToUse = instance;
	    } // Moved outside to ensure DCE works with this flag

	    if (typeof ref === 'function') {
	      ref(instanceToUse);
	    } else {
	      {
	        if (!ref.hasOwnProperty('current')) {
	          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
	        }
	      }

	      ref.current = instanceToUse;
	    }
	  }
	}

	function commitDetachRef(current) {
	  var currentRef = current.ref;

	  if (currentRef !== null) {
	    if (typeof currentRef === 'function') {
	      currentRef(null);
	    } else {
	      currentRef.current = null;
	    }
	  }
	} // User-originating errors (lifecycles and refs) should not interrupt
	// deletion, so don't let them throw. Host-originating errors should
	// interrupt deletion, so it's okay


	function commitUnmount(finishedRoot, current, renderPriorityLevel) {
	  onCommitUnmount(current);

	  switch (current.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        var updateQueue = current.updateQueue;

	        if (updateQueue !== null) {
	          var lastEffect = updateQueue.lastEffect;

	          if (lastEffect !== null) {
	            var firstEffect = lastEffect.next;

	            {
	              // When the owner fiber is deleted, the destroy function of a passive
	              // effect hook is called during the synchronous commit phase. This is
	              // a concession to implementation complexity. Calling it in the
	              // passive effect phase (like they usually are, when dependencies
	              // change during an update) would require either traversing the
	              // children of the deleted fiber again, or including unmount effects
	              // as part of the fiber effect list.
	              //
	              // Because this is during the sync commit phase, we need to change
	              // the priority.
	              //
	              // TODO: Reconsider this implementation trade off.
	              var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
	              runWithPriority$1(priorityLevel, function () {
	                var effect = firstEffect;

	                do {
	                  var _destroy = effect.destroy;

	                  if (_destroy !== undefined) {
	                    safelyCallDestroy(current, _destroy);
	                  }

	                  effect = effect.next;
	                } while (effect !== firstEffect);
	              });
	            }
	          }
	        }

	        return;
	      }

	    case ClassComponent:
	      {
	        safelyDetachRef(current);
	        var instance = current.stateNode;

	        if (typeof instance.componentWillUnmount === 'function') {
	          safelyCallComponentWillUnmount(current, instance);
	        }

	        return;
	      }

	    case HostComponent:
	      {

	        safelyDetachRef(current);
	        return;
	      }

	    case HostPortal:
	      {
	        // TODO: this is recursive.
	        // We are also not using this parent because
	        // the portal will get pushed immediately.
	        {
	          unmountHostComponents(finishedRoot, current, renderPriorityLevel);
	        }

	        return;
	      }

	    case FundamentalComponent:
	      {

	        return;
	      }

	    case DehydratedFragment:
	      {

	        return;
	      }

	    case ScopeComponent:
	      {

	        return;
	      }
	  }
	}

	function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
	  // While we're inside a removed host node we don't want to call
	  // removeChild on the inner nodes because they're removed by the top
	  // call anyway. We also want to call componentWillUnmount on all
	  // composites before this host node is removed from the tree. Therefore
	  // we do an inner loop while we're still inside the host node.
	  var node = root;

	  while (true) {
	    commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because they may contain more composite or host nodes.
	    // Skip portals because commitUnmount() currently visits them recursively.

	    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
	    // If we don't use mutation we drill down into portals here instead.
	     node.tag !== HostPortal)) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === root) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === root) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function detachFiber(current) {
	  var alternate = current.alternate; // Cut off the return pointers to disconnect it from the tree. Ideally, we
	  // should clear the child pointer of the parent alternate to let this
	  // get GC:ed but we don't know which for sure which parent is the current
	  // one so we'll settle for GC:ing the subtree of this child. This child
	  // itself will be GC:ed when the parent updates the next time.

	  current.return = null;
	  current.child = null;
	  current.memoizedState = null;
	  current.updateQueue = null;
	  current.dependencies = null;
	  current.alternate = null;
	  current.firstEffect = null;
	  current.lastEffect = null;
	  current.pendingProps = null;
	  current.memoizedProps = null;
	  current.stateNode = null;

	  if (alternate !== null) {
	    detachFiber(alternate);
	  }
	}

	function getHostParentFiber(fiber) {
	  var parent = fiber.return;

	  while (parent !== null) {
	    if (isHostParent(parent)) {
	      return parent;
	    }

	    parent = parent.return;
	  }

	  {
	    {
	      throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function isHostParent(fiber) {
	  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
	}

	function getHostSibling(fiber) {
	  // We're going to search forward into the tree until we find a sibling host
	  // node. Unfortunately, if multiple insertions are done in a row we have to
	  // search past them. This leads to exponential search for the next sibling.
	  // TODO: Find a more efficient way to do this.
	  var node = fiber;

	  siblings: while (true) {
	    // If we didn't find anything, let's try the next sibling.
	    while (node.sibling === null) {
	      if (node.return === null || isHostParent(node.return)) {
	        // If we pop out of the root or hit the parent the fiber we are the
	        // last sibling.
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;

	    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
	      // If it is not host node and, we might have a host node inside it.
	      // Try to search down until we find one.
	      if (node.effectTag & Placement) {
	        // If we don't have a child, try the siblings instead.
	        continue siblings;
	      } // If we don't have a child, try the siblings instead.
	      // We also skip portals because they are not part of this host tree.


	      if (node.child === null || node.tag === HostPortal) {
	        continue siblings;
	      } else {
	        node.child.return = node;
	        node = node.child;
	      }
	    } // Check if this host node is stable or about to be placed.


	    if (!(node.effectTag & Placement)) {
	      // Found it!
	      return node.stateNode;
	    }
	  }
	}

	function commitPlacement(finishedWork) {


	  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

	  var parent;
	  var isContainer;
	  var parentStateNode = parentFiber.stateNode;

	  switch (parentFiber.tag) {
	    case HostComponent:
	      parent = parentStateNode;
	      isContainer = false;
	      break;

	    case HostRoot:
	      parent = parentStateNode.containerInfo;
	      isContainer = true;
	      break;

	    case HostPortal:
	      parent = parentStateNode.containerInfo;
	      isContainer = true;
	      break;

	    case FundamentalComponent:

	    // eslint-disable-next-line-no-fallthrough

	    default:
	      {
	        {
	          throw Error( "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue." );
	        }
	      }

	  }

	  if (parentFiber.effectTag & ContentReset) {
	    // Reset the text content of the parent before doing any insertions
	    resetTextContent(parent); // Clear ContentReset from the effect tag

	    parentFiber.effectTag &= ~ContentReset;
	  }

	  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
	  // children to find all the terminal nodes.

	  if (isContainer) {
	    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
	  } else {
	    insertOrAppendPlacementNode(finishedWork, before, parent);
	  }
	}

	function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost || enableFundamentalAPI ) {
	    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

	    if (before) {
	      insertInContainerBefore(parent, stateNode, before);
	    } else {
	      appendChildToContainer(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	}

	function insertOrAppendPlacementNode(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost || enableFundamentalAPI ) {
	    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

	    if (before) {
	      insertBefore(parent, stateNode, before);
	    } else {
	      appendChild(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNode(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNode(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	}

	function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
	  // We only have the top Fiber that was deleted but we need to recurse down its
	  // children to find all the terminal nodes.
	  var node = current; // Each iteration, currentParent is populated with node's host parent if not
	  // currentParentIsValid.

	  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

	  var currentParent;
	  var currentParentIsContainer;

	  while (true) {
	    if (!currentParentIsValid) {
	      var parent = node.return;

	      findParent: while (true) {
	        if (!(parent !== null)) {
	          {
	            throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
	          }
	        }

	        var parentStateNode = parent.stateNode;

	        switch (parent.tag) {
	          case HostComponent:
	            currentParent = parentStateNode;
	            currentParentIsContainer = false;
	            break findParent;

	          case HostRoot:
	            currentParent = parentStateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;

	          case HostPortal:
	            currentParent = parentStateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;

	        }

	        parent = parent.return;
	      }

	      currentParentIsValid = true;
	    }

	    if (node.tag === HostComponent || node.tag === HostText) {
	      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
	      // node from the tree.

	      if (currentParentIsContainer) {
	        removeChildFromContainer(currentParent, node.stateNode);
	      } else {
	        removeChild(currentParent, node.stateNode);
	      } // Don't visit children because we already visited them.

	    } else if (node.tag === HostPortal) {
	      if (node.child !== null) {
	        // When we go into a portal, it becomes the parent to remove from.
	        // We will reassign it back when we pop the portal on the way up.
	        currentParent = node.stateNode.containerInfo;
	        currentParentIsContainer = true; // Visit children because portals might contain host components.

	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    } else {
	      commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because we may find more host components below.

	      if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    }

	    if (node === current) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === current) {
	        return;
	      }

	      node = node.return;

	      if (node.tag === HostPortal) {
	        // When we go out of the portal, we need to restore the parent.
	        // Since we don't keep a stack of them, we will search for it.
	        currentParentIsValid = false;
	      }
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function commitDeletion(finishedRoot, current, renderPriorityLevel) {
	  {
	    // Recursively delete all host nodes from the parent.
	    // Detach refs and call componentWillUnmount() on the whole subtree.
	    unmountHostComponents(finishedRoot, current, renderPriorityLevel);
	  }

	  detachFiber(current);
	}

	function commitWork(current, finishedWork) {

	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        // Layout effects are destroyed during the mutation phase so that all
	        // destroy functions for all fibers are called before any create functions.
	        // This prevents sibling component effects from interfering with each other,
	        // e.g. a destroy function in one component should never override a ref set
	        // by a create function in another component during the same commit.
	        commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
	        return;
	      }

	    case ClassComponent:
	      {
	        return;
	      }

	    case HostComponent:
	      {
	        var instance = finishedWork.stateNode;

	        if (instance != null) {
	          // Commit the work prepared earlier.
	          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	          // as the newProps. The updatePayload will contain the real change in
	          // this case.

	          var oldProps = current !== null ? current.memoizedProps : newProps;
	          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

	          var updatePayload = finishedWork.updateQueue;
	          finishedWork.updateQueue = null;

	          if (updatePayload !== null) {
	            commitUpdate(instance, updatePayload, type, oldProps, newProps);
	          }
	        }

	        return;
	      }

	    case HostText:
	      {
	        if (!(finishedWork.stateNode !== null)) {
	          {
	            throw Error( "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue." );
	          }
	        }

	        var textInstance = finishedWork.stateNode;
	        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	        // as the newProps. The updatePayload will contain the real change in
	        // this case.

	        var oldText = current !== null ? current.memoizedProps : newText;
	        commitTextUpdate(textInstance, oldText, newText);
	        return;
	      }

	    case HostRoot:
	      {
	        {
	          var _root = finishedWork.stateNode;

	          if (_root.hydrate) {
	            // We've just hydrated. No need to hydrate again.
	            _root.hydrate = false;
	            commitHydratedContainer(_root.containerInfo);
	          }
	        }

	        return;
	      }

	    case Profiler:
	      {
	        return;
	      }

	    case SuspenseComponent:
	      {
	        commitSuspenseComponent(finishedWork);
	        attachSuspenseRetryListeners(finishedWork);
	        return;
	      }

	    case SuspenseListComponent:
	      {
	        attachSuspenseRetryListeners(finishedWork);
	        return;
	      }

	    case IncompleteClassComponent:
	      {
	        return;
	      }
	  }

	  {
	    {
	      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function commitSuspenseComponent(finishedWork) {
	  var newState = finishedWork.memoizedState;
	  var newDidTimeout;
	  var primaryChildParent = finishedWork;

	  if (newState === null) {
	    newDidTimeout = false;
	  } else {
	    newDidTimeout = true;
	    primaryChildParent = finishedWork.child;
	    markCommitTimeOfFallback();
	  }

	  if ( primaryChildParent !== null) {
	    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
	  }
	}

	function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

	  var newState = finishedWork.memoizedState;

	  if (newState === null) {
	    var current = finishedWork.alternate;

	    if (current !== null) {
	      var prevState = current.memoizedState;

	      if (prevState !== null) {
	        var suspenseInstance = prevState.dehydrated;

	        if (suspenseInstance !== null) {
	          commitHydratedSuspenseInstance(suspenseInstance);
	        }
	      }
	    }
	  }
	}

	function attachSuspenseRetryListeners(finishedWork) {
	  // If this boundary just timed out, then it will have a set of thenables.
	  // For each thenable, attach a listener so that when it resolves, React
	  // attempts to re-render the boundary in the primary (pre-timeout) state.
	  var thenables = finishedWork.updateQueue;

	  if (thenables !== null) {
	    finishedWork.updateQueue = null;
	    var retryCache = finishedWork.stateNode;

	    if (retryCache === null) {
	      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
	    }

	    thenables.forEach(function (thenable) {
	      // Memoize using the boundary fiber to prevent redundant listeners.
	      var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

	      if (!retryCache.has(thenable)) {
	        {
	          if (thenable.__reactDoNotTraceInteractions !== true) {
	            retry = tracing.unstable_wrap(retry);
	          }
	        }

	        retryCache.add(thenable);
	        thenable.then(retry, retry);
	      }
	    });
	  }
	}

	function commitResetTextContent(current) {

	  resetTextContent(current.stateNode);
	}

	var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

	function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
	  var update = createUpdate(expirationTime, null); // Unmount the root by rendering null.

	  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: null
	  };
	  var error = errorInfo.value;

	  update.callback = function () {
	    onUncaughtError(error);
	    logError(fiber, errorInfo);
	  };

	  return update;
	}

	function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
	  var update = createUpdate(expirationTime, null);
	  update.tag = CaptureUpdate;
	  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

	  if (typeof getDerivedStateFromError === 'function') {
	    var error$1 = errorInfo.value;

	    update.payload = function () {
	      logError(fiber, errorInfo);
	      return getDerivedStateFromError(error$1);
	    };
	  }

	  var inst = fiber.stateNode;

	  if (inst !== null && typeof inst.componentDidCatch === 'function') {
	    update.callback = function callback() {
	      {
	        markFailedErrorBoundaryForHotReloading(fiber);
	      }

	      if (typeof getDerivedStateFromError !== 'function') {
	        // To preserve the preexisting retry behavior of error boundaries,
	        // we keep track of which ones already failed during this batch.
	        // This gets reset before we yield back to the browser.
	        // TODO: Warn in strict mode if getDerivedStateFromError is
	        // not defined.
	        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

	        logError(fiber, errorInfo);
	      }

	      var error$1 = errorInfo.value;
	      var stack = errorInfo.stack;
	      this.componentDidCatch(error$1, {
	        componentStack: stack !== null ? stack : ''
	      });

	      {
	        if (typeof getDerivedStateFromError !== 'function') {
	          // If componentDidCatch is the only error boundary method defined,
	          // then it needs to call setState to recover from errors.
	          // If no state update is scheduled then the boundary will swallow the error.
	          if (fiber.expirationTime !== Sync) {
	            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
	          }
	        }
	      }
	    };
	  } else {
	    update.callback = function () {
	      markFailedErrorBoundaryForHotReloading(fiber);
	    };
	  }

	  return update;
	}

	function attachPingListener(root, renderExpirationTime, thenable) {
	  // Attach a listener to the promise to "ping" the root and retry. But
	  // only if one does not already exist for the current render expiration
	  // time (which acts like a "thread ID" here).
	  var pingCache = root.pingCache;
	  var threadIDs;

	  if (pingCache === null) {
	    pingCache = root.pingCache = new PossiblyWeakMap$1();
	    threadIDs = new Set();
	    pingCache.set(thenable, threadIDs);
	  } else {
	    threadIDs = pingCache.get(thenable);

	    if (threadIDs === undefined) {
	      threadIDs = new Set();
	      pingCache.set(thenable, threadIDs);
	    }
	  }

	  if (!threadIDs.has(renderExpirationTime)) {
	    // Memoize using the thread ID to prevent redundant listeners.
	    threadIDs.add(renderExpirationTime);
	    var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
	    thenable.then(ping, ping);
	  }
	}

	function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
	  // The source fiber did not complete.
	  sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

	  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

	  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
	    // This is a thenable.
	    var thenable = value;

	    if ((sourceFiber.mode & BlockingMode) === NoMode) {
	      // Reset the memoizedState to what it was before we attempted
	      // to render it.
	      var currentSource = sourceFiber.alternate;

	      if (currentSource) {
	        sourceFiber.updateQueue = currentSource.updateQueue;
	        sourceFiber.memoizedState = currentSource.memoizedState;
	        sourceFiber.expirationTime = currentSource.expirationTime;
	      } else {
	        sourceFiber.updateQueue = null;
	        sourceFiber.memoizedState = null;
	      }
	    }

	    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

	    var _workInProgress = returnFiber;

	    do {
	      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
	        // Found the nearest boundary.
	        // Stash the promise on the boundary fiber. If the boundary times out, we'll
	        // attach another listener to flip the boundary back to its normal state.
	        var thenables = _workInProgress.updateQueue;

	        if (thenables === null) {
	          var updateQueue = new Set();
	          updateQueue.add(thenable);
	          _workInProgress.updateQueue = updateQueue;
	        } else {
	          thenables.add(thenable);
	        } // If the boundary is outside of blocking mode, we should *not*
	        // suspend the commit. Pretend as if the suspended component rendered
	        // null and keep rendering. In the commit phase, we'll schedule a
	        // subsequent synchronous update to re-render the Suspense.
	        //
	        // Note: It doesn't matter whether the component that suspended was
	        // inside a blocking mode tree. If the Suspense is outside of it, we
	        // should *not* suspend the commit.


	        if ((_workInProgress.mode & BlockingMode) === NoMode) {
	          _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
	          // But we shouldn't call any lifecycle methods or callbacks. Remove
	          // all lifecycle effect tags.

	          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

	          if (sourceFiber.tag === ClassComponent) {
	            var currentSourceFiber = sourceFiber.alternate;

	            if (currentSourceFiber === null) {
	              // This is a new mount. Change the tag so it's not mistaken for a
	              // completed class component. For example, we should not call
	              // componentWillUnmount if it is deleted.
	              sourceFiber.tag = IncompleteClassComponent;
	            } else {
	              // When we try rendering again, we should not reuse the current fiber,
	              // since it's known to be in an inconsistent state. Use a force update to
	              // prevent a bail out.
	              var update = createUpdate(Sync, null);
	              update.tag = ForceUpdate;
	              enqueueUpdate(sourceFiber, update);
	            }
	          } // The source fiber did not complete. Mark it with Sync priority to
	          // indicate that it still has pending work.


	          sourceFiber.expirationTime = Sync; // Exit without suspending.

	          return;
	        } // Confirmed that the boundary is in a concurrent mode tree. Continue
	        // with the normal suspend path.
	        //
	        // After this we'll use a set of heuristics to determine whether this
	        // render pass will run to completion or restart or "suspend" the commit.
	        // The actual logic for this is spread out in different places.
	        //
	        // This first principle is that if we're going to suspend when we complete
	        // a root, then we should also restart if we get an update or ping that
	        // might unsuspend it, and vice versa. The only reason to suspend is
	        // because you think you might want to restart before committing. However,
	        // it doesn't make sense to restart only while in the period we're suspended.
	        //
	        // Restarting too aggressively is also not good because it starves out any
	        // intermediate loading state. So we use heuristics to determine when.
	        // Suspense Heuristics
	        //
	        // If nothing threw a Promise or all the same fallbacks are already showing,
	        // then don't suspend/restart.
	        //
	        // If this is an initial render of a new tree of Suspense boundaries and
	        // those trigger a fallback, then don't suspend/restart. We want to ensure
	        // that we can show the initial loading state as quickly as possible.
	        //
	        // If we hit a "Delayed" case, such as when we'd switch from content back into
	        // a fallback, then we should always suspend/restart. SuspenseConfig applies to
	        // this case. If none is defined, JND is used instead.
	        //
	        // If we're already showing a fallback and it gets "retried", allowing us to show
	        // another level, but there's still an inner boundary that would show a fallback,
	        // then we suspend/restart for 500ms since the last time we showed a fallback
	        // anywhere in the tree. This effectively throttles progressive loading into a
	        // consistent train of commits. This also gives us an opportunity to restart to
	        // get to the completed state slightly earlier.
	        //
	        // If there's ambiguity due to batching it's resolved in preference of:
	        // 1) "delayed", 2) "initial render", 3) "retry".
	        //
	        // We want to ensure that a "busy" state doesn't get force committed. We want to
	        // ensure that new initial loading states can commit as soon as possible.


	        attachPingListener(root, renderExpirationTime, thenable);
	        _workInProgress.effectTag |= ShouldCapture;
	        _workInProgress.expirationTime = renderExpirationTime;
	        return;
	      } // This boundary already captured during this render. Continue to the next
	      // boundary.


	      _workInProgress = _workInProgress.return;
	    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
	    // TODO: Use invariant so the message is stripped in prod?


	    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
	  } // We didn't find a boundary that could handle this type of exception. Start
	  // over and traverse parent path again, this time treating the exception
	  // as an error.


	  renderDidError();
	  value = createCapturedValue(value, sourceFiber);
	  var workInProgress = returnFiber;

	  do {
	    switch (workInProgress.tag) {
	      case HostRoot:
	        {
	          var _errorInfo = value;
	          workInProgress.effectTag |= ShouldCapture;
	          workInProgress.expirationTime = renderExpirationTime;

	          var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

	          enqueueCapturedUpdate(workInProgress, _update);
	          return;
	        }

	      case ClassComponent:
	        // Capture and retry
	        var errorInfo = value;
	        var ctor = workInProgress.type;
	        var instance = workInProgress.stateNode;

	        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
	          workInProgress.effectTag |= ShouldCapture;
	          workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

	          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

	          enqueueCapturedUpdate(workInProgress, _update2);
	          return;
	        }

	        break;
	    }

	    workInProgress = workInProgress.return;
	  } while (workInProgress !== null);
	}

	var ceil = Math.ceil;
	var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
	    IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
	var NoContext =
	/*                    */
	0;
	var BatchedContext =
	/*               */
	1;
	var EventContext =
	/*                 */
	2;
	var DiscreteEventContext =
	/*         */
	4;
	var LegacyUnbatchedContext =
	/*       */
	8;
	var RenderContext =
	/*                */
	16;
	var CommitContext =
	/*                */
	32;
	var RootIncomplete = 0;
	var RootFatalErrored = 1;
	var RootErrored = 2;
	var RootSuspended = 3;
	var RootSuspendedWithDelay = 4;
	var RootCompleted = 5;
	// Describes where we are in the React execution stack
	var executionContext = NoContext; // The root we're working on

	var workInProgressRoot = null; // The fiber we're working on

	var workInProgress = null; // The expiration time we're rendering

	var renderExpirationTime$1 = NoWork; // Whether to root completed, errored, suspended, etc.

	var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

	var workInProgressRootFatalError = null; // Most recent event time among processed updates during this render.
	// This is conceptually a time stamp but expressed in terms of an ExpirationTime
	// because we deal mostly with expiration times in the hot path, so this avoids
	// the conversion happening in the hot path.

	var workInProgressRootLatestProcessedExpirationTime = Sync;
	var workInProgressRootLatestSuspenseTimeout = Sync;
	var workInProgressRootCanSuspendUsingConfig = null; // The work left over by components that were visited during this render. Only
	// includes unprocessed updates, not work in bailed out children.

	var workInProgressRootNextUnprocessedUpdateTime = NoWork; // If we're pinged while rendering we don't always restart immediately.
	// This flag determines if it might be worthwhile to restart if an opportunity
	// happens latere.

	var workInProgressRootHasPendingPing = false; // The most recent time we committed a fallback. This lets us ensure a train
	// model where we don't commit new loading states in too quick succession.

	var globalMostRecentFallbackTime = 0;
	var FALLBACK_THROTTLE_MS = 500;
	var nextEffect = null;
	var hasUncaughtError = false;
	var firstUncaughtError = null;
	var legacyErrorBoundariesThatAlreadyFailed = null;
	var rootDoesHavePassiveEffects = false;
	var rootWithPendingPassiveEffects = null;
	var pendingPassiveEffectsRenderPriority = NoPriority;
	var pendingPassiveEffectsExpirationTime = NoWork;
	var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

	var NESTED_UPDATE_LIMIT = 50;
	var nestedUpdateCount = 0;
	var rootWithNestedUpdates = null;
	var NESTED_PASSIVE_UPDATE_LIMIT = 50;
	var nestedPassiveUpdateCount = 0;
	var interruptedBy = null; // Marks the need to reschedule pending interactions at these expiration times
	// during the commit phase. This enables them to be traced across components
	// that spawn new work during render. E.g. hidden boundaries, suspended SSR
	// hydration or SuspenseList.

	var spawnedWorkDuringRender = null; // Expiration times are computed by adding to the current time (the start
	// time). However, if two updates are scheduled within the same event, we
	// should treat their start times as simultaneous, even if the actual clock
	// time has advanced between the first and second call.
	// In other words, because expiration times determine how updates are batched,
	// we want all updates of like priority that occur within the same event to
	// receive the same expiration time. Otherwise we get tearing.

	var currentEventTime = NoWork;
	function requestCurrentTimeForUpdate() {
	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    // We're inside React, so it's fine to read the actual time.
	    return msToExpirationTime(now());
	  } // We're not inside React, so we may be in the middle of a browser event.


	  if (currentEventTime !== NoWork) {
	    // Use the same start time for all updates until we enter React again.
	    return currentEventTime;
	  } // This is the first update since React yielded. Compute a new start time.


	  currentEventTime = msToExpirationTime(now());
	  return currentEventTime;
	}
	function getCurrentTime() {
	  return msToExpirationTime(now());
	}
	function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
	  var mode = fiber.mode;

	  if ((mode & BlockingMode) === NoMode) {
	    return Sync;
	  }

	  var priorityLevel = getCurrentPriorityLevel();

	  if ((mode & ConcurrentMode) === NoMode) {
	    return priorityLevel === ImmediatePriority ? Sync : Batched;
	  }

	  if ((executionContext & RenderContext) !== NoContext) {
	    // Use whatever time we're already rendering
	    // TODO: Should there be a way to opt out, like with `runWithPriority`?
	    return renderExpirationTime$1;
	  }

	  var expirationTime;

	  if (suspenseConfig !== null) {
	    // Compute an expiration time based on the Suspense timeout.
	    expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
	  } else {
	    // Compute an expiration time based on the Scheduler priority.
	    switch (priorityLevel) {
	      case ImmediatePriority:
	        expirationTime = Sync;
	        break;

	      case UserBlockingPriority$1:
	        // TODO: Rename this to computeUserBlockingExpiration
	        expirationTime = computeInteractiveExpiration(currentTime);
	        break;

	      case NormalPriority:
	      case LowPriority:
	        // TODO: Handle LowPriority
	        // TODO: Rename this to... something better.
	        expirationTime = computeAsyncExpiration(currentTime);
	        break;

	      case IdlePriority:
	        expirationTime = Idle;
	        break;

	      default:
	        {
	          {
	            throw Error( "Expected a valid priority level" );
	          }
	        }

	    }
	  } // If we're in the middle of rendering a tree, do not update at the same
	  // expiration time that is already rendering.
	  // TODO: We shouldn't have to do this if the update is on a different root.
	  // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
	  // the root when we check for this condition.


	  if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
	    // This is a trick to move this update into a separate batch
	    expirationTime -= 1;
	  }

	  return expirationTime;
	}
	function scheduleUpdateOnFiber(fiber, expirationTime) {
	  checkForNestedUpdates();
	  warnAboutRenderPhaseUpdatesInDEV(fiber);
	  var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

	  if (root === null) {
	    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
	    return;
	  }

	  checkForInterruption(fiber, expirationTime);
	  recordScheduleUpdate(); // TODO: computeExpirationForFiber also reads the priority. Pass the
	  // priority as an argument to that function and this one.

	  var priorityLevel = getCurrentPriorityLevel();

	  if (expirationTime === Sync) {
	    if ( // Check if we're inside unbatchedUpdates
	    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
	    (executionContext & (RenderContext | CommitContext)) === NoContext) {
	      // Register pending interactions on the root to avoid losing traced interaction data.
	      schedulePendingInteractions(root, expirationTime); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
	      // root inside of batchedUpdates should be synchronous, but layout updates
	      // should be deferred until the end of the batch.

	      performSyncWorkOnRoot(root);
	    } else {
	      ensureRootIsScheduled(root);
	      schedulePendingInteractions(root, expirationTime);

	      if (executionContext === NoContext) {
	        // Flush the synchronous work now, unless we're already working or inside
	        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
	        // scheduleCallbackForFiber to preserve the ability to schedule a callback
	        // without immediately flushing it. We only do this for user-initiated
	        // updates, to preserve historical behavior of legacy mode.
	        flushSyncCallbackQueue();
	      }
	    }
	  } else {
	    ensureRootIsScheduled(root);
	    schedulePendingInteractions(root, expirationTime);
	  }

	  if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
	  // discrete, even inside a discrete event.
	  priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
	    // This is the result of a discrete event. Track the lowest priority
	    // discrete update per root so we can flush them early, if needed.
	    if (rootsWithPendingDiscreteUpdates === null) {
	      rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
	    } else {
	      var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

	      if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
	        rootsWithPendingDiscreteUpdates.set(root, expirationTime);
	      }
	    }
	  }
	}
	var scheduleWork = scheduleUpdateOnFiber; // This is split into a separate function so we can mark a fiber with pending
	// work without treating it as a typical update that originates from an event;
	// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
	// on a fiber.

	function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
	  // Update the source fiber's expiration time
	  if (fiber.expirationTime < expirationTime) {
	    fiber.expirationTime = expirationTime;
	  }

	  var alternate = fiber.alternate;

	  if (alternate !== null && alternate.expirationTime < expirationTime) {
	    alternate.expirationTime = expirationTime;
	  } // Walk the parent path to the root and update the child expiration time.


	  var node = fiber.return;
	  var root = null;

	  if (node === null && fiber.tag === HostRoot) {
	    root = fiber.stateNode;
	  } else {
	    while (node !== null) {
	      alternate = node.alternate;

	      if (node.childExpirationTime < expirationTime) {
	        node.childExpirationTime = expirationTime;

	        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
	          alternate.childExpirationTime = expirationTime;
	        }
	      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
	        alternate.childExpirationTime = expirationTime;
	      }

	      if (node.return === null && node.tag === HostRoot) {
	        root = node.stateNode;
	        break;
	      }

	      node = node.return;
	    }
	  }

	  if (root !== null) {
	    if (workInProgressRoot === root) {
	      // Received an update to a tree that's in the middle of rendering. Mark
	      // that's unprocessed work on this root.
	      markUnprocessedUpdateTime(expirationTime);

	      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
	        // The root already suspended with a delay, which means this render
	        // definitely won't finish. Since we have a new update, let's mark it as
	        // suspended now, right before marking the incoming update. This has the
	        // effect of interrupting the current render and switching to the update.
	        // TODO: This happens to work when receiving an update during the render
	        // phase, because of the trick inside computeExpirationForFiber to
	        // subtract 1 from `renderExpirationTime` to move it into a
	        // separate bucket. But we should probably model it with an exception,
	        // using the same mechanism we use to force hydration of a subtree.
	        // TODO: This does not account for low pri updates that were already
	        // scheduled before the root started rendering. Need to track the next
	        // pending expiration time (perhaps by backtracking the return path) and
	        // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.
	        markRootSuspendedAtTime(root, renderExpirationTime$1);
	      }
	    } // Mark that the root has a pending update.


	    markRootUpdatedAtTime(root, expirationTime);
	  }

	  return root;
	}

	function getNextRootExpirationTimeToWorkOn(root) {
	  // Determines the next expiration time that the root should render, taking
	  // into account levels that may be suspended, or levels that may have
	  // received a ping.
	  var lastExpiredTime = root.lastExpiredTime;

	  if (lastExpiredTime !== NoWork) {
	    return lastExpiredTime;
	  } // "Pending" refers to any update that hasn't committed yet, including if it
	  // suspended. The "suspended" range is therefore a subset.


	  var firstPendingTime = root.firstPendingTime;

	  if (!isRootSuspendedAtTime(root, firstPendingTime)) {
	    // The highest priority pending time is not suspended. Let's work on that.
	    return firstPendingTime;
	  } // If the first pending time is suspended, check if there's a lower priority
	  // pending level that we know about. Or check if we received a ping. Work
	  // on whichever is higher priority.


	  var lastPingedTime = root.lastPingedTime;
	  var nextKnownPendingLevel = root.nextKnownPendingLevel;
	  var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;

	  if ( nextLevel <= Idle && firstPendingTime !== nextLevel) {
	    // Don't work on Idle/Never priority unless everything else is committed.
	    return NoWork;
	  }

	  return nextLevel;
	} // Use this function to schedule a task for a root. There's only one task per
	// root; if a task was already scheduled, we'll check to make sure the
	// expiration time of the existing task is the same as the expiration time of
	// the next level that the root has work on. This function is called on every
	// update, and right before exiting a task.


	function ensureRootIsScheduled(root) {
	  var lastExpiredTime = root.lastExpiredTime;

	  if (lastExpiredTime !== NoWork) {
	    // Special case: Expired work should flush synchronously.
	    root.callbackExpirationTime = Sync;
	    root.callbackPriority = ImmediatePriority;
	    root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	    return;
	  }

	  var expirationTime = getNextRootExpirationTimeToWorkOn(root);
	  var existingCallbackNode = root.callbackNode;

	  if (expirationTime === NoWork) {
	    // There's nothing to work on.
	    if (existingCallbackNode !== null) {
	      root.callbackNode = null;
	      root.callbackExpirationTime = NoWork;
	      root.callbackPriority = NoPriority;
	    }

	    return;
	  } // TODO: If this is an update, we already read the current time. Pass the
	  // time as an argument.


	  var currentTime = requestCurrentTimeForUpdate();
	  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime); // If there's an existing render task, confirm it has the correct priority and
	  // expiration time. Otherwise, we'll cancel it and schedule a new one.

	  if (existingCallbackNode !== null) {
	    var existingCallbackPriority = root.callbackPriority;
	    var existingCallbackExpirationTime = root.callbackExpirationTime;

	    if ( // Callback must have the exact same expiration time.
	    existingCallbackExpirationTime === expirationTime && // Callback must have greater or equal priority.
	    existingCallbackPriority >= priorityLevel) {
	      // Existing callback is sufficient.
	      return;
	    } // Need to schedule a new task.
	    // TODO: Instead of scheduling a new task, we should be able to change the
	    // priority of the existing one.


	    cancelCallback(existingCallbackNode);
	  }

	  root.callbackExpirationTime = expirationTime;
	  root.callbackPriority = priorityLevel;
	  var callbackNode;

	  if (expirationTime === Sync) {
	    // Sync React callbacks are scheduled on a special internal queue
	    callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	  } else {
	    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), // Compute a task timeout based on the expiration time. This also affects
	    // ordering because tasks are processed in timeout order.
	    {
	      timeout: expirationTimeToMs(expirationTime) - now()
	    });
	  }

	  root.callbackNode = callbackNode;
	} // This is the entry point for every concurrent task, i.e. anything that
	// goes through Scheduler.


	function performConcurrentWorkOnRoot(root, didTimeout) {
	  // Since we know we're in a React event, we can clear the current
	  // event time. The next update will compute a new event time.
	  currentEventTime = NoWork;

	  if (didTimeout) {
	    // The render task took too long to complete. Mark the current time as
	    // expired to synchronously render all expired work in a single batch.
	    var currentTime = requestCurrentTimeForUpdate();
	    markRootExpiredAtTime(root, currentTime); // This will schedule a synchronous callback.

	    ensureRootIsScheduled(root);
	    return null;
	  } // Determine the next expiration time to work on, using the fields stored
	  // on the root.


	  var expirationTime = getNextRootExpirationTimeToWorkOn(root);

	  if (expirationTime !== NoWork) {
	    var originalCallbackNode = root.callbackNode;

	    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	      {
	        throw Error( "Should not already be working." );
	      }
	    }

	    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
	    // and prepare a fresh one. Otherwise we'll continue where we left off.

	    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
	      prepareFreshStack(root, expirationTime);
	      startWorkOnPendingInteractions(root, expirationTime);
	    } // If we have a work-in-progress fiber, it means there's still work to do
	    // in this root.


	    if (workInProgress !== null) {
	      var prevExecutionContext = executionContext;
	      executionContext |= RenderContext;
	      var prevDispatcher = pushDispatcher();
	      var prevInteractions = pushInteractions(root);
	      startWorkLoopTimer(workInProgress);

	      do {
	        try {
	          workLoopConcurrent();
	          break;
	        } catch (thrownValue) {
	          handleError(root, thrownValue);
	        }
	      } while (true);

	      resetContextDependencies();
	      executionContext = prevExecutionContext;
	      popDispatcher(prevDispatcher);

	      {
	        popInteractions(prevInteractions);
	      }

	      if (workInProgressRootExitStatus === RootFatalErrored) {
	        var fatalError = workInProgressRootFatalError;
	        stopInterruptedWorkLoopTimer();
	        prepareFreshStack(root, expirationTime);
	        markRootSuspendedAtTime(root, expirationTime);
	        ensureRootIsScheduled(root);
	        throw fatalError;
	      }

	      if (workInProgress !== null) {
	        // There's still work left over. Exit without committing.
	        stopInterruptedWorkLoopTimer();
	      } else {
	        // We now have a consistent tree. The next step is either to commit it,
	        // or, if something suspended, wait to commit it after a timeout.
	        stopFinishedWorkLoopTimer();
	        var finishedWork = root.finishedWork = root.current.alternate;
	        root.finishedExpirationTime = expirationTime;
	        finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
	      }

	      ensureRootIsScheduled(root);

	      if (root.callbackNode === originalCallbackNode) {
	        // The task node scheduled for this root is the same one that's
	        // currently executed. Need to return a continuation.
	        return performConcurrentWorkOnRoot.bind(null, root);
	      }
	    }
	  }

	  return null;
	}

	function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
	  // Set this to null to indicate there's no in-progress render.
	  workInProgressRoot = null;

	  switch (exitStatus) {
	    case RootIncomplete:
	    case RootFatalErrored:
	      {
	        {
	          {
	            throw Error( "Root did not complete. This is a bug in React." );
	          }
	        }
	      }
	    // Flow knows about invariant, so it complains if I add a break
	    // statement, but eslint doesn't know about invariant, so it complains
	    // if I do. eslint-disable-next-line no-fallthrough

	    case RootErrored:
	      {
	        // If this was an async render, the error may have happened due to
	        // a mutation in a concurrent event. Try rendering one more time,
	        // synchronously, to see if the error goes away. If there are
	        // lower priority updates, let's include those, too, in case they
	        // fix the inconsistency. Render at Idle to include all updates.
	        // If it was Idle or Never or some not-yet-invented time, render
	        // at that time.
	        markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime); // We assume that this second render pass will be synchronous
	        // and therefore not hit this path again.

	        break;
	      }

	    case RootSuspended:
	      {
	        markRootSuspendedAtTime(root, expirationTime);
	        var lastSuspendedTime = root.lastSuspendedTime;

	        if (expirationTime === lastSuspendedTime) {
	          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
	        } // We have an acceptable loading state. We need to figure out if we
	        // should immediately commit it or wait a bit.
	        // If we have processed new updates during this render, we may now
	        // have a new loading state ready. We want to ensure that we commit
	        // that as soon as possible.


	        var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

	        if (hasNotProcessedNewUpdates && // do not delay if we're inside an act() scope
	        !( IsThisRendererActing.current)) {
	          // If we have not processed any new updates during this pass, then
	          // this is either a retry of an existing fallback state or a
	          // hidden tree. Hidden trees shouldn't be batched with other work
	          // and after that's fixed it can only be a retry. We're going to
	          // throttle committing retries so that we don't show too many
	          // loading states too quickly.
	          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

	          if (msUntilTimeout > 10) {
	            if (workInProgressRootHasPendingPing) {
	              var lastPingedTime = root.lastPingedTime;

	              if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
	                // This render was pinged but we didn't get to restart
	                // earlier so try restarting now instead.
	                root.lastPingedTime = expirationTime;
	                prepareFreshStack(root, expirationTime);
	                break;
	              }
	            }

	            var nextTime = getNextRootExpirationTimeToWorkOn(root);

	            if (nextTime !== NoWork && nextTime !== expirationTime) {
	              // There's additional work on this root.
	              break;
	            }

	            if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
	              // We should prefer to render the fallback of at the last
	              // suspended level. Ping the last suspended level to try
	              // rendering it again.
	              root.lastPingedTime = lastSuspendedTime;
	              break;
	            } // The render is suspended, it hasn't timed out, and there's no
	            // lower priority work to do. Instead of committing the fallback
	            // immediately, wait for more data to arrive.


	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
	            break;
	          }
	        } // The work expired. Commit immediately.


	        commitRoot(root);
	        break;
	      }

	    case RootSuspendedWithDelay:
	      {
	        markRootSuspendedAtTime(root, expirationTime);
	        var _lastSuspendedTime = root.lastSuspendedTime;

	        if (expirationTime === _lastSuspendedTime) {
	          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
	        }

	        if ( // do not delay if we're inside an act() scope
	        !( IsThisRendererActing.current)) {
	          // We're suspended in a state that should be avoided. We'll try to
	          // avoid committing it for as long as the timeouts let us.
	          if (workInProgressRootHasPendingPing) {
	            var _lastPingedTime = root.lastPingedTime;

	            if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
	              // This render was pinged but we didn't get to restart earlier
	              // so try restarting now instead.
	              root.lastPingedTime = expirationTime;
	              prepareFreshStack(root, expirationTime);
	              break;
	            }
	          }

	          var _nextTime = getNextRootExpirationTimeToWorkOn(root);

	          if (_nextTime !== NoWork && _nextTime !== expirationTime) {
	            // There's additional work on this root.
	            break;
	          }

	          if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
	            // We should prefer to render the fallback of at the last
	            // suspended level. Ping the last suspended level to try
	            // rendering it again.
	            root.lastPingedTime = _lastSuspendedTime;
	            break;
	          }

	          var _msUntilTimeout;

	          if (workInProgressRootLatestSuspenseTimeout !== Sync) {
	            // We have processed a suspense config whose expiration time we
	            // can use as the timeout.
	            _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
	          } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
	            // This should never normally happen because only new updates
	            // cause delayed states, so we should have processed something.
	            // However, this could also happen in an offscreen tree.
	            _msUntilTimeout = 0;
	          } else {
	            // If we don't have a suspense config, we're going to use a
	            // heuristic to determine how long we can suspend.
	            var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
	            var currentTimeMs = now();
	            var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
	            var timeElapsed = currentTimeMs - eventTimeMs;

	            if (timeElapsed < 0) {
	              // We get this wrong some time since we estimate the time.
	              timeElapsed = 0;
	            }

	            _msUntilTimeout = jnd(timeElapsed) - timeElapsed; // Clamp the timeout to the expiration time. TODO: Once the
	            // event time is exact instead of inferred from expiration time
	            // we don't need this.

	            if (timeUntilExpirationMs < _msUntilTimeout) {
	              _msUntilTimeout = timeUntilExpirationMs;
	            }
	          } // Don't bother with a very short suspense time.


	          if (_msUntilTimeout > 10) {
	            // The render is suspended, it hasn't timed out, and there's no
	            // lower priority work to do. Instead of committing the fallback
	            // immediately, wait for more data to arrive.
	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
	            break;
	          }
	        } // The work expired. Commit immediately.


	        commitRoot(root);
	        break;
	      }

	    case RootCompleted:
	      {
	        // The work completed. Ready to commit.
	        if ( // do not delay if we're inside an act() scope
	        !( IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
	          // If we have exceeded the minimum loading delay, which probably
	          // means we have shown a spinner already, we might have to suspend
	          // a bit longer to ensure that the spinner is shown for
	          // enough time.
	          var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

	          if (_msUntilTimeout2 > 10) {
	            markRootSuspendedAtTime(root, expirationTime);
	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
	            break;
	          }
	        }

	        commitRoot(root);
	        break;
	      }

	    default:
	      {
	        {
	          {
	            throw Error( "Unknown root exit status." );
	          }
	        }
	      }
	  }
	} // This is the entry point for synchronous tasks that don't go
	// through Scheduler


	function performSyncWorkOnRoot(root) {
	  // Check if there's expired work on this root. Otherwise, render at Sync.
	  var lastExpiredTime = root.lastExpiredTime;
	  var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;

	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error( "Should not already be working." );
	    }
	  }

	  flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
	  // and prepare a fresh one. Otherwise we'll continue where we left off.

	  if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
	    prepareFreshStack(root, expirationTime);
	    startWorkOnPendingInteractions(root, expirationTime);
	  } // If we have a work-in-progress fiber, it means there's still work to do
	  // in this root.


	  if (workInProgress !== null) {
	    var prevExecutionContext = executionContext;
	    executionContext |= RenderContext;
	    var prevDispatcher = pushDispatcher();
	    var prevInteractions = pushInteractions(root);
	    startWorkLoopTimer(workInProgress);

	    do {
	      try {
	        workLoopSync();
	        break;
	      } catch (thrownValue) {
	        handleError(root, thrownValue);
	      }
	    } while (true);

	    resetContextDependencies();
	    executionContext = prevExecutionContext;
	    popDispatcher(prevDispatcher);

	    {
	      popInteractions(prevInteractions);
	    }

	    if (workInProgressRootExitStatus === RootFatalErrored) {
	      var fatalError = workInProgressRootFatalError;
	      stopInterruptedWorkLoopTimer();
	      prepareFreshStack(root, expirationTime);
	      markRootSuspendedAtTime(root, expirationTime);
	      ensureRootIsScheduled(root);
	      throw fatalError;
	    }

	    if (workInProgress !== null) {
	      // This is a sync render, so we should have finished the whole tree.
	      {
	        {
	          throw Error( "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue." );
	        }
	      }
	    } else {
	      // We now have a consistent tree. Because this is a sync render, we
	      // will commit it even if something suspended.
	      stopFinishedWorkLoopTimer();
	      root.finishedWork = root.current.alternate;
	      root.finishedExpirationTime = expirationTime;
	      finishSyncRender(root);
	    } // Before exiting, make sure there's a callback scheduled for the next
	    // pending level.


	    ensureRootIsScheduled(root);
	  }

	  return null;
	}

	function finishSyncRender(root) {
	  // Set this to null to indicate there's no in-progress render.
	  workInProgressRoot = null;
	  commitRoot(root);
	}
	function flushDiscreteUpdates() {
	  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
	  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
	  // those two cases. Need to fix this before exposing flushDiscreteUpdates
	  // as a public API.
	  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
	    {
	      if ((executionContext & RenderContext) !== NoContext) {
	        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
	      }
	    } // We're already rendering, so we can't synchronously flush pending work.
	    // This is probably a nested event dispatch triggered by a lifecycle/effect,
	    // like `el.focus()`. Exit.


	    return;
	  }

	  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
	  // they fire before the next serial event.

	  flushPassiveEffects();
	}
	function syncUpdates(fn, a, b, c) {
	  return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c));
	}

	function flushPendingDiscreteUpdates() {
	  if (rootsWithPendingDiscreteUpdates !== null) {
	    // For each root with pending discrete updates, schedule a callback to
	    // immediately flush them.
	    var roots = rootsWithPendingDiscreteUpdates;
	    rootsWithPendingDiscreteUpdates = null;
	    roots.forEach(function (expirationTime, root) {
	      markRootExpiredAtTime(root, expirationTime);
	      ensureRootIsScheduled(root);
	    }); // Now flush the immediate queue.

	    flushSyncCallbackQueue();
	  }
	}

	function batchedUpdates$1(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function batchedEventUpdates$1(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext |= EventContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function discreteUpdates$1(fn, a, b, c, d) {
	  var prevExecutionContext = executionContext;
	  executionContext |= DiscreteEventContext;

	  try {
	    // Should this
	    return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function unbatchedUpdates(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext &= ~BatchedContext;
	  executionContext |= LegacyUnbatchedContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function flushSync(fn, a) {
	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    {
	      {
	        throw Error( "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering." );
	      }
	    }
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;

	  try {
	    return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
	  } finally {
	    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
	    // Note that this will happen even if batchedUpdates is higher up
	    // the stack.

	    flushSyncCallbackQueue();
	  }
	}

	function prepareFreshStack(root, expirationTime) {
	  root.finishedWork = null;
	  root.finishedExpirationTime = NoWork;
	  var timeoutHandle = root.timeoutHandle;

	  if (timeoutHandle !== noTimeout) {
	    // The root previous suspended and scheduled a timeout to commit a fallback
	    // state. Now that we have additional work, cancel the timeout.
	    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

	    cancelTimeout(timeoutHandle);
	  }

	  if (workInProgress !== null) {
	    var interruptedWork = workInProgress.return;

	    while (interruptedWork !== null) {
	      unwindInterruptedWork(interruptedWork);
	      interruptedWork = interruptedWork.return;
	    }
	  }

	  workInProgressRoot = root;
	  workInProgress = createWorkInProgress(root.current, null);
	  renderExpirationTime$1 = expirationTime;
	  workInProgressRootExitStatus = RootIncomplete;
	  workInProgressRootFatalError = null;
	  workInProgressRootLatestProcessedExpirationTime = Sync;
	  workInProgressRootLatestSuspenseTimeout = Sync;
	  workInProgressRootCanSuspendUsingConfig = null;
	  workInProgressRootNextUnprocessedUpdateTime = NoWork;
	  workInProgressRootHasPendingPing = false;

	  {
	    spawnedWorkDuringRender = null;
	  }

	  {
	    ReactStrictModeWarnings.discardPendingWarnings();
	  }
	}

	function handleError(root, thrownValue) {
	  do {
	    try {
	      // Reset module-level state that was set during the render phase.
	      resetContextDependencies();
	      resetHooksAfterThrow();
	      resetCurrentFiber();

	      if (workInProgress === null || workInProgress.return === null) {
	        // Expected to be working on a non-root fiber. This is a fatal error
	        // because there's no ancestor that can handle it; the root is
	        // supposed to capture all errors that weren't caught by an error
	        // boundary.
	        workInProgressRootExitStatus = RootFatalErrored;
	        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
	        // sibling, or the parent if there are no siblings. But since the root
	        // has no siblings nor a parent, we set it to null. Usually this is
	        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
	        // interntionally not calling those, we need set it here.
	        // TODO: Consider calling `unwindWork` to pop the contexts.

	        workInProgress = null;
	        return null;
	      }

	      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
	        // Record the time spent rendering before an error was thrown. This
	        // avoids inaccurate Profiler durations in the case of a
	        // suspended render.
	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
	      }

	      throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
	      workInProgress = completeUnitOfWork(workInProgress);
	    } catch (yetAnotherThrownValue) {
	      // Something in the return path also threw.
	      thrownValue = yetAnotherThrownValue;
	      continue;
	    } // Return to the normal work loop.


	    return;
	  } while (true);
	}

	function pushDispatcher(root) {
	  var prevDispatcher = ReactCurrentDispatcher$1.current;
	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  if (prevDispatcher === null) {
	    // The React isomorphic package does not include a default dispatcher.
	    // Instead the first renderer will lazily attach one, in order to give
	    // nicer error messages.
	    return ContextOnlyDispatcher;
	  } else {
	    return prevDispatcher;
	  }
	}

	function popDispatcher(prevDispatcher) {
	  ReactCurrentDispatcher$1.current = prevDispatcher;
	}

	function pushInteractions(root) {
	  {
	    var prevInteractions = tracing.__interactionsRef.current;
	    tracing.__interactionsRef.current = root.memoizedInteractions;
	    return prevInteractions;
	  }
	}

	function popInteractions(prevInteractions) {
	  {
	    tracing.__interactionsRef.current = prevInteractions;
	  }
	}

	function markCommitTimeOfFallback() {
	  globalMostRecentFallbackTime = now();
	}
	function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
	  if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
	    workInProgressRootLatestProcessedExpirationTime = expirationTime;
	  }

	  if (suspenseConfig !== null) {
	    if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
	      workInProgressRootLatestSuspenseTimeout = expirationTime; // Most of the time we only have one config and getting wrong is not bad.

	      workInProgressRootCanSuspendUsingConfig = suspenseConfig;
	    }
	  }
	}
	function markUnprocessedUpdateTime(expirationTime) {
	  if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
	    workInProgressRootNextUnprocessedUpdateTime = expirationTime;
	  }
	}
	function renderDidSuspend() {
	  if (workInProgressRootExitStatus === RootIncomplete) {
	    workInProgressRootExitStatus = RootSuspended;
	  }
	}
	function renderDidSuspendDelayIfPossible() {
	  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
	    workInProgressRootExitStatus = RootSuspendedWithDelay;
	  } // Check if there's a lower priority update somewhere else in the tree.


	  if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
	    // Mark the current render as suspended, and then mark that there's a
	    // pending update.
	    // TODO: This should immediately interrupt the current render, instead
	    // of waiting until the next time we yield.
	    markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
	    markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
	  }
	}
	function renderDidError() {
	  if (workInProgressRootExitStatus !== RootCompleted) {
	    workInProgressRootExitStatus = RootErrored;
	  }
	} // Called during render to determine if anything has suspended.
	// Returns false if we're not sure.

	function renderHasNotSuspendedYet() {
	  // If something errored or completed, we can't really be sure,
	  // so those are false.
	  return workInProgressRootExitStatus === RootIncomplete;
	}

	function inferTimeFromExpirationTime(expirationTime) {
	  // We don't know exactly when the update was scheduled, but we can infer an
	  // approximate start time from the expiration time.
	  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
	  return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
	}

	function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
	  // We don't know exactly when the update was scheduled, but we can infer an
	  // approximate start time from the expiration time by subtracting the timeout
	  // that was added to the event time.
	  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
	  return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
	} // The work loop is an extremely hot path. Tell Closure not to inline it.

	/** @noinline */


	function workLoopSync() {
	  // Already timed out, so perform work without checking if we need to yield.
	  while (workInProgress !== null) {
	    workInProgress = performUnitOfWork(workInProgress);
	  }
	}
	/** @noinline */


	function workLoopConcurrent() {
	  // Perform work until Scheduler asks us to yield
	  while (workInProgress !== null && !shouldYield()) {
	    workInProgress = performUnitOfWork(workInProgress);
	  }
	}

	function performUnitOfWork(unitOfWork) {
	  // The current, flushed, state of this fiber is the alternate. Ideally
	  // nothing should rely on this, but relying on it here means that we don't
	  // need an additional field on the work in progress.
	  var current = unitOfWork.alternate;
	  startWorkTimer(unitOfWork);
	  setCurrentFiber(unitOfWork);
	  var next;

	  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
	    startProfilerTimer(unitOfWork);
	    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
	    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
	  } else {
	    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
	  }

	  resetCurrentFiber();
	  unitOfWork.memoizedProps = unitOfWork.pendingProps;

	  if (next === null) {
	    // If this doesn't spawn new work, complete the current work.
	    next = completeUnitOfWork(unitOfWork);
	  }

	  ReactCurrentOwner$2.current = null;
	  return next;
	}

	function completeUnitOfWork(unitOfWork) {
	  // Attempt to complete the current unit of work, then move to the next
	  // sibling. If there are no more siblings, return to the parent fiber.
	  workInProgress = unitOfWork;

	  do {
	    // The current, flushed, state of this fiber is the alternate. Ideally
	    // nothing should rely on this, but relying on it here means that we don't
	    // need an additional field on the work in progress.
	    var current = workInProgress.alternate;
	    var returnFiber = workInProgress.return; // Check if the work completed or if something threw.

	    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
	      setCurrentFiber(workInProgress);
	      var next = void 0;

	      if ( (workInProgress.mode & ProfileMode) === NoMode) {
	        next = completeWork(current, workInProgress, renderExpirationTime$1);
	      } else {
	        startProfilerTimer(workInProgress);
	        next = completeWork(current, workInProgress, renderExpirationTime$1); // Update render duration assuming we didn't error.

	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
	      }

	      stopWorkTimer(workInProgress);
	      resetCurrentFiber();
	      resetChildExpirationTime(workInProgress);

	      if (next !== null) {
	        // Completing this fiber spawned new work. Work on that next.
	        return next;
	      }

	      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
	      (returnFiber.effectTag & Incomplete) === NoEffect) {
	        // Append all the effects of the subtree and this fiber onto the effect
	        // list of the parent. The completion order of the children affects the
	        // side-effect order.
	        if (returnFiber.firstEffect === null) {
	          returnFiber.firstEffect = workInProgress.firstEffect;
	        }

	        if (workInProgress.lastEffect !== null) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
	          }

	          returnFiber.lastEffect = workInProgress.lastEffect;
	        } // If this fiber had side-effects, we append it AFTER the children's
	        // side-effects. We can perform certain side-effects earlier if needed,
	        // by doing multiple passes over the effect list. We don't want to
	        // schedule our own side-effect on our own list because if end up
	        // reusing children we'll schedule this effect onto itself since we're
	        // at the end.


	        var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect
	        // list. PerformedWork effect is read by React DevTools but shouldn't be
	        // committed.

	        if (effectTag > PerformedWork) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress;
	          } else {
	            returnFiber.firstEffect = workInProgress;
	          }

	          returnFiber.lastEffect = workInProgress;
	        }
	      }
	    } else {
	      // This fiber did not complete because something threw. Pop values off
	      // the stack without entering the complete phase. If this is a boundary,
	      // capture values if possible.
	      var _next = unwindWork(workInProgress); // Because this fiber did not complete, don't reset its expiration time.


	      if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	        // Record the render duration for the fiber that errored.
	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

	        var actualDuration = workInProgress.actualDuration;
	        var child = workInProgress.child;

	        while (child !== null) {
	          actualDuration += child.actualDuration;
	          child = child.sibling;
	        }

	        workInProgress.actualDuration = actualDuration;
	      }

	      if (_next !== null) {
	        // If completing this work spawned new work, do that next. We'll come
	        // back here again.
	        // Since we're restarting, remove anything that is not a host effect
	        // from the effect tag.
	        // TODO: The name stopFailedWorkTimer is misleading because Suspense
	        // also captures and restarts.
	        stopFailedWorkTimer(workInProgress);
	        _next.effectTag &= HostEffectMask;
	        return _next;
	      }

	      stopWorkTimer(workInProgress);

	      if (returnFiber !== null) {
	        // Mark the parent fiber as incomplete and clear its effect list.
	        returnFiber.firstEffect = returnFiber.lastEffect = null;
	        returnFiber.effectTag |= Incomplete;
	      }
	    }

	    var siblingFiber = workInProgress.sibling;

	    if (siblingFiber !== null) {
	      // If there is more work to do in this returnFiber, do that next.
	      return siblingFiber;
	    } // Otherwise, return to the parent


	    workInProgress = returnFiber;
	  } while (workInProgress !== null); // We've reached the root.


	  if (workInProgressRootExitStatus === RootIncomplete) {
	    workInProgressRootExitStatus = RootCompleted;
	  }

	  return null;
	}

	function getRemainingExpirationTime(fiber) {
	  var updateExpirationTime = fiber.expirationTime;
	  var childExpirationTime = fiber.childExpirationTime;
	  return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
	}

	function resetChildExpirationTime(completedWork) {
	  if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
	    // The children of this component are hidden. Don't bubble their
	    // expiration times.
	    return;
	  }

	  var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

	  if ( (completedWork.mode & ProfileMode) !== NoMode) {
	    // In profiling mode, resetChildExpirationTime is also used to reset
	    // profiler durations.
	    var actualDuration = completedWork.actualDuration;
	    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
	    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
	    // When work is done, it should bubble to the parent's actualDuration. If
	    // the fiber has not been cloned though, (meaning no work was done), then
	    // this value will reflect the amount of time spent working on a previous
	    // render. In that case it should not bubble. We determine whether it was
	    // cloned by comparing the child pointer.

	    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
	    var child = completedWork.child;

	    while (child !== null) {
	      var childUpdateExpirationTime = child.expirationTime;
	      var childChildExpirationTime = child.childExpirationTime;

	      if (childUpdateExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = childUpdateExpirationTime;
	      }

	      if (childChildExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = childChildExpirationTime;
	      }

	      if (shouldBubbleActualDurations) {
	        actualDuration += child.actualDuration;
	      }

	      treeBaseDuration += child.treeBaseDuration;
	      child = child.sibling;
	    }

	    completedWork.actualDuration = actualDuration;
	    completedWork.treeBaseDuration = treeBaseDuration;
	  } else {
	    var _child = completedWork.child;

	    while (_child !== null) {
	      var _childUpdateExpirationTime = _child.expirationTime;
	      var _childChildExpirationTime = _child.childExpirationTime;

	      if (_childUpdateExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = _childUpdateExpirationTime;
	      }

	      if (_childChildExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = _childChildExpirationTime;
	      }

	      _child = _child.sibling;
	    }
	  }

	  completedWork.childExpirationTime = newChildExpirationTime;
	}

	function commitRoot(root) {
	  var renderPriorityLevel = getCurrentPriorityLevel();
	  runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
	  return null;
	}

	function commitRootImpl(root, renderPriorityLevel) {
	  do {
	    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
	    // means `flushPassiveEffects` will sometimes result in additional
	    // passive effects. So we need to keep flushing in a loop until there are
	    // no more pending effects.
	    // TODO: Might be better if `flushPassiveEffects` did not automatically
	    // flush synchronous work at the end, to avoid factoring hazards like this.
	    flushPassiveEffects();
	  } while (rootWithPendingPassiveEffects !== null);

	  flushRenderPhaseStrictModeWarningsInDEV();

	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error( "Should not already be working." );
	    }
	  }

	  var finishedWork = root.finishedWork;
	  var expirationTime = root.finishedExpirationTime;

	  if (finishedWork === null) {
	    return null;
	  }

	  root.finishedWork = null;
	  root.finishedExpirationTime = NoWork;

	  if (!(finishedWork !== root.current)) {
	    {
	      throw Error( "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  } // commitRoot never returns a continuation; it always finishes synchronously.
	  // So we can clear these now to allow a new callback to be scheduled.


	  root.callbackNode = null;
	  root.callbackExpirationTime = NoWork;
	  root.callbackPriority = NoPriority;
	  root.nextKnownPendingLevel = NoWork;
	  startCommitTimer(); // Update the first and last pending times on this root. The new first
	  // pending time is whatever is left on the root fiber.

	  var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
	  markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);

	  if (root === workInProgressRoot) {
	    // We can reset these now that they are finished.
	    workInProgressRoot = null;
	    workInProgress = null;
	    renderExpirationTime$1 = NoWork;
	  } // This indicates that the last root we worked on is not the same one that
	  // we're committing now. This most commonly happens when a suspended root
	  // times out.
	  // Get the list of effects.


	  var firstEffect;

	  if (finishedWork.effectTag > PerformedWork) {
	    // A fiber's effect list consists only of its children, not itself. So if
	    // the root has an effect, we need to add it to the end of the list. The
	    // resulting list is the set that would belong to the root's parent, if it
	    // had one; that is, all the effects in the tree including the root.
	    if (finishedWork.lastEffect !== null) {
	      finishedWork.lastEffect.nextEffect = finishedWork;
	      firstEffect = finishedWork.firstEffect;
	    } else {
	      firstEffect = finishedWork;
	    }
	  } else {
	    // There is no effect on the root.
	    firstEffect = finishedWork.firstEffect;
	  }

	  if (firstEffect !== null) {
	    var prevExecutionContext = executionContext;
	    executionContext |= CommitContext;
	    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

	    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
	    // of the effect list for each phase: all mutation effects come before all
	    // layout effects, and so on.
	    // The first phase a "before mutation" phase. We use this phase to read the
	    // state of the host tree right before we mutate it. This is where
	    // getSnapshotBeforeUpdate is called.

	    startCommitSnapshotEffectsTimer();
	    prepareForCommit(root.containerInfo);
	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var error = clearCaughtError();
	          captureCommitPhaseError(nextEffect, error);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null);

	    stopCommitSnapshotEffectsTimer();

	    {
	      // Mark the current commit time to be shared by all Profilers in this
	      // batch. This enables them to be grouped later.
	      recordCommitTime();
	    } // The next phase is the mutation phase, where we mutate the host tree.


	    startCommitHostEffectsTimer();
	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var _error = clearCaughtError();

	          captureCommitPhaseError(nextEffect, _error);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null);

	    stopCommitHostEffectsTimer();
	    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
	    // the mutation phase, so that the previous tree is still current during
	    // componentWillUnmount, but before the layout phase, so that the finished
	    // work is current during componentDidMount/Update.

	    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
	    // the host tree after it's been mutated. The idiomatic use case for this is
	    // layout, but class component lifecycles also fire here for legacy reasons.

	    startCommitLifeCyclesTimer();
	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var _error2 = clearCaughtError();

	          captureCommitPhaseError(nextEffect, _error2);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null);

	    stopCommitLifeCyclesTimer();
	    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
	    // opportunity to paint.

	    requestPaint();

	    {
	      popInteractions(prevInteractions);
	    }

	    executionContext = prevExecutionContext;
	  } else {
	    // No effects.
	    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
	    // no effects.
	    // TODO: Maybe there's a better way to report this.

	    startCommitSnapshotEffectsTimer();
	    stopCommitSnapshotEffectsTimer();

	    {
	      recordCommitTime();
	    }

	    startCommitHostEffectsTimer();
	    stopCommitHostEffectsTimer();
	    startCommitLifeCyclesTimer();
	    stopCommitLifeCyclesTimer();
	  }

	  stopCommitTimer();
	  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

	  if (rootDoesHavePassiveEffects) {
	    // This commit has passive effects. Stash a reference to them. But don't
	    // schedule a callback until after flushing layout work.
	    rootDoesHavePassiveEffects = false;
	    rootWithPendingPassiveEffects = root;
	    pendingPassiveEffectsExpirationTime = expirationTime;
	    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
	  } else {
	    // We are done with the effect chain at this point so let's clear the
	    // nextEffect pointers to assist with GC. If we have passive effects, we'll
	    // clear this in flushPassiveEffects.
	    nextEffect = firstEffect;

	    while (nextEffect !== null) {
	      var nextNextEffect = nextEffect.nextEffect;
	      nextEffect.nextEffect = null;
	      nextEffect = nextNextEffect;
	    }
	  } // Check if there's remaining work on this root


	  var remainingExpirationTime = root.firstPendingTime;

	  if (remainingExpirationTime !== NoWork) {
	    {
	      if (spawnedWorkDuringRender !== null) {
	        var expirationTimes = spawnedWorkDuringRender;
	        spawnedWorkDuringRender = null;

	        for (var i = 0; i < expirationTimes.length; i++) {
	          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
	        }
	      }

	      schedulePendingInteractions(root, remainingExpirationTime);
	    }
	  } else {
	    // If there's no remaining work, we can clear the set of already failed
	    // error boundaries.
	    legacyErrorBoundariesThatAlreadyFailed = null;
	  }

	  {
	    if (!rootDidHavePassiveEffects) {
	      // If there are no passive effects, then we can complete the pending interactions.
	      // Otherwise, we'll wait until after the passive effects are flushed.
	      // Wait to do this until after remaining work has been scheduled,
	      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
	      finishPendingInteractions(root, expirationTime);
	    }
	  }

	  if (remainingExpirationTime === Sync) {
	    // Count the number of times the root synchronously re-renders without
	    // finishing. If there are too many, it indicates an infinite update loop.
	    if (root === rootWithNestedUpdates) {
	      nestedUpdateCount++;
	    } else {
	      nestedUpdateCount = 0;
	      rootWithNestedUpdates = root;
	    }
	  } else {
	    nestedUpdateCount = 0;
	  }

	  onCommitRoot(finishedWork.stateNode, expirationTime); // Always call this before exiting `commitRoot`, to ensure that any
	  // additional work on this root is scheduled.

	  ensureRootIsScheduled(root);

	  if (hasUncaughtError) {
	    hasUncaughtError = false;
	    var _error3 = firstUncaughtError;
	    firstUncaughtError = null;
	    throw _error3;
	  }

	  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
	    // This is a legacy edge case. We just committed the initial mount of
	    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
	    // synchronously, but layout updates should be deferred until the end
	    // of the batch.
	    return null;
	  } // If layout work was scheduled, flush it now.


	  flushSyncCallbackQueue();
	  return null;
	}

	function commitBeforeMutationEffects() {
	  while (nextEffect !== null) {
	    var effectTag = nextEffect.effectTag;

	    if ((effectTag & Snapshot) !== NoEffect) {
	      setCurrentFiber(nextEffect);
	      recordEffect();
	      var current = nextEffect.alternate;
	      commitBeforeMutationLifeCycles(current, nextEffect);
	      resetCurrentFiber();
	    }

	    if ((effectTag & Passive) !== NoEffect) {
	      // If there are passive effects, schedule a callback to flush at
	      // the earliest opportunity.
	      if (!rootDoesHavePassiveEffects) {
	        rootDoesHavePassiveEffects = true;
	        scheduleCallback(NormalPriority, function () {
	          flushPassiveEffects();
	          return null;
	        });
	      }
	    }

	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function commitMutationEffects(root, renderPriorityLevel) {
	  // TODO: Should probably move the bulk of this function to commitWork.
	  while (nextEffect !== null) {
	    setCurrentFiber(nextEffect);
	    var effectTag = nextEffect.effectTag;

	    if (effectTag & ContentReset) {
	      commitResetTextContent(nextEffect);
	    }

	    if (effectTag & Ref) {
	      var current = nextEffect.alternate;

	      if (current !== null) {
	        commitDetachRef(current);
	      }
	    } // The following switch statement is only concerned about placement,
	    // updates, and deletions. To avoid needing to add a case for every possible
	    // bitmap value, we remove the secondary effects from the effect tag and
	    // switch on that value.


	    var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);

	    switch (primaryEffectTag) {
	      case Placement:
	        {
	          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
	          // inserted, before any life-cycles like componentDidMount gets called.
	          // TODO: findDOMNode doesn't rely on this any more but isMounted does
	          // and isMounted is deprecated anyway so we should be able to kill this.

	          nextEffect.effectTag &= ~Placement;
	          break;
	        }

	      case PlacementAndUpdate:
	        {
	          // Placement
	          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
	          // inserted, before any life-cycles like componentDidMount gets called.

	          nextEffect.effectTag &= ~Placement; // Update

	          var _current = nextEffect.alternate;
	          commitWork(_current, nextEffect);
	          break;
	        }

	      case Hydrating:
	        {
	          nextEffect.effectTag &= ~Hydrating;
	          break;
	        }

	      case HydratingAndUpdate:
	        {
	          nextEffect.effectTag &= ~Hydrating; // Update

	          var _current2 = nextEffect.alternate;
	          commitWork(_current2, nextEffect);
	          break;
	        }

	      case Update:
	        {
	          var _current3 = nextEffect.alternate;
	          commitWork(_current3, nextEffect);
	          break;
	        }

	      case Deletion:
	        {
	          commitDeletion(root, nextEffect, renderPriorityLevel);
	          break;
	        }
	    } // TODO: Only record a mutation effect if primaryEffectTag is non-zero.


	    recordEffect();
	    resetCurrentFiber();
	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function commitLayoutEffects(root, committedExpirationTime) {
	  // TODO: Should probably move the bulk of this function to commitWork.
	  while (nextEffect !== null) {
	    setCurrentFiber(nextEffect);
	    var effectTag = nextEffect.effectTag;

	    if (effectTag & (Update | Callback)) {
	      recordEffect();
	      var current = nextEffect.alternate;
	      commitLifeCycles(root, current, nextEffect);
	    }

	    if (effectTag & Ref) {
	      recordEffect();
	      commitAttachRef(nextEffect);
	    }

	    resetCurrentFiber();
	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function flushPassiveEffects() {
	  if (pendingPassiveEffectsRenderPriority !== NoPriority) {
	    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
	    pendingPassiveEffectsRenderPriority = NoPriority;
	    return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
	  }
	}

	function flushPassiveEffectsImpl() {
	  if (rootWithPendingPassiveEffects === null) {
	    return false;
	  }

	  var root = rootWithPendingPassiveEffects;
	  var expirationTime = pendingPassiveEffectsExpirationTime;
	  rootWithPendingPassiveEffects = null;
	  pendingPassiveEffectsExpirationTime = NoWork;

	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error( "Cannot flush passive effects while already rendering." );
	    }
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= CommitContext;
	  var prevInteractions = pushInteractions(root);

	  {
	    // Note: This currently assumes there are no passive effects on the root fiber
	    // because the root is not part of its own effect list.
	    // This could change in the future.
	    var _effect2 = root.current.firstEffect;

	    while (_effect2 !== null) {
	      {
	        setCurrentFiber(_effect2);
	        invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);

	        if (hasCaughtError()) {
	          if (!(_effect2 !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var _error5 = clearCaughtError();

	          captureCommitPhaseError(_effect2, _error5);
	        }

	        resetCurrentFiber();
	      }

	      var nextNextEffect = _effect2.nextEffect; // Remove nextEffect pointer to assist GC

	      _effect2.nextEffect = null;
	      _effect2 = nextNextEffect;
	    }
	  }

	  {
	    popInteractions(prevInteractions);
	    finishPendingInteractions(root, expirationTime);
	  }

	  executionContext = prevExecutionContext;
	  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
	  // exceeds the limit, we'll fire a warning.

	  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
	  return true;
	}

	function isAlreadyFailedLegacyErrorBoundary(instance) {
	  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
	}
	function markLegacyErrorBoundaryAsFailed(instance) {
	  if (legacyErrorBoundariesThatAlreadyFailed === null) {
	    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
	  } else {
	    legacyErrorBoundariesThatAlreadyFailed.add(instance);
	  }
	}

	function prepareToThrowUncaughtError(error) {
	  if (!hasUncaughtError) {
	    hasUncaughtError = true;
	    firstUncaughtError = error;
	  }
	}

	var onUncaughtError = prepareToThrowUncaughtError;

	function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
	  var errorInfo = createCapturedValue(error, sourceFiber);
	  var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
	  enqueueUpdate(rootFiber, update);
	  var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

	  if (root !== null) {
	    ensureRootIsScheduled(root);
	    schedulePendingInteractions(root, Sync);
	  }
	}

	function captureCommitPhaseError(sourceFiber, error) {
	  if (sourceFiber.tag === HostRoot) {
	    // Error was thrown at the root. There is no parent, so the root
	    // itself should capture it.
	    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
	    return;
	  }

	  var fiber = sourceFiber.return;

	  while (fiber !== null) {
	    if (fiber.tag === HostRoot) {
	      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
	      return;
	    } else if (fiber.tag === ClassComponent) {
	      var ctor = fiber.type;
	      var instance = fiber.stateNode;

	      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
	        var errorInfo = createCapturedValue(error, sourceFiber);
	        var update = createClassErrorUpdate(fiber, errorInfo, // TODO: This is always sync
	        Sync);
	        enqueueUpdate(fiber, update);
	        var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

	        if (root !== null) {
	          ensureRootIsScheduled(root);
	          schedulePendingInteractions(root, Sync);
	        }

	        return;
	      }
	    }

	    fiber = fiber.return;
	  }
	}
	function pingSuspendedRoot(root, thenable, suspendedTime) {
	  var pingCache = root.pingCache;

	  if (pingCache !== null) {
	    // The thenable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    pingCache.delete(thenable);
	  }

	  if (workInProgressRoot === root && renderExpirationTime$1 === suspendedTime) {
	    // Received a ping at the same priority level at which we're currently
	    // rendering. We might want to restart this render. This should mirror
	    // the logic of whether or not a root suspends once it completes.
	    // TODO: If we're rendering sync either due to Sync, Batched or expired,
	    // we should probably never restart.
	    // If we're suspended with delay, we'll always suspend so we can always
	    // restart. If we're suspended without any updates, it might be a retry.
	    // If it's early in the retry we can restart. We can't know for sure
	    // whether we'll eventually process an update during this render pass,
	    // but it's somewhat unlikely that we get to a ping before that, since
	    // getting to the root most update is usually very fast.
	    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
	      // Restart from the root. Don't need to schedule a ping because
	      // we're already working on this tree.
	      prepareFreshStack(root, renderExpirationTime$1);
	    } else {
	      // Even though we can't restart right now, we might get an
	      // opportunity later. So we mark this render as having a ping.
	      workInProgressRootHasPendingPing = true;
	    }

	    return;
	  }

	  if (!isRootSuspendedAtTime(root, suspendedTime)) {
	    // The root is no longer suspended at this time.
	    return;
	  }

	  var lastPingedTime = root.lastPingedTime;

	  if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
	    // There's already a lower priority ping scheduled.
	    return;
	  } // Mark the time at which this ping was scheduled.


	  root.lastPingedTime = suspendedTime;

	  ensureRootIsScheduled(root);
	  schedulePendingInteractions(root, suspendedTime);
	}

	function retryTimedOutBoundary(boundaryFiber, retryTime) {
	  // The boundary fiber (a Suspense component or SuspenseList component)
	  // previously was rendered in its fallback state. One of the promises that
	  // suspended it has resolved, which means at least part of the tree was
	  // likely unblocked. Try rendering again, at a new expiration time.
	  if (retryTime === NoWork) {
	    var suspenseConfig = null; // Retries don't carry over the already committed update.

	    var currentTime = requestCurrentTimeForUpdate();
	    retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
	  } // TODO: Special case idle priority?


	  var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

	  if (root !== null) {
	    ensureRootIsScheduled(root);
	    schedulePendingInteractions(root, retryTime);
	  }
	}
	function resolveRetryThenable(boundaryFiber, thenable) {
	  var retryTime = NoWork; // Default

	  var retryCache;

	  {
	    retryCache = boundaryFiber.stateNode;
	  }

	  if (retryCache !== null) {
	    // The thenable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    retryCache.delete(thenable);
	  }

	  retryTimedOutBoundary(boundaryFiber, retryTime);
	} // Computes the next Just Noticeable Difference (JND) boundary.
	// The theory is that a person can't tell the difference between small differences in time.
	// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
	// difference in the experience. However, waiting for longer might mean that we can avoid
	// showing an intermediate loading state. The longer we have already waited, the harder it
	// is to tell small differences in time. Therefore, the longer we've already waited,
	// the longer we can wait additionally. At some point we have to give up though.
	// We pick a train model where the next boundary commits at a consistent schedule.
	// These particular numbers are vague estimates. We expect to adjust them based on research.

	function jnd(timeElapsed) {
	  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
	}

	function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
	  var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

	  if (busyMinDurationMs <= 0) {
	    return 0;
	  }

	  var busyDelayMs = suspenseConfig.busyDelayMs | 0; // Compute the time until this render pass would expire.

	  var currentTimeMs = now();
	  var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
	  var timeElapsed = currentTimeMs - eventTimeMs;

	  if (timeElapsed <= busyDelayMs) {
	    // If we haven't yet waited longer than the initial delay, we don't
	    // have to wait any additional time.
	    return 0;
	  }

	  var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed; // This is the value that is passed to `setTimeout`.

	  return msUntilTimeout;
	}

	function checkForNestedUpdates() {
	  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
	    nestedUpdateCount = 0;
	    rootWithNestedUpdates = null;

	    {
	      {
	        throw Error( "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops." );
	      }
	    }
	  }

	  {
	    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
	      nestedPassiveUpdateCount = 0;

	      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
	    }
	  }
	}

	function flushRenderPhaseStrictModeWarningsInDEV() {
	  {
	    ReactStrictModeWarnings.flushLegacyContextWarning();

	    {
	      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
	    }
	  }
	}

	function stopFinishedWorkLoopTimer() {
	  var didCompleteRoot = true;
	  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
	  interruptedBy = null;
	}

	function stopInterruptedWorkLoopTimer() {
	  // TODO: Track which fiber caused the interruption.
	  var didCompleteRoot = false;
	  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
	  interruptedBy = null;
	}

	function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
	  if ( workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
	    interruptedBy = fiberThatReceivedUpdate;
	  }
	}

	var didWarnStateUpdateForUnmountedComponent = null;

	function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
	  {
	    var tag = fiber.tag;

	    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
	      // Only warn for user-defined components, not internal ones like Suspense.
	      return;
	    }
	    // the problematic code almost always lies inside that component.


	    var componentName = getComponentName(fiber.type) || 'ReactComponent';

	    if (didWarnStateUpdateForUnmountedComponent !== null) {
	      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
	        return;
	      }

	      didWarnStateUpdateForUnmountedComponent.add(componentName);
	    } else {
	      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
	    }

	    error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
	  }
	}

	var beginWork$1;

	{
	  var dummyFiber = null;

	  beginWork$1 = function (current, unitOfWork, expirationTime) {
	    // If a component throws an error, we replay it again in a synchronously
	    // dispatched event, so that the debugger will treat it as an uncaught
	    // error See ReactErrorUtils for more information.
	    // Before entering the begin phase, copy the work-in-progress onto a dummy
	    // fiber. If beginWork throws, we'll use this to reset the state.
	    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

	    try {
	      return beginWork(current, unitOfWork, expirationTime);
	    } catch (originalError) {
	      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
	        // Don't replay promises. Treat everything else like an error.
	        throw originalError;
	      } // Keep this code in sync with handleError; any changes here must have
	      // corresponding changes there.


	      resetContextDependencies();
	      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
	      // same fiber again.
	      // Unwind the failed stack frame

	      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

	      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

	      if ( unitOfWork.mode & ProfileMode) {
	        // Reset the profiler timer.
	        startProfilerTimer(unitOfWork);
	      } // Run beginWork again.


	      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, expirationTime);

	      if (hasCaughtError()) {
	        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
	        // Rethrow this error instead of the original one.

	        throw replayError;
	      } else {
	        // This branch is reachable if the render phase is impure.
	        throw originalError;
	      }
	    }
	  };
	}

	var didWarnAboutUpdateInRender = false;
	var didWarnAboutUpdateInRenderForAnotherComponent;

	{
	  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
	}

	function warnAboutRenderPhaseUpdatesInDEV(fiber) {
	  {
	    if (isRendering && (executionContext & RenderContext) !== NoContext) {
	      switch (fiber.tag) {
	        case FunctionComponent:
	        case ForwardRef:
	        case SimpleMemoComponent:
	          {
	            var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

	            var dedupeKey = renderingComponentName;

	            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
	              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
	              var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

	              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://fb.me/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
	            }

	            break;
	          }

	        case ClassComponent:
	          {
	            if (!didWarnAboutUpdateInRender) {
	              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

	              didWarnAboutUpdateInRender = true;
	            }

	            break;
	          }
	      }
	    }
	  }
	} // a 'shared' variable that changes when act() opens/closes in tests.


	var IsThisRendererActing = {
	  current: false
	};
	function warnIfNotScopedWithMatchingAct(fiber) {
	  {
	    if ( IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
	      error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + "import {act} from 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + "import TestRenderer from 'react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);' + '%s', getStackByFiberInDevAndProd(fiber));
	    }
	  }
	}
	function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
	  {
	    if ( (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
	      error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
	    }
	  }
	}

	function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
	  {
	    if ( executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
	      error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
	    }
	  }
	}

	var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

	var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
	// scheduler is the actual recommendation. The alternative could be a testing build,
	// a new lib, or whatever; we dunno just yet. This message is for early adopters
	// to get their tests right.

	function warnIfUnmockedScheduler(fiber) {
	  {
	    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
	      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
	        didWarnAboutUnmockedScheduler = true;

	        error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
	      }
	    }
	  }
	}

	function computeThreadID(root, expirationTime) {
	  // Interaction threads are unique per root and expiration time.
	  return expirationTime * 1000 + root.interactionThreadID;
	}

	function markSpawnedWork(expirationTime) {

	  if (spawnedWorkDuringRender === null) {
	    spawnedWorkDuringRender = [expirationTime];
	  } else {
	    spawnedWorkDuringRender.push(expirationTime);
	  }
	}

	function scheduleInteractions(root, expirationTime, interactions) {

	  if (interactions.size > 0) {
	    var pendingInteractionMap = root.pendingInteractionMap;
	    var pendingInteractions = pendingInteractionMap.get(expirationTime);

	    if (pendingInteractions != null) {
	      interactions.forEach(function (interaction) {
	        if (!pendingInteractions.has(interaction)) {
	          // Update the pending async work count for previously unscheduled interaction.
	          interaction.__count++;
	        }

	        pendingInteractions.add(interaction);
	      });
	    } else {
	      pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

	      interactions.forEach(function (interaction) {
	        interaction.__count++;
	      });
	    }

	    var subscriber = tracing.__subscriberRef.current;

	    if (subscriber !== null) {
	      var threadID = computeThreadID(root, expirationTime);
	      subscriber.onWorkScheduled(interactions, threadID);
	    }
	  }
	}

	function schedulePendingInteractions(root, expirationTime) {

	  scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
	}

	function startWorkOnPendingInteractions(root, expirationTime) {
	  // we can accurately attribute time spent working on it, And so that cascading
	  // work triggered during the render phase will be associated with it.


	  var interactions = new Set();
	  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
	    if (scheduledExpirationTime >= expirationTime) {
	      scheduledInteractions.forEach(function (interaction) {
	        return interactions.add(interaction);
	      });
	    }
	  }); // Store the current set of interactions on the FiberRoot for a few reasons:
	  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
	  // without having to recalculate it. We will also use it in commitWork() to
	  // pass to any Profiler onRender() hooks. This also provides DevTools with a
	  // way to access it when the onCommitRoot() hook is called.

	  root.memoizedInteractions = interactions;

	  if (interactions.size > 0) {
	    var subscriber = tracing.__subscriberRef.current;

	    if (subscriber !== null) {
	      var threadID = computeThreadID(root, expirationTime);

	      try {
	        subscriber.onWorkStarted(interactions, threadID);
	      } catch (error) {
	        // If the subscriber throws, rethrow it in a separate task
	        scheduleCallback(ImmediatePriority, function () {
	          throw error;
	        });
	      }
	    }
	  }
	}

	function finishPendingInteractions(root, committedExpirationTime) {

	  var earliestRemainingTimeAfterCommit = root.firstPendingTime;
	  var subscriber;

	  try {
	    subscriber = tracing.__subscriberRef.current;

	    if (subscriber !== null && root.memoizedInteractions.size > 0) {
	      var threadID = computeThreadID(root, committedExpirationTime);
	      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
	    }
	  } catch (error) {
	    // If the subscriber throws, rethrow it in a separate task
	    scheduleCallback(ImmediatePriority, function () {
	      throw error;
	    });
	  } finally {
	    // Clear completed interactions from the pending Map.
	    // Unless the render was suspended or cascading work was scheduled,
	    // In which case– leave pending interactions until the subsequent render.
	    var pendingInteractionMap = root.pendingInteractionMap;
	    pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
	      // Only decrement the pending interaction count if we're done.
	      // If there's still work at the current priority,
	      // That indicates that we are waiting for suspense data.
	      if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
	        pendingInteractionMap.delete(scheduledExpirationTime);
	        scheduledInteractions.forEach(function (interaction) {
	          interaction.__count--;

	          if (subscriber !== null && interaction.__count === 0) {
	            try {
	              subscriber.onInteractionScheduledWorkCompleted(interaction);
	            } catch (error) {
	              // If the subscriber throws, rethrow it in a separate task
	              scheduleCallback(ImmediatePriority, function () {
	                throw error;
	              });
	            }
	          }
	        });
	      }
	    });
	  }
	}

	var onScheduleFiberRoot = null;
	var onCommitFiberRoot = null;
	var onCommitFiberUnmount = null;
	var hasLoggedError = false;
	var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
	function injectInternals(internals) {
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	    // No DevTools
	    return false;
	  }

	  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

	  if (hook.isDisabled) {
	    // This isn't a real property on the hook, but it can be set to opt out
	    // of DevTools integration and associated warnings and logs.
	    // https://github.com/facebook/react/issues/3877
	    return true;
	  }

	  if (!hook.supportsFiber) {
	    {
	      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
	    } // DevTools exists, even though it doesn't support Fiber.


	    return true;
	  }

	  try {
	    var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

	    if (true) {
	      // Only used by Fast Refresh
	      if (typeof hook.onScheduleFiberRoot === 'function') {
	        onScheduleFiberRoot = function (root, children) {
	          try {
	            hook.onScheduleFiberRoot(rendererID, root, children);
	          } catch (err) {
	            if (true && !hasLoggedError) {
	              hasLoggedError = true;

	              error('React instrumentation encountered an error: %s', err);
	            }
	          }
	        };
	      }
	    }

	    onCommitFiberRoot = function (root, expirationTime) {
	      try {
	        var didError = (root.current.effectTag & DidCapture) === DidCapture;

	        if (enableProfilerTimer) {
	          var currentTime = getCurrentTime();
	          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
	          hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
	        }
	      } catch (err) {
	        if (true) {
	          if (!hasLoggedError) {
	            hasLoggedError = true;

	            error('React instrumentation encountered an error: %s', err);
	          }
	        }
	      }
	    };

	    onCommitFiberUnmount = function (fiber) {
	      try {
	        hook.onCommitFiberUnmount(rendererID, fiber);
	      } catch (err) {
	        if (true) {
	          if (!hasLoggedError) {
	            hasLoggedError = true;

	            error('React instrumentation encountered an error: %s', err);
	          }
	        }
	      }
	    };
	  } catch (err) {
	    // Catch all errors because it is unsafe to throw during initialization.
	    {
	      error('React instrumentation encountered an error: %s.', err);
	    }
	  } // DevTools exists


	  return true;
	}
	function onScheduleRoot(root, children) {
	  if (typeof onScheduleFiberRoot === 'function') {
	    onScheduleFiberRoot(root, children);
	  }
	}
	function onCommitRoot(root, expirationTime) {
	  if (typeof onCommitFiberRoot === 'function') {
	    onCommitFiberRoot(root, expirationTime);
	  }
	}
	function onCommitUnmount(fiber) {
	  if (typeof onCommitFiberUnmount === 'function') {
	    onCommitFiberUnmount(fiber);
	  }
	}

	var hasBadMapPolyfill;

	{
	  hasBadMapPolyfill = false;

	  try {
	    var nonExtensibleObject = Object.preventExtensions({});
	    var testMap = new Map([[nonExtensibleObject, null]]);
	    var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
	    // https://github.com/rollup/rollup/issues/1771
	    // TODO: we can remove these if Rollup fixes the bug.

	    testMap.set(0, 0);
	    testSet.add(0);
	  } catch (e) {
	    // TODO: Consider warning about bad polyfills
	    hasBadMapPolyfill = true;
	  }
	}

	var debugCounter = 1;

	function FiberNode(tag, pendingProps, key, mode) {
	  // Instance
	  this.tag = tag;
	  this.key = key;
	  this.elementType = null;
	  this.type = null;
	  this.stateNode = null; // Fiber

	  this.return = null;
	  this.child = null;
	  this.sibling = null;
	  this.index = 0;
	  this.ref = null;
	  this.pendingProps = pendingProps;
	  this.memoizedProps = null;
	  this.updateQueue = null;
	  this.memoizedState = null;
	  this.dependencies = null;
	  this.mode = mode; // Effects

	  this.effectTag = NoEffect;
	  this.nextEffect = null;
	  this.firstEffect = null;
	  this.lastEffect = null;
	  this.expirationTime = NoWork;
	  this.childExpirationTime = NoWork;
	  this.alternate = null;

	  {
	    // Note: The following is done to avoid a v8 performance cliff.
	    //
	    // Initializing the fields below to smis and later updating them with
	    // double values will cause Fibers to end up having separate shapes.
	    // This behavior/bug has something to do with Object.preventExtension().
	    // Fortunately this only impacts DEV builds.
	    // Unfortunately it makes React unusably slow for some applications.
	    // To work around this, initialize the fields below with doubles.
	    //
	    // Learn more about this here:
	    // https://github.com/facebook/react/issues/14365
	    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
	    this.actualDuration = Number.NaN;
	    this.actualStartTime = Number.NaN;
	    this.selfBaseDuration = Number.NaN;
	    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
	    // This won't trigger the performance cliff mentioned above,
	    // and it simplifies other profiler code (including DevTools).

	    this.actualDuration = 0;
	    this.actualStartTime = -1;
	    this.selfBaseDuration = 0;
	    this.treeBaseDuration = 0;
	  } // This is normally DEV-only except www when it adds listeners.
	  // TODO: remove the User Timing integration in favor of Root Events.


	  {
	    this._debugID = debugCounter++;
	    this._debugIsCurrentlyTiming = false;
	  }

	  {
	    this._debugSource = null;
	    this._debugOwner = null;
	    this._debugNeedsRemount = false;
	    this._debugHookTypes = null;

	    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
	      Object.preventExtensions(this);
	    }
	  }
	} // This is a constructor function, rather than a POJO constructor, still
	// please ensure we do the following:
	// 1) Nobody should add any instance methods on this. Instance methods can be
	//    more difficult to predict when they get optimized and they are almost
	//    never inlined properly in static compilers.
	// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
	//    always know when it is a fiber.
	// 3) We might want to experiment with using numeric keys since they are easier
	//    to optimize in a non-JIT environment.
	// 4) We can easily go from a constructor to a createFiber object literal if that
	//    is faster.
	// 5) It should be easy to port this to a C struct and keep a C implementation
	//    compatible.


	var createFiber = function (tag, pendingProps, key, mode) {
	  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	  return new FiberNode(tag, pendingProps, key, mode);
	};

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function isSimpleFunctionComponent(type) {
	  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
	}
	function resolveLazyComponentTag(Component) {
	  if (typeof Component === 'function') {
	    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
	  } else if (Component !== undefined && Component !== null) {
	    var $$typeof = Component.$$typeof;

	    if ($$typeof === REACT_FORWARD_REF_TYPE) {
	      return ForwardRef;
	    }

	    if ($$typeof === REACT_MEMO_TYPE) {
	      return MemoComponent;
	    }
	  }

	  return IndeterminateComponent;
	} // This is used to create an alternate fiber to do work on.

	function createWorkInProgress(current, pendingProps) {
	  var workInProgress = current.alternate;

	  if (workInProgress === null) {
	    // We use a double buffering pooling technique because we know that we'll
	    // only ever need at most two versions of a tree. We pool the "other" unused
	    // node that we're free to reuse. This is lazily created to avoid allocating
	    // extra objects for things that are never updated. It also allow us to
	    // reclaim the extra memory if needed.
	    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
	    workInProgress.elementType = current.elementType;
	    workInProgress.type = current.type;
	    workInProgress.stateNode = current.stateNode;

	    {
	      // DEV-only fields
	      {
	        workInProgress._debugID = current._debugID;
	      }

	      workInProgress._debugSource = current._debugSource;
	      workInProgress._debugOwner = current._debugOwner;
	      workInProgress._debugHookTypes = current._debugHookTypes;
	    }

	    workInProgress.alternate = current;
	    current.alternate = workInProgress;
	  } else {
	    workInProgress.pendingProps = pendingProps; // We already have an alternate.
	    // Reset the effect tag.

	    workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

	    workInProgress.nextEffect = null;
	    workInProgress.firstEffect = null;
	    workInProgress.lastEffect = null;

	    {
	      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
	      // This prevents time from endlessly accumulating in new commits.
	      // This has the downside of resetting values for different priority renders,
	      // But works for yielding (the common case) and should support resuming.
	      workInProgress.actualDuration = 0;
	      workInProgress.actualStartTime = -1;
	    }
	  }

	  workInProgress.childExpirationTime = current.childExpirationTime;
	  workInProgress.expirationTime = current.expirationTime;
	  workInProgress.child = current.child;
	  workInProgress.memoizedProps = current.memoizedProps;
	  workInProgress.memoizedState = current.memoizedState;
	  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
	  // it cannot be shared with the current fiber.

	  var currentDependencies = current.dependencies;
	  workInProgress.dependencies = currentDependencies === null ? null : {
	    expirationTime: currentDependencies.expirationTime,
	    firstContext: currentDependencies.firstContext,
	    responders: currentDependencies.responders
	  }; // These will be overridden during the parent's reconciliation

	  workInProgress.sibling = current.sibling;
	  workInProgress.index = current.index;
	  workInProgress.ref = current.ref;

	  {
	    workInProgress.selfBaseDuration = current.selfBaseDuration;
	    workInProgress.treeBaseDuration = current.treeBaseDuration;
	  }

	  {
	    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

	    switch (workInProgress.tag) {
	      case IndeterminateComponent:
	      case FunctionComponent:
	      case SimpleMemoComponent:
	        workInProgress.type = resolveFunctionForHotReloading(current.type);
	        break;

	      case ClassComponent:
	        workInProgress.type = resolveClassForHotReloading(current.type);
	        break;

	      case ForwardRef:
	        workInProgress.type = resolveForwardRefForHotReloading(current.type);
	        break;
	    }
	  }

	  return workInProgress;
	} // Used to reuse a Fiber for a second pass.

	function resetWorkInProgress(workInProgress, renderExpirationTime) {
	  // This resets the Fiber to what createFiber or createWorkInProgress would
	  // have set the values to before during the first pass. Ideally this wouldn't
	  // be necessary but unfortunately many code paths reads from the workInProgress
	  // when they should be reading from current and writing to workInProgress.
	  // We assume pendingProps, index, key, ref, return are still untouched to
	  // avoid doing another reconciliation.
	  // Reset the effect tag but keep any Placement tags, since that's something
	  // that child fiber is setting, not the reconciliation.
	  workInProgress.effectTag &= Placement; // The effect list is no longer valid.

	  workInProgress.nextEffect = null;
	  workInProgress.firstEffect = null;
	  workInProgress.lastEffect = null;
	  var current = workInProgress.alternate;

	  if (current === null) {
	    // Reset to createFiber's initial values.
	    workInProgress.childExpirationTime = NoWork;
	    workInProgress.expirationTime = renderExpirationTime;
	    workInProgress.child = null;
	    workInProgress.memoizedProps = null;
	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null;
	    workInProgress.dependencies = null;

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = 0;
	      workInProgress.treeBaseDuration = 0;
	    }
	  } else {
	    // Reset to the cloned values that createWorkInProgress would've.
	    workInProgress.childExpirationTime = current.childExpirationTime;
	    workInProgress.expirationTime = current.expirationTime;
	    workInProgress.child = current.child;
	    workInProgress.memoizedProps = current.memoizedProps;
	    workInProgress.memoizedState = current.memoizedState;
	    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
	    // it cannot be shared with the current fiber.

	    var currentDependencies = current.dependencies;
	    workInProgress.dependencies = currentDependencies === null ? null : {
	      expirationTime: currentDependencies.expirationTime,
	      firstContext: currentDependencies.firstContext,
	      responders: currentDependencies.responders
	    };

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = current.selfBaseDuration;
	      workInProgress.treeBaseDuration = current.treeBaseDuration;
	    }
	  }

	  return workInProgress;
	}
	function createHostRootFiber(tag) {
	  var mode;

	  if (tag === ConcurrentRoot) {
	    mode = ConcurrentMode | BlockingMode | StrictMode;
	  } else if (tag === BlockingRoot) {
	    mode = BlockingMode | StrictMode;
	  } else {
	    mode = NoMode;
	  }

	  if ( isDevToolsPresent) {
	    // Always collect profile timings when DevTools are present.
	    // This enables DevTools to start capturing timing at any point–
	    // Without some nodes in the tree having empty base times.
	    mode |= ProfileMode;
	  }

	  return createFiber(HostRoot, null, null, mode);
	}
	function createFiberFromTypeAndProps(type, // React$ElementType
	key, pendingProps, owner, mode, expirationTime) {
	  var fiber;
	  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

	  var resolvedType = type;

	  if (typeof type === 'function') {
	    if (shouldConstruct(type)) {
	      fiberTag = ClassComponent;

	      {
	        resolvedType = resolveClassForHotReloading(resolvedType);
	      }
	    } else {
	      {
	        resolvedType = resolveFunctionForHotReloading(resolvedType);
	      }
	    }
	  } else if (typeof type === 'string') {
	    fiberTag = HostComponent;
	  } else {
	    getTag: switch (type) {
	      case REACT_FRAGMENT_TYPE:
	        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

	      case REACT_CONCURRENT_MODE_TYPE:
	        fiberTag = Mode;
	        mode |= ConcurrentMode | BlockingMode | StrictMode;
	        break;

	      case REACT_STRICT_MODE_TYPE:
	        fiberTag = Mode;
	        mode |= StrictMode;
	        break;

	      case REACT_PROFILER_TYPE:
	        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

	      case REACT_SUSPENSE_TYPE:
	        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

	      case REACT_SUSPENSE_LIST_TYPE:
	        return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

	      default:
	        {
	          if (typeof type === 'object' && type !== null) {
	            switch (type.$$typeof) {
	              case REACT_PROVIDER_TYPE:
	                fiberTag = ContextProvider;
	                break getTag;

	              case REACT_CONTEXT_TYPE:
	                // This is a consumer
	                fiberTag = ContextConsumer;
	                break getTag;

	              case REACT_FORWARD_REF_TYPE:
	                fiberTag = ForwardRef;

	                {
	                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
	                }

	                break getTag;

	              case REACT_MEMO_TYPE:
	                fiberTag = MemoComponent;
	                break getTag;

	              case REACT_LAZY_TYPE:
	                fiberTag = LazyComponent;
	                resolvedType = null;
	                break getTag;

	              case REACT_BLOCK_TYPE:
	                fiberTag = Block;
	                break getTag;

	            }
	          }

	          var info = '';

	          {
	            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
	            }

	            var ownerName = owner ? getComponentName(owner.type) : null;

	            if (ownerName) {
	              info += '\n\nCheck the render method of `' + ownerName + '`.';
	            }
	          }

	          {
	            {
	              throw Error( "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info );
	            }
	          }
	        }
	    }
	  }

	  fiber = createFiber(fiberTag, pendingProps, key, mode);
	  fiber.elementType = type;
	  fiber.type = resolvedType;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromElement(element, mode, expirationTime) {
	  var owner = null;

	  {
	    owner = element._owner;
	  }

	  var type = element.type;
	  var key = element.key;
	  var pendingProps = element.props;
	  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);

	  {
	    fiber._debugSource = element._source;
	    fiber._debugOwner = element._owner;
	  }

	  return fiber;
	}
	function createFiberFromFragment(elements, mode, expirationTime, key) {
	  var fiber = createFiber(Fragment, elements, key, mode);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
	  {
	    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
	      error('Profiler must specify an "id" string and "onRender" function as props');
	    }
	  }

	  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

	  fiber.elementType = REACT_PROFILER_TYPE;
	  fiber.type = REACT_PROFILER_TYPE;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
	  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
	  // This needs to be fixed in getComponentName so that it relies on the tag
	  // instead.

	  fiber.type = REACT_SUSPENSE_TYPE;
	  fiber.elementType = REACT_SUSPENSE_TYPE;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
	  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

	  {
	    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
	    // This needs to be fixed in getComponentName so that it relies on the tag
	    // instead.
	    fiber.type = REACT_SUSPENSE_LIST_TYPE;
	  }

	  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromText(content, mode, expirationTime) {
	  var fiber = createFiber(HostText, content, null, mode);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromHostInstanceForDeletion() {
	  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

	  fiber.elementType = 'DELETED';
	  fiber.type = 'DELETED';
	  return fiber;
	}
	function createFiberFromPortal(portal, mode, expirationTime) {
	  var pendingProps = portal.children !== null ? portal.children : [];
	  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
	  fiber.expirationTime = expirationTime;
	  fiber.stateNode = {
	    containerInfo: portal.containerInfo,
	    pendingChildren: null,
	    // Used by persistent updates
	    implementation: portal.implementation
	  };
	  return fiber;
	} // Used for stashing WIP properties to replay failed work in DEV.

	function assignFiberPropertiesInDEV(target, source) {
	  if (target === null) {
	    // This Fiber's initial properties will always be overwritten.
	    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
	    target = createFiber(IndeterminateComponent, null, null, NoMode);
	  } // This is intentionally written as a list of all properties.
	  // We tried to use Object.assign() instead but this is called in
	  // the hottest path, and Object.assign() was too slow:
	  // https://github.com/facebook/react/issues/12502
	  // This code is DEV-only so size is not a concern.


	  target.tag = source.tag;
	  target.key = source.key;
	  target.elementType = source.elementType;
	  target.type = source.type;
	  target.stateNode = source.stateNode;
	  target.return = source.return;
	  target.child = source.child;
	  target.sibling = source.sibling;
	  target.index = source.index;
	  target.ref = source.ref;
	  target.pendingProps = source.pendingProps;
	  target.memoizedProps = source.memoizedProps;
	  target.updateQueue = source.updateQueue;
	  target.memoizedState = source.memoizedState;
	  target.dependencies = source.dependencies;
	  target.mode = source.mode;
	  target.effectTag = source.effectTag;
	  target.nextEffect = source.nextEffect;
	  target.firstEffect = source.firstEffect;
	  target.lastEffect = source.lastEffect;
	  target.expirationTime = source.expirationTime;
	  target.childExpirationTime = source.childExpirationTime;
	  target.alternate = source.alternate;

	  {
	    target.actualDuration = source.actualDuration;
	    target.actualStartTime = source.actualStartTime;
	    target.selfBaseDuration = source.selfBaseDuration;
	    target.treeBaseDuration = source.treeBaseDuration;
	  }

	  {
	    target._debugID = source._debugID;
	  }

	  target._debugSource = source._debugSource;
	  target._debugOwner = source._debugOwner;
	  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
	  target._debugNeedsRemount = source._debugNeedsRemount;
	  target._debugHookTypes = source._debugHookTypes;
	  return target;
	}

	function FiberRootNode(containerInfo, tag, hydrate) {
	  this.tag = tag;
	  this.current = null;
	  this.containerInfo = containerInfo;
	  this.pendingChildren = null;
	  this.pingCache = null;
	  this.finishedExpirationTime = NoWork;
	  this.finishedWork = null;
	  this.timeoutHandle = noTimeout;
	  this.context = null;
	  this.pendingContext = null;
	  this.hydrate = hydrate;
	  this.callbackNode = null;
	  this.callbackPriority = NoPriority;
	  this.firstPendingTime = NoWork;
	  this.firstSuspendedTime = NoWork;
	  this.lastSuspendedTime = NoWork;
	  this.nextKnownPendingLevel = NoWork;
	  this.lastPingedTime = NoWork;
	  this.lastExpiredTime = NoWork;

	  {
	    this.interactionThreadID = tracing.unstable_getThreadID();
	    this.memoizedInteractions = new Set();
	    this.pendingInteractionMap = new Map();
	  }
	}

	function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
	  var root = new FiberRootNode(containerInfo, tag, hydrate);
	  // stateNode is any.


	  var uninitializedFiber = createHostRootFiber(tag);
	  root.current = uninitializedFiber;
	  uninitializedFiber.stateNode = root;
	  initializeUpdateQueue(uninitializedFiber);
	  return root;
	}
	function isRootSuspendedAtTime(root, expirationTime) {
	  var firstSuspendedTime = root.firstSuspendedTime;
	  var lastSuspendedTime = root.lastSuspendedTime;
	  return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
	}
	function markRootSuspendedAtTime(root, expirationTime) {
	  var firstSuspendedTime = root.firstSuspendedTime;
	  var lastSuspendedTime = root.lastSuspendedTime;

	  if (firstSuspendedTime < expirationTime) {
	    root.firstSuspendedTime = expirationTime;
	  }

	  if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
	    root.lastSuspendedTime = expirationTime;
	  }

	  if (expirationTime <= root.lastPingedTime) {
	    root.lastPingedTime = NoWork;
	  }

	  if (expirationTime <= root.lastExpiredTime) {
	    root.lastExpiredTime = NoWork;
	  }
	}
	function markRootUpdatedAtTime(root, expirationTime) {
	  // Update the range of pending times
	  var firstPendingTime = root.firstPendingTime;

	  if (expirationTime > firstPendingTime) {
	    root.firstPendingTime = expirationTime;
	  } // Update the range of suspended times. Treat everything lower priority or
	  // equal to this update as unsuspended.


	  var firstSuspendedTime = root.firstSuspendedTime;

	  if (firstSuspendedTime !== NoWork) {
	    if (expirationTime >= firstSuspendedTime) {
	      // The entire suspended range is now unsuspended.
	      root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
	    } else if (expirationTime >= root.lastSuspendedTime) {
	      root.lastSuspendedTime = expirationTime + 1;
	    } // This is a pending level. Check if it's higher priority than the next
	    // known pending level.


	    if (expirationTime > root.nextKnownPendingLevel) {
	      root.nextKnownPendingLevel = expirationTime;
	    }
	  }
	}
	function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
	  // Update the range of pending times
	  root.firstPendingTime = remainingExpirationTime; // Update the range of suspended times. Treat everything higher priority or
	  // equal to this update as unsuspended.

	  if (finishedExpirationTime <= root.lastSuspendedTime) {
	    // The entire suspended range is now unsuspended.
	    root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
	  } else if (finishedExpirationTime <= root.firstSuspendedTime) {
	    // Part of the suspended range is now unsuspended. Narrow the range to
	    // include everything between the unsuspended time (non-inclusive) and the
	    // last suspended time.
	    root.firstSuspendedTime = finishedExpirationTime - 1;
	  }

	  if (finishedExpirationTime <= root.lastPingedTime) {
	    // Clear the pinged time
	    root.lastPingedTime = NoWork;
	  }

	  if (finishedExpirationTime <= root.lastExpiredTime) {
	    // Clear the expired time
	    root.lastExpiredTime = NoWork;
	  }
	}
	function markRootExpiredAtTime(root, expirationTime) {
	  var lastExpiredTime = root.lastExpiredTime;

	  if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
	    root.lastExpiredTime = expirationTime;
	  }
	}

	var didWarnAboutNestedUpdates;
	var didWarnAboutFindNodeInStrictMode;

	{
	  didWarnAboutNestedUpdates = false;
	  didWarnAboutFindNodeInStrictMode = {};
	}

	function getContextForSubtree(parentComponent) {
	  if (!parentComponent) {
	    return emptyContextObject;
	  }

	  var fiber = get(parentComponent);
	  var parentContext = findCurrentUnmaskedContext(fiber);

	  if (fiber.tag === ClassComponent) {
	    var Component = fiber.type;

	    if (isContextProvider(Component)) {
	      return processChildContext(fiber, Component, parentContext);
	    }
	  }

	  return parentContext;
	}

	function findHostInstanceWithWarning(component, methodName) {
	  {
	    var fiber = get(component);

	    if (fiber === undefined) {
	      if (typeof component.render === 'function') {
	        {
	          {
	            throw Error( "Unable to find node on an unmounted component." );
	          }
	        }
	      } else {
	        {
	          {
	            throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
	          }
	        }
	      }
	    }

	    var hostFiber = findCurrentHostFiber(fiber);

	    if (hostFiber === null) {
	      return null;
	    }

	    if (hostFiber.mode & StrictMode) {
	      var componentName = getComponentName(fiber.type) || 'Component';

	      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
	        didWarnAboutFindNodeInStrictMode[componentName] = true;

	        if (fiber.mode & StrictMode) {
	          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
	        } else {
	          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
	        }
	      }
	    }

	    return hostFiber.stateNode;
	  }
	}

	function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
	  return createFiberRoot(containerInfo, tag, hydrate);
	}
	function updateContainer(element, container, parentComponent, callback) {
	  {
	    onScheduleRoot(container, element);
	  }

	  var current$1 = container.current;
	  var currentTime = requestCurrentTimeForUpdate();

	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfUnmockedScheduler(current$1);
	      warnIfNotScopedWithMatchingAct(current$1);
	    }
	  }

	  var suspenseConfig = requestCurrentSuspenseConfig();
	  var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
	  var context = getContextForSubtree(parentComponent);

	  if (container.context === null) {
	    container.context = context;
	  } else {
	    container.pendingContext = context;
	  }

	  {
	    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
	      didWarnAboutNestedUpdates = true;

	      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
	    }
	  }

	  var update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: element
	  };
	  callback = callback === undefined ? null : callback;

	  if (callback !== null) {
	    {
	      if (typeof callback !== 'function') {
	        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
	      }
	    }

	    update.callback = callback;
	  }

	  enqueueUpdate(current$1, update);
	  scheduleWork(current$1, expirationTime);
	  return expirationTime;
	}
	function getPublicRootInstance(container) {
	  var containerFiber = container.current;

	  if (!containerFiber.child) {
	    return null;
	  }

	  switch (containerFiber.child.tag) {
	    case HostComponent:
	      return getPublicInstance(containerFiber.child.stateNode);

	    default:
	      return containerFiber.child.stateNode;
	  }
	}

	function markRetryTimeImpl(fiber, retryTime) {
	  var suspenseState = fiber.memoizedState;

	  if (suspenseState !== null && suspenseState.dehydrated !== null) {
	    if (suspenseState.retryTime < retryTime) {
	      suspenseState.retryTime = retryTime;
	    }
	  }
	} // Increases the priority of thennables when they resolve within this boundary.


	function markRetryTimeIfNotHydrated(fiber, retryTime) {
	  markRetryTimeImpl(fiber, retryTime);
	  var alternate = fiber.alternate;

	  if (alternate) {
	    markRetryTimeImpl(alternate, retryTime);
	  }
	}

	function attemptUserBlockingHydration$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
	  scheduleWork(fiber, expTime);
	  markRetryTimeIfNotHydrated(fiber, expTime);
	}
	function attemptContinuousHydration$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  scheduleWork(fiber, ContinuousHydration);
	  markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
	}
	function attemptHydrationAtCurrentPriority$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority other than synchronously flush it.
	    return;
	  }

	  var currentTime = requestCurrentTimeForUpdate();
	  var expTime = computeExpirationForFiber(currentTime, fiber, null);
	  scheduleWork(fiber, expTime);
	  markRetryTimeIfNotHydrated(fiber, expTime);
	}
	function findHostInstanceWithNoPortals(fiber) {
	  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  if (hostFiber.tag === FundamentalComponent) {
	    return hostFiber.stateNode.instance;
	  }

	  return hostFiber.stateNode;
	}

	var shouldSuspendImpl = function (fiber) {
	  return false;
	};

	function shouldSuspend(fiber) {
	  return shouldSuspendImpl(fiber);
	}
	var overrideHookState = null;
	var overrideProps = null;
	var scheduleUpdate = null;
	var setSuspenseHandler = null;

	{
	  var copyWithSetImpl = function (obj, path, idx, value) {
	    if (idx >= path.length) {
	      return value;
	    }

	    var key = path[idx];
	    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

	    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
	    return updated;
	  };

	  var copyWithSet = function (obj, path, value) {
	    return copyWithSetImpl(obj, path, 0, value);
	  }; // Support DevTools editable values for useState and useReducer.


	  overrideHookState = function (fiber, id, path, value) {
	    // For now, the "id" of stateful hooks is just the stateful hook index.
	    // This may change in the future with e.g. nested hooks.
	    var currentHook = fiber.memoizedState;

	    while (currentHook !== null && id > 0) {
	      currentHook = currentHook.next;
	      id--;
	    }

	    if (currentHook !== null) {
	      var newState = copyWithSet(currentHook.memoizedState, path, value);
	      currentHook.memoizedState = newState;
	      currentHook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
	      scheduleWork(fiber, Sync);
	    }
	  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


	  overrideProps = function (fiber, path, value) {
	    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    scheduleWork(fiber, Sync);
	  };

	  scheduleUpdate = function (fiber) {
	    scheduleWork(fiber, Sync);
	  };

	  setSuspenseHandler = function (newShouldSuspendImpl) {
	    shouldSuspendImpl = newShouldSuspendImpl;
	  };
	}

	function injectIntoDevTools(devToolsConfig) {
	  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
	  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	  return injectInternals(_assign({}, devToolsConfig, {
	    overrideHookState: overrideHookState,
	    overrideProps: overrideProps,
	    setSuspenseHandler: setSuspenseHandler,
	    scheduleUpdate: scheduleUpdate,
	    currentDispatcherRef: ReactCurrentDispatcher,
	    findHostInstanceByFiber: function (fiber) {
	      var hostFiber = findCurrentHostFiber(fiber);

	      if (hostFiber === null) {
	        return null;
	      }

	      return hostFiber.stateNode;
	    },
	    findFiberByHostInstance: function (instance) {
	      if (!findFiberByHostInstance) {
	        // Might not be implemented by the renderer.
	        return null;
	      }

	      return findFiberByHostInstance(instance);
	    },
	    // React Refresh
	    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
	    scheduleRefresh:  scheduleRefresh ,
	    scheduleRoot:  scheduleRoot ,
	    setRefreshHandler:  setRefreshHandler ,
	    // Enables DevTools to append owner stacks to error messages in DEV mode.
	    getCurrentFiber:  function () {
	      return current;
	    }
	  }));
	}
	ReactSharedInternals.IsSomeRendererActing;

	function ReactDOMBlockingRoot(container, tag, options) {
	  this._internalRoot = createRootImpl(container, tag, options);
	}

	ReactDOMBlockingRoot.prototype.render = function (children) {
	  var root = this._internalRoot;

	  {
	    if (typeof arguments[1] === 'function') {
	      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
	    }

	    var container = root.containerInfo;

	    if (container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(root.current);

	      if (hostInstance) {
	        if (hostInstance.parentNode !== container) {
	          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
	        }
	      }
	    }
	  }

	  updateContainer(children, root, null, null);
	};

	ReactDOMBlockingRoot.prototype.unmount = function () {
	  {
	    if (typeof arguments[0] === 'function') {
	      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
	    }
	  }

	  var root = this._internalRoot;
	  var container = root.containerInfo;
	  updateContainer(null, root, null, function () {
	    unmarkContainerAsRoot(container);
	  });
	};

	function createRootImpl(container, tag, options) {
	  // Tag is either LegacyRoot or Concurrent Root
	  var hydrate = options != null && options.hydrate === true;
	  options != null && options.hydrationOptions || null;
	  var root = createContainer(container, tag, hydrate);
	  markContainerAsRoot(root.current, container);

	  if (hydrate && tag !== LegacyRoot) {
	    var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
	    eagerlyTrapReplayableEvents(container, doc);
	  }

	  return root;
	}
	function createLegacyRoot(container, options) {
	  return new ReactDOMBlockingRoot(container, LegacyRoot, options);
	}
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
	}

	var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
	var topLevelUpdateWarnings;
	var warnedAboutHydrateAPI = false;

	{
	  topLevelUpdateWarnings = function (container) {
	    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

	      if (hostInstance) {
	        if (hostInstance.parentNode !== container) {
	          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
	        }
	      }
	    }

	    var isRootRenderedBySomeReact = !!container._reactRootContainer;
	    var rootEl = getReactRootElementInContainer(container);
	    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

	    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
	      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
	    }

	    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
	      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
	    }
	  };
	}

	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOCUMENT_NODE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function shouldHydrateDueToLegacyHeuristic(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
	}

	function legacyCreateRootFromDOMContainer(container, forceHydrate) {
	  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

	  if (!shouldHydrate) {
	    var warned = false;
	    var rootSibling;

	    while (rootSibling = container.lastChild) {
	      {
	        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
	          warned = true;

	          error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
	        }
	      }

	      container.removeChild(rootSibling);
	    }
	  }

	  {
	    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
	      warnedAboutHydrateAPI = true;

	      warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
	    }
	  }

	  return createLegacyRoot(container, shouldHydrate ? {
	    hydrate: true
	  } : undefined);
	}

	function warnOnInvalidCallback$1(callback, callerName) {
	  {
	    if (callback !== null && typeof callback !== 'function') {
	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  }
	}

	function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
	  {
	    topLevelUpdateWarnings(container);
	    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
	  } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
	  // member of intersection type." Whyyyyyy.


	  var root = container._reactRootContainer;
	  var fiberRoot;

	  if (!root) {
	    // Initial mount
	    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
	    fiberRoot = root._internalRoot;

	    if (typeof callback === 'function') {
	      var originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(fiberRoot);
	        originalCallback.call(instance);
	      };
	    } // Initial mount should not be batched.


	    unbatchedUpdates(function () {
	      updateContainer(children, fiberRoot, parentComponent, callback);
	    });
	  } else {
	    fiberRoot = root._internalRoot;

	    if (typeof callback === 'function') {
	      var _originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(fiberRoot);

	        _originalCallback.call(instance);
	      };
	    } // Update


	    updateContainer(children, fiberRoot, parentComponent, callback);
	  }

	  return getPublicRootInstance(fiberRoot);
	}

	function findDOMNode(componentOrElement) {
	  {
	    var owner = ReactCurrentOwner$3.current;

	    if (owner !== null && owner.stateNode !== null) {
	      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

	      if (!warnedAboutRefsInRender) {
	        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
	      }

	      owner.stateNode._warnedAboutRefsInRender = true;
	    }
	  }

	  if (componentOrElement == null) {
	    return null;
	  }

	  if (componentOrElement.nodeType === ELEMENT_NODE) {
	    return componentOrElement;
	  }

	  {
	    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
	  }
	}
	function hydrate(element, container, callback) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
	    }
	  } // TODO: throw or warn if we couldn't hydrate?


	  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
	}
	function render(element, container, callback) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
	    }
	  }

	  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
	}
	function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
	  if (!isValidContainer(containerNode)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  }

	  if (!(parentComponent != null && has(parentComponent))) {
	    {
	      throw Error( "parentComponent must be a valid React Component" );
	    }
	  }

	  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
	}
	function unmountComponentAtNode(container) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error( "unmountComponentAtNode(...): Target container is not a DOM element." );
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
	    }
	  }

	  if (container._reactRootContainer) {
	    {
	      var rootEl = getReactRootElementInContainer(container);
	      var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);

	      if (renderedByDifferentReact) {
	        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
	      }
	    } // Unmount should not be batched.


	    unbatchedUpdates(function () {
	      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
	        // $FlowFixMe This should probably use `delete container._reactRootContainer`
	        container._reactRootContainer = null;
	        unmarkContainerAsRoot(container);
	      });
	    }); // If you call unmountComponentAtNode twice in quick succession, you'll
	    // get `true` twice. That's probably fine?

	    return true;
	  } else {
	    {
	      var _rootEl = getReactRootElementInContainer(container);

	      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.

	      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

	      if (hasNonRootReactChild) {
	        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
	      }
	    }

	    return false;
	  }
	}

	function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
	implementation) {
	  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	  return {
	    // This tag allow us to uniquely identify this as a React Portal
	    $$typeof: REACT_PORTAL_TYPE,
	    key: key == null ? null : '' + key,
	    children: children,
	    containerInfo: containerInfo,
	    implementation: implementation
	  };
	}

	var ReactVersion = '16.14.0';

	setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
	setAttemptContinuousHydration(attemptContinuousHydration$1);
	setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
	var didWarnAboutUnstableCreatePortal = false;

	{
	  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
	  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
	  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
	    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	  }
	}

	setRestoreImplementation(restoreControlledState$3);
	setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

	function createPortal$1(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  if (!isValidContainer(container)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  } // TODO: pass ReactDOM portal implementation as third argument
	  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


	  return createPortal(children, container, null, key);
	}

	function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {

	  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
	}

	function unstable_createPortal(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  {
	    if (!didWarnAboutUnstableCreatePortal) {
	      didWarnAboutUnstableCreatePortal = true;

	      warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
	    }
	  }

	  return createPortal$1(children, container, key);
	}

	var Internals = {
	  // Keep in sync with ReactDOMUnstableNativeDependencies.js
	  // ReactTestUtils.js, and ReactTestUtilsAct.js. This is an array for better minification.
	  Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
	};
	var foundDevTools = injectIntoDevTools({
	  findFiberByHostInstance: getClosestInstanceFromNode,
	  bundleType:  1 ,
	  version: ReactVersion,
	  rendererPackageName: 'react-dom'
	});

	{
	  if (!foundDevTools && canUseDOM && window.top === window.self) {
	    // If we're in Chrome or Firefox, provide a download link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

	      if (/^(https?|file):$/.test(protocol)) {
	        // eslint-disable-next-line react-internal/no-production-logging
	        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
	      }
	    }
	  }
	}

	reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
	reactDom_development.createPortal = createPortal$1;
	reactDom_development.findDOMNode = findDOMNode;
	reactDom_development.flushSync = flushSync;
	reactDom_development.hydrate = hydrate;
	reactDom_development.render = render;
	reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
	reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
	reactDom_development.unstable_createPortal = unstable_createPortal;
	reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
	reactDom_development.version = ReactVersion;
	  })();
	}
	return reactDom_development;
}

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (process.env.NODE_ENV === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  reactDom.exports = requireReactDom_production_min();
} else {
  reactDom.exports = requireReactDom_development();
}

var reactDomExports = reactDom.exports;

var config = {exports: {}};

config.exports;

(function (module, exports) {

	exports.__esModule = true;
	exports.default = void 0;
	var _default = {
	  disabled: false
	};
	exports.default = _default;
	module.exports = exports.default; 
} (config, config.exports));

var configExports = config.exports;

var PropTypes = {};

PropTypes.__esModule = true;
PropTypes.classNamesShape = PropTypes.timeoutsShape = void 0;

var _propTypes$2 = _interopRequireDefault$5(PropTypes$1);

function _interopRequireDefault$5(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var timeoutsShape = process.env.NODE_ENV !== 'production' ? _propTypes$2.default.oneOfType([_propTypes$2.default.number, _propTypes$2.default.shape({
  enter: _propTypes$2.default.number,
  exit: _propTypes$2.default.number,
  appear: _propTypes$2.default.number
}).isRequired]) : null;
PropTypes.timeoutsShape = timeoutsShape;
var classNamesShape = process.env.NODE_ENV !== 'production' ? _propTypes$2.default.oneOfType([_propTypes$2.default.string, _propTypes$2.default.shape({
  enter: _propTypes$2.default.string,
  exit: _propTypes$2.default.string,
  active: _propTypes$2.default.string
}), _propTypes$2.default.shape({
  enter: _propTypes$2.default.string,
  enterDone: _propTypes$2.default.string,
  enterActive: _propTypes$2.default.string,
  exit: _propTypes$2.default.string,
  exitDone: _propTypes$2.default.string,
  exitActive: _propTypes$2.default.string
})]) : null;
PropTypes.classNamesShape = classNamesShape;

var TransitionGroupContext = {exports: {}};

TransitionGroupContext.exports;

(function (module, exports) {

	exports.__esModule = true;
	exports.default = void 0;

	var _react = _interopRequireDefault(reactExports);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _default = _react.default.createContext(null);

	exports.default = _default;
	module.exports = exports.default; 
} (TransitionGroupContext, TransitionGroupContext.exports));

var TransitionGroupContextExports = TransitionGroupContext.exports;

var reflow = {};

reflow.__esModule = true;
reflow.forceReflow = void 0;

var forceReflow = function forceReflow(node) {
  return node.scrollTop;
};

reflow.forceReflow = forceReflow;

Transition$2.__esModule = true;
Transition$2.default = Transition$2.EXITING = Transition$2.ENTERED = Transition$2.ENTERING = Transition$2.EXITED = Transition$2.UNMOUNTED = void 0;

var _propTypes$1 = _interopRequireDefault$4(PropTypes$1);

var _react$3 = _interopRequireDefault$4(reactExports);

var _reactDom = _interopRequireDefault$4(reactDomExports);

var _config$1 = _interopRequireDefault$4(configExports);

var _PropTypes = PropTypes;

var _TransitionGroupContext$1 = _interopRequireDefault$4(TransitionGroupContextExports);

var _reflow = reflow;

function _interopRequireDefault$4(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose$1(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var UNMOUNTED = 'unmounted';
Transition$2.UNMOUNTED = UNMOUNTED;
var EXITED = 'exited';
Transition$2.EXITED = EXITED;
var ENTERING = 'entering';
Transition$2.ENTERING = ENTERING;
var ENTERED = 'entered';
Transition$2.ENTERED = ENTERED;
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 1 },
 *   entered:  { opacity: 1 },
 *   exiting:  { opacity: 0 },
 *   exited:  { opacity: 0 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */

Transition$2.EXITING = EXITING;

var Transition$1 = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose$1(Transition, _React$Component);

  function Transition(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;

    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }

    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }

  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;

    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }

    return null;
  } // getSnapshotBeforeUpdate(prevProps) {
  //   let nextStatus = null
  //   if (prevProps !== this.props) {
  //     const { status } = this.state
  //     if (this.props.in) {
  //       if (status !== ENTERING && status !== ENTERED) {
  //         nextStatus = ENTERING
  //       }
  //     } else {
  //       if (status === ENTERING || status === ENTERED) {
  //         nextStatus = EXITING
  //       }
  //     }
  //   }
  //   return { nextStatus }
  // }
  ;

  var _proto = Transition.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;

    if (prevProps !== this.props) {
      var status = this.state.status;

      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }

    this.updateStatus(false, nextStatus);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };

  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;

    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter; // TODO: remove fallback for next major

      appear = timeout.appear !== undefined ? timeout.appear : enter;
    }

    return {
      exit: exit,
      enter: enter,
      appear: appear
    };
  };

  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }

    if (nextStatus !== null) {
      // nextStatus will always be ENTERING or EXITING.
      this.cancelNextCallback();

      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node = this.props.nodeRef ? this.props.nodeRef.current : _reactDom.default.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749
          // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.
          // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.

          if (node) (0, _reflow.forceReflow)(node);
        }

        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };

  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;

    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;

    var _ref2 = this.props.nodeRef ? [appearing] : [_reactDom.default.findDOMNode(this), appearing],
        maybeNode = _ref2[0],
        maybeAppearing = _ref2[1];

    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
    // if we are mounting and running this it means appear _must_ be set

    if (!mounting && !enter || _config$1.default.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function () {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }

    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function () {
      _this2.props.onEntering(maybeNode, maybeAppearing);

      _this2.onTransitionEnd(enterTimeout, function () {
        _this2.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };

  _proto.performExit = function performExit() {
    var _this3 = this;

    var exit = this.props.exit;
    var timeouts = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? undefined : _reactDom.default.findDOMNode(this); // no exit animation skip right to EXITED

    if (!exit || _config$1.default.disabled) {
      this.safeSetState({
        status: EXITED
      }, function () {
        _this3.props.onExited(maybeNode);
      });
      return;
    }

    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function () {
      _this3.props.onExiting(maybeNode);

      _this3.onTransitionEnd(timeouts.exit, function () {
        _this3.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };

  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };

  _proto.safeSetState = function safeSetState(nextState, callback) {
    // This shouldn't be necessary, but there are weird race conditions with
    // setState callbacks and unmounting in testing, so always make sure that
    // we can cancel any pending setState callbacks after we unmount.
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };

  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;

    var active = true;

    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };

    this.nextCallback.cancel = function () {
      active = false;
    };

    return this.nextCallback;
  };

  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
    this.setNextCallback(handler);
    var node = this.props.nodeRef ? this.props.nodeRef.current : _reactDom.default.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }

    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
          maybeNode = _ref3[0],
          maybeNextCallback = _ref3[1];

      this.props.addEndListener(maybeNode, maybeNextCallback);
    }

    if (timeout != null) {
      setTimeout(this.nextCallback, timeout);
    }
  };

  _proto.render = function render() {
    var status = this.state.status;

    if (status === UNMOUNTED) {
      return null;
    }

    var _this$props = this.props,
        children = _this$props.children;
        _this$props.in;
        _this$props.mountOnEnter;
        _this$props.unmountOnExit;
        _this$props.appear;
        _this$props.enter;
        _this$props.exit;
        _this$props.timeout;
        _this$props.addEndListener;
        _this$props.onEnter;
        _this$props.onEntering;
        _this$props.onEntered;
        _this$props.onExit;
        _this$props.onExiting;
        _this$props.onExited;
        _this$props.nodeRef;
        var childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

    return (
      /*#__PURE__*/
      // allows for nested Transitions
      _react$3.default.createElement(_TransitionGroupContext$1.default.Provider, {
        value: null
      }, typeof children === 'function' ? children(status, childProps) : _react$3.default.cloneElement(_react$3.default.Children.only(children), childProps))
    );
  };

  return Transition;
}(_react$3.default.Component);

Transition$1.contextType = _TransitionGroupContext$1.default;
Transition$1.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: _propTypes$1.default.shape({
    current: typeof Element === 'undefined' ? _propTypes$1.default.any : function (propValue, key, componentName, location, propFullName, secret) {
      var value = propValue[key];
      return _propTypes$1.default.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
    }
  }),

  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: _propTypes$1.default.oneOfType([_propTypes$1.default.func.isRequired, _propTypes$1.default.element.isRequired]).isRequired,

  /**
   * Show the component; triggers the enter or exit states
   */
  in: _propTypes$1.default.bool,

  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: _propTypes$1.default.bool,

  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: _propTypes$1.default.bool,

  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: _propTypes$1.default.bool,

  /**
   * Enable or disable enter transitions.
   */
  enter: _propTypes$1.default.bool,

  /**
   * Enable or disable exit transitions.
   */
  exit: _propTypes$1.default.bool,

  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt = _PropTypes.timeoutsShape;
    if (!props.addEndListener) pt = pt.isRequired;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return pt.apply(void 0, [props].concat(args));
  },

  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: _propTypes$1.default.func,

  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: _propTypes$1.default.func,

  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: _propTypes$1.default.func,

  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: _propTypes$1.default.func,

  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: _propTypes$1.default.func,

  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: _propTypes$1.default.func,

  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: _propTypes$1.default.func
} : {}; // Name the function so it is clearer in the documentation

function noop() {}

Transition$1.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition$1.UNMOUNTED = UNMOUNTED;
Transition$1.EXITED = EXITED;
Transition$1.ENTERING = ENTERING;
Transition$1.ENTERED = ENTERED;
Transition$1.EXITING = EXITING;
var _default$1 = Transition$1;
Transition$2.default = _default$1;

CSSTransition$1.exports;

(function (module, exports) {

	exports.__esModule = true;
	exports.default = void 0;

	var _propTypes = _interopRequireDefault(PropTypes$1);

	var _addClass2 = _interopRequireDefault(addClassExports);

	var _removeClass = _interopRequireDefault(removeClassExports);

	var _react = _interopRequireDefault(reactExports);

	var _Transition = _interopRequireDefault(Transition$2);

	var _PropTypes = PropTypes;

	var _reflow = reflow;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	var _addClass = function addClass(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return (0, _addClass2.default)(node, c);
	  });
	};

	var removeClass = function removeClass(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return (0, _removeClass.default)(node, c);
	  });
	};
	/**
	 * A transition component inspired by the excellent
	 * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
	 * use it if you're using CSS transitions or animations. It's built upon the
	 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
	 * component, so it inherits all of its props.
	 *
	 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
	 * and `exit` states of the transition. The first class is applied and then a
	 * second `*-active` class in order to activate the CSS transition. After the
	 * transition, matching `*-done` class names are applied to persist the
	 * transition state.
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
	 *         <div>
	 *           {"I'll receive my-node-* classes"}
	 *         </div>
	 *       </CSSTransition>
	 *       <button type="button" onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the `in` prop is set to `true`, the child component will first receive
	 * the class `example-enter`, then the `example-enter-active` will be added in
	 * the next tick. `CSSTransition` [forces a
	 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
	 * between before adding the `example-enter-active`. This is an important trick
	 * because it allows us to transition between `example-enter` and
	 * `example-enter-active` even though they were added immediately one after
	 * another. Most notably, this is what makes it possible for us to animate
	 * _appearance_.
	 *
	 * ```css
	 * .my-node-enter {
	 *   opacity: 0;
	 * }
	 * .my-node-enter-active {
	 *   opacity: 1;
	 *   transition: opacity 200ms;
	 * }
	 * .my-node-exit {
	 *   opacity: 1;
	 * }
	 * .my-node-exit-active {
	 *   opacity: 0;
	 *   transition: opacity 200ms;
	 * }
	 * ```
	 *
	 * `*-active` classes represent which styles you want to animate **to**, so it's
	 * important to add `transition` declaration only to them, otherwise transitions
	 * might not behave as intended! This might not be obvious when the transitions
	 * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
	 * the example above (minus `transition`), but it becomes apparent in more
	 * complex transitions.
	 *
	 * **Note**: If you're using the
	 * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
	 * prop, make sure to define styles for `.appear-*` classes as well.
	 */


	var CSSTransition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(CSSTransition, _React$Component);

	  function CSSTransition() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.appliedClasses = {
	      appear: {},
	      enter: {},
	      exit: {}
	    };

	    _this.onEnter = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
	          node = _this$resolveArgument[0],
	          appearing = _this$resolveArgument[1];

	      _this.removeClasses(node, 'exit');

	      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');

	      if (_this.props.onEnter) {
	        _this.props.onEnter(maybeNode, maybeAppearing);
	      }
	    };

	    _this.onEntering = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
	          node = _this$resolveArgument2[0],
	          appearing = _this$resolveArgument2[1];

	      var type = appearing ? 'appear' : 'enter';

	      _this.addClass(node, type, 'active');

	      if (_this.props.onEntering) {
	        _this.props.onEntering(maybeNode, maybeAppearing);
	      }
	    };

	    _this.onEntered = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
	          node = _this$resolveArgument3[0],
	          appearing = _this$resolveArgument3[1];

	      var type = appearing ? 'appear' : 'enter';

	      _this.removeClasses(node, type);

	      _this.addClass(node, type, 'done');

	      if (_this.props.onEntered) {
	        _this.props.onEntered(maybeNode, maybeAppearing);
	      }
	    };

	    _this.onExit = function (maybeNode) {
	      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
	          node = _this$resolveArgument4[0];

	      _this.removeClasses(node, 'appear');

	      _this.removeClasses(node, 'enter');

	      _this.addClass(node, 'exit', 'base');

	      if (_this.props.onExit) {
	        _this.props.onExit(maybeNode);
	      }
	    };

	    _this.onExiting = function (maybeNode) {
	      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
	          node = _this$resolveArgument5[0];

	      _this.addClass(node, 'exit', 'active');

	      if (_this.props.onExiting) {
	        _this.props.onExiting(maybeNode);
	      }
	    };

	    _this.onExited = function (maybeNode) {
	      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
	          node = _this$resolveArgument6[0];

	      _this.removeClasses(node, 'exit');

	      _this.addClass(node, 'exit', 'done');

	      if (_this.props.onExited) {
	        _this.props.onExited(maybeNode);
	      }
	    };

	    _this.resolveArguments = function (maybeNode, maybeAppearing) {
	      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
	      : [maybeNode, maybeAppearing];
	    };

	    _this.getClassNames = function (type) {
	      var classNames = _this.props.classNames;
	      var isStringClassNames = typeof classNames === 'string';
	      var prefix = isStringClassNames && classNames ? classNames + "-" : '';
	      var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
	      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
	      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
	      return {
	        baseClassName: baseClassName,
	        activeClassName: activeClassName,
	        doneClassName: doneClassName
	      };
	    };

	    return _this;
	  }

	  var _proto = CSSTransition.prototype;

	  _proto.addClass = function addClass(node, type, phase) {
	    var className = this.getClassNames(type)[phase + "ClassName"];

	    var _this$getClassNames = this.getClassNames('enter'),
	        doneClassName = _this$getClassNames.doneClassName;

	    if (type === 'appear' && phase === 'done' && doneClassName) {
	      className += " " + doneClassName;
	    } // This is to force a repaint,
	    // which is necessary in order to transition styles when adding a class name.


	    if (phase === 'active') {
	      if (node) (0, _reflow.forceReflow)(node);
	    }

	    if (className) {
	      this.appliedClasses[type][phase] = className;

	      _addClass(node, className);
	    }
	  };

	  _proto.removeClasses = function removeClasses(node, type) {
	    var _this$appliedClasses$ = this.appliedClasses[type],
	        baseClassName = _this$appliedClasses$.base,
	        activeClassName = _this$appliedClasses$.active,
	        doneClassName = _this$appliedClasses$.done;
	    this.appliedClasses[type] = {};

	    if (baseClassName) {
	      removeClass(node, baseClassName);
	    }

	    if (activeClassName) {
	      removeClass(node, activeClassName);
	    }

	    if (doneClassName) {
	      removeClass(node, doneClassName);
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props;
	        _this$props.classNames;
	        var props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);

	    return /*#__PURE__*/_react.default.createElement(_Transition.default, _extends({}, props, {
	      onEnter: this.onEnter,
	      onEntered: this.onEntered,
	      onEntering: this.onEntering,
	      onExit: this.onExit,
	      onExiting: this.onExiting,
	      onExited: this.onExited
	    }));
	  };

	  return CSSTransition;
	}(_react.default.Component);

	CSSTransition.defaultProps = {
	  classNames: ''
	};
	CSSTransition.propTypes = process.env.NODE_ENV !== "production" ? _extends({}, _Transition.default.propTypes, {
	  /**
	   * The animation classNames applied to the component as it appears, enters,
	   * exits or has finished the transition. A single name can be provided, which
	   * will be suffixed for each stage, e.g. `classNames="fade"` applies:
	   *
	   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
	   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
	   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
	   *
	   * A few details to note about how these classes are applied:
	   *
	   * 1. They are _joined_ with the ones that are already defined on the child
	   *    component, so if you want to add some base styles, you can use
	   *    `className` without worrying that it will be overridden.
	   *
	   * 2. If the transition component mounts with `in={false}`, no classes are
	   *    applied yet. You might be expecting `*-exit-done`, but if you think
	   *    about it, a component cannot finish exiting if it hasn't entered yet.
	   *
	   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
	   *    allows you to define different behavior for when appearing is done and
	   *    when regular entering is done, using selectors like
	   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
	   *    an epic entrance animation when element first appears in the DOM using
	   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
	   *    simply use `fade-enter-done` for defining both cases.
	   *
	   * Each individual classNames can also be specified independently like:
	   *
	   * ```js
	   * classNames={{
	   *  appear: 'my-appear',
	   *  appearActive: 'my-active-appear',
	   *  appearDone: 'my-done-appear',
	   *  enter: 'my-enter',
	   *  enterActive: 'my-active-enter',
	   *  enterDone: 'my-done-enter',
	   *  exit: 'my-exit',
	   *  exitActive: 'my-active-exit',
	   *  exitDone: 'my-done-exit',
	   * }}
	   * ```
	   *
	   * If you want to set these classes using CSS Modules:
	   *
	   * ```js
	   * import styles from './styles.css';
	   * ```
	   *
	   * you might want to use camelCase in your CSS file, that way could simply
	   * spread them instead of listing them one by one:
	   *
	   * ```js
	   * classNames={{ ...styles }}
	   * ```
	   *
	   * @type {string | {
	   *  appear?: string,
	   *  appearActive?: string,
	   *  appearDone?: string,
	   *  enter?: string,
	   *  enterActive?: string,
	   *  enterDone?: string,
	   *  exit?: string,
	   *  exitActive?: string,
	   *  exitDone?: string,
	   * }}
	   */
	  classNames: _PropTypes.classNamesShape,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
	   * applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEnter: _propTypes.default.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter-active' or
	   * 'appear-active' class is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: _propTypes.default.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or
	   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntered: _propTypes.default.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' class is
	   * applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExit: _propTypes.default.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExiting: _propTypes.default.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' classes
	   * are **removed** and the `exit-done` class is added to the DOM node.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExited: _propTypes.default.func
	}) : {};
	var _default = CSSTransition;
	exports.default = _default;
	module.exports = exports.default; 
} (CSSTransition$1, CSSTransition$1.exports));

var CSSTransitionExports = CSSTransition$1.exports;

var ReplaceTransition = {exports: {}};

var TransitionGroup = {exports: {}};

var ChildMapping = {};

ChildMapping.__esModule = true;
ChildMapping.getChildMapping = getChildMapping;
ChildMapping.mergeChildMappings = mergeChildMappings;
ChildMapping.getInitialChildMapping = getInitialChildMapping;
ChildMapping.getNextChildMapping = getNextChildMapping;

var _react$2 = reactExports;

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */
function getChildMapping(children, mapFn) {
  var mapper = function mapper(child) {
    return mapFn && (0, _react$2.isValidElement)(child) ? mapFn(child) : child;
  };

  var result = Object.create(null);
  if (children) _react$2.Children.map(children, function (c) {
    return c;
  }).forEach(function (child) {
    // run the map function here instead so that the key is the computed one
    result[child.key] = mapper(child);
  });
  return result;
}
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */


function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};

  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  } // For each key of `next`, the list of keys to insert before that key in
  // the combined list


  var nextKeysPending = Object.create(null);
  var pendingKeys = [];

  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }

  var i;
  var childMapping = {};

  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }

    childMapping[nextKey] = getValueForKey(nextKey);
  } // Finally, add the keys which didn't appear before any key in `next`


  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }

  return childMapping;
}

function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}

function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function (child) {
    return (0, _react$2.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, 'appear', props),
      enter: getProp(child, 'enter', props),
      exit: getProp(child, 'exit', props)
    });
  });
}

function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children).forEach(function (key) {
    var child = children[key];
    if (!(0, _react$2.isValidElement)(child)) return;
    var hasPrev = (key in prevChildMapping);
    var hasNext = (key in nextChildMapping);
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, _react$2.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)

    if (hasNext && (!hasPrev || isLeaving)) {
      // console.log('entering', key)
      children[key] = (0, _react$2.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      // item is old (exiting)
      // console.log('leaving', key)
      children[key] = (0, _react$2.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, _react$2.isValidElement)(prevChild)) {
      // item hasn't changed transition states
      // copy over the last transition props;
      // console.log('unchanged', key)
      children[key] = (0, _react$2.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    }
  });
  return children;
}

TransitionGroup.exports;

(function (module, exports) {

	exports.__esModule = true;
	exports.default = void 0;

	var _propTypes = _interopRequireDefault(PropTypes$1);

	var _react = _interopRequireDefault(reactExports);

	var _TransitionGroupContext = _interopRequireDefault(TransitionGroupContextExports);

	var _ChildMapping = ChildMapping;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	var values = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};

	var defaultProps = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};
	/**
	 * The `<TransitionGroup>` component manages a set of transition components
	 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
	 * components, `<TransitionGroup>` is a state machine for managing the mounting
	 * and unmounting of components over time.
	 *
	 * Consider the example below. As items are removed or added to the TodoList the
	 * `in` prop is toggled automatically by the `<TransitionGroup>`.
	 *
	 * Note that `<TransitionGroup>`  does not define any animation behavior!
	 * Exactly _how_ a list item animates is up to the individual transition
	 * component. This means you can mix and match animations across different list
	 * items.
	 */

	var TransitionGroup = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;

	    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


	    _this.state = {
	      contextValue: {
	        isMounting: true
	      },
	      handleExited: handleExited,
	      firstRender: true
	    };
	    return _this;
	  }

	  var _proto = TransitionGroup.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.mounted = true;
	    this.setState({
	      contextValue: {
	        isMounting: false
	      }
	    });
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };

	  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
	    var prevChildMapping = _ref.children,
	        handleExited = _ref.handleExited,
	        firstRender = _ref.firstRender;
	    return {
	      children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
	      firstRender: false
	    };
	  } // node is `undefined` when user provided `nodeRef` prop
	  ;

	  _proto.handleExited = function handleExited(child, node) {
	    var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
	    if (child.key in currentChildMapping) return;

	    if (child.props.onExited) {
	      child.props.onExited(node);
	    }

	    if (this.mounted) {
	      this.setState(function (state) {
	        var children = _extends({}, state.children);

	        delete children[child.key];
	        return {
	          children: children
	        };
	      });
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        Component = _this$props.component,
	        childFactory = _this$props.childFactory,
	        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

	    var contextValue = this.state.contextValue;
	    var children = values(this.state.children).map(childFactory);
	    delete props.appear;
	    delete props.enter;
	    delete props.exit;

	    if (Component === null) {
	      return /*#__PURE__*/_react.default.createElement(_TransitionGroupContext.default.Provider, {
	        value: contextValue
	      }, children);
	    }

	    return /*#__PURE__*/_react.default.createElement(_TransitionGroupContext.default.Provider, {
	      value: contextValue
	    }, /*#__PURE__*/_react.default.createElement(Component, props, children));
	  };

	  return TransitionGroup;
	}(_react.default.Component);

	TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * `<TransitionGroup>` renders a `<div>` by default. You can change this
	   * behavior by providing a `component` prop.
	   * If you use React v16+ and would like to avoid a wrapping `<div>` element
	   * you can pass in `component={null}`. This is useful if the wrapping div
	   * borks your css styles.
	   */
	  component: _propTypes.default.any,

	  /**
	   * A set of `<Transition>` components, that are toggled `in` and out as they
	   * leave. the `<TransitionGroup>` will inject specific transition props, so
	   * remember to spread them through if you are wrapping the `<Transition>` as
	   * with our `<Fade>` example.
	   *
	   * While this component is meant for multiple `Transition` or `CSSTransition`
	   * children, sometimes you may want to have a single transition child with
	   * content that you want to be transitioned out and in when you change it
	   * (e.g. routes, images etc.) In that case you can change the `key` prop of
	   * the transition child as you change its content, this will cause
	   * `TransitionGroup` to transition the child out and back in.
	   */
	  children: _propTypes.default.node,

	  /**
	   * A convenience prop that enables or disables appear animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  appear: _propTypes.default.bool,

	  /**
	   * A convenience prop that enables or disables enter animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  enter: _propTypes.default.bool,

	  /**
	   * A convenience prop that enables or disables exit animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  exit: _propTypes.default.bool,

	  /**
	   * You may need to apply reactive updates to a child as it is exiting.
	   * This is generally done by using `cloneElement` however in the case of an exiting
	   * child the element has already been removed and not accessible to the consumer.
	   *
	   * If you do need to update a child as it leaves you can provide a `childFactory`
	   * to wrap every child, even the ones that are leaving.
	   *
	   * @type Function(child: ReactElement) -> ReactElement
	   */
	  childFactory: _propTypes.default.func
	} : {};
	TransitionGroup.defaultProps = defaultProps;
	var _default = TransitionGroup;
	exports.default = _default;
	module.exports = exports.default; 
} (TransitionGroup, TransitionGroup.exports));

var TransitionGroupExports = TransitionGroup.exports;

ReplaceTransition.exports;

(function (module, exports) {

	exports.__esModule = true;
	exports.default = void 0;

	var _propTypes = _interopRequireDefault(PropTypes$1);

	var _react = _interopRequireDefault(reactExports);

	var _reactDom = _interopRequireDefault(reactDomExports);

	var _TransitionGroup = _interopRequireDefault(TransitionGroupExports);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	/**
	 * The `<ReplaceTransition>` component is a specialized `Transition` component
	 * that animates between two children.
	 *
	 * ```jsx
	 * <ReplaceTransition in>
	 *   <Fade><div>I appear first</div></Fade>
	 *   <Fade><div>I replace the above</div></Fade>
	 * </ReplaceTransition>
	 * ```
	 */
	var ReplaceTransition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(ReplaceTransition, _React$Component);

	  function ReplaceTransition() {
	    var _this;

	    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
	      _args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;

	    _this.handleEnter = function () {
	      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      return _this.handleLifecycle('onEnter', 0, args);
	    };

	    _this.handleEntering = function () {
	      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }

	      return _this.handleLifecycle('onEntering', 0, args);
	    };

	    _this.handleEntered = function () {
	      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	        args[_key4] = arguments[_key4];
	      }

	      return _this.handleLifecycle('onEntered', 0, args);
	    };

	    _this.handleExit = function () {
	      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	        args[_key5] = arguments[_key5];
	      }

	      return _this.handleLifecycle('onExit', 1, args);
	    };

	    _this.handleExiting = function () {
	      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	        args[_key6] = arguments[_key6];
	      }

	      return _this.handleLifecycle('onExiting', 1, args);
	    };

	    _this.handleExited = function () {
	      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	        args[_key7] = arguments[_key7];
	      }

	      return _this.handleLifecycle('onExited', 1, args);
	    };

	    return _this;
	  }

	  var _proto = ReplaceTransition.prototype;

	  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
	    var _child$props;

	    var children = this.props.children;

	    var child = _react.default.Children.toArray(children)[idx];

	    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);

	    if (this.props[handler]) {
	      var maybeNode = child.props.nodeRef ? undefined : _reactDom.default.findDOMNode(this);
	      this.props[handler](maybeNode);
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        children = _this$props.children,
	        inProp = _this$props.in,
	        props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);

	    var _React$Children$toArr = _react.default.Children.toArray(children),
	        first = _React$Children$toArr[0],
	        second = _React$Children$toArr[1];

	    delete props.onEnter;
	    delete props.onEntering;
	    delete props.onEntered;
	    delete props.onExit;
	    delete props.onExiting;
	    delete props.onExited;
	    return /*#__PURE__*/_react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
	      key: 'first',
	      onEnter: this.handleEnter,
	      onEntering: this.handleEntering,
	      onEntered: this.handleEntered
	    }) : _react.default.cloneElement(second, {
	      key: 'second',
	      onEnter: this.handleExit,
	      onEntering: this.handleExiting,
	      onEntered: this.handleExited
	    }));
	  };

	  return ReplaceTransition;
	}(_react.default.Component);

	ReplaceTransition.propTypes = process.env.NODE_ENV !== "production" ? {
	  in: _propTypes.default.bool.isRequired,
	  children: function children(props, propName) {
	    if (_react.default.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
	    return null;
	  }
	} : {};
	var _default = ReplaceTransition;
	exports.default = _default;
	module.exports = exports.default; 
} (ReplaceTransition, ReplaceTransition.exports));

var ReplaceTransitionExports = ReplaceTransition.exports;

var SwitchTransition$1 = {};

SwitchTransition$1.__esModule = true;
SwitchTransition$1.default = SwitchTransition$1.modes = void 0;

var _react$1 = _interopRequireDefault$3(reactExports);

var _propTypes = _interopRequireDefault$3(PropTypes$1);

var _Transition$1 = Transition$2;

var _TransitionGroupContext = _interopRequireDefault$3(TransitionGroupContextExports);

var _leaveRenders, _enterRenders;

function _interopRequireDefault$3(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function areChildrenDifferent(oldChildren, newChildren) {
  if (oldChildren === newChildren) return false;

  if (_react$1.default.isValidElement(oldChildren) && _react$1.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
    return false;
  }

  return true;
}
/**
 * Enum of modes for SwitchTransition component
 * @enum { string }
 */


var modes = {
  out: 'out-in',
  in: 'in-out'
};
SwitchTransition$1.modes = modes;

var callHook = function callHook(element, name, cb) {
  return function () {
    var _element$props;

    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
    cb();
  };
};

var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function (_ref) {
  var current = _ref.current,
      changeState = _ref.changeState;
  return _react$1.default.cloneElement(current, {
    in: false,
    onExited: callHook(current, 'onExited', function () {
      changeState(_Transition$1.ENTERING, null);
    })
  });
}, _leaveRenders[modes.in] = function (_ref2) {
  var current = _ref2.current,
      changeState = _ref2.changeState,
      children = _ref2.children;
  return [current, _react$1.default.cloneElement(children, {
    in: true,
    onEntered: callHook(children, 'onEntered', function () {
      changeState(_Transition$1.ENTERING);
    })
  })];
}, _leaveRenders);
var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function (_ref3) {
  var children = _ref3.children,
      changeState = _ref3.changeState;
  return _react$1.default.cloneElement(children, {
    in: true,
    onEntered: callHook(children, 'onEntered', function () {
      changeState(_Transition$1.ENTERED, _react$1.default.cloneElement(children, {
        in: true
      }));
    })
  });
}, _enterRenders[modes.in] = function (_ref4) {
  var current = _ref4.current,
      children = _ref4.children,
      changeState = _ref4.changeState;
  return [_react$1.default.cloneElement(current, {
    in: false,
    onExited: callHook(current, 'onExited', function () {
      changeState(_Transition$1.ENTERED, _react$1.default.cloneElement(children, {
        in: true
      }));
    })
  }), _react$1.default.cloneElement(children, {
    in: true
  })];
}, _enterRenders);
/**
 * A transition component inspired by the [vue transition modes](https://vuejs.org/v2/guide/transitions.html#Transition-Modes).
 * You can use it when you want to control the render between state transitions.
 * Based on the selected mode and the child's key which is the `Transition` or `CSSTransition` component, the `SwitchTransition` makes a consistent transition between them.
 *
 * If the `out-in` mode is selected, the `SwitchTransition` waits until the old child leaves and then inserts a new child.
 * If the `in-out` mode is selected, the `SwitchTransition` inserts a new child first, waits for the new child to enter and then removes the old child.
 *
 * **Note**: If you want the animation to happen simultaneously
 * (that is, to have the old child removed and a new child inserted **at the same time**),
 * you should use
 * [`TransitionGroup`](https://reactcommunity.org/react-transition-group/transition-group)
 * instead.
 *
 * ```jsx
 * function App() {
 *  const [state, setState] = useState(false);
 *  return (
 *    <SwitchTransition>
 *      <CSSTransition
 *        key={state ? "Goodbye, world!" : "Hello, world!"}
 *        addEndListener={(node, done) => node.addEventListener("transitionend", done, false)}
 *        classNames='fade'
 *      >
 *        <button onClick={() => setState(state => !state)}>
 *          {state ? "Goodbye, world!" : "Hello, world!"}
 *        </button>
 *      </CSSTransition>
 *    </SwitchTransition>
 *  );
 * }
 * ```
 *
 * ```css
 * .fade-enter{
 *    opacity: 0;
 * }
 * .fade-exit{
 *    opacity: 1;
 * }
 * .fade-enter-active{
 *    opacity: 1;
 * }
 * .fade-exit-active{
 *    opacity: 0;
 * }
 * .fade-enter-active,
 * .fade-exit-active{
 *    transition: opacity 500ms;
 * }
 * ```
 */

var SwitchTransition = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(SwitchTransition, _React$Component);

  function SwitchTransition() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      status: _Transition$1.ENTERED,
      current: null
    };
    _this.appeared = false;

    _this.changeState = function (status, current) {
      if (current === void 0) {
        current = _this.state.current;
      }

      _this.setState({
        status: status,
        current: current
      });
    };

    return _this;
  }

  var _proto = SwitchTransition.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
  };

  SwitchTransition.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if (props.children == null) {
      return {
        current: null
      };
    }

    if (state.status === _Transition$1.ENTERING && props.mode === modes.in) {
      return {
        status: _Transition$1.ENTERING
      };
    }

    if (state.current && areChildrenDifferent(state.current, props.children)) {
      return {
        status: _Transition$1.EXITING
      };
    }

    return {
      current: _react$1.default.cloneElement(props.children, {
        in: true
      })
    };
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        mode = _this$props.mode,
        _this$state = this.state,
        status = _this$state.status,
        current = _this$state.current;
    var data = {
      children: children,
      current: current,
      changeState: this.changeState,
      status: status
    };
    var component;

    switch (status) {
      case _Transition$1.ENTERING:
        component = enterRenders[mode](data);
        break;

      case _Transition$1.EXITING:
        component = leaveRenders[mode](data);
        break;

      case _Transition$1.ENTERED:
        component = current;
    }

    return /*#__PURE__*/_react$1.default.createElement(_TransitionGroupContext.default.Provider, {
      value: {
        isMounting: !this.appeared
      }
    }, component);
  };

  return SwitchTransition;
}(_react$1.default.Component);

SwitchTransition.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Transition modes.
   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
   * `in-out`: New element transitions in first, then when complete, the current element transitions out.
   *
   * @type {'out-in'|'in-out'}
   */
  mode: _propTypes.default.oneOf([modes.in, modes.out]),

  /**
   * Any `Transition` or `CSSTransition` component.
   */
  children: _propTypes.default.oneOfType([_propTypes.default.element.isRequired])
} : {};
SwitchTransition.defaultProps = {
  mode: modes.out
};
var _default = SwitchTransition;
SwitchTransition$1.default = _default;

Transition = CSSTransition = void 0;

var _CSSTransition = _interopRequireDefault$2(CSSTransitionExports);

var CSSTransition = _CSSTransition.default;

var _ReplaceTransition = _interopRequireDefault$2(ReplaceTransitionExports);

_ReplaceTransition.default;

var _SwitchTransition = _interopRequireDefault$2(SwitchTransition$1);

_SwitchTransition.default;

var _TransitionGroup = _interopRequireDefault$2(TransitionGroupExports);

_TransitionGroup.default;

var _Transition = _interopRequireDefault$2(Transition$2);

var Transition = _Transition.default;

var _config = _interopRequireDefault$2(configExports);

_config.default;

function _interopRequireDefault$2(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultStyle$3 = timeout => ({
  transition: `opacity ${timeout}ms ease-in-out`,
  opacity: 0
});
const transitionStyles$3 = {
  entering: {
    opacity: 0
  },
  entered: {
    opacity: 1
  }
};
const Fade = ({
  children,
  ...rest
}) => /*#__PURE__*/React.createElement(Transition, rest, status => /*#__PURE__*/React.createElement("div", {
  style: {
    ...defaultStyle$3(rest.timeout),
    ...transitionStyles$3[status]
  }
}, children()));
Fade.propTypes = {
  timeout: PropTypes$1.number.isRequired,
  children: PropTypes$1.func.isRequired
};

const defaultStyle$2 = (timeout, delay) => {
  return {
    transition: `height ${timeout}ms ${delay ? `${delay}ms` : ""}`,
    overflow: "hidden"
  };
};
const transitionStyles$2 = height => ({
  entering: {
    height: `${height}px`
  },
  entered: {
    height: `${height}px`,
    overflow: "visible"
  },
  exiting: {
    height: 0
  },
  exited: {
    height: 0,
    visibility: "hidden"
  }
});
const Reveal = ({
  duration,
  timeout,
  height,
  delay,
  children,
  ...rest
}) => {
  const transitionTimeout = duration || timeout;
  return /*#__PURE__*/React.createElement(Transition, _extends$2({}, rest, {
    timeout: transitionTimeout + delay
  }), status => /*#__PURE__*/React.createElement("div", {
    style: {
      ...defaultStyle$2(transitionTimeout, delay),
      ...transitionStyles$2(height)[status]
    },
    "aria-hidden": status === "exited",
    "data-testid": "childrenContainer"
  }, children()));
};
Reveal.propTypes = {
  timeout: PropTypes$1.number.isRequired,
  delay: PropTypes$1.number,
  duration: PropTypes$1.number,
  height: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]).isRequired,
  children: PropTypes$1.func.isRequired
};
Reveal.defaultProps = {
  duration: undefined,
  delay: undefined
};

const StyledContainer$1 = styled.div({
  "@media (prefers-reduced-motion: reduce)": {
    transition: "none !important"
  }
});
const defaultStyle$1 = timeout => ({
  transition: `transform ${timeout}ms`
});
const transitionStyles$1 = (direction, distance) => {
  const styles = {
    transform: `translate${direction.toUpperCase()}(${distance})`
  };
  return {
    entering: styles,
    entered: styles
  };
};
const Translate = ({
  initialStyle,
  direction,
  distance,
  children,
  ...rest
}) => /*#__PURE__*/React.createElement(Transition, rest, status => /*#__PURE__*/React.createElement(StyledContainer$1, {
  style: {
    ...initialStyle,
    ...defaultStyle$1(rest.timeout),
    ...transitionStyles$1(direction, distance)[status]
  }
}, children()));
Translate.propTypes = {
  timeout: PropTypes$1.number.isRequired,
  direction: PropTypes$1.oneOf(["x", "y"]).isRequired,
  distance: PropTypes$1.string.isRequired,
  initialStyle: PropTypes$1.object,
  children: PropTypes$1.func.isRequired
};
Translate.defaultProps = {
  initialStyle: undefined
};

const StyledContainer = styled.div({
  "@media (prefers-reduced-motion: reduce)": {
    transition: "none !important"
  }
});
const defaultStyle = () => ({
  opacity: 0,
  height: 0,
  overflow: "hidden"
});
const transitionStyles = (height, timeout) => ({
  entering: {
    opacity: 1,
    height,
    transition: `height ${timeout}ms ease-in-out, opacity ${timeout}ms ease-in-out`
  },
  entered: {
    opacity: 1,
    height: "auto",
    visibility: "visible",
    transition: "unset"
  },
  exiting: {
    opacity: 1,
    height,
    visibility: "visible",
    transition: `height ${timeout}ms ease-in-out, opacity ${timeout}ms ease-in-out, visibility 0ms ${timeout}ms`
  },
  exited: {
    opacity: 0,
    height: "0px",
    visibility: "hidden",
    transition: `height ${timeout}ms ease-in-out, opacity ${timeout}ms ease-in-out, visibility 0ms ${timeout}ms`
  }
});
const FadeAndReveal = ({
  timeout,
  height,
  children,
  ...rest
}) => /*#__PURE__*/React.createElement(CSSTransition, _extends$2({}, rest, {
  timeout: {
    appear: timeout,
    enter: timeout,
    exit: 0
  }
}), state => /*#__PURE__*/React.createElement(StyledContainer, {
  style: {
    ...defaultStyle(),
    ...transitionStyles(height, timeout)[state]
  },
  "aria-hidden": state === "exiting" || state === "exited"
}, children()));
FadeAndReveal.propTypes = {
  height: PropTypes$1.number.isRequired,
  timeout: PropTypes$1.number,
  children: PropTypes$1.func.isRequired
};
FadeAndReveal.defaultProps = {
  timeout: 0
};

const parseHeader = text => {
  const t = text.replace("&trade;", "\u2122").replace("&reg;", "\u00AE").split("^^").map((line, index) => {
    if (line === "") {
      return "";
    }
    if (index % 2 === 0) {
      return line;
    }
    return /*#__PURE__*/React.createElement("sup", {
      key: line
    }, line);
  });
  return t;
};
const HeaderButtonClickable = styled.button(noStyle, ({
  panelDisabled
}) => ({
  width: "100%",
  textAlign: "left",
  ...(panelDisabled && {
    background: colorGreyAthens,
    cursor: "default"
  })
}));
const CaretContainer = styled.div(({
  isDisabled
}) => ({
  ...(isDisabled && {
    visibility: "hidden"
  })
}));
const HeaderContainer = styled.div(({
  direction
}) => ({
  display: "flex",
  flexDirection: direction,
  flex: "1 1 auto",
  width: "100%",
  alignItems: "flex-start"
}));
const HeaderTitleContainer = styled.div({
  width: "100%"
});
const HeaderSubtextContainer = styled.div({
  lineHeight: "1px"
});
const TertiaryTextAlignmentContainer = styled.div({
  ...media.until("md").css({
    alignSelf: "flex-end"
  })
});
const ShowFromMd = styled.div({
  display: "none",
  ...media.from("md").css({
    display: "inline-block",
    whiteSpace: "nowrap"
  })
});
const ShowUntilMd = styled.div({
  display: "inline-block",
  whiteSpace: "nowrap",
  ...media.from("md").css({
    display: "none"
  })
});
const StyledPanellessWrapper = styled(Box)({
  marginLeft: "1.5rem"
});
const ContentContainer = styled.div(({
  compact
}) => ({
  padding: compact ? "0.5rem 0" : "2rem"
}));
ContentContainer.displayName = "ContentContainer";
class PanelWrapper extends React.Component {
  constructor(props) {
    super(props);
    this.contentWrapper = null;
  }
  state = {
    open: this.props.open,
    hover: false,
    contentWrapperHeight: 0
  };
  static getDerivedStateFromProps(props, state) {
    if (state.open !== props.open) {
      if (props.panelOnToggle) {
        props.panelOnToggle(props.open);
      }
      return {
        open: props.open
      };
    }
    return null;
  }
  componentDidUpdate(prevProps) {
    if (this.props.open !== prevProps.open) {
      this.setContentWrapperHeight();
    }
  }
  setContentWrapperHeight = () => {
    this.setState({
      contentWrapperHeight: this.contentWrapper.offsetHeight
    });
  };
  handleClick = e => {
    this.setContentWrapperHeight();
    this.props.onClick(e);
  };
  mouseEnter = () => {
    this.setState({
      hover: true
    });
  };
  mouseLeave = () => {
    this.setState({
      hover: false
    });
  };
  renderCaret = (disabled, hover, open) => {
    return /*#__PURE__*/React.createElement(CaretContainer, {
      isDisabled: disabled
    }, /*#__PURE__*/React.createElement(Translate, {
      timeout: 300,
      in: hover,
      direction: "y",
      distance: open ? "-0.25rem" : "0.25rem"
    }, () => /*#__PURE__*/React.createElement(Text, {
      size: "large"
    }, open ? /*#__PURE__*/React.createElement(CaretUp, null) : /*#__PURE__*/React.createElement(CaretDown, null))));
  };
  renderHeader = (header, subtext, tertiaryText) => {
    return /*#__PURE__*/React.createElement(HeaderContainer, {
      direction: "row"
    }, /*#__PURE__*/React.createElement(HeaderContainer, {
      direction: "column"
    }, /*#__PURE__*/React.createElement(HeaderTitleContainer, null, /*#__PURE__*/React.createElement(Text, {
      size: "large"
    }, parseHeader(header))), subtext && /*#__PURE__*/React.createElement(HeaderSubtextContainer, null, /*#__PURE__*/React.createElement(Text, {
      size: "small"
    }, subtext))), tertiaryText && /*#__PURE__*/React.createElement(TertiaryTextAlignmentContainer, null, /*#__PURE__*/React.createElement(ShowFromMd, null, /*#__PURE__*/React.createElement(Text, {
      "data-testid": "tertiarytext",
      size: "large"
    }, tertiaryText)), /*#__PURE__*/React.createElement(ShowUntilMd, null, /*#__PURE__*/React.createElement(Text, {
      "data-testid": "tertiarytext",
      size: "medium"
    }, tertiaryText))));
  };
  renderPanelWrapper = () => {
    const {
      panelHeader,
      panelSubtext,
      panelTertiaryText,
      panelDisabled,
      tag,
      children,
      compact
    } = this.props;
    if (!children.props.children) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledPanellessWrapper, {
        vertical: 3,
        style: {
          marginLeft: "1.5rem"
        }
      }, /*#__PURE__*/React.createElement(Box, {
        inline: true,
        between: 3
      }, this.renderHeader(panelHeader, panelSubtext, panelTertiaryText))), /*#__PURE__*/React.createElement(HairlineDivider, null));
    }
    const headerButton = /*#__PURE__*/React.createElement(HeaderButtonClickable, {
      type: "button",
      panelDisabled: panelDisabled,
      onClick: this.handleClick,
      onMouseEnter: this.mouseEnter,
      onMouseLeave: this.mouseLeave,
      disabled: panelDisabled,
      "aria-expanded": this.state.open
    }, /*#__PURE__*/React.createElement(Box, {
      vertical: compact ? 0 : 3
    }, /*#__PURE__*/React.createElement(Box, {
      inline: true,
      between: 3
    }, this.renderCaret(panelDisabled, this.state.hover, this.state.open), this.renderHeader(panelHeader, panelSubtext, panelTertiaryText))));
    return /*#__PURE__*/React.createElement("div", null, tag ? /*#__PURE__*/React.createElement(tag, {
      "data-testid": "headerWrapper"
    }, headerButton) : headerButton, /*#__PURE__*/React.createElement(FadeAndReveal, {
      timeout: 500,
      in: this.state.open,
      height: this.state.contentWrapperHeight
    }, () => /*#__PURE__*/React.createElement("div", {
      ref: contentWrapper => {
        this.contentWrapper = contentWrapper;
      },
      "data-testid": "content"
    }, /*#__PURE__*/React.createElement(DimpleDivider, null), /*#__PURE__*/React.createElement(ContentContainer, {
      compact: compact
    }, /*#__PURE__*/React.createElement(Text, {
      block: true
    }, children)))), /*#__PURE__*/React.createElement(HairlineDivider, null));
  };
  render() {
    const {
      panelId
    } = this.props;
    return /*#__PURE__*/React.createElement("div", {
      id: panelId,
      "data-testid": panelId
    }, this.renderPanelWrapper());
  }
}
PanelWrapper.propTypes = {
  panelId: PropTypes$1.string.isRequired,
  panelHeader: PropTypes$1.string.isRequired,
  panelSubtext: PropTypes$1.string,
  panelTertiaryText: PropTypes$1.string,
  panelOnToggle: PropTypes$1.func,
  // eslint-disable-line react/no-unused-prop-types
  panelDisabled: PropTypes$1.bool,
  open: PropTypes$1.bool,
  tag: PropTypes$1.oneOf(["h1", "h2", "h3", "h4"]),
  onClick: PropTypes$1.func.isRequired,
  children: componentWithName$1("Panel").isRequired,
  compact: PropTypes$1.bool
};
PanelWrapper.defaultProps = {
  panelSubtext: undefined,
  panelTertiaryText: undefined,
  panelDisabled: false,
  panelOnToggle: undefined,
  open: false,
  tag: undefined,
  compact: false
};

const PanelBase = styled.div({
  backgroundColor: colorWhite
});
const Panels = ({
  topDivider,
  isPanelOpen,
  togglePanel,
  tag,
  children,
  compact,
  ...rest
}) => /*#__PURE__*/React.createElement(PanelBase, safeRest(rest), topDivider && /*#__PURE__*/React.createElement(HairlineDivider, null), React.Children.toArray(children).filter(Boolean).map(panel => {
  const {
    id,
    header,
    subtext,
    tertiaryText,
    disabled,
    onToggle
  } = panel.props;
  return /*#__PURE__*/React.createElement(PanelWrapper, {
    key: id,
    panelId: id,
    panelHeader: header,
    panelSubtext: subtext,
    panelTertiaryText: tertiaryText,
    panelOnToggle: onToggle,
    panelDisabled: disabled,
    tag: tag,
    open: isPanelOpen(id),
    onClick: () => togglePanel(id),
    compact: compact
  }, panel);
}));
Panels.propTypes = {
  topDivider: PropTypes$1.bool.isRequired,
  isPanelOpen: PropTypes$1.func.isRequired,
  togglePanel: PropTypes$1.func.isRequired,
  children: componentWithName$1("Panel").isRequired,
  tag: PropTypes$1.oneOf(["h1", "h2", "h3", "h4"]),
  compact: PropTypes$1.bool
};
Panels.defaultProps = {
  tag: undefined,
  compact: false
};

/* eslint-disable react/no-unused-prop-types */

/**
 * Expandable content areas for use with the `ExpandCollapse` or `Accordion`
 *
 * _This component can only be accessed as a name-spaced component: `ExpandCollapse.Panel` or `Accordion.Panel`._
 */
const Panel$1 = ({
  children
}) => /*#__PURE__*/React.createElement("div", null, children);
Panel$1.propTypes = {
  /**
   * The identifier of the panel. Must be unique within the `ExpandCollapse` panels.
   */
  id: PropTypes$1.string.isRequired,
  /**
   * The title.
   */
  header: PropTypes$1.string.isRequired,
  /**
   * Optional subtext.
   */
  subtext: PropTypes$1.string,
  /**
   * Optional tertiary text. Will be displayed on the right side of the panel header.
   */
  tertiaryText: PropTypes$1.string,
  /**
   * Whether or not to disable the panel from being opened or closed.
   */
  disabled: PropTypes$1.bool,
  /**
   * A callback function to be invoked when the panel is opened or closed.
   *
   * @param {boolean} open Whether or not the panel is open or closed.
   */
  onToggle: PropTypes$1.func,
  /**
   * The content. Can be text, any HTML element, or any component.
   */
  children: PropTypes$1.node
};
Panel$1.defaultProps = {
  subtext: undefined,
  tertiaryText: undefined,
  disabled: false,
  onToggle: undefined,
  children: undefined
};

class Accordion extends React.Component {
  state = {
    openPanel: this.props.open,
    prevOpenPanel: null
  };
  static getDerivedStateFromProps(props, state) {
    const {
      prevOpenPanel
    } = state;
    const open = props.open;
    if (open !== prevOpenPanel) {
      return {
        openPanel: open,
        prevOpenPanel: open
      };
    }
    return null;
  }
  togglePanel = panelId => {
    const {
      onToggle
    } = this.props;
    this.setState(({
      openPanel
    }) => {
      return {
        openPanel: openPanel === panelId ? undefined : panelId
      };
    }, () => {
      if (onToggle) {
        onToggle(this.state.openPanel);
      }
    });
  };
  isPanelOpen = panelId => {
    return this.state.openPanel === panelId;
  };
  render() {
    const {
      children,
      ...rest
    } = this.props;
    return /*#__PURE__*/React.createElement(Panels, _extends$2({}, rest, {
      isPanelOpen: this.isPanelOpen,
      togglePanel: this.togglePanel
    }), children);
  }
}
Accordion.propTypes = {
  open: PropTypes$1.string,
  topDivider: PropTypes$1.bool,
  onToggle: PropTypes$1.func,
  children: componentWithName$1("Panel")
};
Accordion.defaultProps = {
  open: undefined,
  topDivider: true,
  onToggle: undefined,
  children: undefined
};
Accordion.Panel = Panel$1;

const difference = (start, compare) => {
  const setDifference = new Set(start);
  compare.forEach(element => setDifference.delete(element));
  return setDifference;
};
const isEqual = (setA, setB) => {
  const differenceAtoB = difference(setA, setB);
  const differenceBtoA = difference(setB, setA);
  return differenceAtoB.size === 0 && differenceBtoA.size === 0;
};

class ExpandCollapse extends React.Component {
  state = {
    openPanels: new Set(this.props.open),
    prevOpenPanels: new Set()
  };
  static getDerivedStateFromProps(props, state) {
    const {
      prevOpenPanels
    } = state;
    const open = new Set(props.open);
    if (!isEqual(open, prevOpenPanels)) {
      return {
        openPanels: open,
        prevOpenPanels: open
      };
    }
    return null;
  }
  togglePanel = panelId => {
    const {
      onToggle
    } = this.props;
    this.setState(({
      openPanels
    }) => {
      const nextPanels = new Set(openPanels);
      if (nextPanels.has(panelId)) {
        nextPanels.delete(panelId);
      } else {
        nextPanels.add(panelId);
      }
      return {
        openPanels: nextPanels
      };
    }, () => {
      if (onToggle) {
        onToggle(Array.from(this.state.openPanels));
      }
    });
  };
  isPanelOpen = panelId => {
    return this.state.openPanels.has(panelId);
  };
  render() {
    const {
      tag,
      children,
      compact,
      ...rest
    } = this.props;
    return /*#__PURE__*/React.createElement(Panels, _extends$2({}, rest, {
      isPanelOpen: this.isPanelOpen,
      togglePanel: this.togglePanel,
      tag: tag,
      compact: compact
    }), children);
  }
}
ExpandCollapse.propTypes = {
  open: PropTypes$1.arrayOf(PropTypes$1.string),
  topDivider: PropTypes$1.bool,
  onToggle: PropTypes$1.func,
  tag: PropTypes$1.oneOf(["h1", "h2", "h3", "h4"]),
  children: componentWithName$1("Panel"),
  compact: PropTypes$1.bool
};
ExpandCollapse.defaultProps = {
  open: [],
  topDivider: true,
  onToggle: undefined,
  tag: undefined,
  children: undefined,
  compact: false
};
ExpandCollapse.Panel = Panel$1;

const GutterContext = /*#__PURE__*/React.createContext(false);

const calculateLevel = (xs, sm, md, lg, xl) => {
  const levelToggles = [xs, sm, md, lg, xl];
  const enabledLevels = [false, false, false, false, false];
  for (let toggles = 0; toggles < levelToggles.length; toggles += 1) {
    for (let levels = toggles; levels < enabledLevels.length; levels += 1) {
      if (levelToggles[toggles] !== undefined) {
        enabledLevels[levels] = levelToggles[toggles];
      }
    }
  }
  return enabledLevels;
};

const toPercent = num => {
  return `${num / 12 * 100}%`;
};
const calculateWidth = (breakpoint, value) => {
  if (typeof value === "undefined") {
    return {};
  }
  if (typeof value === "number") {
    const percent = toPercent(value);
    return media.from(breakpoint).css({
      maxWidth: percent,
      flexBasis: percent
    });
  }
  return {
    flexGrow: 1,
    flexBasis: 0,
    maxWidth: "100%"
  };
};
const calculateOffset = (breakpoint, value) => {
  if (typeof value === "number") {
    const percent = toPercent(value);
    return media.from(breakpoint).css({
      marginLeft: percent
    });
  }
  return {};
};
const sizeStyles = ({
  xs,
  sm,
  md,
  lg,
  xl
}) => ({
  flex: "0 0 auto",
  flexBasis: "100%",
  maxWidth: "100%",
  ...calculateWidth("xs", xs),
  ...calculateWidth("sm", sm),
  ...calculateWidth("md", md),
  ...calculateWidth("lg", lg),
  ...calculateWidth("xl", xl)
});
const offsetStyles = ({
  xsOffset,
  smOffset,
  mdOffset,
  lgOffset,
  xlOffset
}) => ({
  ...calculateOffset("xs", xsOffset),
  ...calculateOffset("sm", smOffset),
  ...calculateOffset("md", mdOffset),
  ...calculateOffset("lg", lgOffset),
  ...calculateOffset("xl", xlOffset)
});
const StyledCol = styled.div(sizeStyles, offsetStyles, ({
  hiddenLevel,
  gutter,
  horizontalAlignLevel
}) => ({
  paddingLeft: gutter ? "1rem" : 0,
  paddingRight: gutter ? "1rem" : 0,
  ...media.until("sm").css({
    display: hiddenLevel[0] === 0 ? "none" : "block",
    textAlign: horizontalAlignLevel[0]
  }),
  ...media.from("sm").css({
    display: hiddenLevel[1] === 0 ? "none" : "block",
    textAlign: horizontalAlignLevel[1]
  }),
  ...media.from("md").css({
    display: hiddenLevel[2] === 0 ? "none" : "block",
    textAlign: horizontalAlignLevel[2]
  }),
  ...media.from("lg").css({
    display: hiddenLevel[3] === 0 ? "none" : "block",
    textAlign: horizontalAlignLevel[3]
  }),
  ...media.from("xl").css({
    display: hiddenLevel[4] === 0 ? "none" : "block",
    textAlign: horizontalAlignLevel[4]
  })
}));
const Col = ({
  span,
  offset,
  horizontalAlign,
  children,
  ...rest
}) => {
  if (offset) {
    deprecate("core-flex-grid", "The `offset` prop is deprecated due to the addition of the responsive offset props. Use `xsOffset` instead.");
  }
  if (span) {
    deprecate("core-flex-grid", "The `span` prop is deprecated due to the addition of the responsive props. Use `xs` instead.");
  }
  const props = {
    ...rest
  };
  if (offset && !props.xsOffset) {
    props.xsOffset = offset;
  }
  const hiddenLevel = calculateLevel(rest.xs, rest.sm, rest.md, rest.lg, rest.xl);
  const horizontalAlignLevel = () => {
    if (typeof horizontalAlign === "object") {
      return calculateLevel(horizontalAlign.xs, horizontalAlign.sm, horizontalAlign.md, horizontalAlign.lg, horizontalAlign.xl);
    }
    if (typeof horizontalAlign === "string") {
      return [horizontalAlign, horizontalAlign, horizontalAlign, horizontalAlign, horizontalAlign];
    }
    return ["inherit", "inherit", "inherit", "inherit", "inherit"];
  };
  return /*#__PURE__*/React.createElement(GutterContext.Consumer, null, gutter => /*#__PURE__*/React.createElement(StyledCol, _extends$2({}, safeRest(props), {
    xs: rest.xs || span || true,
    hiddenLevel: hiddenLevel,
    gutter: gutter,
    horizontalAlignLevel: horizontalAlignLevel()
  }), children));
};
Col.propTypes = {
  xs: PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, true, false]),
  sm: PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, true, false]),
  md: PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, true, false]),
  lg: PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, true, false]),
  xl: PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, true, false]),
  xsOffset: PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),
  smOffset: PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),
  mdOffset: PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),
  lgOffset: PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),
  xlOffset: PropTypes$1.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),
  children: PropTypes$1.node.isRequired,
  span: PropTypes$1.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
  offset: PropTypes$1.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),
  horizontalAlign: responsiveProps(PropTypes$1.string)
};
Col.defaultProps = {
  span: undefined,
  offset: undefined,
  horizontalAlign: undefined
};

const horizontalAlignStyles = ({
  horizontalAlign
}) => {
  switch (horizontalAlign) {
    case "start":
      return {
        justifyContent: "flex-start",
        textAlign: "left"
      };
    case "center":
      return {
        justifyContent: "center",
        textAlign: "center"
      };
    case "end":
      return {
        justifyContent: "flex-end",
        textAlign: "right"
      };
    default:
      return {};
  }
};
const verticalAlignStyles = ({
  verticalAlign
}) => {
  switch (verticalAlign) {
    case "top":
      return {
        alignItems: "flex-start"
      };
    case "middle":
      return {
        alignItems: "center"
      };
    case "bottom":
      return {
        alignItems: "flex-end"
      };
    default:
      return {};
  }
};
const distributeStyles = ({
  distribute
}) => {
  let justifyContent;
  if (distribute === "between") {
    justifyContent = "space-between";
  }
  if (distribute === "around") {
    justifyContent = "space-around";
  }
  return {
    justifyContent
  };
};
const StyledRow = styled.div(horizontalAlignStyles, verticalAlignStyles, distributeStyles, ({
  reverseLevel
}) => ({
  width: "100%",
  margin: "0 auto",
  display: "flex",
  flex: "0 1 auto",
  flexDirection: "row",
  flexWrap: "wrap",
  flexShrink: 0,
  ...media.until("sm").css({
    flexDirection: reverseLevel[0] ? "row-reverse" : "row"
  }),
  ...media.from("sm").css({
    flexDirection: reverseLevel[1] ? "row-reverse" : "row"
  }),
  ...media.from("md").css({
    flexDirection: reverseLevel[2] ? "row-reverse" : "row"
  }),
  ...media.from("lg").css({
    flexDirection: reverseLevel[3] ? "row-reverse" : "row"
  }),
  ...media.from("xl").css({
    flexDirection: reverseLevel[4] ? "row-reverse" : "row"
  })
}));
const Row = ({
  horizontalAlign,
  verticalAlign,
  distribute,
  xsReverse,
  smReverse,
  mdReverse,
  lgReverse,
  xlReverse,
  children,
  ...rest
}) => {
  const reverseLevel = calculateLevel(xsReverse, smReverse, mdReverse, lgReverse, xlReverse);
  return /*#__PURE__*/React.createElement(StyledRow, _extends$2({}, safeRest(rest), {
    horizontalAlign: horizontalAlign,
    verticalAlign: verticalAlign,
    distribute: distribute,
    reverseLevel: reverseLevel
  }), children);
};
Row.propTypes = {
  /**
   * Align columns horizontally within their row.
   */
  horizontalAlign: PropTypes$1.oneOf(["start", "center", "end"]),
  /**
   * Align columns vertically within their row.
   */
  verticalAlign: PropTypes$1.oneOf(["top", "middle", "bottom"]),
  /**
   * Distribute empty space around columns.
   */
  distribute: PropTypes$1.oneOf(["around", "between"]),
  /**
   * Choose if the item order should be reversed from the 'xs' breakpoint. When you pass in false, the order will be normal from the xs breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  xsReverse: PropTypes$1.bool,
  /**
   * Choose if the item order should be reversed from the 'sm' breakpoint. When you pass in false, the order will be normal from the sm breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  smReverse: PropTypes$1.bool,
  /**
   * Choose if the item order should be reversed from the 'md' breakpoint. When you pass in false, the order will be normal from the md breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  mdReverse: PropTypes$1.bool,
  /**
   * Choose if the item order should be reversed from the 'lg' breakpoint. When you pass in false, the order will be normal from the lg breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  lgReverse: PropTypes$1.bool,
  /**
   * Choose if the item order should be reversed from the 'xl' breakpoint. When you pass in false, the order will be normal from the xl breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  xlReverse: PropTypes$1.bool,
  children: PropTypes$1.node.isRequired
};
Row.defaultProps = {
  horizontalAlign: undefined,
  verticalAlign: undefined,
  distribute: undefined,
  xsReverse: undefined,
  smReverse: undefined,
  mdReverse: undefined,
  lgReverse: undefined,
  xlReverse: undefined
};

const rem = breakpoint => pixelToRem(breakpoints[breakpoint]);
const StyledGrid = styled.div(({
  reverseLevel,
  limitWidth,
  outsideGutter
}) => ({
  display: "flex",
  flexWrap: "wrap",
  margin: `0 ${!outsideGutter ? "-1rem" : "auto"}`,
  width: !outsideGutter ? undefined : "100%",
  ...media.until("sm").css({
    flexDirection: reverseLevel[0] ? "column-reverse" : "column"
  }),
  ...media.from("sm").css({
    ...(limitWidth && {
      maxWidth: rem("sm")
    }),
    flexDirection: reverseLevel[1] ? "column-reverse" : "column"
  }),
  ...media.from("md").css({
    ...(limitWidth && {
      maxWidth: rem("md")
    }),
    flexDirection: reverseLevel[2] ? "column-reverse" : "column"
  }),
  ...media.from("lg").css({
    ...(limitWidth && {
      maxWidth: rem("lg")
    }),
    flexDirection: reverseLevel[3] ? "column-reverse" : "column"
  }),
  ...media.from("xl").css({
    ...(limitWidth && {
      maxWidth: rem("xl")
    }),
    flexDirection: reverseLevel[4] ? "column-reverse" : "column"
  })
}));
const FlexGrid = ({
  limitWidth,
  gutter,
  outsideGutter,
  xsReverse,
  smReverse,
  mdReverse,
  lgReverse,
  xlReverse,
  children,
  ...rest
}) => {
  const reverseLevel = calculateLevel(xsReverse, smReverse, mdReverse, lgReverse, xlReverse);
  return /*#__PURE__*/React.createElement(GutterContext.Provider, {
    value: gutter
  }, /*#__PURE__*/React.createElement(StyledGrid, _extends$2({}, safeRest(rest), {
    outsideGutter: outsideGutter,
    reverseLevel: reverseLevel,
    limitWidth: limitWidth
  }), children));
};
FlexGrid.propTypes = {
  /**
   * Whether or not to give the grid a fixed width. This also centres the grid horizontally.
   */
  limitWidth: PropTypes$1.bool,
  /**
   * Whether or not to include gutters in between columns.
   */
  gutter: PropTypes$1.bool,
  /**
   * Whether or not to include gutter at the ends to the left and right of the FlexGrid
   */
  outsideGutter: PropTypes$1.bool,
  /**
   * Choose if the item order should be reversed from the 'xs' breakpoint. When you pass in false, the order will be normal from the xs breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  xsReverse: PropTypes$1.bool,
  /**
   * Choose if the item order should be reversed from the 'sm' breakpoint. When you pass in false, the order will be normal from the sm breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  smReverse: PropTypes$1.bool,
  /**
   * Choose if the item order should be reversed from the 'md' breakpoint. When you pass in false, the order will be normal from the md breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  mdReverse: PropTypes$1.bool,
  /**
   * Choose if the item order should be reversed from the 'lg' breakpoint. When you pass in false, the order will be normal from the lg breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  lgReverse: PropTypes$1.bool,
  /**
   * Choose if the item order should be reversed from the 'xl' breakpoint. When you pass in false, the order will be normal from the xl breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  xlReverse: PropTypes$1.bool,
  /**
   * The rows and columns of the Grid. Will typically be `FlexGrid.Row` and `FlexGrid.Col` components.
   */
  children: PropTypes$1.node.isRequired
};
FlexGrid.defaultProps = {
  limitWidth: true,
  gutter: true,
  outsideGutter: true,
  xsReverse: undefined,
  smReverse: undefined,
  mdReverse: undefined,
  lgReverse: undefined,
  xlReverse: undefined
};
FlexGrid.Row = Row;
FlexGrid.Col = Col;

const StyledLabelContainer$2 = styled(Box)({
  alignItems: "center"
});
const StyledInput = styled.input({
  boxSizing: "border-box",
  width: "100%",
  margin: 0,
  outline: 0,
  textOverflow: "ellipsis",
  borderColor: colorGreyShuttle,
  "&::placeholder": {
    font: "inherit",
    letterSpacing: "inherit",
    lineHeight: "inherit",
    color: colorGreyShuttle
  }
}, thin, rounded, font, medium, mediumFont, color, ({
  withFeedbackIcon
}) => ({
  "&::-webkit-inner-spin-button, &::-webkit-outer-spin-button": {
    appearance: "none",
    margin: 0
  },
  "-moz-appearance": "textfield",
  minHeight: inputHeight.height,
  maxHeight: inputHeight.height,
  padding: withFeedbackIcon ? "0.5rem 3rem 0.5rem 1rem" : "0.5rem 1rem"
}), {
  "&:focus": {
    borderColor: "transparent",
    boxShadow: `0 0 4px 1px ${colorGreyShuttle}`,
    backgroundColor: colorWhite
  }
}, ({
  feedback
}) => {
  let borderColor;
  if (feedback === "success") {
    borderColor = colorPrimary;
  } else if (feedback === "error") {
    borderColor = colorCardinal;
  }
  return {
    "&:not(:focus)": {
      borderColor
    }
  };
}, ({
  disabled
}) => {
  if (disabled) {
    return {
      backgroundColor: colorGreyAthens,
      borderColor: "transparent",
      "&:not(:focus)": {
        borderColor: "transparent"
      }
    };
  }
  return {};
});
const StyledFeedbackIcon$1 = styled.div({
  right: "1rem"
}, absolute, centerVertically);

// FeedbackIcon component

const StyledIcon$1 = styled.div({
  lineHeight: 1
});

const renderIcon$1 = feedback => {
  if (feedback === "success") {
    return /*#__PURE__*/React.createElement(NotificationSuccess, {
      copy: {
        a11yText: "The value of this input field is valid."
      }
    });
  }
  if (feedback === "error") {
    return /*#__PURE__*/React.createElement(NotificationError, {
      copy: {
        a11yText: "The value of this input field is invalid."
      }
    });
  }
  return null;
};
const FeedbackIcon = ({
  showIcon,
  feedback
}) => /*#__PURE__*/React.createElement(Fade, {
  timeout: 100,
  in: showIcon,
  mountOnEnter: true,
  unmountOnExit: true
}, () => /*#__PURE__*/React.createElement(StyledIcon$1, null, renderIcon$1(feedback)));
FeedbackIcon.propTypes = {
  showIcon: PropTypes$1.bool.isRequired,
  feedback: PropTypes$1.oneOf(["success", "error"])
};
FeedbackIcon.defaultProps = {
  feedback: undefined
};

const showFeedbackIcon$2 = feedback => feedback === "error" || feedback === "success";
const renderHint$2 = (hint, Component, id) => /*#__PURE__*/React.createElement(Component, {
  id: id,
  size: "small"
}, hint);
const renderError$3 = (error, errorId) => /*#__PURE__*/React.createElement(InputFeedback, {
  id: errorId,
  feedback: "error"
}, /*#__PURE__*/React.createElement(Paragraph, {
  size: "small"
}, error));
const renderLabel$2 = (id, label, hint, hintPosition, hintId, tooltip) => /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Box, {
  inline: true,
  between: 2
}, /*#__PURE__*/React.createElement("label", {
  htmlFor: id || generateId(label).identity()
}, /*#__PURE__*/React.createElement(StyledLabelContainer$2, {
  inline: true,
  tag: "span",
  between: 2
}, /*#__PURE__*/React.createElement(Text, {
  size: "medium",
  bold: true
}, label), hint && hintPosition === "inline" && renderHint$2(hint, Text, hintId))), tooltip && /*#__PURE__*/React.cloneElement(tooltip, {
  connectedFieldLabel: label
})), hint && hintPosition === "below" && renderHint$2(hint, Paragraph, hintId));
const renderHelper$2 = (helper, helperId, feedback, value) => {
  if (typeof helper === "function") {
    return /*#__PURE__*/React.createElement("div", {
      id: helperId
    }, /*#__PURE__*/React.createElement(Text, {
      size: "small"
    }, helper(feedback, value)));
  }
  return /*#__PURE__*/React.createElement(InputFeedback, {
    id: helperId,
    feedback: feedback
  }, /*#__PURE__*/React.createElement(Text, {
    size: "small"
  }, helper));
};
const Input = /*#__PURE__*/React.forwardRef(({
  id,
  value,
  type,
  label,
  hint,
  hintPosition,
  feedback,
  error,
  helper,
  tooltip,
  ...rest
}, ref) => {
  const [isFocused, setIsFocused] = reactExports.useState(false);
  const fieldId = generateId(id, rest.name, label);
  const errorId = error && fieldId.postfix("error-message");
  const helperId = helper && fieldId.postfix("helper");
  const hintId = hint && hintPosition === "below" && fieldId.postfix("hint") || undefined;
  const handleFocus = e => {
    setIsFocused(true);
    if (rest.onFocus) {
      rest.onFocus(e);
    }
  };
  const handleBlur = e => {
    setIsFocused(false);
    if (rest.onBlur) {
      rest.onBlur(e);
    }
  };
  const handleKeyDown = e => {
    /**
     * this is a workaround for a bug in chrome that moves
     * the cursor into a wrong position if prepended with a space
     */
    if (type === "email" && e.key === " ") {
      e.preventDefault();
    }
    if (rest.onKeyDown) {
      rest.onKeyDown(e);
    }
  };
  return /*#__PURE__*/React.createElement(Box, {
    between: 2
  }, renderLabel$2(fieldId.identity(), label, hint, hintPosition, hintId, tooltip), helper && renderHelper$2(helper, helperId, feedback, value), error && renderError$3(error, errorId), /*#__PURE__*/React.createElement("div", {
    style: {
      position: "relative"
    }
  }, /*#__PURE__*/React.createElement(StyledInput, _extends$2({}, safeRest(rest), {
    type: type,
    ref: ref,
    id: fieldId.identity(),
    value: value,
    feedback: feedback,
    "aria-invalid": feedback === "error",
    "aria-describedby": errorId || hintId || helperId || undefined,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onKeyDown: handleKeyDown
  })), !rest.disabled && /*#__PURE__*/React.createElement(StyledFeedbackIcon$1, null, /*#__PURE__*/React.createElement(FeedbackIcon, {
    showIcon: showFeedbackIcon$2(feedback) && !isFocused,
    feedback: feedback
  }))));
});
Input.displayName = "Input";
Input.propTypes = {
  id: PropTypes$1.string,
  type: PropTypes$1.oneOf(["text", "number", "password", "email", "search", "tel", "url"]),
  label: PropTypes$1.string.isRequired,
  hint: PropTypes$1.string,
  hintPosition: PropTypes$1.oneOf(["inline", "below"]),
  value: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
  feedback: PropTypes$1.oneOf(["success", "error"]),
  error: PropTypes$1.node,
  helper: PropTypes$1.oneOfType([PropTypes$1.func, PropTypes$1.node]),
  tooltip: componentWithName$1("Tooltip", true)
};
Input.defaultProps = {
  id: undefined,
  type: "text",
  hint: undefined,
  hintPosition: "inline",
  value: undefined,
  feedback: undefined,
  error: undefined,
  tooltip: undefined,
  helper: undefined
};

// Returns an array of focusable elements in the order they are found in c
const selector = "button, [href], input, select, textarea, [tabindex]:not([tabindex='-1']), audio[controls], video[controls], [contenteditable]:not([contenteditable=false])";
const getFocusable = c => c.querySelectorAll(selector);
const withFocusTrap = Component => {
  const WithFocusTrap = props => {
    const componentRef = reactExports.useRef(null);

    // To force VoiceOver to treat the dialog as a modal we need to set the aria-label attribute.
    // Also the modal-dialog html needs to be inserted into the page using JS after the page loads (this isn't a real problem)
    const {
      a11yText,
      autofocus,
      ...rest
    } = props;
    reactExports.useEffect(() => {
      if (autofocus) {
        // setting the focus to the first focusable element on mount only
        const focusableElements = componentRef.current && getFocusable(componentRef.current)[0];
        if (focusableElements) focusableElements.focus();
      }
    }, [autofocus]);
    const handleFocus = isEnd => () => {
      const focusableElements = getFocusable(componentRef.current);
      focusableElements[isEnd ? 0 : focusableElements.length - 1].focus();
    };
    return /*#__PURE__*/React.createElement("div", {
      role: "dialog",
      "aria-modal": "true",
      "aria-label": a11yText
    }, /*#__PURE__*/React.createElement("div", {
      onFocus: handleFocus(false),
      tabIndex: 0
    }), /*#__PURE__*/React.createElement("div", {
      ref: componentRef
    }, /*#__PURE__*/React.createElement(Component, rest)), /*#__PURE__*/React.createElement("div", {
      onFocus: handleFocus(true),
      tabIndex: 0
    }));
  };
  WithFocusTrap.propTypes = {
    a11yText: PropTypes$1.string,
    autofocus: PropTypes$1.bool
  };
  WithFocusTrap.defaultProps = {
    a11yText: "modal dialog",
    autofocus: true
  };
  return WithFocusTrap;
};

// eslint-disable-next-line react/display-name
const withStyledComponent = StyledComponent => Component => props => {
  const WithStyledComponent = /*#__PURE__*/React.createElement(Component, _extends$2({}, props, {
    styledComponent: StyledComponent
  }));
  return WithStyledComponent;
};

const getDisplayName = Component => {
  return Component.displayName || Component.name || "Component";
};
const withForwardedRef = Component => {
  const WithForwardedRef = /*#__PURE__*/reactExports.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Component, _extends$2({}, props, {
    forwardedRef: ref
  })));
  WithForwardedRef.displayName = `WithForwardedRef(${getDisplayName(Component)})`;
  return WithForwardedRef;
};

const base = {
  ...focusOutline,
  "&:link,&:visited": {
    color: colorGreyShark,
    textDecoration: "underline"
  },
  "&:hover": {
    textDecoration: "none"
  },
  "& svg": {}
};
const states = ({
  invert
}) => {
  return {
    "&:active": {
      color: invert && colorGainsboro,
      backgroundColor: invert ? "rgba(0,0,0,0.4)" : colorGainsboro,
      borderRadius: "0.25rem",
      padding: "0.125rem",
      margin: "-0.125rem",
      textDecoration: "underline"
    },
    "&:focus": {
      border: `0.125rem solid ${invert ? colorWhite : colorGreyRaven}`,
      padding: "0.125rem",
      margin: "-0.25rem",
      // (border + padding) * -1
      borderRadius: "0.25rem",
      outline: "none"
    }
  };
};
const StyledLink = styled.a(base, {
  "& svg": {
    transition: "transform 150ms ease-in-out"
  },
  "&:hover svg": {
    transform: "scale(1.1, 1.1)"
  },
  "&:active svg": {
    transform: "scale(1, 1)"
  }
}, ({
  invert,
  context
}) => {
  if (context.inheritColor) {
    return {
      "&:link,&:visited": {
        color: "inherit"
      }
    };
  }
  if (invert) {
    return {
      "&:link,&:visited": {
        color: colorWhite
      }
    };
  }
  return {};
}, states, ({
  hasIcon
}) => {
  if (hasIcon) {
    return {
      display: "inline-block",
      "& > svg": {
        verticalAlign: "middle"
      }
    };
  }
  return {};
});
const Link = ({
  reactRouterLinkComponent,
  invert,
  children,
  forwardedRef,
  icon: Icon,
  iconPosition,
  ...rest
}, context) => {
  if (!(reactRouterLinkComponent && rest.to) && (reactRouterLinkComponent || rest.to)) {
    warn("Link", "The props `reactRouterLinkComponent` and `to` must be used together.");
  }
  const renderChildren = reactExports.useCallback(() => {
    if (Icon) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, iconPosition === "left" && /*#__PURE__*/React.createElement(Icon, {
        color: invert ? "white" : "greyShark",
        style: {
          marginRight: "0.5rem"
        }
      }), children, iconPosition === "right" && /*#__PURE__*/React.createElement(Icon, {
        color: invert ? "white" : "greyShark",
        style: {
          marginLeft: "0.25rem"
        }
      }));
    }
    return children;
  }, [children, Icon, iconPosition, invert]);
  return /*#__PURE__*/React.createElement(StyledLink, _extends$2({}, safeRest(rest), {
    as: reactRouterLinkComponent || "a",
    invert: invert,
    context: context,
    ref: forwardedRef,
    hasIcon: !!Icon
  }), renderChildren());
};
Link.propTypes = {
  reactRouterLinkComponent: PropTypes$1.oneOfType([PropTypes$1.func, PropTypes$1.object]),
  to: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.object]),
  href: PropTypes$1.string,
  invert: PropTypes$1.bool,
  children: PropTypes$1.node.isRequired,
  forwardedRef: PropTypes$1.oneOfType([PropTypes$1.object, PropTypes$1.func]),
  icon: componentWithName$1("Dependent", true),
  iconPosition: PropTypes$1.oneOf(["left", "right"])
};
Link.defaultProps = {
  reactRouterLinkComponent: null,
  to: null,
  href: null,
  invert: undefined,
  forwardedRef: undefined,
  icon: undefined,
  iconPosition: "left"
};
Link.contextTypes = {
  inheritColor: PropTypes$1.bool
};
var Link$1 = withForwardedRef(Link);

const copyDictionary$6 = {
  en: {
    feedback: "en",
    close: "Close"
  },
  fr: {
    feedback: "fr",
    close: "Fermer"
  }
};

const StyledNotificationContainer = styled(({
  variant,
  ...rest
}) => /*#__PURE__*/React.createElement(Box, rest))(({
  variant
}) => ({
  position: "relative",
  ...{
    instructional: standard,
    success: success,
    error: error,
    warning: warning,
    branded: {
      backgroundColor: colorWhiteLilac
    }
  }[variant]
}));
const StyledIconContainer = styled(({
  ...rest
}) => /*#__PURE__*/React.createElement(Box, rest))({
  lineHeight: 0
});
const StyledDismissButtonWrapper = styled.div({
  marginLeft: "auto",
  height: "1.5rem",
  position: "relative",
  marginTop: "-0.5rem",
  marginRight: "-0.5rem"
});
const isImportant = variant => variant === "success" || variant === "error" || variant === "warning";
const renderIcon = (variant, copy) => {
  const feedback = getCopy(copyDictionary$6, copy).feedback;
  const iconCopy = typeof copy === "object" && copy.feedback ? {
    a11yText: feedback
  } : feedback;
  if (variant === "success") {
    return /*#__PURE__*/React.createElement(NotificationSuccess, {
      copy: iconCopy
    });
  }
  if (variant === "error") {
    return /*#__PURE__*/React.createElement(NotificationError, {
      copy: iconCopy
    });
  }
  if (variant === "warning") {
    return /*#__PURE__*/React.createElement(NotificationWarning, {
      copy: iconCopy
    });
  }
  return undefined;
};
class Notification extends React.Component {
  state = {
    dismissed: false,
    contentWrapperHeight: undefined
  };
  componentDidMount() {
    if (this.props.dismissible) {
      window.addEventListener("resize", this.adjustContentHeight);
    }
  }
  componentWillUnmount() {
    window.removeEventListener("resize", this.adjustContentHeight);
  }
  adjustContentHeight = () => {
    if (this.contentWrapper && this.contentWrapper.offsetHeight !== this.state.contentWrapperHeight) {
      this.setState({
        contentWrapperHeight: this.contentWrapper.offsetHeight
      });
    }
  };
  renderNotification() {
    const {
      variant,
      dismissible,
      children,
      onExit,
      onDismiss,
      copy,
      ...rest
    } = this.props;
    return /*#__PURE__*/React.createElement(StyledNotificationContainer, _extends$2({}, safeRest(rest), {
      vertical: 3,
      variant: variant
    }), /*#__PURE__*/React.createElement(FlexGrid, null, /*#__PURE__*/React.createElement(FlexGrid.Row, null, /*#__PURE__*/React.createElement(FlexGrid.Col, null, /*#__PURE__*/React.createElement(FlexGrid, {
      gutter: false
    }, /*#__PURE__*/React.createElement(FlexGrid.Row, null, /*#__PURE__*/React.createElement(FlexGrid.Col, null, /*#__PURE__*/React.createElement(Box, {
      inline: true,
      between: 3
    }, /*#__PURE__*/React.createElement(Box, {
      inline: true,
      between: 3,
      style: {
        justifyContent: "center"
      }
    }, isImportant(variant) && /*#__PURE__*/React.createElement(StyledIconContainer, {
      vertical: 1
    }, renderIcon(variant, copy)), /*#__PURE__*/React.createElement(Paragraph, null, children)), dismissible && /*#__PURE__*/React.createElement(StyledDismissButtonWrapper, null, /*#__PURE__*/React.createElement(IconButton, {
      icon: Close$1,
      a11yText: getCopy(copyDictionary$6, copy).close,
      onClick: () => {
        this.setState(() => ({
          dismissed: true
        }));
        if (onDismiss) {
          onDismiss();
        }
      }
    }))))))))));
  }
  render() {
    const {
      variant,
      dismissible,
      onExit,
      onDismiss
    } = this.props;
    if (onExit && !dismissible) {
      warn("Notification", "The prop `onExit` must be used together with `dismissible`.");
    }
    if (onDismiss && !dismissible) {
      warn("Notification", "The prop `onDismiss` must be used together with `dismissible`.");
    }
    if (variant === "error" && dismissible) {
      warn("Notification", "Error notifications should not be dismissible.");
    }
    if (variant === "warning" && dismissible) {
      warn("Notification", "Warning notifications should not be dismissible.");
    }
    if (dismissible) {
      const fadeDuration = 500;
      const revealDuration = 400;
      return /*#__PURE__*/React.createElement(Reveal, {
        timeout: revealDuration,
        delay: fadeDuration,
        in: !this.state.dismissed,
        height: this.state.contentWrapperHeight || "auto",
        unmountOnExit: true
      }, () => /*#__PURE__*/React.createElement(Fade, {
        timeout: fadeDuration,
        in: !this.state.dismissed,
        onExited: onExit
      }, () => /*#__PURE__*/React.createElement("div", {
        ref: c => {
          this.contentWrapper = c;
        }
      }, this.renderNotification())));
    }
    return this.renderNotification();
  }
}
Notification.propTypes = {
  variant: PropTypes$1.oneOf(["instructional", "branded", "success", "error", "warning"]),
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    feedback: PropTypes$1.string.isRequired,
    close: PropTypes$1.string.isRequired
  })]).isRequired,
  dismissible: PropTypes$1.bool,
  onDismiss: PropTypes$1.func,
  onExit: PropTypes$1.func,
  children: PropTypes$1.node.isRequired
};
Notification.defaultProps = {
  variant: "instructional",
  dismissible: false,
  onDismiss: undefined,
  onExit: undefined
};

const StyledOrderedItem = styled.li(({
  size
}) => ({
  marginLeft: "-1rem",
  paddingLeft: "1rem",
  ...(size === "small" && {
    ...small,
    letterSpacing: "inherit"
  }),
  ...(size === "medium" && {
    ...medium,
    ...mediumFont
  }),
  ...(size === "large" && {
    ...large,
    ...largeFont,
    letterSpacing: "inherit"
  })
}));
const StyledOrderedItemText = styled.span(({
  size
}) => ({
  ...(size === "small" && {
    ...small,
    ...smallFont
  }),
  ...(size === "medium" && {
    ...medium,
    ...mediumFont
  }),
  ...(size === "large" && {
    ...large,
    ...largeFont
  })
}));
const OrderedItem = ({
  children,
  size,
  ...rest
}) => /*#__PURE__*/React.createElement(StyledOrderedItem, _extends$2({
  size: size
}, safeRest(rest)), /*#__PURE__*/React.createElement(StyledOrderedItemText, {
  size: size
}, children));
OrderedItem.propTypes = {
  children: PropTypes$1.node.isRequired,
  size: PropTypes$1.oneOf(["small", "medium", "large"])
};
OrderedItem.defaultProps = {
  size: "medium"
};
OrderedItem.displayName = "OrderedList.Item";

const listStyleType = {
  upperAlpha: "upper-alpha",
  lowerAlpha: "lower-alpha",
  decimal: "decimal"
};
const StyledOrderedList = styled(({
  size,
  listStyle,
  ...rest
}) => /*#__PURE__*/React.createElement(Box, rest))(({
  listStyle
}) => ({
  paddingLeft: "3rem",
  listStyleType: listStyleType[listStyle],
  ...base$2
}));
const OrderedList = ({
  listStyle,
  size,
  children,
  ...rest
}) => /*#__PURE__*/React.createElement(StyledOrderedList, _extends$2({}, safeRest(rest), {
  tag: "ol",
  between: 2,
  listStyle: listStyle
}), React.Children.toArray(children).filter(child => child).map(child => /*#__PURE__*/React.cloneElement(child, {
  size
})));
OrderedList.propTypes = {
  listStyle: PropTypes$1.oneOf(["decimal", "upperAlpha", "lowerAlpha"]),
  size: PropTypes$1.oneOf(["small", "medium", "large"]),
  children: componentWithName$1("OrderedItem").isRequired
};
OrderedList.defaultProps = {
  listStyle: "decimal",
  size: "medium"
};
OrderedList.Item = OrderedItem;

const StyledImage = styled.img({
  height: "auto",
  maxWidth: "100%"
});
const StyledRoundedImage = styled(StyledImage)(rounded);
const StyledCircularImage = styled(StyledImage)(circular);
const Image = ({
  src,
  width,
  height,
  alt,
  rounded,
  ...rest
}) => {
  const isCircle = rounded === "circle";
  const isCorners = rounded === "corners";
  const isSquare = width === height;
  if (isCircle && !isSquare) {
    warn("Image", "rounded=circle is not supported for non-square images. Please provide a square image, otherwise the resulting shape will not be a circle.");
  }
  let ImageComponent;
  if (isCircle) {
    ImageComponent = StyledCircularImage;
  } else if (isCorners) {
    ImageComponent = StyledRoundedImage;
  } else {
    ImageComponent = StyledImage;
  }
  return /*#__PURE__*/React.createElement(ImageComponent, _extends$2({}, safeRest(rest), {
    src: src,
    width: width,
    height: height,
    alt: alt
  }));
};
Image.propTypes = {
  /**
   * The src attribute for the HTML img element.
   */
  src: PropTypes$1.string.isRequired,
  /**
   * The alt attribute for the HTML img element. Setting this attribute to an empty string (alt="") indicates that this image is not a key part of the content, and that non-visual browsers may omit it from rendering.
   */
  alt: PropTypes$1.string.isRequired,
  /**
   * The image's width.
   */
  width: PropTypes$1.number.isRequired,
  /**
   * The image's height.
   */
  height: PropTypes$1.number,
  /**
   * Make image render as a circle or with rounded corners.
   */
  rounded: PropTypes$1.oneOf(["circle", "corners"])
};
Image.defaultProps = {
  rounded: undefined,
  height: undefined
};

const getVariant = ({
  variant
}) => {
  if (["white", "default", "defaultWithBorder", "defaultOnlyBorder"].indexOf(variant) >= 0) {
    return {
      boxShadow: variant === "defaultOnlyBorder" ? undefined : "0 0 16px 0 rgba(0, 0, 0, 0.1)",
      backgroundColor: colorWhite,
      border: variant === "defaultWithBorder" || variant === "defaultOnlyBorder" ? `1px solid ${colorGreyGainsboro}` : undefined
    };
  }
  if (variant === "lavender" || variant === "branded") {
    return {
      backgroundColor: colorWhiteLilac
    };
  }
  return {
    backgroundColor: colorGreyAthens
  };
};
const deprecationWarning = deprecatedVariant => {
  const variants = {
    white: "default",
    lavendar: "branded",
    grey: "alternative"
  };
  return `The ${deprecatedVariant} variant has been deprecated. Please use the '${variants[deprecatedVariant]}' variant.`;
};
const StyledCard = styled(({
  fullHeight,
  ...props
}) => /*#__PURE__*/React.createElement(Box, props))(none, rounded, getVariant, ({
  fullHeight
}) => {
  if (fullHeight) {
    return {
      height: "100%"
    };
  }
  return {};
});
const fullBleedImageStyles = fullBleedImage => fullBleedImage && fullBleedImage.position && handleResponsiveStyles({
  position: fullBleedImage.position
}, ({
  position
}) => {
  if (!fullBleedImage) return {};
  const direction = {
    left: "row",
    right: "row-reverse",
    top: "column",
    bottom: "column-reverse",
    none: "row"
  };
  const styles = {
    display: "flex",
    flexDirection: direction[position],
    justifyContent: "space-between",
    "> img": {
      display: position === "none" ? "none" : "block",
      margin: "auto"
    }
  };
  return styles;
});
const StyledImageCard = styled(({
  fullBleedImage,
  ...props
}) => /*#__PURE__*/React.createElement("div", props))(({
  fullBleedImage
}) => fullBleedImageStyles(fullBleedImage));
const Card = ({
  variant,
  children,
  fullHeight,
  spacing,
  fullBleedImage,
  ...rest
}) => {
  if (variant === "white" || variant === "lavendar" || variant === "grey") {
    deprecate("core-card", deprecationWarning(variant));
  }
  const spacingProps = {};
  if (spacing === "default") {
    spacingProps.vertical = 5;
    spacingProps.horizontal = 4;
  } else if (spacing === "narrow") {
    spacingProps.vertical = 4;
    spacingProps.horizontal = 3;
  } else if (spacing === "compact") {
    spacingProps.inset = 3;
  } else if (spacing === "intermediate") {
    spacingProps.inset = 4;
  }
  if (fullBleedImage) {
    return /*#__PURE__*/React.createElement(StyledCard, _extends$2({}, safeRest(rest), {
      fullHeight: fullHeight,
      variant: variant
    }), /*#__PURE__*/React.createElement(StyledImageCard, {
      fullBleedImage: fullBleedImage
    }, /*#__PURE__*/React.createElement(Image, {
      src: fullBleedImage.src,
      width: fullBleedImage.width,
      height: fullBleedImage.height,
      alt: fullBleedImage.alt
    }), /*#__PURE__*/React.createElement(Box, spacingProps, children)));
  }
  return /*#__PURE__*/React.createElement(StyledCard, _extends$2({}, safeRest(rest), {
    fullHeight: fullHeight,
    variant: variant
  }, spacingProps), children);
};
Card.propTypes = {
  variant: PropTypes$1.oneOf(["white", "lavender", "grey", "default", "branded", "alternative", "defaultWithBorder", "defaultOnlyBorder"]),
  children: PropTypes$1.node.isRequired,
  fullHeight: PropTypes$1.bool,
  spacing: PropTypes$1.oneOf(["default", "narrow", "compact", "intermediate"]),
  fullBleedImage: PropTypes$1.shape({
    src: PropTypes$1.string.isRequired,
    width: PropTypes$1.number.isRequired,
    height: PropTypes$1.number.isRequired,
    alt: PropTypes$1.string.isRequired,
    position: responsiveProps(PropTypes$1.oneOf(["left", "right", "top", "bottom", "none"])).isRequired
  })
};
Card.defaultProps = {
  variant: "default",
  fullHeight: false,
  spacing: "default",
  fullBleedImage: undefined
};

const Requirement = ({
  value,
  requirement
}) => {
  const [isValid, setIsValid] = reactExports.useState();
  reactExports.useEffect(() => {
    setIsValid(requirement.validator(value));
  }, [value, requirement]);
  return /*#__PURE__*/React.createElement(Box, {
    inline: true,
    between: 2
  }, isValid ? /*#__PURE__*/React.createElement(Checkmark, null) : /*#__PURE__*/React.createElement(Times, null), /*#__PURE__*/React.createElement(Text, null, requirement.text));
};
Requirement.propTypes = {
  value: PropTypes$1.string,
  requirement: PropTypes$1.shape({
    validator: PropTypes$1.func,
    text: PropTypes$1.string
  })
};

const Requirements = ({
  value,
  requirements,
  onValidChange
}) => {
  const validChangeCb = reactExports.useCallback(onValidChange, []);
  reactExports.useEffect(() => {
    validChangeCb(requirements?.every(r => r.validator(value)));
  }, [value, requirements, validChangeCb]);
  return /*#__PURE__*/React.createElement(InputFeedback, null, requirements?.map((r, index) => /*#__PURE__*/React.createElement(Requirement, {
    key: index,
    value: value,
    requirement: r,
    onValidChange: onValidChange
  })));
};
Requirements.propTypes = {
  value: PropTypes$1.string,
  requirements: PropTypes$1.arrayOf(PropTypes$1.shape({
    validator: PropTypes$1.func,
    text: PropTypes$1.string
  })),
  onValidChange: PropTypes$1.func
};

const copyDictionary$5 = {
  en: {
    heading: "Ready to take the next step?",
    onSuccessHeading: "We have identified an account that corresponds with your username.",
    subtext: "Create an account or sign in.",
    paragraph: "By creating an account or logging in, you understand and agree to our Terms. You also acknowledge our Cookie and Privacy policies. You will receive marketing messages from Indeed and may opt out at any time by following the unsubscribe link in our messages, or as detailed in our terms.",
    username: "Username",
    password: "Password",
    email: "Email",
    confirmPassword: "Confirm password",
    secureCode: "Security code",
    continueCTA: "Create an account",
    signUpCTA: "Sign up",
    signInCTA: "Sign in to your account",
    securityCodeCTA: "Continue",
    createTicket: "Having issues submit a ticket",
    emptyField: "This field can not be empty.",
    submitSecureCodeCTATxt: "Submit code",
    error500: "Internal Server Error: We're working to fix it. Please try again later.",
    pwdForgotTxt: "Forgot password ?",
    usernameForgotTxt: "Username forgot ?",
    employeeId: "Employee ID",
    companyOREmployeeIDNotFoundTxt: "Account does not exists ! Contact us."
  },
  fr: {
    heading: "Prêt à passer à l'étape suivante ?",
    onSuccessHeading: "Nous avons identifié un compte correspondant à votre nom d'utilisateur.",
    subtext: "Créez un compte ou connectez-vous.",
    paragraph: "En créant un compte ou en vous connectant, vous comprenez et acceptez nos Conditions. Vous reconnaissez également nos politiques en matière de Cookies et de Confidentialité. Vous recevrez des messages marketing de Indeed et pourrez vous désabonner à tout moment en suivant le lien de désinscription dans nos messages ou en consultant nos conditions détaillées.",
    username: "Nom d'utilisateur",
    password: "Mot de passe",
    email: "Adresse e-mail",
    confirmPassword: "Confirmez le mot de passe",
    secureCode: "Code de sécurité",
    continueCTA: "Créer un compte",
    signUpCTA: "S'inscrire",
    signInCTA: "Se connecter à votre compte",
    securityCodeCTA: "Continuer",
    createTicket: "Rencontrez-vous des problèmes? Soumettez une requete",
    emptyField: "Veuillez remplir ce champ.",
    submitSecureCodeCTATxt: "Soumettre",
    error500: "Erreur interne du serveur : Nous travaillons à sa résolution. Veuillez réessayer ultérieurement.",
    pwdForgotTxt: "Mot de passe oublié ?",
    usernameForgotTxt: "Nom d'utilisateur oublié ?",
    employeeId: "Numero d'employer",
    companyOREmployeeIDNotFoundTxt: "Le compte n'existe pas ! Contactez-nous."
  }
};

const keyframes = require("styled-components").keyframes;
const zindexPopover = 1600;
const spinnerRotate = keyframes`
  100% {
    transform: rotate(360deg);
  }
`;
const spinnerDash = keyframes`
  0% {
      stroke-dasharray: 1, 200;
      stroke-dashoffset: 0;
    }

    50% {
      stroke-dasharray: 89, 200;
      stroke-dashoffset: -35;
    }

    100% {
      stroke-dasharray: 89, 200;
      stroke-dashoffset: -124;
    }
`;
const SvgContainer = styled.div(({
  overlay
}) => ({
  display: "inline-flex",
  flexDirection: "column",
  alignItems: "center",
  ...(overlay && {
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    zIndex: zindexPopover
  })
}));
const StyledSvg = styled.svg`
  animation: ${spinnerRotate} 1.8s linear infinite;
  ${({
  size
}) => size === "small" && "height: 3.125rem; width: 3.125rem;"}
  ${({
  size
}) => size === "large" && "height: 6.25rem; width: 6.25rem;"}
`;
const SvgCircle = styled.circle`
  animation: ${spinnerDash} 1.7s ease-in-out infinite 0s;
  ${({
  variant
}) => variant === "primary" && `stroke: ${colorAccessibleGreen}`}
  ${({
  variant
}) => variant === "secondary" && `stroke: ${colorSecondary}`}
`;
const TipContainer = styled.div({
  marginTop: "-1.5rem"
});
const SpinnerSvg = ({
  tip,
  overlay,
  a11yLabel,
  size,
  variant,
  labelRef,
  ...rest
}) => {
  const titleId = uniqueId("spinner-title-");
  return /*#__PURE__*/React.createElement(SvgContainer, {
    overlay: overlay,
    "data-testid": "spinner"
  }, /*#__PURE__*/React.createElement(StyledSvg, _extends$2({}, safeRest(rest), {
    viewBox: "0 0 100 100",
    width: size === "large" ? "100" : "50",
    height: size === "large" ? "100" : "50",
    role: "alert",
    "aria-labelledby": titleId,
    "aria-live": "assertive",
    "data-testid": "svg"
  }), /*#__PURE__*/React.createElement("title", {
    id: titleId
  }, a11yLabel), /*#__PURE__*/React.createElement(SvgCircle, {
    variant: size === "small" ? variant : "primary",
    strokeWidth: "4",
    fill: "none",
    strokeLinecap: "round",
    strokeDasharray: "89, 200",
    strokeDashoffset: "0",
    cx: "50",
    cy: "50",
    r: "20"
  })), tip && /*#__PURE__*/React.createElement(TipContainer, {
    tabIndex: "-1",
    ref: labelRef
  }, /*#__PURE__*/React.createElement(Text, {
    size: "small"
  }, tip)));
};
SpinnerSvg.propTypes = {
  tip: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.node]),
  overlay: PropTypes$1.bool,
  a11yLabel: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.node]).isRequired,
  size: PropTypes$1.oneOf(["large", "small"]).isRequired,
  variant: PropTypes$1.oneOf(["primary", "secondary"]).isRequired,
  labelRef: PropTypes$1.object
};
SpinnerSvg.defaultProps = {
  tip: undefined,
  overlay: false,
  labelRef: undefined
};

const zindexModalBackdrop = 1400;
const SpinnerContainer = styled.div(({
  inline,
  fullScreen
}) => ({
  ...relative,
  ...(inline && {
    display: "block",
    ...media.from("md").css({
      display: "inline-block"
    })
  }),
  ...(fullScreen && centerVertically)
}));
const ContentOverlay = styled.div({
  position: "absolute",
  width: "100%",
  height: "100%",
  zIndex: zindexModalBackdrop
});
const FullscreenOverlay = styled.div({
  position: "fixed",
  width: "100vw",
  height: "100vh",
  top: 0,
  left: 0,
  zIndex: zindexModalBackdrop,
  backgroundColor: "rgba(255, 255, 255, 0.96)"
});
const OpaqueContainer = styled.div({
  opacity: 0.06
});
const recursiveMap = (children, fn) => React.Children.map(children, child => {
  if (! /*#__PURE__*/React.isValidElement(child)) {
    return child;
  }
  if (child.props.children) {
    return fn( /*#__PURE__*/React.cloneElement(child, {
      children: recursiveMap(child.props.children, fn)
    }));
  }
  return fn(child);
});
class Spinner extends React.PureComponent {
  constructor() {
    super();
    this.spinnerOverlayRef = null;
  }
  componentDidUpdate() {
    if (this.props.fullScreen && this.props.spinning) {
      document.body.addEventListener("touchmove", this.preventScroll, {
        passive: false
      });
      document.body.addEventListener("touchstart", this.preventScroll, {
        passive: false
      });
      document.body.style.overflow = "hidden";
    } else {
      document.body.removeEventListener("touchmove", this.preventScroll);
      document.body.removeEventListener("touchstart", this.preventScroll);
      document.body.style.overflow = "auto";
    }
  }
  preventScroll = e => {
    if (this.spinnerOverlayRef.current.contains(e.targetTouches[0].target)) {
      e.preventDefault();
    }
  };
  render() {
    const {
      spinning,
      label,
      dangerouslyHideVisibleLabel,
      tip,
      a11yLabel,
      inline,
      size,
      variant,
      fullScreen,
      labelRef,
      children,
      ...rest
    } = this.props;
    if (tip) {
      deprecate("core-spinner", "The `tip` prop is deprecated. Please use the `label` prop.");
    }
    if (a11yLabel && label === undefined) {
      deprecate("core-spinner", "The `a11yLabel` prop is deprecated. Please use the `label` prop.");
    }
    if (size === "large" && variant === "secondary") {
      warn("core-spinner", "The Spinner should not use the `secondary` variant while `size` is set to `large`.");
    }
    if (!spinning) {
      return children || null;
    }
    const spinnerSvg = props => {
      return /*#__PURE__*/React.createElement(SpinnerSvg, _extends$2({}, props, safeRest(rest), {
        tip: dangerouslyHideVisibleLabel || size === "small" ? undefined : label || tip,
        a11yLabel: label || a11yLabel,
        size: size,
        variant: variant,
        labelRef: labelRef
      }));
    };
    if (fullScreen) {
      return /*#__PURE__*/React.createElement(FullscreenOverlay, {
        ref: el => {
          this.spinnerOverlayRef = el;
        },
        "data-testid": "overlay"
      }, /*#__PURE__*/React.createElement(SpinnerContainer, {
        inline: inline,
        fullScreen: fullScreen,
        "data-testid": "container",
        "aria-live": "assertive"
      }, spinnerSvg({
        overlay: true
      })));
    }
    if (children) {
      return /*#__PURE__*/React.createElement(SpinnerContainer, {
        inline: inline,
        fullScreen: fullScreen,
        "data-testid": "container",
        "aria-live": "assertive"
      }, spinnerSvg({
        overlay: true
      }), /*#__PURE__*/React.createElement(ContentOverlay, {
        "data-testid": "overlay"
      }), /*#__PURE__*/React.createElement(OpaqueContainer, {
        inert: "true"
      }, recursiveMap(children, c => {
        if (c) {
          return /*#__PURE__*/React.cloneElement(c, {
            tabIndex: "-1",
            "aria-hidden": "true"
          });
        }
        return undefined;
      })));
    }
    return spinnerSvg();
  }
}
Spinner.propTypes = {
  spinning: PropTypes$1.bool,
  label: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.node]),
  dangerouslyHideVisibleLabel: PropTypes$1.bool,
  tip: PropTypes$1.string,
  a11yLabel: PropTypes$1.string,
  inline: PropTypes$1.bool,
  size: PropTypes$1.oneOf(["large", "small"]),
  variant: PropTypes$1.oneOf(["primary", "secondary"]),
  fullScreen: PropTypes$1.bool,
  children: PropTypes$1.node,
  labelRef: PropTypes$1.object
};
Spinner.defaultProps = {
  spinning: false,
  label: undefined,
  dangerouslyHideVisibleLabel: false,
  tip: undefined,
  a11yLabel: "A spinner is active. Please wait while the page completes a task.",
  inline: false,
  size: "large",
  variant: "primary",
  fullScreen: false,
  children: undefined,
  labelRef: undefined
};

const Login = ({
  variantType,
  cardVariant,
  checkUsernameOrEmailExists,
  sendLoginData,
  send2FALoginData,
  sendSignUPData,
  copy,
  policies,
  fullHeight,
  spacing,
  ...rest
}) => {
  const [username, setUsername] = reactExports.useState("");
  const [userExists, setUserExists] = reactExports.useState(false);
  const [usernameIsCkecked, setUsernameIsChecked] = reactExports.useState(false);
  const [error, setError] = reactExports.useState(undefined);
  const [status, setStatus] = reactExports.useState(undefined);
  const [password, setPassword] = reactExports.useState("");
  const [statusPwd, setStatusPwd] = reactExports.useState(undefined);
  const [errorPwd, setErrorPwd] = reactExports.useState(undefined);
  const [confirmPassword, setConfirmPassword] = reactExports.useState("");
  const [statusConfirmPwd, setStatusConfirmPwd] = reactExports.useState(undefined);
  const [isValid, setValid] = reactExports.useState(false);
  const [secureCode, setSecureCode] = reactExports.useState("");
  const [statusSecureCode, setStatusSecureCode] = reactExports.useState(undefined);
  const [errorSecureCode, setErrorSecureCode] = reactExports.useState(undefined);
  const [email, setEmail] = reactExports.useState("");
  const [statusEmail, setStatusEmail] = reactExports.useState(undefined);
  const [errorEmail, setErrorEmail] = reactExports.useState(undefined);
  const [has2FALoading, setHas2FALoading] = reactExports.useState(false);
  const [has2FA, setHas2FA] = reactExports.useState(false);
  const [userNotExistAndContinueToRegister, setNextStep] = reactExports.useState(false);
  const [isLoginComplete, setIsLoginComplete] = reactExports.useState(false);
  const [errorMessage, setErrorMessage] = reactExports.useState(null);
  const [successMessage, setSuccessMessage] = reactExports.useState(null);
  const content = getCopy(copyDictionary$5, copy);
  const contentPolicies = getCopy(policies, copy);
  const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
  const passwordRequirements = [{
    text: "Must be at least 8 characters",
    validator: val => val.length >= 8
  }, {
    text: "Must contain at least one number",
    validator: val => /\d/g.test(val)
  }, {
    text: "Must contain at least one lower-case letter",
    validator: val => /[a-z]/g.test(val)
  }, {
    text: "Must contain at least one upper-case letter",
    validator: val => /[A-Z]/g.test(val)
  }, {
    text: "Must contain at least one special character (@$%!#)",
    validator: val => /[@$%!#]/g.test(val)
  }];
  const onDataFilling = e => {
    let text = e?.target?.name;
    switch (text) {
      case "username":
        setUsername(e.target.value);
        if (username.length > 3) {
          setError(undefined);
          setStatus(undefined);
        }
        break;
      case "password":
        setPassword(e.target.value);
        if (password?.length > 0 && password.length < 8) {
          setValid(false);
          setErrorPwd(undefined);
        } else if (isValid) {
          setErrorPwd(undefined);
          setStatusPwd(undefined);
        }
        break;
      case "confirmPassword":
        setConfirmPassword(e.target.value);
        break;
      case "email":
        setEmail(e.target.value);
        if (emailPattern.test(email)) {
          setStatusEmail(undefined);
          setErrorEmail(undefined);
        }
        break;
      case "secureCode":
        setSecureCode(e.target.value);
        break;
    }
  };
  const validate = event => {
    const value = event.target.value;
    let text = event?.target?.name;
    switch (text) {
      case "username":
        if (value.length <= 3) {
          setError(content?.emptyField);
          setStatus("error");
          setUserExists(false);
        } else {
          setError(undefined);
          setStatus(undefined);
          const response = checkUsernameOrEmailExists(username);
          if (response?.success || response?.error) {
            setUsernameIsChecked(true);
          }
          if (response?.success) {
            setUserExists(true);
            setStatus("success");
          }
          if (variantType != "regular" && response?.error) {
            setSuccessMessage(null);
            setErrorMessage({
              ...response?.error,
              message: content?.companyOREmployeeIDNotFoundTxt
            });
          } else {
            setErrorMessage(null);
          }
        }
        break;
      case "email":
        if (!emailPattern.test(email)) {
          setStatusEmail("error");
          setErrorEmail("Incorect email formatting !");
        } else {
          setStatusEmail(undefined);
          setErrorEmail(undefined);
        }
        break;
      case "password":
        if (!value.length) {
          setErrorPwd(content?.emptyField);
          setStatusPwd("error");
        } else {
          setErrorPwd(undefined);
          setStatusPwd(undefined);
        }
        break;
      case "confirmPassword":
        if (confirmPassword != password) {
          setStatusConfirmPwd("error");
        } else {
          setStatusConfirmPwd("success");
        }
        break;
    }
  };
  const continueCTA = e => {
    e.preventDefault();
    setSuccessMessage(null);
    setErrorMessage(null);
    setNextStep(true);
  };
  const signUpCTA = e => {
    e.preventDefault();
    setSuccessMessage(null);
    setErrorMessage(null);
    if (statusConfirmPwd == "success" && isValid && !errorEmail && !userExists) {
      const response = sendSignUPData({
        username,
        email,
        password
      });
      if (response?.success) {
        setIsLoginComplete(true);
        console.log("We are here", response);
        setSuccessMessage(response?.success);
      }
      if (response?.error) {
        setErrorMessage(response?.error);
      }
    }
  };
  const signInCTA = e => {
    e.preventDefault();
    setSuccessMessage(null);
    setErrorMessage(null);
    if (password.length < 1) {
      setErrorPwd(content?.emptyField);
      setStatusPwd("error");
    } else if (username.length && password.length) {
      setHas2FALoading(true);
      const response = sendLoginData({
        username,
        password
      });
      if (response?.success) {
        setHas2FALoading(false);
        setSuccessMessage(response?.success);
        setStatus(undefined);
        if (response?.data?.has2FA) {
          setHas2FA(true);
        } else {
          setIsLoginComplete(true);
        }
      }
      if (response?.error) {
        setHas2FALoading(false);
        setErrorMessage(response?.error);
        setStatusPwd("error");
        setPassword("");
        setStatus(undefined);
      }
    }
  };
  const renderGeneralError = () => {
    if (successMessage?.status >= 200 && successMessage?.status <= 299) {
      return /*#__PURE__*/React.createElement(Notification, {
        variant: "success",
        copy: copy,
        "data-testid": "notification-success"
      }, /*#__PURE__*/React.createElement(Text, {
        small: true
      }, " ", successMessage?.message));
    } else if (errorMessage?.status >= 400 && errorMessage?.status <= 499) {
      return /*#__PURE__*/React.createElement(Notification, {
        variant: "error",
        copy: copy,
        "data-testid": "notification-error"
      }, /*#__PURE__*/React.createElement(Text, {
        small: true
      }, " ", errorMessage?.message));
    } else {
      return /*#__PURE__*/React.createElement(Notification, {
        variant: "warning",
        copy: copy,
        "data-testid": "notification-warning"
      }, /*#__PURE__*/React.createElement(Text, {
        small: true
      }, " ", content?.error500));
    }
  };
  const submitSecureCodeCTA = e => {
    e.preventDefault();
    setSuccessMessage(null);
    setErrorMessage(null);
    if (secureCode.length < 6 && secureCode > 6) {
      setErrorSecureCode("Code invalid");
      setStatusSecureCode("error");
    } else {
      const response = send2FALoginData({
        username,
        password,
        secureCode
      });
      if (response?.success) {
        setErrorSecureCode(undefined);
        setStatusSecureCode("success");
        setSuccessMessage(response?.success);
        setIsLoginComplete(true);
      } else if (response?.error) {
        setErrorSecureCode(undefined);
        setStatusSecureCode("error");
        setErrorMessage(response?.error);
      }
    }
  };
  return /*#__PURE__*/React.createElement(FlexGrid, null, /*#__PURE__*/React.createElement(FlexGrid.Row, null, /*#__PURE__*/React.createElement(FlexGrid.Col, {
    xs: 12,
    md: 8
  }, /*#__PURE__*/React.createElement(Card, _extends$2({
    variant: cardVariant
  }, safeRest(rest), {
    fullHeight: fullHeight
  }), /*#__PURE__*/React.createElement(Box, {
    between: 3
  }, (errorMessage || successMessage) && isLoginComplete && userNotExistAndContinueToRegister ? renderGeneralError() : null, !has2FA && variantType == "regular" && !userNotExistAndContinueToRegister ? !userExists ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Heading, {
    level: "h3"
  }, content?.heading), /*#__PURE__*/React.createElement(Text, {
    size: "medium"
  }, content?.subtext)) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Heading, {
    level: "h3"
  }, content?.onSuccessHeading)) : null, !userNotExistAndContinueToRegister && /*#__PURE__*/React.createElement(React.Fragment, null, variantType == "regular" && !has2FA ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Paragraph, null, content?.paragraph), /*#__PURE__*/React.createElement(Box, {
    inline: true,
    between: 4
  }, contentPolicies?.map((policy, index) => /*#__PURE__*/React.createElement(Paragraph, {
    size: "small",
    key: index
  }, /*#__PURE__*/React.createElement(Link$1, {
    href: policy?.linkTo
  }, policy?.text)))), /*#__PURE__*/React.createElement(HairlineDivider, null)) : null, errorMessage || successMessage ? renderGeneralError() : null, !isLoginComplete ? !has2FA ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, {
    type: "text",
    hintPosition: "below",
    label: variantType != "regular" ? content?.employeeId : content?.username,
    name: "username",
    autocomplete: true,
    onChange: onDataFilling,
    onBlur: validate,
    value: username,
    feedback: status,
    error: error,
    "data-testid": "username"
  }), userExists && /*#__PURE__*/React.createElement(Input, {
    type: "password",
    hintPosition: "below",
    label: content?.password,
    name: "password",
    autocomplete: false,
    onChange: onDataFilling,
    onBlur: validate,
    value: password,
    feedback: statusPwd,
    error: errorPwd,
    "data-testid": "pwd"
  })) : /*#__PURE__*/React.createElement(Input, {
    type: "number",
    hintPosition: "below",
    label: content?.secureCode,
    name: "secureCode",
    autocomplete: true,
    onChange: onDataFilling,
    onBlur: validate,
    value: secureCode,
    feedback: statusSecureCode,
    error: errorSecureCode,
    "data-testid": "secure-code-input"
  }) : null), !isLoginComplete && !userExists && userNotExistAndContinueToRegister && variantType == "regular" ? /*#__PURE__*/React.createElement(React.Fragment, null, errorMessage || successMessage ? renderGeneralError() : null, /*#__PURE__*/React.createElement(Input, {
    type: "email",
    hintPosition: "below",
    label: content?.email,
    name: "email",
    onChange: onDataFilling,
    onBlur: validate,
    value: email,
    feedback: statusEmail,
    error: errorEmail,
    "data-testid": "email-input"
  }), !userExists && usernameIsCkecked && password?.length && !isValid ? /*#__PURE__*/React.createElement(Requirements, {
    value: password,
    requirements: passwordRequirements,
    onValidChange: isValid => setValid(isValid)
  }) : null, /*#__PURE__*/React.createElement(Input, {
    type: "password",
    hintPosition: "below",
    label: content?.password,
    name: "password",
    onChange: onDataFilling,
    onBlur: validate,
    value: password,
    feedback: statusPwd,
    error: errorPwd,
    "data-testid": "password-input"
  }), /*#__PURE__*/React.createElement(Input, {
    type: "password",
    hintPosition: "below",
    label: content?.confirmPassword,
    name: "confirmPassword",
    onChange: onDataFilling,
    onBlur: validate,
    value: confirmPassword,
    feedback: statusConfirmPwd,
    autocomplete: "off",
    "data-testid": "confirm-pwd-input"
  })) : null, !isLoginComplete ? /*#__PURE__*/React.createElement(React.Fragment, null, !userExists && usernameIsCkecked && !userNotExistAndContinueToRegister && variantType == "regular" ? /*#__PURE__*/React.createElement(Button$1, {
    onClick: continueCTA,
    variant: "primary",
    "data-testid": "create-account-button"
  }, content?.continueCTA) : !userExists && usernameIsCkecked && userNotExistAndContinueToRegister ? /*#__PURE__*/React.createElement(Button$1, {
    onClick: signUpCTA,
    variant: "primary",
    "data-testid": "sign-up-button"
  }, content?.signUpCTA) : !userNotExistAndContinueToRegister && userExists && usernameIsCkecked & !has2FA ? /*#__PURE__*/React.createElement(Spinner, {
    label: "Loading user",
    size: "small",
    spinning: has2FALoading,
    inline: true
  }, /*#__PURE__*/React.createElement(Button$1, {
    onClick: signInCTA,
    variant: "primary",
    "data-testid": "sign-in-button"
  }, content?.signInCTA)) : !userNotExistAndContinueToRegister && userExists && usernameIsCkecked & has2FA ? /*#__PURE__*/React.createElement(Spinner, {
    label: "Loading user",
    size: "small",
    spinning: has2FALoading,
    inline: true
  }, /*#__PURE__*/React.createElement(Button$1, {
    onClick: submitSecureCodeCTA,
    variant: "primary",
    "data-testid": "sign-in-with-code-button"
  }, content?.submitSecureCodeCTATxt)) : null) : null, /*#__PURE__*/React.createElement(Box, {
    between: 1,
    vertical: 3
  }, !isLoginComplete ? variantType != "inHouse" && /*#__PURE__*/React.createElement(React.Fragment, null, userExists && !has2FA && /*#__PURE__*/React.createElement("div", {
    "data-testid": "link-pwd-forgot"
  }, /*#__PURE__*/React.createElement(ChevronLink, {
    href: "#"
  }, content?.pwdForgotTxt)), !userExists && !usernameIsCkecked && !userNotExistAndContinueToRegister && /*#__PURE__*/React.createElement("div", {
    "data-testid": "link-username-forgot"
  }, /*#__PURE__*/React.createElement(ChevronLink, {
    href: "#"
  }, content?.usernameForgotTxt))) : null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(ChevronLink, {
    href: "#"
  }, content?.createTicket))))))));
};
Login.propTypes = {
  variantType: PropTypes$1.oneOf(["regular", "inHouse", "Company"]).isRequired,
  cardVariant: PropTypes$1.oneOf(["white", "lavender", "grey", "default", "branded", "alternative", "defaultWithBorder", "defaultOnlyBorder"]),
  checkUsernameOrEmailExists: PropTypes$1.func,
  sendLoginData: PropTypes$1.func,
  send2FALoginData: PropTypes$1.func,
  sendSignUPData: PropTypes$1.func,
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    heading: PropTypes$1.string,
    onSuccessHeading: PropTypes$1.string,
    subtext: PropTypes$1.string,
    paragraph: PropTypes$1.string,
    username: PropTypes$1.string,
    password: PropTypes$1.string,
    email: PropTypes$1.string,
    confirmPassword: PropTypes$1.string,
    continueCTA: PropTypes$1.string,
    signUpCTA: PropTypes$1.string,
    signInCTA: PropTypes$1.string,
    securityCodeCTA: PropTypes$1.string,
    createTicket: PropTypes$1.string
  })]).isRequired,
  policies: PropTypes$1.shape({
    en: PropTypes$1.arrayOf(PropTypes$1.shape({
      text: PropTypes$1.string,
      linkTo: PropTypes$1.string
    })),
    fr: PropTypes$1.arrayOf(PropTypes$1.shape({
      text: PropTypes$1.string,
      linkTo: PropTypes$1.string
    }))
  }),
  fullHeight: PropTypes$1.bool,
  spacing: PropTypes$1.oneOf(["default", "narrow", "compact", "intermediate"])
};
Login.defaultProps = {
  variantType: "regular",
  cardVariant: "defaultWithBorder",
  copy: "en",
  fullHeight: false,
  checkUsernameOrEmailExists: user => {
    const username = ["moderator", "admin"];
    if (username?.includes(user)) {
      return {
        error: null,
        data: true,
        success: {
          status: 200,
          message: "We have sent you a code to your email address! "
        }
      };
    }
    return {
      success: null,
      data: false,
      error: {
        status: 404,
        message: "User does not exist! Create an account. "
      }
    };
  },
  sendLoginData: userData => {
    const {
      username,
      password
    } = userData;
    const name = ["moderator", "admin"];
    const pwd = "password";
    if (name.includes(username) && username == "moderator" && password == pwd) {
      return {
        error: null,
        data: {
          has2FA: true
        },
        success: {
          status: 200,
          message: "We have sent you a security code to your email address."
        }
      };
    } else if (name.includes(username) && username == "admin" && password == pwd) {
      return {
        error: null,
        data: {
          has2FA: false
        },
        success: {
          status: 200,
          message: "For more security activate the 2FA "
        }
      };
    } else if (name.includes(username) && (username == "moderator" || username == "admin") && password != pwd) {
      return {
        data: false,
        error: {
          status: 401,
          message: "Login failed!"
        }
      };
    }
    return null;
  },
  send2FALoginData: userData => {
    const {
      username,
      secureCode
    } = userData;
    const name = ["moderator", "admin"];
    const secure = 123456;
    console.log("test .. ", {
      username,
      secureCode
    });
    if (name.includes(username) && username == "moderator" && secureCode == secure) {
      return {
        error: null,
        data: true,
        success: {
          status: 200,
          message: "Loading user params . . ."
        }
      };
    } else if (name.includes(username) && username == "moderator" && secureCode != secure) {
      return {
        success: null,
        data: false,
        error: {
          status: 401,
          message: "Code incorrect"
        }
      };
    }
  },
  sendSignUPData: userData => {
    const {
      username,
      email,
      password
    } = userData;
    const emails = [];
    if (emails.includes(email)) {
      return {
        success: null,
        data: null,
        error: {
          status: 401,
          message: "Email already exists !"
        }
      };
    }
    return {
      error: null,
      data: {
        username,
        email,
        password
      },
      success: {
        status: 200,
        message: "Thanks for registering! Please check your email for an activation link"
      }
    };
  },
  policies: {
    en: [{
      text: "Terms",
      linkTo: "#"
    }, {
      text: "Cookie",
      linkTo: "#"
    }, {
      text: "Privacy",
      linkTo: "#"
    }],
    fr: [{
      text: "Conditions",
      linkTo: "#"
    }, {
      text: " Cookies",
      linkTo: "#"
    }, {
      text: "Confidentialité",
      linkTo: "#"
    }]
  }
};

const baseButton = {
  boxSizing: "border-box",
  padding: "0.25rem 0rem",
  cursor: "pointer",
  background: colorWhite,
  transition: "all 0.2s ease-in-out",
  position: "relative",
  borderRadius: "0.1875rem",
  color: colorGreyShark,
  textDecoration: "underline",
  borderStyle: "none",
  "&:hover": {
    textDecoration: "none"
  },
  "&:active": {
    background: colorGreyGainsboro,
    boxShadow: `0 0 0 0.125rem ${colorGreyGainsboro}`,
    textDecoration: "underline"
  },
  "&:focus": {
    outline: "none !important",
    boxShadow: `0 0 0 0.125rem ${colorGreyRaven}`
  },
  "@media (prefers-reduced-motion: reduce)": {
    transition: "none !important"
  }
};
const StyledTextButton = styled.button(baseButton, medium);
const TextButton = ({
  children,
  ...rest
}) => /*#__PURE__*/React.createElement(StyledTextButton, safeRest(rest), children);
TextButton.propTypes = {
  children: or$1([PropTypes$1.string, componentWithName$1("A11yContent")]).isRequired
};

const FakeRadio = styled.span({
  height: "1.25rem",
  width: "1.25rem",
  minHeight: "1.25rem",
  minWidth: "1.25rem",
  outline: 0,
  lineHeight: 0,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  cursor: "pointer",
  marginTop: "0.125rem",
  transition: "border-color 0.1s linear, background-color 0.1s linear",
  borderRadius: "50%",
  ...thin,
  borderColor: colorGreyShuttle,
  backgroundColor: colorWhite,
  "& > i": {
    display: "none"
  }
});
const HiddenInput = styled.input({
  position: "absolute",
  width: "1.2rem",
  height: "1.2rem",
  margin: "2px 1px",
  opacity: "0",
  pointerEvents: "none"
});
const StyledLabel$2 = styled.label(({
  isError
}) => ({
  display: "flex",
  cursor: "pointer",
  ...(isError && {
    color: colorCardinal,
    [`${HiddenInput}:checked ~ &`]: {
      color: "initial"
    },
    [`div > ${FakeRadio}`]: {
      borderColor: colorCardinal
    }
  }),
  [`${HiddenInput}:focus ~ & > div > ${FakeRadio}`]: {
    boxShadow: `0 0 4px 1px ${colorGreyShuttle}`,
    borderColor: isError ? colorCardinal : colorWhite
  },
  [`${HiddenInput}:checked ~ & > div > ${FakeRadio}`]: {
    "& > span": {
      display: "block"
    },
    borderColor: colorGreyShuttle
  },
  [`${HiddenInput}:disabled ~ & > div > ${FakeRadio}`]: {
    borderColor: colorGreyGainsboro
  },
  [`${HiddenInput}:disabled ~ & > div > div`]: {
    color: colorGreyGainsboro
  }
}));
const InnerChecked = styled.span({
  width: "0.75rem",
  height: "0.75rem",
  borderRadius: "50%",
  backgroundColor: colorAccessibleGreen,
  display: "none"
});
const StyledLabelAndDescriptionBox = styled(Box)({
  width: "100%"
});
const renderError$2 = (error, errorId) => /*#__PURE__*/React.createElement(InputFeedback, {
  id: errorId,
  feedback: "error"
}, /*#__PURE__*/React.createElement(Paragraph, {
  size: "small"
}, error || ""));
const getGeneratedId = (name, value) => {
  return generateId(name).postfix(value);
};
const getErrorId = (name, value, id) => {
  return generateId(id || getGeneratedId(name, value)).postfix("error-message");
};
const Radio = /*#__PURE__*/React.forwardRef(({
  id,
  name,
  value,
  label,
  feedback,
  error,
  description,
  ...rest
}, ref) => /*#__PURE__*/React.createElement(Box, {
  between: 2
}, feedback === "error" && renderError$2(error, getErrorId(name, value, id)), /*#__PURE__*/React.createElement(HiddenInput, _extends$2({
  type: "radio",
  id: id || getGeneratedId(name, value),
  name: name,
  value: value,
  "aria-invalid": feedback === "error",
  "aria-describedby": feedback === "error" ? getErrorId(name, value, id) : undefined,
  "data-testid": "hidden-input",
  ref: ref
}, safeRest(rest))), /*#__PURE__*/React.createElement(StyledLabel$2, {
  isError: feedback === "error",
  htmlFor: id || getGeneratedId(name, value),
  "data-testid": "checkbox-label"
}, /*#__PURE__*/React.createElement(Box, {
  between: 3,
  inline: true
}, /*#__PURE__*/React.createElement(FakeRadio, {
  "data-testid": "fake-input"
}, /*#__PURE__*/React.createElement(InnerChecked, null)), /*#__PURE__*/React.createElement(StyledLabelAndDescriptionBox, {
  between: 2
}, /*#__PURE__*/React.createElement(ColoredTextProvider, null, /*#__PURE__*/React.createElement(Text, null, label)), description && /*#__PURE__*/React.createElement(Text, {
  size: "small"
}, description))))));
Radio.propTypes = {
  label: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.node]).isRequired,
  name: PropTypes$1.string.isRequired,
  value: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number, PropTypes$1.bool]).isRequired,
  checked: PropTypes$1.bool,
  id: PropTypes$1.string,
  description: PropTypes$1.string,
  feedback: PropTypes$1.oneOf(["error"]),
  error: PropTypes$1.string
};
Radio.defaultProps = {
  id: undefined,
  description: undefined,
  feedback: undefined,
  error: undefined,
  checked: undefined
};
Radio.displayName = "Radio";

const SelectWrapper = styled.div({
  backgroundColor: colorWhite,
  ...relative
});
const StyledSelect = styled.select({
  ...inputHeight,
  appearance: "none",
  "&::-ms-expand": {
    display: "none"
  },
  width: "100%",
  margin: 0,
  outline: 0,
  textOverflow: "ellipsis",
  borderColor: colorGreyShuttle,
  backgroundColor: colorWhite,
  "&::placeholder": {
    font: "inherit",
    letterSpacing: "inherit",
    lineHeight: "inherit",
    color: colorGreyShuttle
  }
}, ({
  showFeedbackIcon
}) => ({
  padding: `0.5rem ${showFeedbackIcon ? "4" : "3"}rem 0.5rem 1rem`
}), thin, rounded, font, medium, mediumFont, color, ({
  withFeedbackIcon
}) => ({
  "&::-webkit-inner-spin-button, &::-webkit-outer-spin-button": {
    appearance: "none",
    margin: 0
  },
  minHeight: inputHeight.height,
  maxHeight: inputHeight.height,
  padding: withFeedbackIcon ? "0.5rem 4rem 0.5rem 1rem" : "0.5rem 3rem 0.5rem 1rem"
}), {
  "&:focus": {
    borderColor: "transparent",
    boxShadow: `0 0 4px 1px ${colorGreyShuttle}`,
    backgroundColor: colorWhite
  }
}, ({
  feedback
}) => {
  let borderColor;
  if (feedback === "success") {
    borderColor = colorPrimary;
  } else if (feedback === "error") {
    borderColor = colorCardinal;
  }
  return {
    "&:not(:focus)": {
      borderColor
    }
  };
}, ({
  disabled
}) => {
  if (disabled) {
    return {
      backgroundColor: colorGreyAthens,
      borderColor: "transparent",
      "&:not(:focus)": {
        borderColor: "transparent"
      }
    };
  }
  return {};
});
const IconWrapper = styled(Box)({
  ...absolute,
  top: "50%",
  transform: "translateY(-50%)",
  right: "1rem",
  pointerEvents: "none",
  display: "flex",
  alignItems: "center",
  borderColor: "red"
});
const IconLineFix = styled.div({
  lineHeight: 1
});
const StyledLabelContainer$1 = styled(Box)({
  alignItems: "center"
});
const showFeedbackIcon$1 = feedback => feedback === "error" || feedback === "success";
const renderHint$1 = (hint, Component, id) => /*#__PURE__*/React.createElement(Component, {
  id: id,
  size: "small"
}, hint);
const renderError$1 = (error, errorId) => /*#__PURE__*/React.createElement(InputFeedback, {
  id: errorId,
  feedback: "error"
}, /*#__PURE__*/React.createElement(Paragraph, {
  size: "small"
}, error));
const renderLabel$1 = (id, label, hint, hintPosition, hintId, tooltip) => /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Box, {
  inline: true,
  between: 2
}, /*#__PURE__*/React.createElement("label", {
  htmlFor: id || generateId(label).identity()
}, /*#__PURE__*/React.createElement(StyledLabelContainer$1, {
  inline: true,
  tag: "span",
  between: 2
}, /*#__PURE__*/React.createElement(Text, {
  size: "medium",
  bold: true,
  "data-testid": "selectLabel"
}, label), hint && hintPosition === "inline" && renderHint$1(hint, Text, hintId))), tooltip && /*#__PURE__*/React.cloneElement(tooltip, {
  connectedFieldLabel: label
})), hint && hintPosition === "below" && renderHint$1(hint, Paragraph, hintId));
const renderHelper$1 = (helper, helperId, feedback, value) => {
  if (typeof helper === "function") {
    return /*#__PURE__*/React.createElement("div", {
      id: helperId
    }, /*#__PURE__*/React.createElement(Text, {
      size: "small"
    }, helper(feedback, value)));
  }
  return /*#__PURE__*/React.createElement(InputFeedback, {
    id: helperId,
    feedback: feedback
  }, /*#__PURE__*/React.createElement(Text, {
    size: "small"
  }, helper));
};
const renderOptions = opts => opts.map(({
  text,
  value: optValue,
  options
}) => {
  if (options) {
    return /*#__PURE__*/React.createElement("optgroup", {
      label: text,
      key: text
    }, renderOptions(options));
  }
  return /*#__PURE__*/React.createElement("option", {
    key: optValue,
    value: optValue
  }, text);
});
const Select = /*#__PURE__*/React.forwardRef(({
  id,
  options,
  placeholder,
  label,
  hint,
  hintPosition,
  value,
  defaultValue,
  feedback,
  error,
  helper,
  tooltip,
  ...rest
}, ref) => {
  const [isFocused, setIsFocused] = reactExports.useState(false);
  const fieldId = generateId(id, rest.name, label);
  const errorId = error && feedback === "error" && fieldId.postfix("error-message");
  const helperId = helper && fieldId.postfix("helper");
  const hintId = hint && fieldId.postfix("hint") || undefined;
  const handleFocus = e => {
    setIsFocused(true);
    if (rest.onFocus) {
      rest.onFocus(e);
    }
  };
  const handleBlur = e => {
    setIsFocused(false);
    if (rest.onBlur) {
      rest.onBlur(e);
    }
  };
  return /*#__PURE__*/React.createElement(Box, {
    between: 2
  }, renderLabel$1(fieldId.identity(), label, hint, hintPosition, hintId, tooltip), helper && renderHelper$1(helper, helperId, feedback, value), error && feedback === "error" && renderError$1(error, errorId), /*#__PURE__*/React.createElement("div", {
    style: {
      position: "relative"
    }
  }, /*#__PURE__*/React.createElement(SelectWrapper, null, /*#__PURE__*/React.createElement(StyledSelect, _extends$2({}, safeRest(rest), {
    ref: ref,
    id: fieldId.identity(),
    value: value,
    feedback: feedback,
    "aria-invalid": feedback === "error",
    "aria-describedby": errorId || hintId || helperId || undefined,
    onFocus: handleFocus,
    onBlur: handleBlur,
    defaultValue: value !== undefined ? undefined : defaultValue
  }), placeholder && /*#__PURE__*/React.createElement("option", {
    value: "",
    disabled: true
  }, placeholder), renderOptions(options)), !rest.disabled && /*#__PURE__*/React.createElement(IconWrapper, {
    inline: true,
    between: 1
  }, /*#__PURE__*/React.createElement(FeedbackIcon, {
    showIcon: showFeedbackIcon$1(feedback) && !isFocused,
    feedback: feedback
  }), /*#__PURE__*/React.createElement(IconLineFix, null, /*#__PURE__*/React.createElement(CaretDown, {
    variant: feedback === "error" ? "error" : undefined,
    size: 16
  }))))));
});
Select.displayName = "Select";
Select.propTypes = {
  id: PropTypes$1.string,
  options: PropTypes$1.arrayOf(PropTypes$1.shape({
    text: PropTypes$1.string,
    value: PropTypes$1.string,
    options: PropTypes$1.array
  })).isRequired,
  label: PropTypes$1.string.isRequired,
  hint: PropTypes$1.string,
  hintPosition: PropTypes$1.oneOf(["inline", "below"]),
  placeholder: PropTypes$1.string,
  value: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
  defaultValue: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
  feedback: PropTypes$1.oneOf(["success", "error"]),
  error: PropTypes$1.string,
  helper: PropTypes$1.oneOfType([PropTypes$1.func, PropTypes$1.node]),
  tooltip: componentWithName$1("Tooltip", true)
};
Select.defaultProps = {
  id: undefined,
  hint: undefined,
  hintPosition: "inline",
  placeholder: undefined,
  value: undefined,
  defaultValue: "",
  feedback: undefined,
  error: undefined,
  helper: undefined,
  tooltip: undefined
};

const widthLimit = {
  maxWidth: "100%",
  minWidth: "100%",
  minHeight: "208px",
  position: "relative"
};
const PreventWidthResize = styled.div({
  ...widthLimit
});
const StyledLabelContainer = styled(Box)({
  alignItems: "center"
});
const StyledTextArea = styled.textarea(widthLimit, {
  boxSizing: "border-box",
  width: "100%",
  margin: 0,
  outline: 0,
  textOverflow: "ellipsis",
  borderColor: colorGreyShuttle,
  "-ms-overflow-style": "-ms-autohiding-scrollbar",
  "&::placeholder": {
    font: "inherit",
    letterSpacing: "inherit",
    lineHeight: "inherit",
    color: colorGreyShuttle
  }
}, thin, rounded, font, medium, mediumFont, color, ({
  withFeedbackIcon
}) => ({
  "&::-webkit-inner-spin-button, &::-webkit-outer-spin-button": {
    appearance: "none",
    margin: 0
  },
  "-moz-appearance": "textfield",
  padding: withFeedbackIcon ? "0.5rem 3rem 0.5rem 1rem" : "0.5rem 1rem"
}), {
  "&:focus": {
    borderColor: "transparent",
    boxShadow: `0 0 4px 1px ${colorGreyShuttle}`,
    backgroundColor: colorWhite
  }
}, ({
  feedback
}) => {
  let borderColor;
  if (feedback === "success") {
    borderColor = colorPrimary;
  } else if (feedback === "error") {
    borderColor = colorCardinal;
  }
  return {
    "&:not(:focus)": {
      borderColor
    }
  };
}, ({
  disabled
}) => {
  if (disabled) {
    return {
      backgroundColor: colorGreyAthens,
      borderColor: "transparent",
      "&:not(:focus)": {
        borderColor: "transparent"
      }
    };
  }
  return {};
});
const StyledFeedbackIcon = styled.div(absolute, {
  right: "1rem",
  top: "0.5rem",
  overflow: "visible" // Prevents icon cut-off on Mobile Safari
});

const showFeedbackIcon = feedback => feedback === "error" || feedback === "success";
const renderHint = (hint, Component, id) => /*#__PURE__*/React.createElement(Component, {
  id: id,
  size: "small"
}, hint);
const renderError = (error, errorId) => /*#__PURE__*/React.createElement(InputFeedback, {
  id: errorId,
  feedback: "error"
}, /*#__PURE__*/React.createElement(Paragraph, {
  size: "small"
}, error));
const renderLabel = (id, label, hint, hintId, tooltip) => /*#__PURE__*/React.createElement(Box, {
  inline: true,
  between: 2
}, /*#__PURE__*/React.createElement("label", {
  htmlFor: id || generateId(label).identity()
}, /*#__PURE__*/React.createElement(StyledLabelContainer, {
  inline: true,
  tag: "span",
  between: 2
}, /*#__PURE__*/React.createElement(Text, {
  size: "medium",
  bold: true
}, label), hint && renderHint(hint, Text, hintId))), tooltip && /*#__PURE__*/React.cloneElement(tooltip, {
  connectedFieldLabel: label
}));
const renderHelper = (helper, helperId, feedback, value) => {
  if (typeof helper === "function") {
    return /*#__PURE__*/React.createElement("div", {
      id: helperId
    }, /*#__PURE__*/React.createElement(Text, {
      size: "small"
    }, helper(feedback, value)));
  }
  return /*#__PURE__*/React.createElement(InputFeedback, {
    id: helperId,
    feedback: feedback
  }, /*#__PURE__*/React.createElement(Text, {
    size: "small"
  }, helper));
};

/**
 * @version ./package.json
 */
const TextArea = /*#__PURE__*/React.forwardRef(({
  id,
  value,
  label,
  hint,
  feedback,
  error,
  helper,
  tooltip,
  ...rest
}, ref) => {
  const [isFocused, setIsFocused] = reactExports.useState(false);
  const fieldId = generateId(id, rest.name, label);
  const errorId = error && feedback === "error" && fieldId.postfix("error-message");
  const helperId = helper && fieldId.postfix("helper");
  const hintId = hint && fieldId.postfix("hint") || undefined;
  const handleFocus = e => {
    setIsFocused(true);
    if (rest.onFocus) {
      rest.onFocus(e);
    }
  };
  const handleBlur = e => {
    setIsFocused(false);
    if (rest.onBlur) {
      rest.onBlur(e);
    }
  };
  return /*#__PURE__*/React.createElement(Box, {
    between: 2
  }, renderLabel(fieldId.identity(), label, hint, hintId, tooltip), helper && renderHelper(helper, helperId, feedback, value), error && feedback === "error" && renderError(error, errorId), /*#__PURE__*/React.createElement(PreventWidthResize, null, /*#__PURE__*/React.createElement(StyledTextArea, _extends$2({}, safeRest(rest), {
    ref: ref,
    id: fieldId.identity(),
    value: value,
    feedback: feedback,
    "aria-invalid": feedback === "error",
    "aria-describedby": errorId || hintId || helperId || undefined,
    onFocus: handleFocus,
    onBlur: handleBlur,
    withFeedbackIcon: showFeedbackIcon
  })), !rest.disabled && /*#__PURE__*/React.createElement(StyledFeedbackIcon, null, /*#__PURE__*/React.createElement(FeedbackIcon, {
    showIcon: showFeedbackIcon(feedback) && !isFocused,
    feedback: feedback
  }))));
});
TextArea.displayName = "TextArea";
TextArea.propTypes = {
  /**
   * The id. If no `id` is provided, a default `id` will be generated using the `label`. "This is a label" will become "this-is-a-label". A passed in `id` will appear as entered with no additional formatting.
   */
  id: PropTypes$1.string,
  /**
   * The label.
   */
  label: PropTypes$1.string.isRequired,
  /**
   * Clarify the expected input.
   */
  hint: PropTypes$1.string,
  /**
   * Use `value` for controlled TextArea. For uncontrolled TextArea, use React's built-in `defaultValue` prop.
   * See examples below for more details.
   */
  value: PropTypes$1.string,
  /**
   * A feedback state.
   */
  feedback: PropTypes$1.oneOf(["success", "error"]),
  /**
   * An error message. Either an error or a helper should be used, not both.
   */
  error: PropTypes$1.node,
  /**
   * A detailed explanation of the input expected by a form field. Can be text,
   * other components, or HTML elements.
   *
   * If a function is provided, it must return an `InputFeedback`. The function will be
   * invoked with the following arguments.
   *
   * @param {String} feedback The input's current feedback state.
   * @param {String} value The input's current value.
   */
  helper: PropTypes$1.oneOfType([PropTypes$1.func, PropTypes$1.node]),
  /**
   * A `Tooltip`
   */
  tooltip: componentWithName$1("Tooltip", true)
};
TextArea.defaultProps = {
  id: undefined,
  hint: undefined,
  value: undefined,
  feedback: undefined,
  error: undefined,
  tooltip: undefined,
  helper: undefined
};

// DO NOT MODIFY THIS FILE. IT IS COPIED DIRECTLY FROM AN NPM PACKAGE

// This was copied from the element-closest polyfill: github.com/jonathantneal/closest
// This version does not attempt to polyfill `Element` because window.Element is not available server side. This version
// is less invasive.

const matches = (element, selector) => {
  const elements = (element.document || element.ownerDocument).querySelectorAll(selector);
  let index = 0;
  while (elements[index] && elements[index] !== element) {
    index += 1;
  }
  return Boolean(elements[index]);
};
const closest = (element, selector) => {
  let currentElement = element;
  while (currentElement && currentElement.nodeType === 1) {
    if (matches(currentElement, selector)) {
      return currentElement;
    }
    currentElement = currentElement.parentNode;
  }
  return null;
};

const StyledIconButton = styled.button(noStyle);
const TooltipButton = /*#__PURE__*/reactExports.forwardRef(({
  a11yText,
  inverted,
  onClick,
  icon: Icon
}, ref) => {
  return /*#__PURE__*/React.createElement(StyledIconButton, {
    onClick: onClick,
    ref: ref,
    type: "button"
  }, /*#__PURE__*/React.createElement(A11yContent, null, a11yText), /*#__PURE__*/React.createElement(Icon, {
    color: inverted ? "white" : "greyShark"
  }));
});
TooltipButton.displayName = "TooltipButton";
TooltipButton.propTypes = {
  a11yText: PropTypes$1.string.isRequired,
  inverted: PropTypes$1.bool,
  onClick: PropTypes$1.func,
  icon: componentWithName$1("QuestionMarkCircle").isRequired
};
TooltipButton.defaultProps = {
  inverted: false,
  onClick: undefined
};

const copyDictionary$4 = {
  en: {
    a11yTextStandalone: "Reveal additional information.",
    a11yTextLinked: "Reveal additional information for the field named '%{label}'."
  },
  fr: {
    a11yTextStandalone: "Afficher des renseignements supplémentaires.",
    a11yTextLinked: "Afficher des renseignements supplémentaires pour le champ nommé %{label}."
  }
};

const dimensions = {
  bubbleTriggerSize: "24px",
  bubbleOffset: "7px",
  bubbleTriangleHeight: "10px",
  bubbleTriangleWidth: "7px",
  bubbleTrianglePosition: "12px" // bubbleTriangleWidth + 5
};

const BubbleStyle = styled(({
  bubbleDimensions,
  direction,
  open,
  ...rest
}) => /*#__PURE__*/React.createElement(Box, rest)).attrs(({
  id
}) => ({
  "data-testid": "bubble",
  id
}))(rounded, ({
  bubbleDimensions,
  direction,
  open
}) => ({
  ...{
    display: open ? undefined : "none"
  },
  position: "absolute",
  bottom: `calc(100% + ${bubbleDimensions.bubbleTriangleHeight})`,
  backgroundColor: colorWhite,
  boxShadow: `0 0 2px 0 ${colorGreyShark}, 0 3px 2px 0 rgba(84, 89, 95, 0.25)`,
  ...{
    right: direction === "left" ? `-${bubbleDimensions.bubbleOffset}` : undefined
  },
  ...{
    left: direction === "right" ? `calc(100% - ${bubbleDimensions.bubbleTriggerSize} - ${bubbleDimensions.bubbleOffset})` : undefined
  },
  "&:before": {
    content: "",
    display: "block",
    position: "absolute",
    bottom: `-${bubbleDimensions.bubbleTriangleWidth}`,
    borderWidth: bubbleDimensions.bubbleTriangleWidth,
    borderStyle: "solid",
    borderColor: `transparent ${colorWhite} ${colorWhite} transparent`,
    backgroundColor: colorWhite,
    boxShadow: "2px 2px 3px 0 rgba(42, 42, 44, 0.4)",
    transform: "rotate(45deg)",
    ...{
      right: direction === "left" ? bubbleDimensions.bubbleTrianglePosition : undefined
    },
    ...{
      left: direction === "right" ? bubbleDimensions.bubbleTrianglePosition : undefined
    }
  },
  ...media.until("sm").css({
    maxWidth: "80vw"
  }),
  ...media.from("sm").css({
    maxWidth: "50vw"
  }),
  ...media.from("md").css({
    maxWidth: "25vw"
  })
}));
const InnerBubbleStyle = styled.div(({
  bubbleWidth
}) => ({
  ...bubbleWidth,
  maxWidth: "100%"
}));
const Bubble = ({
  id,
  direction,
  open,
  width,
  children
}) => {
  return /*#__PURE__*/React.createElement(BubbleStyle, {
    vertical: 2,
    horizontal: 3,
    bubbleDimensions: dimensions,
    direction: direction,
    open: open,
    role: "tooltip",
    "aria-live": "assertive",
    "aria-hidden": open ? "false" : "true",
    id: id
  }, /*#__PURE__*/React.createElement(InnerBubbleStyle, {
    bubbleWidth: width
  }, /*#__PURE__*/React.createElement(Text, {
    size: "small"
  }, children)));
};
Bubble.propTypes = {
  id: PropTypes$1.string.isRequired,
  direction: PropTypes$1.oneOf(["left", "right"]).isRequired,
  open: PropTypes$1.bool.isRequired,
  width: PropTypes$1.object.isRequired,
  children: PropTypes$1.node.isRequired
};

const StyledTooltip = styled.div({
  ...fixLineHeight,
  position: "relative",
  width: "1rem",
  height: "1.3rem"
});
const TooltipContainer = styled.div({
  position: "absolute"
});
class T extends React.Component {
  constructor() {
    super();
    this.refTooltip = null;
  }
  state = {
    open: false,
    halfPageWidth: 0,
    tooltipPos: 0
  };
  componentDidMount() {
    this.updatePageWidth();
    this.uniqueId = this.props.tooltipId ? this.props.tooltipId : uniqueId("tooltip");
  }
  componentDidUpdate() {
    if (this.state.open) {
      document.addEventListener("click", this.toggleBubbleOnOutsideEvent);
      document.addEventListener("keypress", this.toggleBubbleOnOutsideEvent);
      window.addEventListener("resize", this.updatePageWidth);
    } else {
      document.removeEventListener("click", this.toggleBubbleOnOutsideEvent);
      document.removeEventListener("keypress", this.toggleBubbleOnOutsideEvent);
      window.removeEventListener("resize", this.updatePageWidth);
    }
  }
  componentWillUnmount() {
    document.removeEventListener("click", this.toggleBubbleOnOutsideEvent);
    document.removeEventListener("keypress", this.toggleBubbleOnOutsideEvent);
    window.removeEventListener("resize", this.updatePageWidth);
  }
  getTriggerA11yText = (connectedFieldLabel, copy) => {
    if (copy.a11yText) {
      return getCopy(copyDictionary$4, copy).a11yText.replace("%{label}", connectedFieldLabel);
    }
    if (!connectedFieldLabel) {
      return getCopy(copyDictionary$4, copy).a11yTextStandalone;
    }
    return getCopy(copyDictionary$4, copy).a11yTextLinked.replace("%{label}", connectedFieldLabel);
  };
  getIds = connectedFieldLabel => {
    const id = generateId(connectedFieldLabel, `standalone-tooltip ${this.uniqueId}`);
    return {
      bubbleId: id.postfix("tooltip"),
      triggerId: id.postfix("trigger")
    };
  };
  setTooltipRef = element => {
    this.refTooltip = element;
  };
  toggleBubbleOnOutsideEvent = event => {
    const {
      connectedFieldLabel
    } = this.props;
    const {
      bubbleId,
      triggerId
    } = this.getIds(connectedFieldLabel);
    const inBubble = closest(event.target, `#${bubbleId}`);
    const inTrigger = closest(event.target, `#${triggerId}`);
    if (!inBubble && !inTrigger) {
      this.toggleBubble();
    }
  };
  toggleBubble = e => {
    e?.stopPropagation();
    this.updatePageWidth();
    this.setState(({
      open
    }) => {
      return {
        open: !open
      };
    });
  };
  updatePageWidth = () => {
    if (this.refTooltip) {
      this.setState({
        halfPageWidth: window.innerWidth / 2,
        tooltipPos: this.refTooltip.getBoundingClientRect().left
      });
    }
  };
  render() {
    const {
      direction,
      connectedFieldLabel,
      copy,
      children,
      forwardedRef,
      ...rest
    } = this.props;
    const {
      bubbleId,
      triggerId
    } = this.getIds(connectedFieldLabel);
    let trueDirection = null;
    if (direction === "auto") {
      trueDirection = this.state.tooltipPos > this.state.halfPageWidth ? "left" : "right";
    } else {
      trueDirection = direction;
    }
    const bubbleWidth = trueDirection === "left" ? this.state.tooltipPos : this.state.halfPageWidth * 2 - this.state.tooltipPos - 16;
    const width = {
      width: `calc(${bubbleWidth}px - 1rem - 0.5rem)`
    };
    return /*#__PURE__*/React.createElement(StyledTooltip, _extends$2({}, safeRest(rest), {
      ref: forwardedRef || this.setTooltipRef
    }), /*#__PURE__*/React.createElement(TooltipContainer, {
      "data-testid": "tooltipContainer"
    }, /*#__PURE__*/React.createElement(Bubble, {
      id: bubbleId,
      direction: trueDirection,
      open: this.state.open,
      width: width
    }, children), /*#__PURE__*/React.createElement(TooltipButton, {
      icon: QuestionMarkCircle,
      inverted: this.props.inverted,
      a11yText: this.getTriggerA11yText(this.props.connectedFieldLabel, this.props.copy),
      onClick: this.toggleBubble,
      id: triggerId,
      "aria-controls": bubbleId,
      "aria-haspopup": "true",
      "aria-expanded": this.state.open ? "true" : "false"
    })));
  }
}
const propTypes$1 = {
  direction: PropTypes$1.oneOf(["left", "right", "auto"]),
  connectedFieldLabel: PropTypes$1.string,
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    a11yText: PropTypes$1.string
  })]).isRequired,
  children: PropTypes$1.node.isRequired,
  tooltipId: PropTypes$1.string,
  forwardedRef: PropTypes$1.object,
  inverted: PropTypes$1.bool
};
const defaultProps = {
  direction: "auto",
  connectedFieldLabel: undefined,
  tooltipId: undefined,
  forwardedRef: undefined,
  inverted: false
};
const RefForwardedTooltip = withForwardedRef(T);
const Tooltip = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(RefForwardedTooltip, _extends$2({}, props, {
  ref: ref
})));
Tooltip.propTypes = propTypes$1;
Tooltip.defaultProps = defaultProps;
T.propTypes = propTypes$1;
T.defaultProps = defaultProps;
Tooltip.displayName = "Tooltip";

const FOOTNOTE_COUNT_LIMIT = 3;
const priceValue = {
  small: {
    fontSize: "1.5rem",
    ...helveticaNeueLight45,
    letterSpacing: "-0.7px",
    ...media.from("md").css({
      fontSize: "1.75rem",
      letterSpacing: "-0.8px"
    }),
    "&& sup": {
      top: "-1em"
    }
  },
  medium: {
    fontSize: "1.75rem",
    letterSpacing: "-1.6px",
    ...helveticaNeueLight45,
    ...media.from("md").css({
      ...helveticaNeueThin35,
      fontSize: "2.75rem",
      letterSpacing: 0
    }),
    "&& sup": {
      top: "-1.5em"
    }
  },
  large: {
    fontSize: "2.75rem",
    ...helveticaNeueThin35,
    ...media.from("md").css({
      fontSize: "4.5rem",
      letterSpacing: "0.2px"
    }),
    "&& sup": {
      top: "-3em"
    }
  }
};
const hasStrikethrough = strikethroughValue => {
  if (strikethroughValue) {
    return {
      "&::before": {
        display: "block",
        width: "100%",
        content: "",
        borderBottom: `2px solid ${colorGreyRaven}`,
        position: "absolute",
        top: "50%"
      }
    };
  }
  return undefined;
};
const addStrikethroughPadding = strikethroughValue => {
  if (strikethroughValue) {
    return {
      paddingBottom: "3px"
    };
  }
  return undefined;
};
const StyledRateText = styled.span(({
  size
}) => {
  if (size === "large") {
    return large;
  }
  if (size === "medium") {
    return medium;
  }
  return {
    ...medium,
    lineHeight: 1
  };
});
const StyledPriceValue = styled.span(wordBreak, noSpacing, ({
  size,
  strikethrough
}) => {
  return {
    lineHeight: 1,
    ...priceValue[size],
    position: "relative",
    ...hasStrikethrough(strikethrough)
  };
});
const StyledDollarSign = styled.span(({
  size
}) => {
  if (size === "small") {
    return {
      medium,
      lineHeight: 1.5
    };
  }
  return large;
});
const StyledLargeDollarSign = styled.span({
  color: colorText,
  ...helveticaNeueLight45,
  fontSize: "1.75rem",
  lineHeight: "1.3",
  letterSpacing: "-1.6px",
  ...media.from("md").css({
    ...helveticaNeueThin35,
    fontSize: "2.75rem",
    letterSpacing: "0"
  })
});
const StyledWrapperAlignment = styled(Box)({
  textAlign: "left"
});
const StyledPriceWrapper = styled(Box)({
  alignItems: "flex-end",
  alignSelf: "flex-start"
});
const StyledRateTextWrapper = styled.div(({
  strikethrough
}) => {
  return {
    display: "flex",
    color: strikethrough ? colorGreyRaven : undefined,
    ...addStrikethroughPadding(strikethrough)
  };
});
const StyledFootnoteLinks = styled(StyledText)(({
  inline
}) => ({
  display: "inline-block",
  alignSelf: "flex-start",
  marginTop: !inline && "0.5rem"
}));
const StyledBottomText = styled(StyledText)({
  display: "inline-block"
});
const StrikehroughText = styled.s({
  textDecoration: "line-through"
});
const renderDollarSign = (size, a11yText) => {
  if (size === "large") {
    return /*#__PURE__*/React.createElement(StyledLargeDollarSign, {
      "aria-hidden": a11yText ? "true" : "false",
      "data-testid": "dollarSign"
    }, "$");
  }
  return /*#__PURE__*/React.createElement(StyledDollarSign, {
    "aria-hidden": a11yText ? "true" : "false",
    "data-testid": "dollarSign",
    size: size
  }, "$");
};
const renderFootnoteLinks = (footnoteLinksRef, footnoteLinks, inline) => /*#__PURE__*/React.createElement(StyledFootnoteLinks, {
  ref: footnoteLinksRef,
  inline: inline
}, footnoteLinks);
const renderBottomText = (size, bottomText, bottomTextRef) => {
  if (size !== "large" && bottomText) {
    return /*#__PURE__*/React.createElement(StyledBottomText, {
      ref: bottomTextRef,
      size: size
    }, bottomText);
  }
  if (size === "large" && bottomText) {
    warn("PriceLockup", "The props bottomText and size='large' cannot be used together");
  }
  return undefined;
};
const PriceLockup = ({
  size,
  price,
  topText,
  signDirection,
  rateText,
  bottomText,
  footnoteLinks,
  strikethrough,
  a11yText
}) => {
  const rateTextWrapperRef = reactExports.useRef();
  const footnoteLinksRef = reactExports.useRef();
  const containerRef = reactExports.useRef();
  const bottomTextRef = reactExports.useRef();
  const [footnoteLinksInline, setFootnoteLinksInline] = reactExports.useState(true);
  const footnoteCount = reactExports.useCallback(() => {
    let count = 0;
    if (footnoteLinks) {
      if (Array.isArray(footnoteLinks)) {
        count = footnoteLinks.reduce((acc, curr) => acc + curr.props.number.length, 0);
      } else {
        count = footnoteLinks.props.number.length;
      }
    }
    return count;
  }, [footnoteLinks]);
  const checkInline = () => {
    if (containerRef.current && footnoteLinksRef.current) {
      const footnoteLinksWidth = footnoteLinksRef.current.offsetWidth;
      const containerWidth = containerRef.current.offsetWidth;
      let textWidth;
      if (bottomText) {
        textWidth = bottomTextRef.current ? bottomTextRef.current.offsetWidth : 0;
      } else {
        textWidth = rateTextWrapperRef.current.offsetWidth;
      }
      const combinedWidth = textWidth + footnoteLinksWidth;
      setFootnoteLinksInline(combinedWidth < containerWidth && footnoteCount() <= FOOTNOTE_COUNT_LIMIT);
    }
  };
  reactExports.useEffect(checkInline, []);
  reactExports.useEffect(() => {
    window.addEventListener("resize", checkInline);
    return () => {
      window.removeEventListener("resize", checkInline);
    };
  });
  reactExports.useEffect(checkInline, [footnoteLinks]);
  let wrapperSpacing;
  if (size === "small") {
    wrapperSpacing = 2;
  } else if (size === "medium") {
    wrapperSpacing = 3;
  } else {
    wrapperSpacing = {
      xs: 2,
      md: 3
    };
  }
  if (strikethrough && !a11yText) {
    warn("PriceLockup", "a11yText must be provided with strikethrough pricing");
  }
  return /*#__PURE__*/React.createElement(StyledWrapperAlignment, {
    between: wrapperSpacing
  }, /*#__PURE__*/React.createElement(Box, {
    between: size !== "large" ? 1 : undefined
  }, topText && /*#__PURE__*/React.createElement(Text, {
    size: size === "large" ? "large" : "small"
  }, topText), /*#__PURE__*/React.createElement(StyledRateTextWrapper, {
    ref: containerRef,
    strikethrough: strikethrough
  }, /*#__PURE__*/React.createElement(StyledPriceWrapper, {
    ref: rateTextWrapperRef,
    between: size === "small" ? 1 : 2,
    inline: true
  }, /*#__PURE__*/React.createElement(Box, {
    between: size === "large" ? 2 : 1,
    inline: true
  }, a11yText && /*#__PURE__*/React.createElement(A11yContent, null, a11yText), signDirection === "left" && renderDollarSign(size, a11yText), /*#__PURE__*/React.createElement(StyledPriceValue, {
    "data-testid": "priceValue",
    size: size,
    strikethrough: strikethrough,
    "aria-hidden": a11yText ? "true" : "false"
  }, strikethrough ? /*#__PURE__*/React.createElement(StrikehroughText, null, price) : /*#__PURE__*/React.createElement(React.Fragment, null, price)), signDirection === "right" && renderDollarSign(size, a11yText), !bottomText && !rateText && footnoteLinksInline && /*#__PURE__*/React.createElement(React.Fragment, null, strikethrough && /*#__PURE__*/React.createElement(A11yContent, null, a11yText), /*#__PURE__*/React.createElement(StyledPriceValue, {
    "data-testid": "priceValue",
    size: size,
    strikethrough: strikethrough
  }, renderFootnoteLinks(footnoteLinksRef, footnoteLinks, footnoteLinksInline)))), rateText && /*#__PURE__*/React.createElement(StyledRateText, {
    "aria-hidden": a11yText ? "true" : "false",
    "data-testid": "rateText",
    size: size
  }, rateText, !bottomText && footnoteLinksInline && renderFootnoteLinks(footnoteLinksRef, footnoteLinks, footnoteLinksInline))))), (size !== "large" && bottomText || footnoteLinks && !footnoteLinksInline) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HairlineDivider, null), /*#__PURE__*/React.createElement("span", null, renderBottomText(size, bottomText, bottomTextRef), renderFootnoteLinks(footnoteLinksRef, footnoteLinks, footnoteLinksInline))));
};
PriceLockup.propTypes = {
  size: PropTypes$1.oneOf(["small", "medium", "large"]).isRequired,
  signDirection: PropTypes$1.oneOf(["left", "right"]),
  topText: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.object]),
  bottomText: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.object]),
  rateText: PropTypes$1.string,
  price: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.object]).isRequired,
  footnoteLinks: componentWithName$1("FootnoteLink"),
  strikethrough: PropTypes$1.bool,
  a11yText: PropTypes$1.string
};
PriceLockup.defaultProps = {
  signDirection: "left",
  topText: undefined,
  bottomText: undefined,
  rateText: undefined,
  footnoteLinks: undefined,
  strikethrough: false,
  a11yText: undefined
};

const StyledClickable = styled.button(noStyle, {
  display: "flex"
});

const StyledListItem = styled.li({
  "& > span": {
    ...smallFont
  },
  paddingLeft: "1rem"
});
const StyledList = styled(Box)({
  ...boldFont,
  ...sizeSmall,
  paddingLeft: "2rem",
  ...media.from("md").css({
    paddingLeft: "1rem"
  })
}, ({
  type
}) => ({
  listStyle: type === "indexed" ? "decimal" : "none"
}));
const Item = ({
  styledComponent: Component,
  ...rest
}) => /*#__PURE__*/React.createElement(Component, rest);
Item.propTypes = {
  styledComponent: PropTypes$1.object
};
Item.defaultProps = {
  styledComponent: StyledListItem
};
const List = ({
  children,
  styledComponent: Component,
  type,
  ...rest
}) => {
  return /*#__PURE__*/React.createElement(Component, _extends$2({}, rest, {
    tag: type === "indexed" ? "ol" : "ul",
    between: 3,
    type: type
  }), React.Children.toArray(children).filter(child => child).map(child => /*#__PURE__*/React.cloneElement(child)));
};
List.propTypes = {
  type: PropTypes$1.oneOf(["indexed", "nonIndexed"]).isRequired,
  children: PropTypes$1.node.isRequired,
  styledComponent: PropTypes$1.object
};
List.defaultProps = {
  styledComponent: StyledList
};
List.Item = Item;

const StyledFootnoteListItem = styled(StyledListItem)({
  "& > span": {
    ...mediumFont
  },
  ...media.from("md").css({
    paddingLeft: "2rem"
  })
});
const StyledFootnoteList = styled(StyledList)({
  ...sizeMedium,
  marginLeft: "1rem",
  ...media.from("md").css({
    marginLeft: 0
  })
});
const FootnoteList = withStyledComponent(StyledFootnoteList)(List);
const FootnoteListItem = withStyledComponent(StyledFootnoteListItem)(List.Item);
FootnoteList.Item = FootnoteListItem;

const Close = () => /*#__PURE__*/React.createElement("svg", {
  width: "24px",
  height: "24px",
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg",
  xmlnsXlink: "http://www.w3.org/1999/xlink",
  style: {
    background: colorGreyAthens
  },
  focusable: "false"
}, /*#__PURE__*/React.createElement("g", {
  stroke: "none",
  strokeWidth: "1",
  fill: "none",
  fillRule: "evenodd"
}, /*#__PURE__*/React.createElement("g", {
  fill: "#4B286D",
  fillRule: "nonzero"
}, /*#__PURE__*/React.createElement("path", {
  d: "M11.99975,12.70675 L7.85325,16.85325 C7.75625,16.95025 7.62825,16.99925 7.50025,16.99925 C7.37225,16.99925 7.24425,16.95025 7.14625,16.85325 C6.95125,16.65825 6.95125,16.34125 7.14625,16.14625 L11.29275,11.99975 L7.14625,7.85325 C6.95125,7.65825 6.95125,7.34125 7.14625,7.14625 C7.34125,6.95125 7.65825,6.95125 7.85325,7.14625 L11.99975,11.29275 L16.14625,7.14625 C16.34125,6.95125 16.65825,6.95125 16.85325,7.14625 C17.04825,7.34125 17.04825,7.65825 16.85325,7.85325 L12.70675,11.99975 L16.85325,16.14625 C17.04825,16.34125 17.04825,16.65825 16.85325,16.85325 C16.75625,16.95025 16.62825,16.99925 16.50025,16.99925 C16.37225,16.99925 16.24425,16.95025 16.14625,16.85325 L11.99975,12.70675 Z M12,24 C5.38330435,24 0,18.6166957 0,12 C0,5.38330435 5.38330435,0 12,0 C18.6166957,0 24,5.38330435 24,12 C24,18.6166957 18.6166957,24 12,24 Z M12,1.04347826 C5.95826087,1.04347826 1.04347826,5.95826087 1.04347826,12 C1.04347826,18.0417391 5.95826087,22.9565217 12,22.9565217 C18.0417391,22.9565217 22.9565217,18.0417391 22.9565217,12 C22.9565217,5.95826087 18.0417391,1.04347826 12,1.04347826 Z"
}))));

const copyDictionary$3 = {
  en: {
    heading: "Terms and conditions",
    close: "close"
  },
  fr: {
    heading: "Modalités et conditions",
    close: "fermer"
  }
};

const generateLinks = content => {
  const linkRegex = /<\s*a([^>]*)>(.*?)<\s*\/\s*a>/g;
  const attributeRegex = /(\w+)\s*=\s*((["'])(.*?)\3|(?=\s|\/>))/g;
  const parts = content.split(linkRegex);
  if (parts.length === 1) {
    return parts;
  }
  // start with first anchor text, attributes will be in the previous part
  for (let i = 2; i < parts.length; i += 3) {
    const o = {};
    // get attributes from previous part
    const attributes = parts[i - 1].trim();

    // create object from attributes
    const matchedAttributes = attributes.match(attributeRegex);
    if (matchedAttributes) {
      matchedAttributes.forEach(attribute => {
        const split = attribute.split("=");
        o[split[0]] = split[1].substr(1, split[1].length - 2);
      });
    }
    // remove anchor attributes from parts
    parts[i - 1] = undefined;
    // replace anchor text with Link in parts
    parts[i] = /*#__PURE__*/React.createElement(Link$1, _extends$2({}, o, {
      key: i
    }), parts[i]);
  }
  return parts;
};
const generateBreaks = parts => {
  const breakRegex = /<br\s?\/*>/g;
  const partsWithBreaks = parts;
  for (let i = 0; i < partsWithBreaks.length; i += 1) {
    if (typeof partsWithBreaks[i] === "string" && partsWithBreaks[i].search(breakRegex) !== -1) {
      const toSplit = partsWithBreaks[i].split(breakRegex);
      for (let x = 1; x < toSplit.length; x += 2) {
        toSplit.splice(x, 0, /*#__PURE__*/React.createElement("br", {
          key: `break-${i}-${x}`
        }));
      }
      partsWithBreaks[i] = toSplit;
    }
  }
  return partsWithBreaks;
};
const renderContent = content => {
  if (typeof content !== "string") {
    return content;
  }
  return generateBreaks(generateLinks(content));
};

const GlobalBodyScrollLock = createGlobalStyle({
  "html, body": media.until("md").css({
    overflow: "hidden"
  })
});
const StyledFootnote = styled.div({
  position: "fixed",
  top: 0,
  left: 0,
  height: "100vh",
  width: "100%",
  backgroundColor: colorGreyAthens,
  display: "block",
  boxShadow: "0 0 16px 0 rgba(0, 0, 0, 0.1)",
  transform: "translateY(100%)",
  transition: "transform 500ms ease-out",
  "@media (prefers-reduced-motion: reduce)": {
    transition: "none"
  },
  zIndex: 99999,
  ...media.from("md").css({
    top: "auto",
    bottom: 0,
    height: "auto",
    maxHeight: "50vh"
  })
}, ({
  isVisible
}) => ({
  visibility: isVisible ? "visible" : "hidden"
}), ({
  isOpen
}) => {
  if (isOpen) {
    return {
      transform: "translateY(0)"
    };
  }
  return {};
});
const StyledFootnoteHeader = styled.div({
  position: "relative",
  width: "100%"
});
const StyledHeader = styled(Box)({
  alignItems: "center"
});
const StyledFootnoteBody = styled.div({
  overflow: "auto",
  "-webkit-overflow-scrolling": "touch",
  transition: "height 300ms ease-out, opacity 200ms ease-out",
  transform: "translateZ(0)",
  "@media (prefers-reduced-motion: reduce)": {
    transition: "height 1ms ease-out, opacity 1ms ease-out"
  },
  backgroundColor: colorGreyAthens
}, ({
  headerHeight
}) => ({
  maxHeight: `calc(100vh - ${headerHeight}px)`,
  ...media.from("md").css({
    maxHeight: `calc(50vh - ${headerHeight}px)`
  })
}), ({
  bodyHeight,
  isTextVisible
}) => ({
  height: bodyHeight,
  opacity: isTextVisible ? 1 : 0
}));
const StyledListContainer = styled.div({
  paddingTop: "1.5rem",
  paddingBottom: "2rem",
  ...media.from("md").css({
    paddingTop: "0rem",
    paddingBottom: "3rem"
  })
});
const FocusTrap$1 = withFocusTrap("div");
const usePrevious = value => {
  const ref = reactExports.useRef();
  reactExports.useEffect(() => {
    ref.current = value;
  });
  if (ref.current) {
    return ref.current;
  }
  return {};
};
const Footnote = props => {
  const {
    copy,
    number,
    content,
    onClose,
    isOpen,
    ...rest
  } = props;
  const footnoteRef = reactExports.useRef(null);
  const headerRef = reactExports.useRef(null);
  const bodyRef = reactExports.useRef(null);
  const listRef = reactExports.useRef(null);
  const headingRef = reactExports.useRef(null);
  const [data, setData] = reactExports.useState({
    content: null,
    number: null
  });
  const [headerHeight, setHeaderHeight] = reactExports.useState("auto");
  const [bodyHeight, setBodyHeight] = reactExports.useState("auto");
  const [isVisible, setIsVisible] = reactExports.useState(false);
  const [isTextVisible, setIsTextVisible] = reactExports.useState(true);
  const prevProps = usePrevious(props);
  const closeFootnote = reactExports.useCallback((e, options) => {
    onClose(e, options);
  }, [onClose]);

  // listen for ESCAPE, close button clicks, and clicks outside of the Footnote. Call onClose.
  const handleClose = reactExports.useCallback(e => {
    if (e.type === "keydown") {
      const key = e.keyCode || e.key;
      if (key === "Escape" || key === 27) {
        closeFootnote(e, {
          returnFocus: true
        });
      }
    } else if (e.type === "click" && footnoteRef && e.target && !footnoteRef.current.contains(e.target) && e.target.getAttribute("data-tds-id") !== "footnote-link") {
      closeFootnote(e, {
        returnFocus: false
      });
    } else if (e.type === "touchstart" && footnoteRef && e.touches[0].target && !footnoteRef.current.contains(e.touches[0].target) && e.touches[0].target.getAttribute("data-tds-id") !== "footnote-link") {
      closeFootnote(e, {
        returnFocus: false
      });
    }
  }, [closeFootnote]);
  const saveCurrentHeight = () => {
    const oldHeight = listRef.current.offsetHeight;
    setBodyHeight(oldHeight);
  };
  const focusHeading = () => {
    if (content !== null && isVisible && headingRef && headingRef.current !== null) {
      headingRef.current.focus();
    }
  };
  const handleStyledFootnoteTransitionEnd = e => {
    if (e.propertyName === "transform" && !isOpen) {
      setIsVisible(false);
    } else {
      focusHeading();
    }
  };
  const handleTransitionEnd = e => {
    e.persist();
    if (e.propertyName === "opacity" && !isTextVisible) {
      setData({
        content,
        number
      });
      if (bodyHeight !== listRef.current.offsetHeight) {
        // set new height
        setBodyHeight(listRef.current.offsetHeight);
      } else {
        setIsTextVisible(true);
      }
    } else {
      setBodyHeight(listRef.current.offsetHeight);
    }
    if (e.propertyName === "height" && !isTextVisible) {
      setIsTextVisible(true);
    }
  };
  const resetFootnote = () => {
    // reset footnote state if closed
    if (!isOpen) {
      setBodyHeight("auto");
      setIsTextVisible(true);
    }
  };

  // set height of header on mount
  reactExports.useEffect(() => {
    setHeaderHeight(headerRef.current.offsetHeight);
  }, []);
  const preventDefault = e => {
    if (!bodyRef.current.contains(e.touches[0].target)) {
      e.preventDefault();
    }
  };

  // add listeners for mouse clicks outside of Footnote and for ESCAPE key presses
  reactExports.useEffect(() => {
    if (isOpen) {
      setIsVisible(true);
      window.addEventListener("click", handleClose);
      window.addEventListener("keydown", handleClose);
      window.addEventListener("touchstart", handleClose);
      window.addEventListener("touchmove", preventDefault, {
        passive: false
      });
    }
    return () => {
      if (isOpen) {
        window.removeEventListener("click", handleClose);
        window.removeEventListener("keydown", handleClose);
        window.removeEventListener("touchstart", handleClose);
        window.removeEventListener("touchmove", preventDefault);
      }
    };
  }, [handleClose, isOpen]);

  // set data if opening a new footnote
  reactExports.useEffect(() => {
    if (isOpen && !prevProps.isOpen) {
      setData({
        content,
        number
      });
    }
  }, [isOpen, prevProps.isOpen, content, number]);
  reactExports.useEffect(() => {
    if (isOpen && prevProps.isOpen && number !== prevProps.number) {
      saveCurrentHeight();
      setIsTextVisible(false);
    }
  }, [number, isOpen, prevProps.isOpen, prevProps.number]);
  // reset footnote on close
  reactExports.useEffect(resetFootnote, [isOpen]);
  return /*#__PURE__*/React.createElement("div", safeRest(rest), isOpen && /*#__PURE__*/React.createElement(GlobalBodyScrollLock, null), /*#__PURE__*/React.createElement(StyledFootnote, {
    ref: footnoteRef,
    isOpen: isOpen,
    isVisible: isVisible,
    onTransitionEnd: handleStyledFootnoteTransitionEnd
  }, /*#__PURE__*/React.createElement(FocusTrap$1, {
    autofocus: false
  }, /*#__PURE__*/React.createElement(StyledFootnoteHeader, {
    ref: headerRef
  }, /*#__PURE__*/React.createElement("div", {
    css: {
      display: "none",
      ...media.from("md").css({
        display: "block"
      })
    }
  }, /*#__PURE__*/React.createElement(HairlineDivider, null)), /*#__PURE__*/React.createElement(Box, {
    vertical: 4
  }, /*#__PURE__*/React.createElement(FlexGrid, null, /*#__PURE__*/React.createElement(FlexGrid.Row, null, /*#__PURE__*/React.createElement(FlexGrid.Col, {
    xs: 12
  }, /*#__PURE__*/React.createElement(StyledHeader, {
    between: "space-between",
    inline: true
  }, /*#__PURE__*/React.createElement(Heading, {
    level: "h4",
    tag: "h2",
    tabIndex: -1,
    ref: headingRef
  }, getCopy(copyDictionary$3, copy).heading), /*#__PURE__*/React.createElement(StyledClickable, {
    type: "button",
    onClick: e => {
      closeFootnote(e, {
        returnFocus: true
      });
    },
    "aria-label": getCopy(copyDictionary$3, copy).close
  }, /*#__PURE__*/React.createElement(Close, null))))))), /*#__PURE__*/React.createElement("div", {
    css: {
      display: "none",
      ...media.until("md").css({
        display: "block"
      })
    }
  }, /*#__PURE__*/React.createElement(HairlineDivider, null))), /*#__PURE__*/React.createElement(StyledFootnoteBody, {
    ref: bodyRef,
    bodyHeight: bodyHeight,
    headerHeight: headerHeight,
    isTextVisible: isTextVisible,
    onTransitionEnd: handleTransitionEnd
  }, data.number && data.content && /*#__PURE__*/React.createElement(StyledListContainer, {
    ref: listRef
  }, /*#__PURE__*/React.createElement(FlexGrid, null, /*#__PURE__*/React.createElement(FlexGrid.Row, null, /*#__PURE__*/React.createElement(FlexGrid.Col, {
    xs: 12,
    md: 11
  }, /*#__PURE__*/React.createElement(FootnoteList, {
    start: data.number,
    type: "indexed"
  }, /*#__PURE__*/React.createElement(FootnoteList.Item, null, /*#__PURE__*/React.createElement(Text, null, renderContent(data.content))))))))))));
};
const copyShape$1 = PropTypes$1.shape({
  heading: PropTypes$1.string.isRequired,
  close: PropTypes$1.string.isRequired
});
Footnote.propTypes = {
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), copyShape$1]).isRequired,
  number: PropTypes$1.number,
  content: PropTypes$1.string,
  onClose: PropTypes$1.func.isRequired,
  isOpen: PropTypes$1.bool
};
Footnote.defaultProps = {
  isOpen: false,
  number: undefined,
  content: undefined
};

const copyDictionary$2 = {
  en: {
    a11yLabel: "Read legal footnote"
  },
  fr: {
    a11yLabel: "Lire la note de bas de page légale"
  }
};

const StyledFootnoteLink = styled.button({
  backgroundColor: "transparent",
  border: 0,
  textDecoration: "underline",
  padding: "0 0.25rem",
  color: "inherit",
  cursor: "pointer"
});
const FootnoteLink = ({
  number,
  onClick,
  copy
}) => {
  let numbers = [];
  if (!Array.isArray(number)) {
    numbers[0] = number;
  } else {
    numbers = number;
  }
  const refs = numbers.map(() => /*#__PURE__*/React.createRef());
  const handleClick = index => {
    onClick(numbers[index], refs[index]);
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, numbers.map((n, i) => /*#__PURE__*/React.createElement("sup", {
    key: n
  }, /*#__PURE__*/React.createElement(StyledFootnoteLink, {
    type: "button",
    key: numbers[i],
    ref: refs[i],
    onClick: e => {
      e.preventDefault();
      e.stopPropagation();
      handleClick(i);
    },
    "data-tds-id": "footnote-link",
    "data-nosnippet": true
  }, /*#__PURE__*/React.createElement(A11yContent, {
    role: "doc-noteref"
  }, getCopy(copyDictionary$2, copy).a11yLabel), `${numbers[i]}${i !== numbers.length - 1 ? "," : ""}`))));
};
FootnoteLink.displayName = "FootnoteLink";
const copyShape = PropTypes$1.shape({
  a11yLabel: PropTypes$1.string.isRequired
});
FootnoteLink.propTypes = {
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), copyShape]).isRequired,
  number: PropTypes$1.oneOfType([PropTypes$1.number, PropTypes$1.arrayOf(PropTypes$1.number)]).isRequired,
  onClick: PropTypes$1.func.isRequired
};

const StyledDisclaimer = styled(StyledParagraph)({
  color: colorShuttleGrey
});
const Disclaimer = ({
  children,
  ...props
}) => {
  return /*#__PURE__*/React.createElement(StyledDisclaimer, _extends$2({}, safeRest(props), {
    size: "small"
  }), /*#__PURE__*/React.createElement(ColoredTextProvider, null, children));
};
Disclaimer.propTypes = {
  children: PropTypes$1.node.isRequired
};

const StyledChevron = styled.span(({
  isOpen
}) => ({
  lineHeight: "24px",
  position: "absolute",
  top: 0,
  left: 0,
  transition: "transform 300ms",
  transform: `translate(6px, ${isOpen ? "-2px" : "-1px"})`,
  [`${StyledClickable}:hover &`]: {
    transform: `translate(6px, ${!isOpen ? "2px" : "-5px"})`
  },
  "@media (prefers-reduced-motion: reduce)": {
    transition: "none"
  }
}));
const Chevron = ({
  isOpen
}) => /*#__PURE__*/React.createElement(StyledChevron, {
  isOpen: isOpen
}, /*#__PURE__*/React.createElement("svg", {
  width: "12px",
  height: "8px",
  viewBox: "0 0 12 8",
  xmlns: "http://www.w3.org/2000/svg",
  xmlnsXlink: "http://www.w3.org/1999/xlink"
}, /*#__PURE__*/React.createElement("path", {
  d: "M11.7940812,0.183230226 C11.4424627,-0.117489399 11.0896181,0.0450442657 10.8868854,0.245275736 L5.99681615,4.74055299 L1.11722187,0.245275732 C0.93839231,0.0814520871 0.490533284,-0.180032793 0.165240429,0.183230232 C-0.160052425,0.546493257 0.0652096387,0.91610528 0.243271687,1.07992892 L5.6348225,6.87660266 C5.81365205,7.04113245 6.10607292,7.04113245 6.28490248,6.87660266 C6.28490248,6.87589653 11.7940809,1.07992896 11.7940809,1.07992896 C11.9792355,0.935042671 12.1456996,0.483949851 11.7940812,0.183230226 Z",
  transform: isOpen ? "rotate(180, 6, 4)" : undefined
})));
Chevron.propTypes = {
  isOpen: PropTypes$1.bool
};
Chevron.defaultProps = {
  isOpen: false
};

const Circle = () => /*#__PURE__*/React.createElement("svg", {
  width: "24px",
  height: "24px",
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg",
  xmlnsXlink: "http://www.w3.org/1999/xlink"
}, /*#__PURE__*/React.createElement("path", {
  d: "M12,0 C5.373,0 0,5.373 0,12 C0,18.627 5.373,24 12,24 C18.627,24 24,18.627 24,12 C24,5.373 18.627,0 12,0 M12,1 C18.065,1 23,5.935 23,12 C23,18.065 18.065,23 12,23 C5.935,23 1,18.065 1,12 C1,5.935 5.935,1 12,1",
  fill: colorNemetonPurple
}));

const copyDictionary$1 = {
  en: {
    headingView: "View terms and conditions",
    headingHide: "Hide terms and conditions",
    nonIndexedTitle: "The following applies to all terms and conditions above"
  },
  fr: {
    headingView: "Voir les modalités et conditions",
    headingHide: "Masquer les modalités et conditions",
    nonIndexedTitle: "Ce qui suit s’applique aux modalités et conditions ci-dessus"
  }
};

const StyledClickableHeading = styled(StyledClickable)({
  width: "100%",
  justifyContent: "center",
  backgroundColor: colorWhite
});
const StyledExpandCollapseHeading = styled(Box)({
  alignItems: "center"
});
const StyledChevronContainer = styled.span({
  position: "relative",
  width: "24px",
  height: "24px"
});
const UPPER_SPEED_LIMIT = 150;
const LOWER_SPEED_LIMIT = 600;
const calculateSpeed = (height, isExpanding) => {
  const h = height * 0.5;
  if (h < UPPER_SPEED_LIMIT) {
    return UPPER_SPEED_LIMIT;
  }
  if (h > LOWER_SPEED_LIMIT) {
    return LOWER_SPEED_LIMIT;
  }
  return isExpanding ? h + h * 0.2 : h;
};
const TermsAndConditions = /*#__PURE__*/reactExports.forwardRef(({
  copy,
  indexedContent,
  nonIndexedContent,
  ...rest
}, ref) => {
  const contentWrapper = reactExports.useRef(null);
  const [isOpen, setOpen] = reactExports.useState(false);
  const [contentWrapperHeight, setContentWrapperHeight] = reactExports.useState(0);
  const speed = calculateSpeed(contentWrapperHeight, isOpen);
  const hasIndexedContent = indexedContent.length > 0;
  const hasNonIndexedContent = nonIndexedContent.length > 0;
  reactExports.useEffect(() => {
    if (contentWrapper.current.offsetHeight !== contentWrapperHeight) {
      setContentWrapperHeight(() => {
        return contentWrapper.current.offsetHeight;
      });
    }
  }, [contentWrapperHeight]);
  return /*#__PURE__*/React.createElement("div", safeRest(rest), /*#__PURE__*/React.createElement(HairlineDivider, null), /*#__PURE__*/React.createElement(FlexGrid, {
    gutter: false,
    limitWidth: false
  }, /*#__PURE__*/React.createElement(FlexGrid.Row, null, /*#__PURE__*/React.createElement(FlexGrid.Col, null, /*#__PURE__*/React.createElement(StyledClickableHeading, {
    type: "button",
    "aria-expanded": isOpen,
    ref: ref,
    onClick: () => setOpen(!isOpen)
  }, /*#__PURE__*/React.createElement(StyledExpandCollapseHeading, {
    inline: true,
    vertical: 3,
    between: 3
  }, /*#__PURE__*/React.createElement(StyledChevronContainer, null, /*#__PURE__*/React.createElement(Circle, null), /*#__PURE__*/React.createElement(Chevron, {
    isOpen: isOpen
  })), /*#__PURE__*/React.createElement(Heading, {
    level: "h4",
    tag: "h2"
  }, !isOpen ? getCopy(copyDictionary$1, copy).headingView : getCopy(copyDictionary$1, copy).headingHide)))))), /*#__PURE__*/React.createElement(FadeAndReveal, {
    timeout: speed,
    in: isOpen,
    height: contentWrapperHeight
  }, () => /*#__PURE__*/React.createElement("div", {
    ref: contentWrapper
  }, /*#__PURE__*/React.createElement(FlexGrid, {
    gutter: false,
    limitWidth: false
  }, /*#__PURE__*/React.createElement(FlexGrid.Row, null, /*#__PURE__*/React.createElement(FlexGrid.Col, null, /*#__PURE__*/React.createElement(DimpleDivider, null)))), /*#__PURE__*/React.createElement(Translate, {
    timeout: speed,
    in: isOpen,
    direction: "y",
    distance: isOpen ? "0rem" : "1rem",
    initialStyle: {
      transform: "translateY(1rem)"
    }
  }, () => /*#__PURE__*/React.createElement(React.Fragment, null, hasIndexedContent > 0 && /*#__PURE__*/React.createElement(FlexGrid, null, /*#__PURE__*/React.createElement(FlexGrid.Row, null, /*#__PURE__*/React.createElement(FlexGrid.Col, {
    xs: 12,
    mdOffset: 1,
    md: 10
  }, /*#__PURE__*/React.createElement(List, {
    size: "small",
    below: 4,
    type: "indexed"
  }, indexedContent.map((c, idx) =>
  /*#__PURE__*/
  // eslint-disable-next-line react/no-array-index-key
  React.createElement(List.Item, {
    key: idx
  }, renderContent(c))))))), hasNonIndexedContent && /*#__PURE__*/React.createElement(FlexGrid, null, /*#__PURE__*/React.createElement(FlexGrid.Row, null, /*#__PURE__*/React.createElement(FlexGrid.Col, {
    xs: 12,
    mdOffset: 1,
    md: 10
  }, /*#__PURE__*/React.createElement(Box, {
    between: 3
  }, hasIndexedContent && /*#__PURE__*/React.createElement("div", {
    css: {
      paddingLeft: "2rem"
    }
  }, /*#__PURE__*/React.createElement(Heading, {
    level: "h4",
    tag: "span"
  }, getCopy(copyDictionary$1, copy).nonIndexedTitle)), /*#__PURE__*/React.createElement(List, {
    size: "small",
    below: 4,
    type: "nonIndexed"
  }, nonIndexedContent.map((c, idx) =>
  /*#__PURE__*/
  // eslint-disable-next-line react/no-array-index-key
  React.createElement(List.Item, {
    key: idx
  }, renderContent(c)))))))))))), /*#__PURE__*/React.createElement(HairlineDivider, null));
});
TermsAndConditions.displayName = "TermsAndConditions";
TermsAndConditions.propTypes = {
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    headingView: PropTypes$1.string,
    headingHide: PropTypes$1.string,
    nonIndexedTitle: PropTypes$1.string
  })]).isRequired,
  indexedContent: PropTypes$1.arrayOf(PropTypes$1.oneOfType([PropTypes$1.node, PropTypes$1.string])),
  nonIndexedContent: PropTypes$1.arrayOf(PropTypes$1.oneOfType([PropTypes$1.node, PropTypes$1.string]))
};
TermsAndConditions.defaultProps = {
  indexedContent: [],
  nonIndexedContent: []
};

const stepTrackerText = {
  en: {
    mobileStepLabel: "Step %{current} of %{total}:"
  },
  fr: {
    mobileStepLabel: "Étape %{current} sur %{total}:"
  }
};

const StyledStep = styled.div({
  position: "relative",
  textAlign: "center",
  width: "100%",
  "&:before, &:after": {
    position: "absolute",
    top: "17px",
    width: "calc(50% - 1.07rem)",
    content: "",
    borderBottom: `0.1rem solid ${colorGreyShuttle}`
  },
  "&:before": {
    left: 0
  },
  "&:after": {
    right: 0
  },
  "&:first-child": {
    "&:before": {
      content: "none"
    }
  },
  "&:last-child": {
    "&:after": {
      content: "none"
    }
  }
});
const StyledIcon = styled.span(({
  isStepActive
}) => ({
  display: "inline-block",
  border: `0.1rem solid ${colorGreyShuttle}`,
  borderRadius: "50%",
  lineHeight: "1.7rem",
  width: "35px",
  height: "35px",
  marginBottom: "1rem",
  ...(isStepActive && {
    backgroundColor: colorPrimary,
    textAlign: "center",
    border: `0.1rem solid ${colorPrimary}`
  })
}));
const StyledLabel$1 = styled.div({
  display: "none",
  textAlign: "center",
  ...media.from("md").css({
    display: "block"
  })
});
const Step = ({
  label,
  status,
  stepNumber,
  stepIndex
}) => {
  const isStepActive = () => {
    return status > stepIndex || status === stepIndex;
  };
  return /*#__PURE__*/React.createElement(StyledStep, {
    "aria-label": label,
    "aria-current": status === stepIndex ? "true" : "false",
    "data-testid": `singleStepContainer-${stepIndex}`,
    "data-isactive": isStepActive()
  }, /*#__PURE__*/React.createElement(StyledIcon, {
    isStepActive: isStepActive()
  }, status > stepIndex ? /*#__PURE__*/React.createElement(DecorativeIcon, {
    symbol: "checkmark",
    size: 16,
    variant: "inverted"
  }) : /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement(StyledLabel$1, null, /*#__PURE__*/React.createElement(Text, {
    bold: status === stepIndex
  }, stepNumber, ". ", label)));
};
Step.propTypes = {
  label: PropTypes$1.string.isRequired,
  status: PropTypes$1.number.isRequired,
  stepNumber: PropTypes$1.number.isRequired,
  stepIndex: PropTypes$1.number.isRequired
};

const StyledStepBg = styled.div({
  padding: "1rem 0",
  backgroundColor: colorWhite
});
const StyledStepContainer = styled.div({
  display: "flex",
  flexDirection: "row"
});
const StyledMobileLabel = styled.div({
  width: "100%",
  textAlign: "center"
});
const parseStepText = (current, steps, mobileStepLabelTemplate) => {
  return /*#__PURE__*/React.createElement("span", null, mobileStepLabelTemplate.replace("%{current}", current < steps.length ? current + 1 : steps.length).replace("%{total}", steps.length));
};
const getStepLabel = (current, steps) => {
  return current < steps.length ? steps[current] : steps[steps.length - 1];
};
const StepTracker = ({
  current,
  steps,
  copy,
  mobileStepLabelTemplate,
  ...rest
}) => {
  if (mobileStepLabelTemplate && copy === undefined) {
    deprecate("core-step-tracker", "The `mobileStepLabelTemplate` prop, along with its default copy, is deprecated. Please use the `copy` prop. The `copy` prop will be required in the next major release.");
  }
  const stepText = parseStepText(current, steps, getCopy(stepTrackerText, copy).mobileStepLabel || mobileStepLabelTemplate);
  const stepLabel = getStepLabel(current, steps);
  return /*#__PURE__*/React.createElement(StyledStepBg, _extends$2({}, safeRest(rest), {
    "data-testid": "stepTrackerContainer"
  }), /*#__PURE__*/React.createElement(FlexGrid, null, /*#__PURE__*/React.createElement(FlexGrid.Row, null, /*#__PURE__*/React.createElement(FlexGrid.Col, {
    xs: 12
  }, /*#__PURE__*/React.createElement(StyledStepContainer, null, steps.map((label, index) => {
    return /*#__PURE__*/React.createElement(Step, {
      status: current,
      label: label,
      stepNumber: index + 1,
      stepIndex: index,
      key: label,
      "data-testid": `step-${index}`
    });
  })))), /*#__PURE__*/React.createElement(FlexGrid.Row, null, /*#__PURE__*/React.createElement(FlexGrid.Col, {
    xs: 12,
    md: 0
  }, /*#__PURE__*/React.createElement(StyledMobileLabel, null, /*#__PURE__*/React.createElement(Text, {
    "data-testid": "mobileStepLabel"
  }, stepText, " ", stepLabel))))));
};
StepTracker.propTypes = {
  current: PropTypes$1.number.isRequired,
  steps: PropTypes$1.array.isRequired,
  copy: PropTypes$1.oneOfType([PropTypes$1.oneOf(["en", "fr"]), PropTypes$1.shape({
    mobileStepLabel: PropTypes$1.string
  })]),
  mobileStepLabelTemplate: PropTypes$1.string
};
StepTracker.defaultProps = {
  copy: undefined,
  mobileStepLabelTemplate: "Step %{current} of %{total}:"
};

const reset = {
  "html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video": {
    border: 0,
    font: "inherit",
    fontSize: "100%",
    margin: 0,
    padding: 0,
    verticalAlign: "baseline"
  },
  "article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section": {
    display: "block"
  },
  body: {
    lineHeight: 1
  },
  "ol, ul": {
    listStyle: "none"
  },
  "blockquote, q": {
    quotes: "none"
  },
  "blockquote::before, blockquote::after,q::before, q::after": {
    content: "''"
  },
  table: {
    borderCollapse: "collapse",
    borderSpacing: 0
  },
  main: {
    display: "block"
  }
};

const fontFaces = `
/*
 Helvetica Neue Thin 35
*/
@font-face {
  font-family: "Nemeton-Web";
  font-style: normal;
  font-weight: 300;
  font-display: swap;
  src: url("https://cdn.telus.digital/thorium/core/fonts/aff68211-86bb-476d-882e-f7a3face144c.woff2")
      format("woff2"),
    url("https://cdn.telus.digital/thorium/core/fonts/50d35bbc-dfd4-48f1-af16-cf058f69421d.woff")
      format("woff"),
    url("https://cdn.telus.digital/thorium/core/fonts/278bef59-6be1-4800-b5ac-1f769ab47430.ttf")
      format("truetype"),
    url("https://cdn.telus.digital/thorium/core/fonts/56be84de-9d60-4089-8df0-0ea6ec786b84.eot?#iefix")
      format("eot");
}

/*
 Helvetica Neue eText Light 45
*/
@font-face {
  font-family: "Nemeton-Web";
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url("https://cdn.telus.digital/thorium/core/fonts/etext/b8765d4b-d9a3-48b9-ac65-560e7517cf0e.woff2")
      format("woff2"),
    url("https://cdn.telus.digital/thorium/core/fonts/etext/d7d2e6c6-fc3a-41a5-9b52-648e12e215b2.woff")
      format("woff"),
    url("https://cdn.telus.digital/thorium/core/fonts/etext/cb64744b-d0f7-4ef8-a790-b60d6e3e4f21.ttf")
      format("truetype"),
    url("https://cdn.telus.digital/thorium/core/fonts/etext/e0781a75-0ecb-464e-b6e9-85780ddc0921.eot?#iefix")
      format("eot");
}

/*
 Helvetica Neue eText Roman 55
*/
@font-face {
  font-family: "Nemeton-Web";
  font-style: normal;
  font-weight: 500;
  font-display: swap;
  src: url("https://cdn.telus.digital/thorium/core/fonts/etext/dc50c02f-3f77-4e75-b89c-e3f9bb4752e6.woff2")
      format("woff2"),
    url("https://cdn.telus.digital/thorium/core/fonts/etext/ce6f5b38-1cb5-4a27-8182-583aa68b2436.woff")
      format("woff"),
    url("https://cdn.telus.digital/thorium/core/fonts/etext/ff06cde7-e06a-4cf0-af4d-5b2f737bf544.ttf")
      format("truetype"),
    url("https://cdn.telus.digital/thorium/core/fonts/etext/706ec8e5-fe4a-4518-91a6-7aba4d3d333f.eot?#iefix")
      format("eot");
}

/*
 Helvetica Neue eText Medium 65
*/
@font-face {
  font-family: "Nemeton-Web";
  font-style: normal;
  font-weight: 700;
  font-display: swap;
  src: url("https://cdn.telus.digital/thorium/core/fonts/etext/3e8a8b56-3cb0-4347-b670-eaaf06b76e9b.woff2")
      format("woff2"),
    url("https://cdn.telus.digital/thorium/core/fonts/etext/07173950-fa69-4b65-9c71-0cf2ec00b51d.woff")
      format("woff"),
    url("https://cdn.telus.digital/thorium/core/fonts/etext/aac5a4b8-ffd3-4529-a098-21b91bc86f9a.ttf")
      format("truetype"),
    url("https://cdn.telus.digital/thorium/core/fonts/etext/a747e1ea-ecdf-4f3d-ad47-3df9cfbee3cc.eot?#iefix")
      format("eot");
}

/*
 Utility Icons web font
*/
@font-face {
  font-family: "TELUS Core Icons";
  font-style: normal;
  font-weight: normal;
  font-display: swap;
  src: url("https://cdn.telus.digital/thorium/core/v0.4.0/core-icons.woff2")
      format("woff2"),
    url("https://cdn.telus.digital/thorium/core/v0.4.0/core-icons.woff")
      format("woff"),
    url("https://cdn.telus.digital/thorium/core/v0.4.0/core-icons.ttf")
      format("truetype"),
    url("https://cdn.telus.digital/thorium/core/v0.4.0/core-icons.eot?#iefix")
      format("eot");
}
`;

const globals = {
  "*": {
    backgroundRepeat: "no-repeat",
    boxSizing: "border-box",
    // only OS X
    "-moz-osx-font-smoothing": "grayscale",
    // we put this here to overcome webkit bug when doing -webkit-transforms
    "-webkit-font-smoothing": "antialiased",
    textRendering: "optimizeLegibility",
    font: "inherit",
    letterSpacing: "-0.8px",
    "&::before, &::after": {
      boxSizing: "border-box"
    }
  },
  html: {
    ...helveticaNeueLight45,
    fontFamily: fontNemeton,
    fontSize: "100%",
    fontKerning: "normal"
  },
  body: {
    backgroundColor: colorWhite,
    color: colorText,
    lineHeight: "1.5"
  }
};

/* eslint-disable import/prefer-default-export */
const flexMain = {
  "html, body": {
    height: "100%"
  },
  body: {
    display: "flex",
    flexDirection: "column"
  },
  "body > main": {
    flex: "1 0 auto"
  }
};

const fontBase = "https://cdn.telus.digital/thorium/core/fonts/";
const iconFontBase = "https://cdn.telus.digital/thorium/core/v0.4.0/";
const fonts = [`${fontBase}aff68211-86bb-476d-882e-f7a3face144c.woff2?v=20200302`, `${fontBase}50d35bbc-dfd4-48f1-af16-cf058f69421d.woff?v=20200302`, `${fontBase}278bef59-6be1-4800-b5ac-1f769ab47430.ttf`, `${fontBase}56be84de-9d60-4089-8df0-0ea6ec786b84.eot?#iefix`, `${fontBase}etext/b8765d4b-d9a3-48b9-ac65-560e7517cf0e.woff2?v=20200302`, `${fontBase}etext/d7d2e6c6-fc3a-41a5-9b52-648e12e215b2.woff?v=20200302`, `${fontBase}etext/cb64744b-d0f7-4ef8-a790-b60d6e3e4f21.ttf`, `${fontBase}etext/e0781a75-0ecb-464e-b6e9-85780ddc0921.eot?#iefix`, `${fontBase}etext/dc50c02f-3f77-4e75-b89c-e3f9bb4752e6.woff2?v=20200302`, `${fontBase}etext/ce6f5b38-1cb5-4a27-8182-583aa68b2436.woff?v=20200302`, `${fontBase}etext/ff06cde7-e06a-4cf0-af4d-5b2f737bf544.ttf`, `${fontBase}etext/706ec8e5-fe4a-4518-91a6-7aba4d3d333f.eot?#iefix`, `${fontBase}etext/3e8a8b56-3cb0-4347-b670-eaaf06b76e9b.woff2?v=20200302`, `${fontBase}etext/07173950-fa69-4b65-9c71-0cf2ec00b51d.woff?v=20200302`, `${fontBase}etext/aac5a4b8-ffd3-4529-a098-21b91bc86f9a.ttf`, `${fontBase}etext/a747e1ea-ecdf-4f3d-ad47-3df9cfbee3cc.eot?#iefix`, `${iconFontBase}core-icons.woff2?v=20200302`, `${iconFontBase}core-icons.woff?v=20200302`, `${iconFontBase}core-icons.ttf`, `${iconFontBase}core-icons.eot?#iefix`];

const Reset = createGlobalStyle(reset, fontFaces, globals);
const GlobalFlexMain = createGlobalStyle(flexMain);

const StyledLabel = styled.label({
  display: "flex",
  justifyContent: "space-between"
});
StyledLabel.displayName = "StyledLabel";

/**
 * Button background should only turn green when the `checked` prop is `true`
 */

const Button = styled.button(props => ({
  appearance: "none",
  background: "none",
  boxShadow: "none",
  position: "relative",
  border: "none",
  padding: "0",
  width: "2.5rem",
  height: "1.5rem",
  borderRadius: "1.5rem",
  backgroundColor: props["aria-checked"] ? colorAccessibleGreen : colorGainsboro,
  "&:focus": {
    // this is explicitly defined as 'solid' for IE11 compatibility
    outlineStyle: props.isLoading ? "none" : "solid",
    outlineColor: "rgb(59, 153, 252)",
    outlineWidth: "0.3125rem"
  },
  "&:focus::-moz-focus-inner": {
    border: 0
  }
}));
const Slider = styled.span(props => ({
  position: "absolute",
  width: "1.125rem",
  height: "1.125rem",
  top: "0.1875rem",
  left: props.pressed ? "1.25rem" : "0.1875rem",
  borderRadius: "1.125rem",
  backgroundColor: "white",
  transition: "left 0.25s",
  boxShadow: "0 0 2px 0 #000",
  "@media (prefers-reduced-motion: reduce)": {
    transition: "none !important"
  }
}));
const InputSwitchWrapper = styled.div({
  display: "flex",
  justifyContent: "center"
});

const ToggleSwitch = /*#__PURE__*/React.forwardRef(({
  id,
  label,
  tooltipText,
  checked,
  onClick,
  tooltipCopy,
  spinnerLabel,
  isLoading,
  ...rest
}, ref) => {
  if (tooltipText && !tooltipCopy) {
    warn("@nds-core/toggle-switch", "You must provide tooltipCopy when using tooltipText");
  }
  if (isLoading && !spinnerLabel) {
    warn("@nds-core/toggle-switch", "You must provide spinnerLabel when using isLoading");
  }
  const labelledById = `${id}-label`;
  const buttonRef = reactExports.useRef();

  // Internal state to manage visual appearance of toggle while the user supplies the true checked status
  const [_isChecked, _setIsChecked] = reactExports.useState(checked);
  reactExports.useEffect(() => {
    if (_setIsChecked) {
      _setIsChecked(checked);
    }
  }, [checked]);
  const _onClick = event => {
    _setIsChecked(!_isChecked);
    if (matchMedia("(prefers-reduced-motion: reduce)").matches) {
      onClick(event);
    } else {
      setTimeout(() => {
        onClick(event);
      }, 250);
    }
  };

  /* The purpose of this hook is to allow the parent
  to focus on the ToggleSwitch at will by forwarding
  a ref to parent and exposing ONLY a single `focus` method
  */
  reactExports.useImperativeHandle(ref, () => ({
    focus: () => {
      buttonRef.current.focus();
    }
  }));
  const handleTooltipClick = event => {
    event.preventDefault();
  };
  return /*#__PURE__*/React.createElement(StyledLabel, {
    htmlFor: id
  }, /*#__PURE__*/React.createElement(Box, {
    inline: true,
    between: 2
  }, /*#__PURE__*/React.createElement(Text, {
    id: labelledById,
    size: "medium"
  }, label), tooltipText && tooltipCopy && /*#__PURE__*/React.createElement(Tooltip, {
    onClick: handleTooltipClick,
    copy: tooltipCopy
  }, tooltipText)), /*#__PURE__*/React.createElement(InputSwitchWrapper, null, /*#__PURE__*/React.createElement(Spinner, {
    tag: "span",
    spinning: isLoading,
    label: spinnerLabel,
    size: "small",
    inline: true
  }, /*#__PURE__*/React.createElement(Button, _extends$2({}, safeRest(rest), {
    id: id,
    role: "switch",
    "aria-checked": checked,
    "aria-labelledby": labelledById,
    "data-testid": `${id}-switch`,
    onClick: !isLoading ? _onClick : null,
    ref: buttonRef
  }), /*#__PURE__*/React.createElement(Slider, {
    pressed: _isChecked
  })))));
});
ToggleSwitch.displayName = "ToggleSwitch";
ToggleSwitch.propTypes = {
  id: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]).isRequired,
  label: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.node]).isRequired,
  checked: PropTypes$1.bool,
  tooltipText: PropTypes$1.string,
  tooltipCopy: PropTypes$1.string,
  spinnerLabel: PropTypes$1.string,
  onClick: PropTypes$1.func.isRequired,
  isLoading: PropTypes$1.bool
};
ToggleSwitch.defaultProps = {
  checked: false,
  tooltipText: undefined,
  tooltipCopy: undefined,
  spinnerLabel: "toggle",
  isLoading: false
};

var Tabs$2 = {};

var propTypes = {};

var childrenDeepMap = {};

var elementTypes = {};

elementTypes.__esModule = true;
elementTypes.isTabPanel = elementTypes.isTabList = elementTypes.isTab = void 0;

function makeTypeChecker(tabsRole) {
  return function (element) {
    return !!element.type && element.type.tabsRole === tabsRole;
  };
}

var isTab = makeTypeChecker('Tab');
elementTypes.isTab = isTab;
var isTabList = makeTypeChecker('TabList');
elementTypes.isTabList = isTabList;
var isTabPanel = makeTypeChecker('TabPanel');
elementTypes.isTabPanel = isTabPanel;

childrenDeepMap.__esModule = true;
childrenDeepMap.deepForEach = deepForEach;
childrenDeepMap.deepMap = deepMap;

var _react = reactExports;

var _elementTypes$2 = elementTypes;

function _extends$1() { _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }

function isTabChild(child) {
  return (0, _elementTypes$2.isTab)(child) || (0, _elementTypes$2.isTabList)(child) || (0, _elementTypes$2.isTabPanel)(child);
}

function deepMap(children, callback) {
  return _react.Children.map(children, function (child) {
    // null happens when conditionally rendering TabPanel/Tab
    // see https://github.com/reactjs/react-tabs/issues/37
    if (child === null) return null;

    if (isTabChild(child)) {
      return callback(child);
    }

    if (child.props && child.props.children && typeof child.props.children === 'object') {
      // Clone the child that has children and map them too
      return /*#__PURE__*/(0, _react.cloneElement)(child, _extends$1({}, child.props, {
        children: deepMap(child.props.children, callback)
      }));
    }

    return child;
  });
}

function deepForEach(children, callback) {
  return _react.Children.forEach(children, function (child) {
    // null happens when conditionally rendering TabPanel/Tab
    // see https://github.com/reactjs/react-tabs/issues/37
    if (child === null) return;

    if ((0, _elementTypes$2.isTab)(child) || (0, _elementTypes$2.isTabPanel)(child)) {
      callback(child);
    } else if (child.props && child.props.children && typeof child.props.children === 'object') {
      if ((0, _elementTypes$2.isTabList)(child)) callback(child);
      deepForEach(child.props.children, callback);
    }
  });
}

propTypes.__esModule = true;
propTypes.childrenPropType = childrenPropType;
propTypes.onSelectPropType = onSelectPropType;
propTypes.selectedIndexPropType = selectedIndexPropType;

var _childrenDeepMap$1 = childrenDeepMap;

var _elementTypes$1 = elementTypes;

function childrenPropType(props, propName, componentName) {
  var error;
  var tabsCount = 0;
  var panelsCount = 0;
  var tabListFound = false;
  var listTabs = [];
  var children = props[propName];
  (0, _childrenDeepMap$1.deepForEach)(children, function (child) {
    if ((0, _elementTypes$1.isTabList)(child)) {
      if (child.props && child.props.children && typeof child.props.children === 'object') {
        (0, _childrenDeepMap$1.deepForEach)(child.props.children, function (listChild) {
          return listTabs.push(listChild);
        });
      }

      if (tabListFound) {
        error = new Error("Found multiple 'TabList' components inside 'Tabs'. Only one is allowed.");
      }

      tabListFound = true;
    }

    if ((0, _elementTypes$1.isTab)(child)) {
      if (!tabListFound || listTabs.indexOf(child) === -1) {
        error = new Error("Found a 'Tab' component outside of the 'TabList' component. 'Tab' components " + "have to be inside the 'TabList' component.");
      }

      tabsCount++;
    } else if ((0, _elementTypes$1.isTabPanel)(child)) {
      panelsCount++;
    }
  });

  if (!error && tabsCount !== panelsCount) {
    error = new Error("There should be an equal number of 'Tab' and 'TabPanel' in `" + componentName + "`. " + ("Received " + tabsCount + " 'Tab' and " + panelsCount + " 'TabPanel'."));
  }

  return error;
}

function onSelectPropType(props, propName, componentName, location, propFullName) {
  var prop = props[propName];
  var name = propFullName || propName;
  var error = null;

  if (prop && typeof prop !== 'function') {
    error = new Error("Invalid " + location + " `" + name + "` of type `" + typeof prop + "` supplied " + ("to `" + componentName + "`, expected `function`."));
  } else if (props.selectedIndex != null && prop == null) {
    error = new Error("The " + location + " `" + name + "` is marked as required in `" + componentName + "`, but " + "its value is `undefined` or `null`.\n" + "`onSelect` is required when `selectedIndex` is also set. Not doing so will " + "make the tabs not do anything, as `selectedIndex` indicates that you want to " + "handle the selected tab yourself.\n" + "If you only want to set the inital tab replace `selectedIndex` with `defaultIndex`.");
  }

  return error;
}

function selectedIndexPropType(props, propName, componentName, location, propFullName) {
  var prop = props[propName];
  var name = propFullName || propName;
  var error = null;

  if (prop != null && typeof prop !== 'number') {
    error = new Error("Invalid " + location + " `" + name + "` of type `" + typeof prop + "` supplied to " + ("`" + componentName + "`, expected `number`."));
  } else if (props.defaultIndex != null && prop != null) {
    return new Error("The " + location + " `" + name + "` cannot be used together with `defaultIndex` " + ("in `" + componentName + "`.\n") + ("Either remove `" + name + "` to let `" + componentName + "` handle the selected ") + "tab internally or remove `defaultIndex` to handle it yourself.");
  }

  return error;
}

var UncontrolledTabs = {};

var clsx = {exports: {}};

function e(r){var o,t,f="";if("string"==typeof r||"number"==typeof r)f+=r;else if("object"==typeof r)if(Array.isArray(r))for(o=0;o<r.length;o++)r[o]&&(t=e(r[o]))&&(f&&(f+=" "),f+=t);else for(o in r)r[o]&&(f&&(f+=" "),f+=o);return f}function r(){for(var r,o,t=0,f="";t<arguments.length;)(r=arguments[t++])&&(o=e(r))&&(f&&(f+=" "),f+=o);return f}clsx.exports=r,clsx.exports.clsx=r;

var clsxExports = clsx.exports;

var uuid = {};

(function (exports) {

	exports.__esModule = true;
	exports["default"] = uuid;
	exports.reset = reset;
	// Get a universally unique identifier
	var count = 0;

	function uuid() {
	  return "react-tabs-" + count++;
	}

	function reset() {
	  count = 0;
	} 
} (uuid));

var count = {};

count.__esModule = true;
count.getTabsCount = getTabsCount;

var _childrenDeepMap = childrenDeepMap;

var _elementTypes = elementTypes;

function getTabsCount(children) {
  var tabCount = 0;
  (0, _childrenDeepMap.deepForEach)(children, function (child) {
    if ((0, _elementTypes.isTab)(child)) tabCount++;
  });
  return tabCount;
}

(function (exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _propTypes = _interopRequireDefault(PropTypes$1);

	var _react = _interopRequireWildcard(reactExports);

	var _clsx = _interopRequireDefault(clsxExports);

	var _uuid = _interopRequireDefault(uuid);

	var _propTypes2 = propTypes;

	var _count = count;

	var _childrenDeepMap = childrenDeepMap;

	var _elementTypes = elementTypes;

	var _excluded = ["children", "className", "disabledTabClassName", "domRef", "focus", "forceRenderTabPanel", "onSelect", "selectedIndex", "selectedTabClassName", "selectedTabPanelClassName", "environment", "disableUpDownKeys"];

	function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function isNode(node) {
	  return node && 'getAttribute' in node;
	} // Determine if a node from event.target is a Tab element


	function isTabNode(node) {
	  return isNode(node) && node.getAttribute('data-rttab');
	} // Determine if a tab node is disabled


	function isTabDisabled(node) {
	  return isNode(node) && node.getAttribute('aria-disabled') === 'true';
	}

	var canUseActiveElement;

	function determineCanUseActiveElement(environment) {
	  var env = environment || (typeof window !== 'undefined' ? window : undefined);

	  try {
	    canUseActiveElement = !!(typeof env !== 'undefined' && env.document && env.document.activeElement);
	  } catch (e) {
	    // Work around for IE bug when accessing document.activeElement in an iframe
	    // Refer to the following resources:
	    // http://stackoverflow.com/a/10982960/369687
	    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12733599
	    // istanbul ignore next
	    canUseActiveElement = false;
	  }
	}

	var defaultProps = {
	  className: 'react-tabs',
	  focus: false
	};
	var propTypes$1 = process.env.NODE_ENV !== "production" ? {
	  children: _propTypes2.childrenPropType,
	  direction: _propTypes["default"].oneOf(['rtl', 'ltr']),
	  className: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].array, _propTypes["default"].object]),
	  disabledTabClassName: _propTypes["default"].string,
	  disableUpDownKeys: _propTypes["default"].bool,
	  domRef: _propTypes["default"].func,
	  focus: _propTypes["default"].bool,
	  forceRenderTabPanel: _propTypes["default"].bool,
	  onSelect: _propTypes["default"].func.isRequired,
	  selectedIndex: _propTypes["default"].number.isRequired,
	  selectedTabClassName: _propTypes["default"].string,
	  selectedTabPanelClassName: _propTypes["default"].string,
	  environment: _propTypes["default"].object
	} : {};

	var UncontrolledTabs = function UncontrolledTabs(props) {
	  var tabNodes = (0, _react.useRef)([]);
	  var tabIds = (0, _react.useRef)([]);
	  var panelIds = (0, _react.useRef)([]);

	  var _ref = (0, _react.useRef)();

	  function setSelected(index, event) {
	    // Check index boundary
	    if (index < 0 || index >= getTabsCount()) return;
	    var onSelect = props.onSelect,
	        selectedIndex = props.selectedIndex; // Call change event handler

	    onSelect(index, selectedIndex, event);
	  }

	  function getNextTab(index) {
	    var count = getTabsCount(); // Look for non-disabled tab from index to the last tab on the right

	    for (var i = index + 1; i < count; i++) {
	      if (!isTabDisabled(getTab(i))) {
	        return i;
	      }
	    } // If no tab found, continue searching from first on left to index


	    for (var _i = 0; _i < index; _i++) {
	      if (!isTabDisabled(getTab(_i))) {
	        return _i;
	      }
	    } // All tabs are disabled, return index

	    /* istanbul ignore next */


	    return index;
	  }

	  function getPrevTab(index) {
	    var i = index; // Look for non-disabled tab from index to first tab on the left

	    while (i--) {
	      if (!isTabDisabled(getTab(i))) {
	        return i;
	      }
	    } // If no tab found, continue searching from last tab on right to index


	    i = getTabsCount();

	    while (i-- > index) {
	      if (!isTabDisabled(getTab(i))) {
	        return i;
	      }
	    } // All tabs are disabled, return index

	    /* istanbul ignore next */


	    return index;
	  }

	  function getFirstTab() {
	    var count = getTabsCount(); // Look for non disabled tab from the first tab

	    for (var i = 0; i < count; i++) {
	      if (!isTabDisabled(getTab(i))) {
	        return i;
	      }
	    }
	    /* istanbul ignore next */


	    return null;
	  }

	  function getLastTab() {
	    var i = getTabsCount(); // Look for non disabled tab from the last tab

	    while (i--) {
	      if (!isTabDisabled(getTab(i))) {
	        return i;
	      }
	    }
	    /* istanbul ignore next */


	    return null;
	  }

	  function getTabsCount() {
	    var children = props.children;
	    return (0, _count.getTabsCount)(children);
	  }

	  function getTab(index) {
	    return tabNodes.current["tabs-" + index];
	  }

	  function getChildren() {
	    var index = 0;
	    var children = props.children,
	        disabledTabClassName = props.disabledTabClassName,
	        focus = props.focus,
	        forceRenderTabPanel = props.forceRenderTabPanel,
	        selectedIndex = props.selectedIndex,
	        selectedTabClassName = props.selectedTabClassName,
	        selectedTabPanelClassName = props.selectedTabPanelClassName,
	        environment = props.environment;
	    tabIds.current = tabIds.current || [];
	    panelIds.current = panelIds.current || [];
	    var diff = tabIds.current.length - getTabsCount(); // Add ids if new tabs have been added
	    // Don't bother removing ids, just keep them in case they are added again
	    // This is more efficient, and keeps the uuid counter under control

	    while (diff++ < 0) {
	      tabIds.current.push((0, _uuid["default"])());
	      panelIds.current.push((0, _uuid["default"])());
	    } // Map children to dynamically setup refs


	    return (0, _childrenDeepMap.deepMap)(children, function (child) {
	      var result = child; // Clone TabList and Tab components to have refs

	      if ((0, _elementTypes.isTabList)(child)) {
	        var listIndex = 0; // Figure out if the current focus in the DOM is set on a Tab
	        // If it is we should keep the focus on the next selected tab

	        var wasTabFocused = false;

	        if (canUseActiveElement == null) {
	          determineCanUseActiveElement(environment);
	        }

	        var env = environment || (typeof window !== 'undefined' ? window : undefined);

	        if (canUseActiveElement && env) {
	          wasTabFocused = _react["default"].Children.toArray(child.props.children).filter(_elementTypes.isTab).some(function (tab, i) {
	            return env.document.activeElement === getTab(i);
	          });
	        }

	        result = /*#__PURE__*/(0, _react.cloneElement)(child, {
	          children: (0, _childrenDeepMap.deepMap)(child.props.children, function (tab) {
	            var key = "tabs-" + listIndex;
	            var selected = selectedIndex === listIndex;
	            var props = {
	              tabRef: function tabRef(node) {
	                tabNodes.current[key] = node;
	              },
	              id: tabIds.current[listIndex],
	              panelId: panelIds.current[listIndex],
	              selected: selected,
	              focus: selected && (focus || wasTabFocused)
	            };
	            if (selectedTabClassName) props.selectedClassName = selectedTabClassName;
	            if (disabledTabClassName) props.disabledClassName = disabledTabClassName;
	            listIndex++;
	            return /*#__PURE__*/(0, _react.cloneElement)(tab, props);
	          })
	        });
	      } else if ((0, _elementTypes.isTabPanel)(child)) {
	        var _props = {
	          id: panelIds.current[index],
	          tabId: tabIds.current[index],
	          selected: selectedIndex === index
	        };
	        if (forceRenderTabPanel) _props.forceRender = forceRenderTabPanel;
	        if (selectedTabPanelClassName) _props.selectedClassName = selectedTabPanelClassName;
	        index++;
	        result = /*#__PURE__*/(0, _react.cloneElement)(child, _props);
	      }

	      return result;
	    });
	  }

	  function handleKeyDown(e) {
	    var direction = props.direction,
	        disableUpDownKeys = props.disableUpDownKeys;

	    if (isTabFromContainer(e.target)) {
	      var index = props.selectedIndex;
	      var preventDefault = false;
	      var useSelectedIndex = false;

	      if (e.code === 'Space' || e.keyCode === 32
	      /* space */
	      || e.code === 'Enter' || e.keyCode === 13
	      /* enter */
	      ) {
	        preventDefault = true;
	        useSelectedIndex = false;
	        handleClick(e);
	      } // keyCode is deprecated and only used here for IE


	      if (e.code === 'ArrowLeft' || e.keyCode === 37
	      /* arrow left */
	      || !disableUpDownKeys && (e.keyCode === 38 || e.code === 'ArrowUp')
	      /* arrow up */
	      ) {
	        // Select next tab to the left, validate if up arrow is not disabled
	        if (direction === 'rtl') {
	          index = getNextTab(index);
	        } else {
	          index = getPrevTab(index);
	        }

	        preventDefault = true;
	        useSelectedIndex = true;
	      } else if (e.code === 'ArrowRight' || e.keyCode === 39
	      /* arrow right */
	      || !disableUpDownKeys && (e.keyCode === 40 || e.code === 'ArrowDown')
	      /* arrow down */
	      ) {
	        // Select next tab to the right, validate if down arrow is not disabled
	        if (direction === 'rtl') {
	          index = getPrevTab(index);
	        } else {
	          index = getNextTab(index);
	        }

	        preventDefault = true;
	        useSelectedIndex = true;
	      } else if (e.keyCode === 35 || e.code === 'End') {
	        // Select last tab (End key)
	        index = getLastTab();
	        preventDefault = true;
	        useSelectedIndex = true;
	      } else if (e.keyCode === 36 || e.code === 'Home') {
	        // Select first tab (Home key)
	        index = getFirstTab();
	        preventDefault = true;
	        useSelectedIndex = true;
	      } // This prevents scrollbars from moving around


	      if (preventDefault) {
	        e.preventDefault();
	      } // Only use the selected index in the state if we're not using the tabbed index


	      if (useSelectedIndex) {
	        setSelected(index, e);
	      }
	    }
	  }

	  function handleClick(e) {
	    var node = e.target;

	    do {
	      if (isTabFromContainer(node)) {
	        if (isTabDisabled(node)) {
	          return;
	        }

	        var index = [].slice.call(node.parentNode.children).filter(isTabNode).indexOf(node);
	        setSelected(index, e);
	        return;
	      }
	    } while ((node = node.parentNode) != null);
	  }
	  /**
	   * Determine if a node from event.target is a Tab element for the current Tabs container.
	   * If the clicked element is not a Tab, it returns false.
	   * If it finds another Tabs container between the Tab and `this`, it returns false.
	   */


	  function isTabFromContainer(node) {
	    // return immediately if the clicked element is not a Tab.
	    if (!isTabNode(node)) {
	      return false;
	    } // Check if the first occurrence of a Tabs container is `this` one.


	    var nodeAncestor = node.parentElement;

	    do {
	      if (nodeAncestor === _ref.current) return true;
	      if (nodeAncestor.getAttribute('data-rttabs')) break;
	      nodeAncestor = nodeAncestor.parentElement;
	    } while (nodeAncestor);

	    return false;
	  }

	  props.children;
	      var className = props.className;
	      props.disabledTabClassName;
	      var domRef = props.domRef;
	      props.focus;
	      props.forceRenderTabPanel;
	      props.onSelect;
	      props.selectedIndex;
	      props.selectedTabClassName;
	      props.selectedTabPanelClassName;
	      props.environment;
	      props.disableUpDownKeys;
	      var attributes = _objectWithoutPropertiesLoose(props, _excluded);

	  return /*#__PURE__*/_react["default"].createElement("div", _extends({}, attributes, {
	    className: (0, _clsx["default"])(className),
	    onClick: handleClick,
	    onKeyDown: handleKeyDown,
	    ref: function ref(node) {
	      _ref.current = node;
	      if (domRef) domRef(node);
	    },
	    "data-rttabs": true
	  }), getChildren());
	};

	UncontrolledTabs.defaultProps = defaultProps;
	UncontrolledTabs.propTypes = process.env.NODE_ENV !== "production" ? propTypes$1 : {};
	var _default = UncontrolledTabs;
	exports["default"] = _default; 
} (UncontrolledTabs));

(function (exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _propTypes = _interopRequireDefault(PropTypes$1);

	var _react = _interopRequireWildcard(reactExports);

	var _propTypes2 = propTypes;

	var _UncontrolledTabs = _interopRequireDefault(UncontrolledTabs);

	var _count = count;

	function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	var MODE_CONTROLLED = 0;
	var MODE_UNCONTROLLED = 1;
	var propTypes$1 = process.env.NODE_ENV !== "production" ? {
	  children: _propTypes2.childrenPropType,
	  className: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].array, _propTypes["default"].object]),
	  defaultFocus: _propTypes["default"].bool,
	  defaultIndex: _propTypes["default"].number,
	  direction: _propTypes["default"].oneOf(['rtl', 'ltr']),
	  disabledTabClassName: _propTypes["default"].string,
	  disableUpDownKeys: _propTypes["default"].bool,
	  domRef: _propTypes["default"].func,
	  environment: _propTypes["default"].object,
	  focusTabOnClick: _propTypes["default"].bool,
	  forceRenderTabPanel: _propTypes["default"].bool,
	  onSelect: _propTypes2.onSelectPropType,
	  selectedIndex: _propTypes2.selectedIndexPropType,
	  selectedTabClassName: _propTypes["default"].string,
	  selectedTabPanelClassName: _propTypes["default"].string
	} : {};
	var defaultProps = {
	  defaultFocus: false,
	  focusTabOnClick: true,
	  forceRenderTabPanel: false,
	  selectedIndex: null,
	  defaultIndex: null,
	  environment: null,
	  disableUpDownKeys: false
	};

	var getModeFromProps = function getModeFromProps(props) {
	  return props.selectedIndex === null ? MODE_UNCONTROLLED : MODE_CONTROLLED;
	};

	var checkForIllegalModeChange = function checkForIllegalModeChange(props, mode) {
	  if (process.env.NODE_ENV !== 'production' && mode != undefined && mode !== getModeFromProps(props)) {
	    throw new Error("Switching between controlled mode (by using `selectedIndex`) and uncontrolled mode is not supported in `Tabs`.\nFor more information about controlled and uncontrolled mode of react-tabs see https://github.com/reactjs/react-tabs#controlled-vs-uncontrolled-mode.");
	  }
	};
	/**
	 * State:
	 *   mode: Initialized only once from props and never changes
	 *   selectedIndex: null if controlled mode, otherwise initialized with prop defaultIndex, changed on selection of tabs, has effect to ensure it never gets out of bound
	 *   focus: Because we never remove focus from the Tabs this state is only used to indicate that we should focus the current tab.
	 *          It is initialized from the prop defaultFocus, and after the first render it is reset back to false. Later it can become true again when using keys to navigate the tabs.
	 */


	var Tabs = function Tabs(props) {
	  var children = props.children,
	      defaultFocus = props.defaultFocus,
	      defaultIndex = props.defaultIndex,
	      focusTabOnClick = props.focusTabOnClick,
	      onSelect = props.onSelect;

	  var _useState = (0, _react.useState)(defaultFocus),
	      focus = _useState[0],
	      setFocus = _useState[1];

	  var _useState2 = (0, _react.useState)(getModeFromProps(props)),
	      mode = _useState2[0];

	  var _useState3 = (0, _react.useState)(mode === MODE_UNCONTROLLED ? defaultIndex || 0 : null),
	      selectedIndex = _useState3[0],
	      setSelectedIndex = _useState3[1];

	  (0, _react.useEffect)(function () {
	    // Reset focus after initial render, see comment above
	    setFocus(false);
	  }, []);

	  if (mode === MODE_UNCONTROLLED) {
	    // Ensure that we handle removed tabs and don't let selectedIndex get out of bounds
	    var tabsCount = (0, _count.getTabsCount)(children);
	    (0, _react.useEffect)(function () {
	      if (selectedIndex != null) {
	        var maxTabIndex = Math.max(0, tabsCount - 1);
	        setSelectedIndex(Math.min(selectedIndex, maxTabIndex));
	      }
	    }, [tabsCount]);
	  }

	  checkForIllegalModeChange(props, mode);

	  var handleSelected = function handleSelected(index, last, event) {
	    // Call change event handler
	    if (typeof onSelect === 'function') {
	      // Check if the change event handler cancels the tab change
	      if (onSelect(index, last, event) === false) return;
	    } // Always set focus on tabs unless it is disabled


	    if (focusTabOnClick) {
	      setFocus(true);
	    }

	    if (mode === MODE_UNCONTROLLED) {
	      // Update selected index
	      setSelectedIndex(index);
	    }
	  };

	  var subProps = _extends({}, props);

	  subProps.focus = focus;
	  subProps.onSelect = handleSelected;

	  if (selectedIndex != null) {
	    subProps.selectedIndex = selectedIndex;
	  }

	  delete subProps.defaultFocus;
	  delete subProps.defaultIndex;
	  delete subProps.focusTabOnClick;
	  return /*#__PURE__*/_react["default"].createElement(_UncontrolledTabs["default"], subProps, children);
	};

	Tabs.propTypes = process.env.NODE_ENV !== "production" ? propTypes$1 : {};
	Tabs.defaultProps = defaultProps;
	Tabs.tabsRole = 'Tabs';
	var _default = Tabs;
	exports["default"] = _default; 
} (Tabs$2));

var TabList$1 = {};

(function (exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _propTypes = _interopRequireDefault(PropTypes$1);

	var _react = _interopRequireDefault(reactExports);

	var _clsx = _interopRequireDefault(clsxExports);

	var _excluded = ["children", "className"];

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	var defaultProps = {
	  className: 'react-tabs__tab-list'
	};
	var propTypes = process.env.NODE_ENV !== "production" ? {
	  children: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].array]),
	  className: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].array, _propTypes["default"].object])
	} : {};

	var TabList = function TabList(props) {
	  var children = props.children,
	      className = props.className,
	      attributes = _objectWithoutPropertiesLoose(props, _excluded);

	  return /*#__PURE__*/_react["default"].createElement("ul", _extends({}, attributes, {
	    className: (0, _clsx["default"])(className),
	    role: "tablist"
	  }), children);
	};

	TabList.tabsRole = 'TabList';
	TabList.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
	TabList.defaultProps = defaultProps;
	var _default = TabList;
	exports["default"] = _default; 
} (TabList$1));

var Tab$1 = {};

(function (exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _propTypes = _interopRequireDefault(PropTypes$1);

	var _react = _interopRequireWildcard(reactExports);

	var _clsx = _interopRequireDefault(clsxExports);

	var _excluded = ["children", "className", "disabled", "disabledClassName", "focus", "id", "panelId", "selected", "selectedClassName", "tabIndex", "tabRef"];

	function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	var DEFAULT_CLASS = 'react-tabs__tab';
	var DEFAULT_PROPS = {
	  className: DEFAULT_CLASS,
	  disabledClassName: DEFAULT_CLASS + "--disabled",
	  focus: false,
	  id: null,
	  panelId: null,
	  selected: false,
	  selectedClassName: DEFAULT_CLASS + "--selected"
	};
	var propTypes = process.env.NODE_ENV !== "production" ? {
	  children: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].object, _propTypes["default"].string]),
	  className: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].array, _propTypes["default"].object]),
	  disabled: _propTypes["default"].bool,
	  disabledClassName: _propTypes["default"].string,
	  focus: _propTypes["default"].bool,
	  // private
	  id: _propTypes["default"].string,
	  // private
	  panelId: _propTypes["default"].string,
	  // private
	  selected: _propTypes["default"].bool,
	  // private
	  selectedClassName: _propTypes["default"].string,
	  tabIndex: _propTypes["default"].string,
	  tabRef: _propTypes["default"].func // private

	} : {};

	var Tab = function Tab(props) {
	  var _cx;

	  var nodeRef = (0, _react.useRef)();

	  var children = props.children,
	      className = props.className,
	      disabled = props.disabled,
	      disabledClassName = props.disabledClassName,
	      focus = props.focus,
	      id = props.id,
	      panelId = props.panelId,
	      selected = props.selected,
	      selectedClassName = props.selectedClassName,
	      tabIndex = props.tabIndex,
	      tabRef = props.tabRef,
	      attributes = _objectWithoutPropertiesLoose(props, _excluded);

	  (0, _react.useEffect)(function () {
	    if (selected && focus) {
	      nodeRef.current.focus();
	    }
	  }, [selected, focus]);
	  return /*#__PURE__*/_react["default"].createElement("li", _extends({}, attributes, {
	    className: (0, _clsx["default"])(className, (_cx = {}, _cx[selectedClassName] = selected, _cx[disabledClassName] = disabled, _cx)),
	    ref: function ref(node) {
	      nodeRef.current = node;
	      if (tabRef) tabRef(node);
	    },
	    role: "tab",
	    id: id,
	    "aria-selected": selected ? 'true' : 'false',
	    "aria-disabled": disabled ? 'true' : 'false',
	    "aria-controls": panelId,
	    tabIndex: tabIndex || (selected ? '0' : null),
	    "data-rttab": true
	  }), children);
	};

	Tab.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
	Tab.tabsRole = 'Tab';
	Tab.defaultProps = DEFAULT_PROPS;
	var _default = Tab;
	exports["default"] = _default; 
} (Tab$1));

var TabPanel$1 = {};

(function (exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _propTypes = _interopRequireDefault(PropTypes$1);

	var _react = _interopRequireDefault(reactExports);

	var _clsx = _interopRequireDefault(clsxExports);

	var _excluded = ["children", "className", "forceRender", "id", "selected", "selectedClassName", "tabId"];

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	var DEFAULT_CLASS = 'react-tabs__tab-panel';
	var defaultProps = {
	  className: DEFAULT_CLASS,
	  forceRender: false,
	  selectedClassName: DEFAULT_CLASS + "--selected"
	};
	var propTypes = process.env.NODE_ENV !== "production" ? {
	  children: _propTypes["default"].node,
	  className: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].array, _propTypes["default"].object]),
	  forceRender: _propTypes["default"].bool,
	  id: _propTypes["default"].string,
	  // private
	  selected: _propTypes["default"].bool,
	  // private
	  selectedClassName: _propTypes["default"].string,
	  tabId: _propTypes["default"].string // private

	} : {};

	var TabPanel = function TabPanel(props) {
	  var _cx;

	  var children = props.children,
	      className = props.className,
	      forceRender = props.forceRender,
	      id = props.id,
	      selected = props.selected,
	      selectedClassName = props.selectedClassName,
	      tabId = props.tabId,
	      attributes = _objectWithoutPropertiesLoose(props, _excluded);

	  return /*#__PURE__*/_react["default"].createElement("div", _extends({}, attributes, {
	    className: (0, _clsx["default"])(className, (_cx = {}, _cx[selectedClassName] = selected, _cx)),
	    role: "tabpanel",
	    id: id,
	    "aria-labelledby": tabId
	  }), forceRender || selected ? children : null);
	};

	TabPanel.tabsRole = 'TabPanel';
	TabPanel.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
	TabPanel.defaultProps = defaultProps;
	var _default = TabPanel;
	exports["default"] = _default; 
} (TabPanel$1));

Tabs$1 = TabPanel = TabList = Tab = void 0;

var _Tabs = _interopRequireDefault$1(Tabs$2);

var Tabs$1 = _Tabs["default"];

var _TabList = _interopRequireDefault$1(TabList$1);

var TabList = _TabList["default"];

var _Tab = _interopRequireDefault$1(Tab$1);

var Tab = _Tab["default"];

var _TabPanel = _interopRequireDefault$1(TabPanel$1);

var TabPanel = _TabPanel["default"];

var _uuid = uuid;

_uuid.reset;

function _interopRequireDefault$1(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

const TabsContainer = styled.div`
  padding-top: 6px;
  > div {
    position: relative;
  }
  .react-tabs__tab-list {
    padding: 2px 0 0 0;
  }
  .react-tabs__tab {
    display: inline-flex;
    cursor: pointer;
    margin: 0 2px;
    @media (min-width: 768px) {
      margin: 0 6px;
    }
    min-height: 45px;
    min-width: 44px;
    text-align: center;
    position: relative;

    &:active,
    &.react-tabs__tab--selected {
      h4 {
        text-shadow: 0px 0px 1px ${colorGreyShark};
      }
    }
    &:focus {
      outline: none;
    }
  }

  .react-tabs__tab-panel {
    display: none;

    &.react-tabs__tab-panel--selected {
      display: block;
      margin-top: 0;
    }
  }

  ${props => props.wrapLabels && css`
      .react-tabs__tab-list {
        display: flex;
        position: relative;
      }

      .react-tabs__tab {
        flex: 0 0 auto;
        display: flex;
        white-space: initial;
      }
    `}
`;
const TabBorder = styled.div`
  overflow-x: hidden;
  position: relative;
`;
const TabListOuterContainer = styled.div`
  display: flex;
  position: relative;
  overflow: hidden;
`;
const TabListContainer = styled.div`
  position: relative;
  transition: 0.9s all ease;
  padding-right: 24px;
  transform: translate(${props => props.positionToMove}px);
  white-space: ${props => props.wrapLabels ? "normal" : "nowrap"};
`;
const TabLabel = styled.h4`
  ${props => props.wrapLabel && css`
      max-width: 144px;
      display: flex;
      align-items: center;
      justify-content: center;
    `}
`;
const TabArrows = styled.div`
  position: absolute;
  top: 0;
  padding: 2px 0;
  z-index: 10;
  height: calc(100% - 8px);
  display: flex;
  align-items: stretch;
  cursor: pointer;
  &:focus {
    outline: none;
    div {
      box-shadow: 0 0 0 2px #979797;
      border-radius: 4px;
      margin: 0 2px;
    }
  }
  ${props => props.direction === "left" && css`
      left: 0;
      padding-right: 7px;
    `};

  ${props => props.direction === "right" && css`
      right: 0;
      padding-left: 7px;
    `};
`;
const ArrowInner = styled.div`
  background: ${colorWhite};
  display: flex;
  align-items: center;
  ${props => props.direction === "left" && css`
      border-right: 1px solid ${colorGreyGainsboro};
    `};

  ${props => props.direction === "right" && css`
      border-left: 1px solid ${colorGreyGainsboro};
    `};
`;
const pseudoBar = isSelected => `
  content: '';
  position: absolute;
  left: 10px;
  right: 10px;
  bottom: 0;
  border-top: solid 4px ${isSelected ? colorGreyRaven : colorGreyGainsboro};
`;
const TabLabelContainer = styled.button`
  display: flex;
  align-items: center;
  border: none;
  background: none;
  color: inherit;
  text-decoration: inherit;
  padding: 10px;
  position: relative;
  border: solid 2px transparent;
  border-radius: 6px;

  > h4 {
    &:focus {
      outline: none;
    }
  }
  &:focus {
    outline: none;
    > h4 {
      &:before {
        content: "";
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        border: 2px solid #979797;
        border-radius: 6px;
        width: 100%;
        height: 100%;
      }
    }
  }
  &:active {
    outline: none;
  }

  ::-moz-focus-inner {
    border: 0;
  }

  // not in an active tab
  .react-tabs__tab:not([aria-selected="true"]) & {
    &:hover::after {
      ${pseudoBar(false)}
    }

    &:active::after {
      ${pseudoBar(true)}
    }
  }

  // in an active tab
  .react-tabs__tab[aria-selected="true"] & {
    &::after {
      ${pseudoBar(true)}
    }
  }
`;

function hash$1(str) {
  var hash = 5381,
      i    = str.length;

  while(i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }

  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
   * integers. Since we want the results to be always positive, convert the
   * signed int to an unsigned by doing an unsigned bitshift. */
  return hash >>> 0;
}

var stringHash = hash$1;

var stringHash$1 = /*@__PURE__*/getDefaultExportFromCjs(stringHash);

const JSONSafeStringify = input => {
  let cache = [];
  const result = JSON.stringify(input, (key, value) => {
    if (typeof value !== "object" || value === null) {
      return value;
    }
    if (cache.includes(value)) {
      // Circular reference found, discard key
      return undefined;
    }
    // Store value in our collection
    cache.push(value);
    return value;
  });
  cache = null; // Enable garbage collection
  return result;
};
const hash = obj => {
  if (!obj) return 0;
  return typeof obj !== "string" ? stringHash$1(JSONSafeStringify(obj)) : stringHash$1(obj);
};

const Panel = ({
  children,
  ...rest
}) => /*#__PURE__*/React.createElement("div", safeRest(rest), children);
Panel.propTypes = {
  children: PropTypes$1.node.isRequired
};

const Tabs = props => {
  // Constants
  const MARGIN_BUFFER = 24; // scroll arrow width
  const ENTER_KEY = 13;
  const SPACE_BAR_KEY = 32;
  const RIGHT_ARROW = 39;
  const LEFT_ARROW = 37;
  const TAB = 9;
  const currentFocus = reactExports.useRef(0);
  const tabsRoot = reactExports.useRef();
  const tabRef = reactExports.useRef(null);
  const tabNavRef = reactExports.useRef(null);
  const tabScrollIntervals = reactExports.useRef([]);
  const tabScrollPosition = reactExports.useRef(0); // 0,1,2... to keep track of the scroll page
  const tabArrowKeyIntervals = reactExports.useRef([]); // list of tab indices where scrolling should happen
  const tabIsFocused = reactExports.useRef(false); // checks if any of the tabs are in focus
  // helper to handle edge case for when only one tab is on the last scroll page
  // it prevents scrolling back to the left to accomodate accessibility needs
  const wasTabbedPastTabs = reactExports.useRef(false);
  const finalScrollLeftTabPos = reactExports.useRef(null); // keeps track of the left most visible tab on final scroll
  const [tabsTranslatePosition, setTabsTranslatePosition] = reactExports.useState(0);
  const [resizeTriggered, setResizeTriggered] = reactExports.useState(false);
  const [isLeftArrowVisible, setLeftArrowVisible] = reactExports.useState(false);
  const [isRightArrowVisible, setRightArrowVisible] = reactExports.useState(false);
  const [current, setCurrent] = reactExports.useState(0);
  const {
    children,
    leftArrowLabel,
    rightArrowLabel,
    wrapLabels,
    open,
    onOpen,
    ...rest
  } = props;
  reactExports.useEffect(() => {
    // if open is null or undefined it is uncontrolled
    // empty string may be a valid input to select no tabs (this case is required)
    if (open === null || open === undefined) return;
    if (!props.children.length) return;
    const tabIndex = props.children.findIndex(child => child.props.id === open);
    if (tabIndex >= 0) {
      setCurrent(tabIndex);
      currentFocus.current = tabIndex;
      return;
    }
    // if tabIndex === null set to -1 to keep tabs contolled, but select no tab
    setCurrent(-1);
  }, [open]);
  const initializeScrollIncrements = () => {
    const tabContainerWidth = tabRef.current.parentElement.clientWidth;
    const tabContainerWidthWithBuffer = tabContainerWidth - MARGIN_BUFFER;
    if (!tabScrollIntervals.current.length) {
      let tabMargin = null;
      let totalTabWidth = 0;
      const tabsArray = tabRef.current && tabRef.current.children[0] && Array.from(tabRef.current.children[0].childNodes);
      // populates tabScrollIntervals and tabArrowKeyIntervals
      let currentTabsLength = 0;
      tabsArray.forEach((value, index) => {
        if (!tabMargin) {
          tabMargin = value.offsetLeft * 2;
        }
        const increment = value.offsetWidth + tabMargin;
        totalTabWidth += increment;
        if (increment > tabContainerWidthWithBuffer && tabScrollIntervals.current.length === 0) {
          tabScrollIntervals.current.push(increment - MARGIN_BUFFER);
          tabArrowKeyIntervals.current.push(index);
          currentTabsLength = 0;
        } else if (increment > tabContainerWidthWithBuffer && tabScrollIntervals.current.length !== 0) {
          tabScrollIntervals.current.push(increment);
          tabArrowKeyIntervals.current.push(index);
          currentTabsLength = 0;
        } else if (currentTabsLength + increment > tabContainerWidthWithBuffer && tabScrollIntervals.current.length === 0) {
          tabScrollIntervals.current.push(currentTabsLength - MARGIN_BUFFER);
          tabArrowKeyIntervals.current.push(index);
          currentTabsLength = increment;
        } else if (currentTabsLength + increment > tabContainerWidthWithBuffer - MARGIN_BUFFER && tabScrollIntervals.current.length !== 0) {
          tabScrollIntervals.current.push(currentTabsLength);
          tabArrowKeyIntervals.current.push(index);
          currentTabsLength = increment;
        } else {
          currentTabsLength += increment;
        }
      });

      // handles last scroll interval and makes sure the last tab is on the far right
      if (tabScrollIntervals.current.length > 0) {
        let tabSumBeforeFinalScroll = 0;
        if (tabArrowKeyIntervals.current.length > 1) {
          for (let i = 0; i < tabScrollIntervals.current.length - 1; i += 1) {
            tabSumBeforeFinalScroll += tabScrollIntervals.current[i];
          }
          tabScrollIntervals.current[tabScrollIntervals.current.length - 1] = totalTabWidth - tabContainerWidth - tabSumBeforeFinalScroll;
        } else {
          tabScrollIntervals.current[tabScrollIntervals.current.length - 1] = totalTabWidth - tabContainerWidth;
        }

        // grabs the final visible leftmost tab on the last scroll screen
        currentTabsLength = 0;
        for (let i = tabsArray.length - 1; i >= 0; i -= 1) {
          const increment = tabsArray[i].offsetWidth + tabMargin;
          if (currentTabsLength + increment > tabContainerWidth - MARGIN_BUFFER) {
            finalScrollLeftTabPos.current = i;
            break;
          } else {
            currentTabsLength += increment;
          }
        }
      }
    }
  };

  // activates whenever resize occurs
  // calculates incremental sum of tabScrollIntervals to adjust the tabs translation and autoscrolls
  // scrolling snaps to the closest value from the incremental sum of tabScrollIntervals and the previous translate position
  const setResizeScrollIntervals = () => {
    tabScrollIntervals.current = [];
    tabArrowKeyIntervals.current = [];
    initializeScrollIncrements();
    currentFocus.current = 0;
    if (tabsTranslatePosition !== 0) {
      const tabSumArr = tabScrollIntervals.current.map((_, idx) => tabScrollIntervals.current.slice(0, idx + 1).reduce((prev, curr) => prev + curr));
      tabSumArr.unshift(0);
      const diffArr = tabSumArr.map(val => Math.abs(val - Math.abs(tabsTranslatePosition)));
      const minNumber = Math.min(...diffArr);
      const index = diffArr.findIndex(val => val === minNumber);
      if (-tabSumArr[index] === 0) {
        setTabsTranslatePosition(0);
      } else {
        setTabsTranslatePosition(-tabSumArr[index]);
      }
      tabScrollPosition.current = index;
    }
  };
  const handleBlur = () => {
    // on blur in controlled mode, we set the index back to prop value
    if (open === null || open === undefined) return;
    const tabIndex = props.children.findIndex(child => child.props.id === open);
    if (tabIndex !== current) {
      setCurrent(tabIndex);
      currentFocus.current = tabIndex;
    }
  };
  const scrollTabs = direction => {
    let currentPosition = tabsTranslatePosition;
    if (direction === "right") {
      if (isRightArrowVisible && !isLeftArrowVisible) {
        currentPosition -= tabScrollIntervals.current[tabScrollPosition.current];
      } else {
        currentPosition -= tabScrollIntervals.current[tabScrollPosition.current];
      }
      tabScrollPosition.current += 1;
    }
    if (direction === "left") {
      if (tabScrollPosition.current === 1) {
        currentPosition = 0;
      } else {
        currentPosition += tabScrollIntervals.current[tabScrollPosition.current - 1];
      }
      tabScrollPosition.current -= 1;
    }
    setTabsTranslatePosition(currentPosition);
  };
  const handleTabClick = (e, index) => {
    e.preventDefault();

    // scrolls tabs to the right if tab clicked isn't fully visible
    if (tabArrowKeyIntervals.current[tabScrollPosition.current] === index) {
      scrollTabs("right");
    }
    if (tabScrollPosition.current === tabScrollIntervals.current.length && index === finalScrollLeftTabPos.current) {
      scrollTabs("left");
    }
    if (!open) {
      setCurrent(index); // set internally if not-controlled
      currentFocus.current = index;
      return;
    }
    // raise to controlling component to set on click if controlled
    onOpen(props.children[index].props.id);
  };
  const handleSelect = (index, previousIndex) => {
    // this is for setting the focus in controlled mode
    // only if both the newTab and previous are the same, was the tab actually clicked
    // and we can raise up the event.
    setCurrent(index);
    currentFocus.current = index;
    const newTab = props.children[index];
    const previousTab = props.children[previousIndex];
    if (newTab === previousTab) {
      // this is on a tab switch
      onOpen(newTab.props.id);
    }
  };
  const handleTabsKeyUp = e => {
    const numTabs = tabNavRef.current.node.parentNode.children.length;
    if ((e.keyCode === RIGHT_ARROW || !e.shiftKey && e.keyCode === TAB) && currentFocus.current < props.children.length - 1) {
      tabArrowKeyIntervals.current.forEach(num => {
        if (currentFocus.current + 1 === num && tabScrollPosition.current !== tabScrollIntervals.current.length) {
          scrollTabs("right");
        }
      });
      if (e.keyCode === RIGHT_ARROW || document.activeElement !== tabNavRef.current.node.parentNode.children[0].children[0]) {
        currentFocus.current += 1;
        tabNavRef.current.node.parentNode.children[currentFocus.current].children[0].focus();
      }
    }
    if ((e.keyCode === LEFT_ARROW || e.shiftKey && e.keyCode === TAB) && currentFocus.current > 0) {
      tabArrowKeyIntervals.current.slice().reverse().forEach(num => {
        if (e.keyCode === LEFT_ARROW && currentFocus.current === num || !wasTabbedPastTabs.current && e.shiftKey && e.keyCode === TAB && currentFocus.current === num) {
          scrollTabs("left");
        }
      });
      if (wasTabbedPastTabs.current) {
        wasTabbedPastTabs.current = !wasTabbedPastTabs.current;
      }
      if (e.keyCode === LEFT_ARROW || document.activeElement !== tabNavRef.current.node.parentNode.children[numTabs - 1].children[0]) {
        currentFocus.current -= 1;
        tabNavRef.current.node.parentNode.children[currentFocus.current].children[0].focus();
      }
    }
    if (e.keyCode === SPACE_BAR_KEY || e.keyCode === ENTER_KEY) {
      e.target.click();
    }
    return 0;
  };

  // handles arrow visibility
  reactExports.useEffect(() => {
    initializeScrollIncrements();
    if (tabScrollPosition.current === 0 && tabScrollIntervals.current.length > 0) {
      setRightArrowVisible(true);
      setLeftArrowVisible(false);
    } else if (tabScrollPosition.current === 0 && tabScrollIntervals.current.length === 0) {
      setRightArrowVisible(false);
      setLeftArrowVisible(false);
    } else if (tabScrollPosition.current === tabScrollIntervals.current.length && tabsTranslatePosition !== 0) {
      setRightArrowVisible(false);
      setLeftArrowVisible(true);
    } else {
      setRightArrowVisible(true);
      setLeftArrowVisible(true);
    }
    setResizeTriggered(false);
  }, [tabsTranslatePosition, resizeTriggered]);
  reactExports.useEffect(() => {
    const handleResize = () => {
      currentFocus.current = 0;
      setResizeScrollIntervals();
      setResizeTriggered(true);
    };
    const handleGlobalTabUpEvent = e => {
      const numTabs = tabNavRef.current.node.parentNode.children.length;
      tabIsFocused.current = false;

      // checks that a tab is focused if the tab key is pressed
      if (e.keyCode === TAB) {
        for (let i = 0; i < numTabs; i += 1) {
          if (document.activeElement === tabNavRef.current.node.parentNode.children[i].children[0]) {
            tabIsFocused.current = true;
          }
        }
        if (!tabIsFocused.current && currentFocus.current) {
          wasTabbedPastTabs.current = true;
        }
      }
    };
    window.addEventListener("resize", handleResize);
    window.addEventListener("keyup", handleGlobalTabUpEvent);
    return () => {
      window.removeEventListener("resize", handleResize);
      window.removeEventListener("keyup", handleGlobalTabUpEvent);
    };
  }, [resizeTriggered]);
  const handleArrowKeyUp = (e, value) => {
    if (e.keyCode === ENTER_KEY || e.keyCode === SPACE_BAR_KEY) {
      scrollTabs(value);
    }
  };
  const mapTabs = () => {
    if (props.children.length > 0) {
      return props.children.map((tab, i) => {
        return /*#__PURE__*/React.createElement(Tab, {
          id: tab.props.id,
          "aria-label": tab.props.heading,
          onBlur: handleBlur,
          tabIndex: "-1",
          key: hash(i),
          onClick: e => {
            handleTabClick(e, i);
          },
          onKeyUp: e => handleTabsKeyUp(e),
          ref: tabNavRef
        }, /*#__PURE__*/React.createElement(TabLabelContainer, null, /*#__PURE__*/React.createElement(TabLabel, {
          tabIndex: "-1",
          wrapLabel: wrapLabels
        }, tab.props.heading)));
      });
    }
    return "";
  };
  const mapTabContent = () => {
    if (props.children.length > 0) {
      return props.children.map((tab, i) => {
        return /*#__PURE__*/React.createElement(TabPanel, {
          key: hash(i)
        }, /*#__PURE__*/React.createElement(FlexGrid, null, /*#__PURE__*/React.createElement(FlexGrid.Row, null, /*#__PURE__*/React.createElement(FlexGrid.Col, {
          xs: 12,
          tabIndex: "0"
        }, /*#__PURE__*/React.createElement(Panel, rest, children[current])))));
      });
    }
    return "";
  };
  return /*#__PURE__*/React.createElement(TabsContainer, _extends$2({}, safeRest(rest), {
    wrapLabels: wrapLabels,
    ref: tabsRoot
  }), /*#__PURE__*/React.createElement(FlexGrid, {
    gutter: false
  }, /*#__PURE__*/React.createElement(FlexGrid.Row, null, /*#__PURE__*/React.createElement(FlexGrid.Col, {
    xs: 12
  }, /*#__PURE__*/React.createElement(Tabs$1, {
    selectedIndex: open ? current : undefined,
    onSelect: onOpen ? handleSelect : undefined
  }, /*#__PURE__*/React.createElement(TabBorder, null, isLeftArrowVisible && /*#__PURE__*/React.createElement(TabArrows, {
    tabIndex: "0",
    direction: "left",
    "aria-label": leftArrowLabel,
    onKeyUp: e => handleArrowKeyUp(e, "left"),
    onClick: () => scrollTabs("left")
  }, /*#__PURE__*/React.createElement(ArrowInner, {
    direction: "left"
  }, /*#__PURE__*/React.createElement(ChevronLeft, {
    variant: "basic"
  }))), /*#__PURE__*/React.createElement(TabListOuterContainer, null, /*#__PURE__*/React.createElement(TabListContainer, {
    ref: tabRef,
    positionToMove: tabsTranslatePosition,
    wrapLabels: wrapLabels
  }, /*#__PURE__*/React.createElement(TabList, {
    style: {
      width: "0"
    }
  }, mapTabs()))), isRightArrowVisible && /*#__PURE__*/React.createElement(TabArrows, {
    tabIndex: "0",
    direction: "right",
    "aria-label": rightArrowLabel,
    onKeyUp: e => handleArrowKeyUp(e, "right"),
    onClick: () => scrollTabs("right")
  }, /*#__PURE__*/React.createElement(ArrowInner, {
    direction: "right"
  }, /*#__PURE__*/React.createElement(ChevronRight, {
    variant: "basic"
  })))), /*#__PURE__*/React.createElement(HairlineDivider, null), /*#__PURE__*/React.createElement(DimpleDivider, null), mapTabContent())))));
};
Tabs.propTypes = {
  children: PropTypes$1.node.isRequired,
  leftArrowLabel: PropTypes$1.string,
  rightArrowLabel: PropTypes$1.string,
  wrapLabels: PropTypes$1.bool,
  open: PropTypes$1.string,
  onOpen: PropTypes$1.func
};
Tabs.defaultProps = {
  leftArrowLabel: "Move menu to the left",
  rightArrowLabel: "Move menu to the right",
  wrapLabels: false,
  open: null,
  onOpen: null
};
Tabs.Panel = Panel;

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var moment$2 = {exports: {}};

moment$2.exports;

(function (module, exports) {
(function (global, factory) {
	    module.exports = factory() ;
	}(commonjsGlobal, (function () {
	    var hookCallback;

	    function hooks() {
	        return hookCallback.apply(null, arguments);
	    }

	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback(callback) {
	        hookCallback = callback;
	    }

	    function isArray(input) {
	        return (
	            input instanceof Array ||
	            Object.prototype.toString.call(input) === '[object Array]'
	        );
	    }

	    function isObject(input) {
	        // IE8 will treat undefined and null as object if it wasn't for
	        // input != null
	        return (
	            input != null &&
	            Object.prototype.toString.call(input) === '[object Object]'
	        );
	    }

	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }

	    function isObjectEmpty(obj) {
	        if (Object.getOwnPropertyNames) {
	            return Object.getOwnPropertyNames(obj).length === 0;
	        } else {
	            var k;
	            for (k in obj) {
	                if (hasOwnProp(obj, k)) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    }

	    function isUndefined(input) {
	        return input === void 0;
	    }

	    function isNumber(input) {
	        return (
	            typeof input === 'number' ||
	            Object.prototype.toString.call(input) === '[object Number]'
	        );
	    }

	    function isDate(input) {
	        return (
	            input instanceof Date ||
	            Object.prototype.toString.call(input) === '[object Date]'
	        );
	    }

	    function map(arr, fn) {
	        var res = [],
	            i,
	            arrLen = arr.length;
	        for (i = 0; i < arrLen; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }

	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }

	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }

	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function createUTC(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }

	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty: false,
	            unusedTokens: [],
	            unusedInput: [],
	            overflow: -2,
	            charsLeftOver: 0,
	            nullInput: false,
	            invalidEra: null,
	            invalidMonth: null,
	            invalidFormat: false,
	            userInvalidated: false,
	            iso: false,
	            parsedDateParts: [],
	            era: null,
	            meridiem: null,
	            rfc2822: false,
	            weekdayMismatch: false,
	        };
	    }

	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }

	    var some;
	    if (Array.prototype.some) {
	        some = Array.prototype.some;
	    } else {
	        some = function (fun) {
	            var t = Object(this),
	                len = t.length >>> 0,
	                i;

	            for (i = 0; i < len; i++) {
	                if (i in t && fun.call(this, t[i], i, t)) {
	                    return true;
	                }
	            }

	            return false;
	        };
	    }

	    function isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m),
	                parsedParts = some.call(flags.parsedDateParts, function (i) {
	                    return i != null;
	                }),
	                isNowValid =
	                    !isNaN(m._d.getTime()) &&
	                    flags.overflow < 0 &&
	                    !flags.empty &&
	                    !flags.invalidEra &&
	                    !flags.invalidMonth &&
	                    !flags.invalidWeekday &&
	                    !flags.weekdayMismatch &&
	                    !flags.nullInput &&
	                    !flags.invalidFormat &&
	                    !flags.userInvalidated &&
	                    (!flags.meridiem || (flags.meridiem && parsedParts));

	            if (m._strict) {
	                isNowValid =
	                    isNowValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }

	            if (Object.isFrozen == null || !Object.isFrozen(m)) {
	                m._isValid = isNowValid;
	            } else {
	                return isNowValid;
	            }
	        }
	        return m._isValid;
	    }

	    function createInvalid(flags) {
	        var m = createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        } else {
	            getParsingFlags(m).userInvalidated = true;
	        }

	        return m;
	    }

	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = (hooks.momentProperties = []),
	        updateInProgress = false;

	    function copyConfig(to, from) {
	        var i,
	            prop,
	            val,
	            momentPropertiesLen = momentProperties.length;

	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }

	        if (momentPropertiesLen > 0) {
	            for (i = 0; i < momentPropertiesLen; i++) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }

	        return to;
	    }

	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        if (!this.isValid()) {
	            this._d = new Date(NaN);
	        }
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }

	    function isMoment(obj) {
	        return (
	            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
	        );
	    }

	    function warn(msg) {
	        if (
	            hooks.suppressDeprecationWarnings === false &&
	            typeof console !== 'undefined' &&
	            console.warn
	        ) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }

	    function deprecate(msg, fn) {
	        var firstTime = true;

	        return extend(function () {
	            if (hooks.deprecationHandler != null) {
	                hooks.deprecationHandler(null, msg);
	            }
	            if (firstTime) {
	                var args = [],
	                    arg,
	                    i,
	                    key,
	                    argLen = arguments.length;
	                for (i = 0; i < argLen; i++) {
	                    arg = '';
	                    if (typeof arguments[i] === 'object') {
	                        arg += '\n[' + i + '] ';
	                        for (key in arguments[0]) {
	                            if (hasOwnProp(arguments[0], key)) {
	                                arg += key + ': ' + arguments[0][key] + ', ';
	                            }
	                        }
	                        arg = arg.slice(0, -2); // Remove trailing comma and space
	                    } else {
	                        arg = arguments[i];
	                    }
	                    args.push(arg);
	                }
	                warn(
	                    msg +
	                        '\nArguments: ' +
	                        Array.prototype.slice.call(args).join('') +
	                        '\n' +
	                        new Error().stack
	                );
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }

	    var deprecations = {};

	    function deprecateSimple(name, msg) {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(name, msg);
	        }
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }

	    hooks.suppressDeprecationWarnings = false;
	    hooks.deprecationHandler = null;

	    function isFunction(input) {
	        return (
	            (typeof Function !== 'undefined' && input instanceof Function) ||
	            Object.prototype.toString.call(input) === '[object Function]'
	        );
	    }

	    function set(config) {
	        var prop, i;
	        for (i in config) {
	            if (hasOwnProp(config, i)) {
	                prop = config[i];
	                if (isFunction(prop)) {
	                    this[i] = prop;
	                } else {
	                    this['_' + i] = prop;
	                }
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        this._dayOfMonthOrdinalParseLenient = new RegExp(
	            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	                '|' +
	                /\d{1,2}/.source
	        );
	    }

	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig),
	            prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        for (prop in parentConfig) {
	            if (
	                hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])
	            ) {
	                // make sure changes to properties don't modify parent config
	                res[prop] = extend({}, res[prop]);
	            }
	        }
	        return res;
	    }

	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }

	    var keys;

	    if (Object.keys) {
	        keys = Object.keys;
	    } else {
	        keys = function (obj) {
	            var i,
	                res = [];
	            for (i in obj) {
	                if (hasOwnProp(obj, i)) {
	                    res.push(i);
	                }
	            }
	            return res;
	        };
	    }

	    var defaultCalendar = {
	        sameDay: '[Today at] LT',
	        nextDay: '[Tomorrow at] LT',
	        nextWeek: 'dddd [at] LT',
	        lastDay: '[Yesterday at] LT',
	        lastWeek: '[Last] dddd [at] LT',
	        sameElse: 'L',
	    };

	    function calendar(key, mom, now) {
	        var output = this._calendar[key] || this._calendar['sameElse'];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }

	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (
	            (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
	            absNumber
	        );
	    }

	    var formattingTokens =
	            /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
	        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
	        formatFunctions = {},
	        formatTokenFunctions = {};

	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken(token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(
	                    func.apply(this, arguments),
	                    token
	                );
	            };
	        }
	    }

	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens),
	            i,
	            length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = '',
	                i;
	            for (i = 0; i < length; i++) {
	                output += isFunction(array[i])
	                    ? array[i].call(mom, format)
	                    : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }

	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] =
	            formatFunctions[format] || makeFormatFunction(format);

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, locale) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(
	                localFormattingTokens,
	                replaceLongDateFormatTokens
	            );
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }

	    var defaultLongDateFormat = {
	        LTS: 'h:mm:ss A',
	        LT: 'h:mm A',
	        L: 'MM/DD/YYYY',
	        LL: 'MMMM D, YYYY',
	        LLL: 'MMMM D, YYYY h:mm A',
	        LLLL: 'dddd, MMMM D, YYYY h:mm A',
	    };

	    function longDateFormat(key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];

	        if (format || !formatUpper) {
	            return format;
	        }

	        this._longDateFormat[key] = formatUpper
	            .match(formattingTokens)
	            .map(function (tok) {
	                if (
	                    tok === 'MMMM' ||
	                    tok === 'MM' ||
	                    tok === 'DD' ||
	                    tok === 'dddd'
	                ) {
	                    return tok.slice(1);
	                }
	                return tok;
	            })
	            .join('');

	        return this._longDateFormat[key];
	    }

	    var defaultInvalidDate = 'Invalid date';

	    function invalidDate() {
	        return this._invalidDate;
	    }

	    var defaultOrdinal = '%d',
	        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

	    function ordinal(number) {
	        return this._ordinal.replace('%d', number);
	    }

	    var defaultRelativeTime = {
	        future: 'in %s',
	        past: '%s ago',
	        s: 'a few seconds',
	        ss: '%d seconds',
	        m: 'a minute',
	        mm: '%d minutes',
	        h: 'an hour',
	        hh: '%d hours',
	        d: 'a day',
	        dd: '%d days',
	        w: 'a week',
	        ww: '%d weeks',
	        M: 'a month',
	        MM: '%d months',
	        y: 'a year',
	        yy: '%d years',
	    };

	    function relativeTime(number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return isFunction(output)
	            ? output(number, withoutSuffix, string, isFuture)
	            : output.replace(/%d/i, number);
	    }

	    function pastFuture(diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }

	    var aliases = {};

	    function addUnitAlias(unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }

	    function normalizeUnits(units) {
	        return typeof units === 'string'
	            ? aliases[units] || aliases[units.toLowerCase()]
	            : undefined;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    var priorities = {};

	    function addUnitPriority(unit, priority) {
	        priorities[unit] = priority;
	    }

	    function getPrioritizedUnits(unitsObj) {
	        var units = [],
	            u;
	        for (u in unitsObj) {
	            if (hasOwnProp(unitsObj, u)) {
	                units.push({ unit: u, priority: priorities[u] });
	            }
	        }
	        units.sort(function (a, b) {
	            return a.priority - b.priority;
	        });
	        return units;
	    }

	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }

	    function absFloor(number) {
	        if (number < 0) {
	            // -0 -> 0
	            return Math.ceil(number) || 0;
	        } else {
	            return Math.floor(number);
	        }
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }

	        return value;
	    }

	    function makeGetSet(unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                set$1(this, unit, value);
	                hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get(this, unit);
	            }
	        };
	    }

	    function get(mom, unit) {
	        return mom.isValid()
	            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
	            : NaN;
	    }

	    function set$1(mom, unit, value) {
	        if (mom.isValid() && !isNaN(value)) {
	            if (
	                unit === 'FullYear' &&
	                isLeapYear(mom.year()) &&
	                mom.month() === 1 &&
	                mom.date() === 29
	            ) {
	                value = toInt(value);
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
	                    value,
	                    mom.month(),
	                    daysInMonth(value, mom.month())
	                );
	            } else {
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	            }
	        }
	    }

	    // MOMENTS

	    function stringGet(units) {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units]();
	        }
	        return this;
	    }

	    function stringSet(units, value) {
	        if (typeof units === 'object') {
	            units = normalizeObjectUnits(units);
	            var prioritized = getPrioritizedUnits(units),
	                i,
	                prioritizedLen = prioritized.length;
	            for (i = 0; i < prioritizedLen; i++) {
	                this[prioritized[i].unit](units[prioritized[i].unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }

	    var match1 = /\d/, //       0 - 9
	        match2 = /\d\d/, //      00 - 99
	        match3 = /\d{3}/, //     000 - 999
	        match4 = /\d{4}/, //    0000 - 9999
	        match6 = /[+-]?\d{6}/, // -999999 - 999999
	        match1to2 = /\d\d?/, //       0 - 99
	        match3to4 = /\d\d\d\d?/, //     999 - 9999
	        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
	        match1to3 = /\d{1,3}/, //       0 - 999
	        match1to4 = /\d{1,4}/, //       0 - 9999
	        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
	        matchUnsigned = /\d+/, //       0 - inf
	        matchSigned = /[+-]?\d+/, //    -inf - inf
	        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
	        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
	        // any word (or two) characters or numbers including two/three word month in arabic.
	        // includes scottish gaelic two word and hyphenated months
	        matchWord =
	            /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
	        regexes;

	    regexes = {};

	    function addRegexToken(token, regex, strictRegex) {
	        regexes[token] = isFunction(regex)
	            ? regex
	            : function (isStrict, localeData) {
	                  return isStrict && strictRegex ? strictRegex : regex;
	              };
	    }

	    function getParseRegexForToken(token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }

	        return regexes[token](config._strict, config._locale);
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(
	            s
	                .replace('\\', '')
	                .replace(
	                    /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
	                    function (matched, p1, p2, p3, p4) {
	                        return p1 || p2 || p3 || p4;
	                    }
	                )
	        );
	    }

	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    var tokens = {};

	    function addParseToken(token, callback) {
	        var i,
	            func = callback,
	            tokenLen;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (isNumber(callback)) {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        tokenLen = token.length;
	        for (i = 0; i < tokenLen; i++) {
	            tokens[token[i]] = func;
	        }
	    }

	    function addWeekParseToken(token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }

	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }

	    var YEAR = 0,
	        MONTH = 1,
	        DATE = 2,
	        HOUR = 3,
	        MINUTE = 4,
	        SECOND = 5,
	        MILLISECOND = 6,
	        WEEK = 7,
	        WEEKDAY = 8;

	    function mod(n, x) {
	        return ((n % x) + x) % x;
	    }

	    var indexOf;

	    if (Array.prototype.indexOf) {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function (o) {
	            // I know
	            var i;
	            for (i = 0; i < this.length; ++i) {
	                if (this[i] === o) {
	                    return i;
	                }
	            }
	            return -1;
	        };
	    }

	    function daysInMonth(year, month) {
	        if (isNaN(year) || isNaN(month)) {
	            return NaN;
	        }
	        var modMonth = mod(month, 12);
	        year += (month - modMonth) / 12;
	        return modMonth === 1
	            ? isLeapYear(year)
	                ? 29
	                : 28
	            : 31 - ((modMonth % 7) % 2);
	    }

	    // FORMATTING

	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });

	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });

	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });

	    // ALIASES

	    addUnitAlias('month', 'M');

	    // PRIORITY

	    addUnitPriority('month', 8);

	    // PARSING

	    addRegexToken('M', match1to2);
	    addRegexToken('MM', match1to2, match2);
	    addRegexToken('MMM', function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });

	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });

	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });

	    // LOCALES

	    var defaultLocaleMonths =
	            'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	                '_'
	            ),
	        defaultLocaleMonthsShort =
	            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
	        defaultMonthsShortRegex = matchWord,
	        defaultMonthsRegex = matchWord;

	    function localeMonths(m, format) {
	        if (!m) {
	            return isArray(this._months)
	                ? this._months
	                : this._months['standalone'];
	        }
	        return isArray(this._months)
	            ? this._months[m.month()]
	            : this._months[
	                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
	                      ? 'format'
	                      : 'standalone'
	              ][m.month()];
	    }

	    function localeMonthsShort(m, format) {
	        if (!m) {
	            return isArray(this._monthsShort)
	                ? this._monthsShort
	                : this._monthsShort['standalone'];
	        }
	        return isArray(this._monthsShort)
	            ? this._monthsShort[m.month()]
	            : this._monthsShort[
	                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
	              ][m.month()];
	    }

	    function handleStrictParse(monthName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = monthName.toLocaleLowerCase();
	        if (!this._monthsParse) {
	            // this is not used
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	            for (i = 0; i < 12; ++i) {
	                mom = createUTC([2000, i]);
	                this._shortMonthsParse[i] = this.monthsShort(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeMonthsParse(monthName, format, strict) {
	        var i, mom, regex;

	        if (this._monthsParseExact) {
	            return handleStrictParse.call(this, monthName, format, strict);
	        }

	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }

	        // TODO: add sorting
	        // Sorting makes sure if one month (or abbr) is a prefix of another
	        // see sorting in computeMonthsParse
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp(
	                    '^' + this.months(mom, '').replace('.', '') + '$',
	                    'i'
	                );
	                this._shortMonthsParse[i] = new RegExp(
	                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
	                    'i'
	                );
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex =
	                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (
	                strict &&
	                format === 'MMMM' &&
	                this._longMonthsParse[i].test(monthName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'MMM' &&
	                this._shortMonthsParse[i].test(monthName)
	            ) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function setMonth(mom, value) {
	        var dayOfMonth;

	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }

	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (!isNumber(value)) {
	                    return mom;
	                }
	            }
	        }

	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }

	    function getSetMonth(value) {
	        if (value != null) {
	            setMonth(this, value);
	            hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get(this, 'Month');
	        }
	    }

	    function getDaysInMonth() {
	        return daysInMonth(this.year(), this.month());
	    }

	    function monthsShortRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsShortRegex')) {
	                this._monthsShortRegex = defaultMonthsShortRegex;
	            }
	            return this._monthsShortStrictRegex && isStrict
	                ? this._monthsShortStrictRegex
	                : this._monthsShortRegex;
	        }
	    }

	    function monthsRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                this._monthsRegex = defaultMonthsRegex;
	            }
	            return this._monthsStrictRegex && isStrict
	                ? this._monthsStrictRegex
	                : this._monthsRegex;
	        }
	    }

	    function computeMonthsParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	        }
	        for (i = 0; i < 24; i++) {
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }

	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp(
	            '^(' + longPieces.join('|') + ')',
	            'i'
	        );
	        this._monthsShortStrictRegex = new RegExp(
	            '^(' + shortPieces.join('|') + ')',
	            'i'
	        );
	    }

	    // FORMATTING

	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
	    });

	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });

	    addFormatToken(0, ['YYYY', 4], 0, 'year');
	    addFormatToken(0, ['YYYYY', 5], 0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	    // ALIASES

	    addUnitAlias('year', 'y');

	    // PRIORITIES

	    addUnitPriority('year', 1);

	    // PARSING

	    addRegexToken('Y', matchSigned);
	    addRegexToken('YY', match1to2, match2);
	    addRegexToken('YYYY', match1to4, match4);
	    addRegexToken('YYYYY', match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);

	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] =
	            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });

	    // HELPERS

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    // HOOKS

	    hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };

	    // MOMENTS

	    var getSetYear = makeGetSet('FullYear', true);

	    function getIsLeapYear() {
	        return isLeapYear(this.year());
	    }

	    function createDate(y, m, d, h, M, s, ms) {
	        // can't just apply() to create a date:
	        // https://stackoverflow.com/q/181348
	        var date;
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            date = new Date(y + 400, m, d, h, M, s, ms);
	            if (isFinite(date.getFullYear())) {
	                date.setFullYear(y);
	            }
	        } else {
	            date = new Date(y, m, d, h, M, s, ms);
	        }

	        return date;
	    }

	    function createUTCDate(y) {
	        var date, args;
	        // the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            args = Array.prototype.slice.call(arguments);
	            // preserve leap years using a full 400 year cycle, then reset
	            args[0] = y + 400;
	            date = new Date(Date.UTC.apply(null, args));
	            if (isFinite(date.getUTCFullYear())) {
	                date.setUTCFullYear(y);
	            }
	        } else {
	            date = new Date(Date.UTC.apply(null, arguments));
	        }

	        return date;
	    }

	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	            fwd = 7 + dow - doy,
	            // first-week day local weekday -- which local weekday is fwd
	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	        return -fwdlw + fwd - 1;
	    }

	    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear,
	            resDayOfYear;

	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }

	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear,
	        };
	    }

	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek,
	            resYear;

	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }

	        return {
	            week: resWeek,
	            year: resYear,
	        };
	    }

	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }

	    // FORMATTING

	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	    // ALIASES

	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');

	    // PRIORITIES

	    addUnitPriority('week', 5);
	    addUnitPriority('isoWeek', 5);

	    // PARSING

	    addRegexToken('w', match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W', match1to2);
	    addRegexToken('WW', match1to2, match2);

	    addWeekParseToken(
	        ['w', 'ww', 'W', 'WW'],
	        function (input, week, config, token) {
	            week[token.substr(0, 1)] = toInt(input);
	        }
	    );

	    // HELPERS

	    // LOCALES

	    function localeWeek(mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }

	    var defaultLocaleWeek = {
	        dow: 0, // Sunday is the first day of the week.
	        doy: 6, // The week that contains Jan 6th is the first week of the year.
	    };

	    function localeFirstDayOfWeek() {
	        return this._week.dow;
	    }

	    function localeFirstDayOfYear() {
	        return this._week.doy;
	    }

	    // MOMENTS

	    function getSetWeek(input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    function getSetISOWeek(input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    // FORMATTING

	    addFormatToken('d', 0, 'do', 'day');

	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });

	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });

	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });

	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');

	    // ALIASES

	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');

	    // PRIORITY
	    addUnitPriority('day', 11);
	    addUnitPriority('weekday', 11);
	    addUnitPriority('isoWeekday', 11);

	    // PARSING

	    addRegexToken('d', match1to2);
	    addRegexToken('e', match1to2);
	    addRegexToken('E', match1to2);
	    addRegexToken('dd', function (isStrict, locale) {
	        return locale.weekdaysMinRegex(isStrict);
	    });
	    addRegexToken('ddd', function (isStrict, locale) {
	        return locale.weekdaysShortRegex(isStrict);
	    });
	    addRegexToken('dddd', function (isStrict, locale) {
	        return locale.weekdaysRegex(isStrict);
	    });

	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });

	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });

	    // HELPERS

	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }

	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }

	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }

	        return null;
	    }

	    function parseIsoWeekday(input, locale) {
	        if (typeof input === 'string') {
	            return locale.weekdaysParse(input) % 7 || 7;
	        }
	        return isNaN(input) ? null : input;
	    }

	    // LOCALES
	    function shiftWeekdays(ws, n) {
	        return ws.slice(n, 7).concat(ws.slice(0, n));
	    }

	    var defaultLocaleWeekdays =
	            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        defaultWeekdaysRegex = matchWord,
	        defaultWeekdaysShortRegex = matchWord,
	        defaultWeekdaysMinRegex = matchWord;

	    function localeWeekdays(m, format) {
	        var weekdays = isArray(this._weekdays)
	            ? this._weekdays
	            : this._weekdays[
	                  m && m !== true && this._weekdays.isFormat.test(format)
	                      ? 'format'
	                      : 'standalone'
	              ];
	        return m === true
	            ? shiftWeekdays(weekdays, this._week.dow)
	            : m
	            ? weekdays[m.day()]
	            : weekdays;
	    }

	    function localeWeekdaysShort(m) {
	        return m === true
	            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
	            : m
	            ? this._weekdaysShort[m.day()]
	            : this._weekdaysShort;
	    }

	    function localeWeekdaysMin(m) {
	        return m === true
	            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
	            : m
	            ? this._weekdaysMin[m.day()]
	            : this._weekdaysMin;
	    }

	    function handleStrictParse$1(weekdayName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = weekdayName.toLocaleLowerCase();
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._minWeekdaysParse = [];

	            for (i = 0; i < 7; ++i) {
	                mom = createUTC([2000, 1]).day(i);
	                this._minWeekdaysParse[i] = this.weekdaysMin(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._shortWeekdaysParse[i] = this.weekdaysShort(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeWeekdaysParse(weekdayName, format, strict) {
	        var i, mom, regex;

	        if (this._weekdaysParseExact) {
	            return handleStrictParse$1.call(this, weekdayName, format, strict);
	        }

	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }

	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already

	            mom = createUTC([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	                this._shortWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	                this._minWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	            }
	            if (!this._weekdaysParse[i]) {
	                regex =
	                    '^' +
	                    this.weekdays(mom, '') +
	                    '|^' +
	                    this.weekdaysShort(mom, '') +
	                    '|^' +
	                    this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (
	                strict &&
	                format === 'dddd' &&
	                this._fullWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'ddd' &&
	                this._shortWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'dd' &&
	                this._minWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function getSetDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }

	    function getSetLocaleDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }

	    function getSetISODayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }

	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.

	        if (input != null) {
	            var weekday = parseIsoWeekday(input, this.localeData());
	            return this.day(this.day() % 7 ? weekday : weekday - 7);
	        } else {
	            return this.day() || 7;
	        }
	    }

	    function weekdaysRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysStrictRegex;
	            } else {
	                return this._weekdaysRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                this._weekdaysRegex = defaultWeekdaysRegex;
	            }
	            return this._weekdaysStrictRegex && isStrict
	                ? this._weekdaysStrictRegex
	                : this._weekdaysRegex;
	        }
	    }

	    function weekdaysShortRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysShortStrictRegex;
	            } else {
	                return this._weekdaysShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	            }
	            return this._weekdaysShortStrictRegex && isStrict
	                ? this._weekdaysShortStrictRegex
	                : this._weekdaysShortRegex;
	        }
	    }

	    function weekdaysMinRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysMinStrictRegex;
	            } else {
	                return this._weekdaysMinRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	            }
	            return this._weekdaysMinStrictRegex && isStrict
	                ? this._weekdaysMinStrictRegex
	                : this._weekdaysMinRegex;
	        }
	    }

	    function computeWeekdaysParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var minPieces = [],
	            shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom,
	            minp,
	            shortp,
	            longp;
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, 1]).day(i);
	            minp = regexEscape(this.weekdaysMin(mom, ''));
	            shortp = regexEscape(this.weekdaysShort(mom, ''));
	            longp = regexEscape(this.weekdays(mom, ''));
	            minPieces.push(minp);
	            shortPieces.push(shortp);
	            longPieces.push(longp);
	            mixedPieces.push(minp);
	            mixedPieces.push(shortp);
	            mixedPieces.push(longp);
	        }
	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	        // will match the longer piece.
	        minPieces.sort(cmpLenRev);
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);

	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._weekdaysShortRegex = this._weekdaysRegex;
	        this._weekdaysMinRegex = this._weekdaysRegex;

	        this._weekdaysStrictRegex = new RegExp(
	            '^(' + longPieces.join('|') + ')',
	            'i'
	        );
	        this._weekdaysShortStrictRegex = new RegExp(
	            '^(' + shortPieces.join('|') + ')',
	            'i'
	        );
	        this._weekdaysMinStrictRegex = new RegExp(
	            '^(' + minPieces.join('|') + ')',
	            'i'
	        );
	    }

	    // FORMATTING

	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }

	    function kFormat() {
	        return this.hours() || 24;
	    }

	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	    addFormatToken('k', ['kk', 2], 0, kFormat);

	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('hmmss', 0, 0, function () {
	        return (
	            '' +
	            hFormat.apply(this) +
	            zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2)
	        );
	    });

	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('Hmmss', 0, 0, function () {
	        return (
	            '' +
	            this.hours() +
	            zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2)
	        );
	    });

	    function meridiem(token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(
	                this.hours(),
	                this.minutes(),
	                lowercase
	            );
	        });
	    }

	    meridiem('a', true);
	    meridiem('A', false);

	    // ALIASES

	    addUnitAlias('hour', 'h');

	    // PRIORITY
	    addUnitPriority('hour', 13);

	    // PARSING

	    function matchMeridiem(isStrict, locale) {
	        return locale._meridiemParse;
	    }

	    addRegexToken('a', matchMeridiem);
	    addRegexToken('A', matchMeridiem);
	    addRegexToken('H', match1to2);
	    addRegexToken('h', match1to2);
	    addRegexToken('k', match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);
	    addRegexToken('kk', match1to2, match2);

	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);

	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['k', 'kk'], function (input, array, config) {
	        var kInput = toInt(input);
	        array[HOUR] = kInput === 24 ? 0 : kInput;
	    });
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4,
	            pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4,
	            pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });

	    // LOCALES

	    function localeIsPM(input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return (input + '').toLowerCase().charAt(0) === 'p';
	    }

	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
	        // Setting the hour should keep the time, because the user explicitly
	        // specified which hour they want. So trying to maintain the same hour (in
	        // a new timezone) makes sense. Adding/subtracting hours does not follow
	        // this rule.
	        getSetHour = makeGetSet('Hours', true);

	    function localeMeridiem(hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }

	    var baseConfig = {
	        calendar: defaultCalendar,
	        longDateFormat: defaultLongDateFormat,
	        invalidDate: defaultInvalidDate,
	        ordinal: defaultOrdinal,
	        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	        relativeTime: defaultRelativeTime,

	        months: defaultLocaleMonths,
	        monthsShort: defaultLocaleMonthsShort,

	        week: defaultLocaleWeek,

	        weekdays: defaultLocaleWeekdays,
	        weekdaysMin: defaultLocaleWeekdaysMin,
	        weekdaysShort: defaultLocaleWeekdaysShort,

	        meridiemParse: defaultLocaleMeridiemParse,
	    };

	    // internal storage for locale config files
	    var locales = {},
	        localeFamilies = {},
	        globalLocale;

	    function commonPrefix(arr1, arr2) {
	        var i,
	            minl = Math.min(arr1.length, arr2.length);
	        for (i = 0; i < minl; i += 1) {
	            if (arr1[i] !== arr2[i]) {
	                return i;
	            }
	        }
	        return minl;
	    }

	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0,
	            j,
	            next,
	            locale,
	            split;

	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (
	                    next &&
	                    next.length >= j &&
	                    commonPrefix(split, next) >= j - 1
	                ) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return globalLocale;
	    }

	    function isLocaleNameSane(name) {
	        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
	        return name.match('^[^/\\\\]*$') != null;
	    }

	    function loadLocale(name) {
	        var oldLocale = null,
	            aliasedRequire;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (
	            locales[name] === undefined &&
	            'object' !== 'undefined' &&
	            module &&
	            module.exports &&
	            isLocaleNameSane(name)
	        ) {
	            try {
	                oldLocale = globalLocale._abbr;
	                aliasedRequire = commonjsRequire;
	                aliasedRequire('./locale/' + name);
	                getSetGlobalLocale(oldLocale);
	            } catch (e) {
	                // mark as not found to avoid repeating expensive file require call causing high CPU
	                // when trying to find en-US, en_US, en-us for every format call
	                locales[name] = null; // null means not found
	            }
	        }
	        return locales[name];
	    }

	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function getSetGlobalLocale(key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = getLocale(key);
	            } else {
	                data = defineLocale(key, values);
	            }

	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            } else {
	                if (typeof console !== 'undefined' && console.warn) {
	                    //warn user if arguments are passed but the locale could not be set
	                    console.warn(
	                        'Locale ' + key + ' not found. Did you forget to load it?'
	                    );
	                }
	            }
	        }

	        return globalLocale._abbr;
	    }

	    function defineLocale(name, config) {
	        if (config !== null) {
	            var locale,
	                parentConfig = baseConfig;
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple(
	                    'defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                        'an existing locale. moment.defineLocale(localeName, ' +
	                        'config) should only be used for creating a new locale ' +
	                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
	                );
	                parentConfig = locales[name]._config;
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    parentConfig = locales[config.parentLocale]._config;
	                } else {
	                    locale = loadLocale(config.parentLocale);
	                    if (locale != null) {
	                        parentConfig = locale._config;
	                    } else {
	                        if (!localeFamilies[config.parentLocale]) {
	                            localeFamilies[config.parentLocale] = [];
	                        }
	                        localeFamilies[config.parentLocale].push({
	                            name: name,
	                            config: config,
	                        });
	                        return null;
	                    }
	                }
	            }
	            locales[name] = new Locale(mergeConfigs(parentConfig, config));

	            if (localeFamilies[name]) {
	                localeFamilies[name].forEach(function (x) {
	                    defineLocale(x.name, x.config);
	                });
	            }

	            // backwards compat for now: also set the locale
	            // make sure we set the locale AFTER all child locales have been
	            // created, so we won't end up with the child locale set.
	            getSetGlobalLocale(name);

	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }

	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale,
	                tmpLocale,
	                parentConfig = baseConfig;

	            if (locales[name] != null && locales[name].parentLocale != null) {
	                // Update existing child locale in-place to avoid memory-leaks
	                locales[name].set(mergeConfigs(locales[name]._config, config));
	            } else {
	                // MERGE
	                tmpLocale = loadLocale(name);
	                if (tmpLocale != null) {
	                    parentConfig = tmpLocale._config;
	                }
	                config = mergeConfigs(parentConfig, config);
	                if (tmpLocale == null) {
	                    // updateLocale is called for creating a new locale
	                    // Set abbr so it will have a name (getters return
	                    // undefined otherwise).
	                    config.abbr = name;
	                }
	                locale = new Locale(config);
	                locale.parentLocale = locales[name];
	                locales[name] = locale;
	            }

	            // backwards compat for now: also set the locale
	            getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                    if (name === getSetGlobalLocale()) {
	                        getSetGlobalLocale(name);
	                    }
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }

	    // returns locale data
	    function getLocale(key) {
	        var locale;

	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }

	        if (!key) {
	            return globalLocale;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }

	        return chooseLocale(key);
	    }

	    function listLocales() {
	        return keys(locales);
	    }

	    function checkOverflow(m) {
	        var overflow,
	            a = m._a;

	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH] < 0 || a[MONTH] > 11
	                    ? MONTH
	                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
	                    ? DATE
	                    : a[HOUR] < 0 ||
	                      a[HOUR] > 24 ||
	                      (a[HOUR] === 24 &&
	                          (a[MINUTE] !== 0 ||
	                              a[SECOND] !== 0 ||
	                              a[MILLISECOND] !== 0))
	                    ? HOUR
	                    : a[MINUTE] < 0 || a[MINUTE] > 59
	                    ? MINUTE
	                    : a[SECOND] < 0 || a[SECOND] > 59
	                    ? SECOND
	                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
	                    ? MILLISECOND
	                    : -1;

	            if (
	                getParsingFlags(m)._overflowDayOfYear &&
	                (overflow < YEAR || overflow > DATE)
	            ) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }

	            getParsingFlags(m).overflow = overflow;
	        }

	        return m;
	    }

	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex =
	            /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	        basicIsoRegex =
	            /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
	        isoDates = [
	            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	            ['YYYY-DDD', /\d{4}-\d{3}/],
	            ['YYYY-MM', /\d{4}-\d\d/, false],
	            ['YYYYYYMMDD', /[+-]\d{10}/],
	            ['YYYYMMDD', /\d{8}/],
	            ['GGGG[W]WWE', /\d{4}W\d{3}/],
	            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	            ['YYYYDDD', /\d{7}/],
	            ['YYYYMM', /\d{6}/, false],
	            ['YYYY', /\d{4}/, false],
	        ],
	        // iso time formats and regexes
	        isoTimes = [
	            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	            ['HH:mm', /\d\d:\d\d/],
	            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	            ['HHmmss', /\d\d\d\d\d\d/],
	            ['HHmm', /\d\d\d\d/],
	            ['HH', /\d\d/],
	        ],
	        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
	        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	        rfc2822 =
	            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
	        obsOffsets = {
	            UT: 0,
	            GMT: 0,
	            EDT: -4 * 60,
	            EST: -5 * 60,
	            CDT: -5 * 60,
	            CST: -6 * 60,
	            MDT: -6 * 60,
	            MST: -7 * 60,
	            PDT: -7 * 60,
	            PST: -8 * 60,
	        };

	    // date from iso format
	    function configFromISO(config) {
	        var i,
	            l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime,
	            dateFormat,
	            timeFormat,
	            tzFormat,
	            isoDatesLen = isoDates.length,
	            isoTimesLen = isoTimes.length;

	        if (match) {
	            getParsingFlags(config).iso = true;
	            for (i = 0, l = isoDatesLen; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimesLen; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }

	    function extractFromRFC2822Strings(
	        yearStr,
	        monthStr,
	        dayStr,
	        hourStr,
	        minuteStr,
	        secondStr
	    ) {
	        var result = [
	            untruncateYear(yearStr),
	            defaultLocaleMonthsShort.indexOf(monthStr),
	            parseInt(dayStr, 10),
	            parseInt(hourStr, 10),
	            parseInt(minuteStr, 10),
	        ];

	        if (secondStr) {
	            result.push(parseInt(secondStr, 10));
	        }

	        return result;
	    }

	    function untruncateYear(yearStr) {
	        var year = parseInt(yearStr, 10);
	        if (year <= 49) {
	            return 2000 + year;
	        } else if (year <= 999) {
	            return 1900 + year;
	        }
	        return year;
	    }

	    function preprocessRFC2822(s) {
	        // Remove comments and folding whitespace and replace multiple-spaces with a single space
	        return s
	            .replace(/\([^()]*\)|[\n\t]/g, ' ')
	            .replace(/(\s\s+)/g, ' ')
	            .replace(/^\s\s*/, '')
	            .replace(/\s\s*$/, '');
	    }

	    function checkWeekday(weekdayStr, parsedInput, config) {
	        if (weekdayStr) {
	            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
	            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	                weekdayActual = new Date(
	                    parsedInput[0],
	                    parsedInput[1],
	                    parsedInput[2]
	                ).getDay();
	            if (weekdayProvided !== weekdayActual) {
	                getParsingFlags(config).weekdayMismatch = true;
	                config._isValid = false;
	                return false;
	            }
	        }
	        return true;
	    }

	    function calculateOffset(obsOffset, militaryOffset, numOffset) {
	        if (obsOffset) {
	            return obsOffsets[obsOffset];
	        } else if (militaryOffset) {
	            // the only allowed military tz is Z
	            return 0;
	        } else {
	            var hm = parseInt(numOffset, 10),
	                m = hm % 100,
	                h = (hm - m) / 100;
	            return h * 60 + m;
	        }
	    }

	    // date and time from ref 2822 format
	    function configFromRFC2822(config) {
	        var match = rfc2822.exec(preprocessRFC2822(config._i)),
	            parsedArray;
	        if (match) {
	            parsedArray = extractFromRFC2822Strings(
	                match[4],
	                match[3],
	                match[2],
	                match[5],
	                match[6],
	                match[7]
	            );
	            if (!checkWeekday(match[1], parsedArray, config)) {
	                return;
	            }

	            config._a = parsedArray;
	            config._tzm = calculateOffset(match[8], match[9], match[10]);

	            config._d = createUTCDate.apply(null, config._a);
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

	            getParsingFlags(config).rfc2822 = true;
	        } else {
	            config._isValid = false;
	        }
	    }

	    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);
	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }

	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }

	        configFromRFC2822(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }

	        if (config._strict) {
	            config._isValid = false;
	        } else {
	            // Final attempt, use Input Fallback
	            hooks.createFromInputFallback(config);
	        }
	    }

	    hooks.createFromInputFallback = deprecate(
	        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );

	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }

	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(hooks.now());
	        if (config._useUTC) {
	            return [
	                nowValue.getUTCFullYear(),
	                nowValue.getUTCMonth(),
	                nowValue.getUTCDate(),
	            ];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray(config) {
	        var i,
	            date,
	            input = [],
	            currentDate,
	            expectedWeekday,
	            yearToUse;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear != null) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	            if (
	                config._dayOfYear > daysInYear(yearToUse) ||
	                config._dayOfYear === 0
	            ) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }

	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] =
	                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
	        }

	        // Check for 24:00:00.000
	        if (
	            config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0
	        ) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }

	        config._d = (config._useUTC ? createUTCDate : createDate).apply(
	            null,
	            input
	        );
	        expectedWeekday = config._useUTC
	            ? config._d.getUTCDay()
	            : config._d.getDay();

	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }

	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }

	        // check for mismatching day of week
	        if (
	            config._w &&
	            typeof config._w.d !== 'undefined' &&
	            config._w.d !== expectedWeekday
	        ) {
	            getParsingFlags(config).weekdayMismatch = true;
	        }
	    }

	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;

	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(
	                w.GG,
	                config._a[YEAR],
	                weekOfYear(createLocal(), 1, 4).year
	            );
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;

	            curWeek = weekOfYear(createLocal(), dow, doy);

	            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

	            // Default to current week.
	            week = defaults(w.w, curWeek.week);

	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from beginning of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to beginning of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }

	    // constant that refers to the ISO standard
	    hooks.ISO_8601 = function () {};

	    // constant that refers to the RFC 2822 form
	    hooks.RFC_2822 = function () {};

	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }
	        if (config._f === hooks.RFC_2822) {
	            configFromRFC2822(config);
	            return;
	        }
	        config._a = [];
	        getParsingFlags(config).empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i,
	            parsedInput,
	            tokens,
	            token,
	            skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0,
	            era,
	            tokenLen;

	        tokens =
	            expandFormat(config._f, config._locale).match(formattingTokens) || [];
	        tokenLen = tokens.length;
	        for (i = 0; i < tokenLen; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
	                [])[0];
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(
	                    string.indexOf(parsedInput) + parsedInput.length
	                );
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                } else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            } else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver =
	            stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }

	        // clear _12h flag if hour is <= 12
	        if (
	            config._a[HOUR] <= 12 &&
	            getParsingFlags(config).bigHour === true &&
	            config._a[HOUR] > 0
	        ) {
	            getParsingFlags(config).bigHour = undefined;
	        }

	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
	        getParsingFlags(config).meridiem = config._meridiem;
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(
	            config._locale,
	            config._a[HOUR],
	            config._meridiem
	        );

	        // handle era
	        era = getParsingFlags(config).era;
	        if (era !== null) {
	            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
	        }

	        configFromArray(config);
	        checkOverflow(config);
	    }

	    function meridiemFixWrap(locale, hour, meridiem) {
	        var isPm;

	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }

	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,
	            scoreToBeat,
	            i,
	            currentScore,
	            validFormatFound,
	            bestFormatIsValid = false,
	            configfLen = config._f.length;

	        if (configfLen === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < configfLen; i++) {
	            currentScore = 0;
	            validFormatFound = false;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);

	            if (isValid(tempConfig)) {
	                validFormatFound = true;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;

	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	            getParsingFlags(tempConfig).score = currentScore;

	            if (!bestFormatIsValid) {
	                if (
	                    scoreToBeat == null ||
	                    currentScore < scoreToBeat ||
	                    validFormatFound
	                ) {
	                    scoreToBeat = currentScore;
	                    bestMoment = tempConfig;
	                    if (validFormatFound) {
	                        bestFormatIsValid = true;
	                    }
	                }
	            } else {
	                if (currentScore < scoreToBeat) {
	                    scoreToBeat = currentScore;
	                    bestMoment = tempConfig;
	                }
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }

	        var i = normalizeObjectUnits(config._i),
	            dayOrDate = i.day === undefined ? i.date : i.day;
	        config._a = map(
	            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
	            function (obj) {
	                return obj && parseInt(obj, 10);
	            }
	        );

	        configFromArray(config);
	    }

	    function createFromConfig(config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }

	        return res;
	    }

	    function prepareConfig(config) {
	        var input = config._i,
	            format = config._f;

	        config._locale = config._locale || getLocale(config._l);

	        if (input === null || (format === undefined && input === '')) {
	            return createInvalid({ nullInput: true });
	        }

	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }

	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isDate(input)) {
	            config._d = input;
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        } else {
	            configFromInput(config);
	        }

	        if (!isValid(config)) {
	            config._d = null;
	        }

	        return config;
	    }

	    function configFromInput(config) {
	        var input = config._i;
	        if (isUndefined(input)) {
	            config._d = new Date(hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(input.valueOf());
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (isObject(input)) {
	            configFromObject(config);
	        } else if (isNumber(input)) {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            hooks.createFromInputFallback(config);
	        }
	    }

	    function createLocalOrUTC(input, format, locale, strict, isUTC) {
	        var c = {};

	        if (format === true || format === false) {
	            strict = format;
	            format = undefined;
	        }

	        if (locale === true || locale === false) {
	            strict = locale;
	            locale = undefined;
	        }

	        if (
	            (isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)
	        ) {
	            input = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;

	        return createFromConfig(c);
	    }

	    function createLocal(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }

	    var prototypeMin = deprecate(
	            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	            function () {
	                var other = createLocal.apply(null, arguments);
	                if (this.isValid() && other.isValid()) {
	                    return other < this ? this : other;
	                } else {
	                    return createInvalid();
	                }
	            }
	        ),
	        prototypeMax = deprecate(
	            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	            function () {
	                var other = createLocal.apply(null, arguments);
	                if (this.isValid() && other.isValid()) {
	                    return other > this ? this : other;
	                } else {
	                    return createInvalid();
	                }
	            }
	        );

	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }

	    // TODO: Use [].sort instead?
	    function min() {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isBefore', args);
	    }

	    function max() {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isAfter', args);
	    }

	    var now = function () {
	        return Date.now ? Date.now() : +new Date();
	    };

	    var ordering = [
	        'year',
	        'quarter',
	        'month',
	        'week',
	        'day',
	        'hour',
	        'minute',
	        'second',
	        'millisecond',
	    ];

	    function isDurationValid(m) {
	        var key,
	            unitHasDecimal = false,
	            i,
	            orderLen = ordering.length;
	        for (key in m) {
	            if (
	                hasOwnProp(m, key) &&
	                !(
	                    indexOf.call(ordering, key) !== -1 &&
	                    (m[key] == null || !isNaN(m[key]))
	                )
	            ) {
	                return false;
	            }
	        }

	        for (i = 0; i < orderLen; ++i) {
	            if (m[ordering[i]]) {
	                if (unitHasDecimal) {
	                    return false; // only allow non-integers for smallest unit
	                }
	                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                    unitHasDecimal = true;
	                }
	            }
	        }

	        return true;
	    }

	    function isValid$1() {
	        return this._isValid;
	    }

	    function createInvalid$1() {
	        return createDuration(NaN);
	    }

	    function Duration(duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        this._isValid = isDurationValid(normalizedInput);

	        // representation for dateAddRemove
	        this._milliseconds =
	            +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days + weeks * 7;
	        // It is impossible to translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months + quarters * 3 + years * 12;

	        this._data = {};

	        this._locale = getLocale();

	        this._bubble();
	    }

	    function isDuration(obj) {
	        return obj instanceof Duration;
	    }

	    function absRound(number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }

	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if (
	                (dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
	            ) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    // FORMATTING

	    function offset(token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset(),
	                sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return (
	                sign +
	                zeroFill(~~(offset / 60), 2) +
	                separator +
	                zeroFill(~~offset % 60, 2)
	            );
	        });
	    }

	    offset('Z', ':');
	    offset('ZZ', '');

	    // PARSING

	    addRegexToken('Z', matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });

	    // HELPERS

	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;

	    function offsetFromString(matcher, string) {
	        var matches = (string || '').match(matcher),
	            chunk,
	            parts,
	            minutes;

	        if (matches === null) {
	            return null;
	        }

	        chunk = matches[matches.length - 1] || [];
	        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
	    }

	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff =
	                (isMoment(input) || isDate(input)
	                    ? input.valueOf()
	                    : createLocal(input).valueOf()) - res.valueOf();
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(res._d.valueOf() + diff);
	            hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return createLocal(input).local();
	        }
	    }

	    function getDateOffset(m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset());
	    }

	    // HOOKS

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    hooks.updateOffset = function () {};

	    // MOMENTS

	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset(input, keepLocalTime, keepMinutes) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	                if (input === null) {
	                    return this;
	                }
	            } else if (Math.abs(input) < 16 && !keepMinutes) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    addSubtract(
	                        this,
	                        createDuration(input - offset, 'm'),
	                        1,
	                        false
	                    );
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }

	    function getSetZone(input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }

	            this.utcOffset(input, keepLocalTime);

	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }

	    function setOffsetToUTC(keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }

	    function setOffsetToLocal(keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;

	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }

	    function setOffsetToParsedOffset() {
	        if (this._tzm != null) {
	            this.utcOffset(this._tzm, false, true);
	        } else if (typeof this._i === 'string') {
	            var tZone = offsetFromString(matchOffset, this._i);
	            if (tZone != null) {
	                this.utcOffset(tZone);
	            } else {
	                this.utcOffset(0, true);
	            }
	        }
	        return this;
	    }

	    function hasAlignedHourOffset(input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? createLocal(input).utcOffset() : 0;

	        return (this.utcOffset() - input) % 60 === 0;
	    }

	    function isDaylightSavingTime() {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }

	    function isDaylightSavingTimeShifted() {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }

	        var c = {},
	            other;

	        copyConfig(c, this);
	        c = prepareConfig(c);

	        if (c._a) {
	            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	            this._isDSTShifted =
	                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }

	        return this._isDSTShifted;
	    }

	    function isLocal() {
	        return this.isValid() ? !this._isUTC : false;
	    }

	    function isUtcOffset() {
	        return this.isValid() ? this._isUTC : false;
	    }

	    function isUtc() {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }

	    // ASP.NET json date format regex
	    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
	        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	        // and further modified to allow for strings containing both week and day
	        isoRegex =
	            /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

	    function createDuration(input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;

	        if (isDuration(input)) {
	            duration = {
	                ms: input._milliseconds,
	                d: input._days,
	                M: input._months,
	            };
	        } else if (isNumber(input) || !isNaN(+input)) {
	            duration = {};
	            if (key) {
	                duration[key] = +input;
	            } else {
	                duration.milliseconds = +input;
	            }
	        } else if ((match = aspNetRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: 0,
	                d: toInt(match[DATE]) * sign,
	                h: toInt(match[HOUR]) * sign,
	                m: toInt(match[MINUTE]) * sign,
	                s: toInt(match[SECOND]) * sign,
	                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
	            };
	        } else if ((match = isoRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: parseIso(match[2], sign),
	                M: parseIso(match[3], sign),
	                w: parseIso(match[4], sign),
	                d: parseIso(match[5], sign),
	                h: parseIso(match[6], sign),
	                m: parseIso(match[7], sign),
	                s: parseIso(match[8], sign),
	            };
	        } else if (duration == null) {
	            // checks for null or undefined
	            duration = {};
	        } else if (
	            typeof duration === 'object' &&
	            ('from' in duration || 'to' in duration)
	        ) {
	            diffRes = momentsDifference(
	                createLocal(duration.from),
	                createLocal(duration.to)
	            );

	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }

	        ret = new Duration(duration);

	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }

	        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
	            ret._isValid = input._isValid;
	        }

	        return ret;
	    }

	    createDuration.fn = Duration.prototype;
	    createDuration.invalid = createInvalid$1;

	    function parseIso(inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }

	    function positiveMomentsDifference(base, other) {
	        var res = {};

	        res.months =
	            other.month() - base.month() + (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }

	        res.milliseconds = +other - +base.clone().add(res.months, 'M');

	        return res;
	    }

	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return { milliseconds: 0, months: 0 };
	        }

	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }

	        return res;
	    }

	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(
	                    name,
	                    'moment().' +
	                        name +
	                        '(period, number) is deprecated. Please use moment().' +
	                        name +
	                        '(number, period). ' +
	                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
	                );
	                tmp = val;
	                val = period;
	                period = tmp;
	            }

	            dur = createDuration(val, period);
	            addSubtract(this, dur, direction);
	            return this;
	        };
	    }

	    function addSubtract(mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);

	        if (!mom.isValid()) {
	            // No op
	            return;
	        }

	        updateOffset = updateOffset == null ? true : updateOffset;

	        if (months) {
	            setMonth(mom, get(mom, 'Month') + months * isAdding);
	        }
	        if (days) {
	            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	        }
	        if (milliseconds) {
	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	        }
	        if (updateOffset) {
	            hooks.updateOffset(mom, days || months);
	        }
	    }

	    var add = createAdder(1, 'add'),
	        subtract = createAdder(-1, 'subtract');

	    function isString(input) {
	        return typeof input === 'string' || input instanceof String;
	    }

	    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
	    function isMomentInput(input) {
	        return (
	            isMoment(input) ||
	            isDate(input) ||
	            isString(input) ||
	            isNumber(input) ||
	            isNumberOrStringArray(input) ||
	            isMomentInputObject(input) ||
	            input === null ||
	            input === undefined
	        );
	    }

	    function isMomentInputObject(input) {
	        var objectTest = isObject(input) && !isObjectEmpty(input),
	            propertyTest = false,
	            properties = [
	                'years',
	                'year',
	                'y',
	                'months',
	                'month',
	                'M',
	                'days',
	                'day',
	                'd',
	                'dates',
	                'date',
	                'D',
	                'hours',
	                'hour',
	                'h',
	                'minutes',
	                'minute',
	                'm',
	                'seconds',
	                'second',
	                's',
	                'milliseconds',
	                'millisecond',
	                'ms',
	            ],
	            i,
	            property,
	            propertyLen = properties.length;

	        for (i = 0; i < propertyLen; i += 1) {
	            property = properties[i];
	            propertyTest = propertyTest || hasOwnProp(input, property);
	        }

	        return objectTest && propertyTest;
	    }

	    function isNumberOrStringArray(input) {
	        var arrayTest = isArray(input),
	            dataTypeTest = false;
	        if (arrayTest) {
	            dataTypeTest =
	                input.filter(function (item) {
	                    return !isNumber(item) && isString(input);
	                }).length === 0;
	        }
	        return arrayTest && dataTypeTest;
	    }

	    function isCalendarSpec(input) {
	        var objectTest = isObject(input) && !isObjectEmpty(input),
	            propertyTest = false,
	            properties = [
	                'sameDay',
	                'nextDay',
	                'lastDay',
	                'nextWeek',
	                'lastWeek',
	                'sameElse',
	            ],
	            i,
	            property;

	        for (i = 0; i < properties.length; i += 1) {
	            property = properties[i];
	            propertyTest = propertyTest || hasOwnProp(input, property);
	        }

	        return objectTest && propertyTest;
	    }

	    function getCalendarFormat(myMoment, now) {
	        var diff = myMoment.diff(now, 'days', true);
	        return diff < -6
	            ? 'sameElse'
	            : diff < -1
	            ? 'lastWeek'
	            : diff < 0
	            ? 'lastDay'
	            : diff < 1
	            ? 'sameDay'
	            : diff < 2
	            ? 'nextDay'
	            : diff < 7
	            ? 'nextWeek'
	            : 'sameElse';
	    }

	    function calendar$1(time, formats) {
	        // Support for single parameter, formats only overload to the calendar function
	        if (arguments.length === 1) {
	            if (!arguments[0]) {
	                time = undefined;
	                formats = undefined;
	            } else if (isMomentInput(arguments[0])) {
	                time = arguments[0];
	                formats = undefined;
	            } else if (isCalendarSpec(arguments[0])) {
	                formats = arguments[0];
	                time = undefined;
	            }
	        }
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            format = hooks.calendarFormat(this, sod) || 'sameElse',
	            output =
	                formats &&
	                (isFunction(formats[format])
	                    ? formats[format].call(this, now)
	                    : formats[format]);

	        return this.format(
	            output || this.localeData().calendar(format, this, createLocal(now))
	        );
	    }

	    function clone() {
	        return new Moment(this);
	    }

	    function isAfter(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() > localInput.valueOf();
	        } else {
	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
	        }
	    }

	    function isBefore(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() < localInput.valueOf();
	        } else {
	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
	        }
	    }

	    function isBetween(from, to, units, inclusivity) {
	        var localFrom = isMoment(from) ? from : createLocal(from),
	            localTo = isMoment(to) ? to : createLocal(to);
	        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
	            return false;
	        }
	        inclusivity = inclusivity || '()';
	        return (
	            (inclusivity[0] === '('
	                ? this.isAfter(localFrom, units)
	                : !this.isBefore(localFrom, units)) &&
	            (inclusivity[1] === ')'
	                ? this.isBefore(localTo, units)
	                : !this.isAfter(localTo, units))
	        );
	    }

	    function isSame(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() === localInput.valueOf();
	        } else {
	            inputMs = localInput.valueOf();
	            return (
	                this.clone().startOf(units).valueOf() <= inputMs &&
	                inputMs <= this.clone().endOf(units).valueOf()
	            );
	        }
	    }

	    function isSameOrAfter(input, units) {
	        return this.isSame(input, units) || this.isAfter(input, units);
	    }

	    function isSameOrBefore(input, units) {
	        return this.isSame(input, units) || this.isBefore(input, units);
	    }

	    function diff(input, units, asFloat) {
	        var that, zoneDelta, output;

	        if (!this.isValid()) {
	            return NaN;
	        }

	        that = cloneWithOffset(input, this);

	        if (!that.isValid()) {
	            return NaN;
	        }

	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	        units = normalizeUnits(units);

	        switch (units) {
	            case 'year':
	                output = monthDiff(this, that) / 12;
	                break;
	            case 'month':
	                output = monthDiff(this, that);
	                break;
	            case 'quarter':
	                output = monthDiff(this, that) / 3;
	                break;
	            case 'second':
	                output = (this - that) / 1e3;
	                break; // 1000
	            case 'minute':
	                output = (this - that) / 6e4;
	                break; // 1000 * 60
	            case 'hour':
	                output = (this - that) / 36e5;
	                break; // 1000 * 60 * 60
	            case 'day':
	                output = (this - that - zoneDelta) / 864e5;
	                break; // 1000 * 60 * 60 * 24, negate dst
	            case 'week':
	                output = (this - that - zoneDelta) / 6048e5;
	                break; // 1000 * 60 * 60 * 24 * 7, negate dst
	            default:
	                output = this - that;
	        }

	        return asFloat ? output : absFloor(output);
	    }

	    function monthDiff(a, b) {
	        if (a.date() < b.date()) {
	            // end-of-month calculations work correct when the start month has more
	            // days than the end month.
	            return -monthDiff(b, a);
	        }
	        // difference in months
	        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2,
	            adjust;

	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }

	        //check for negative zero, return zero if negative zero
	        return -(wholeMonthDiff + adjust) || 0;
	    }

	    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	    function toString() {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }

	    function toISOString(keepOffset) {
	        if (!this.isValid()) {
	            return null;
	        }
	        var utc = keepOffset !== true,
	            m = utc ? this.clone().utc() : this;
	        if (m.year() < 0 || m.year() > 9999) {
	            return formatMoment(
	                m,
	                utc
	                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
	                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
	            );
	        }
	        if (isFunction(Date.prototype.toISOString)) {
	            // native implementation is ~50x faster, use it when we can
	            if (utc) {
	                return this.toDate().toISOString();
	            } else {
	                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
	                    .toISOString()
	                    .replace('Z', formatMoment(m, 'Z'));
	            }
	        }
	        return formatMoment(
	            m,
	            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
	        );
	    }

	    /**
	     * Return a human readable representation of a moment that can
	     * also be evaluated to get a new moment which is the same
	     *
	     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	     */
	    function inspect() {
	        if (!this.isValid()) {
	            return 'moment.invalid(/* ' + this._i + ' */)';
	        }
	        var func = 'moment',
	            zone = '',
	            prefix,
	            year,
	            datetime,
	            suffix;
	        if (!this.isLocal()) {
	            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	            zone = 'Z';
	        }
	        prefix = '[' + func + '("]';
	        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
	        datetime = '-MM-DD[T]HH:mm:ss.SSS';
	        suffix = zone + '[")]';

	        return this.format(prefix + year + datetime + suffix);
	    }

	    function format(inputString) {
	        if (!inputString) {
	            inputString = this.isUtc()
	                ? hooks.defaultFormatUtc
	                : hooks.defaultFormat;
	        }
	        var output = formatMoment(this, inputString);
	        return this.localeData().postformat(output);
	    }

	    function from(time, withoutSuffix) {
	        if (
	            this.isValid() &&
	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
	        ) {
	            return createDuration({ to: this, from: time })
	                .locale(this.locale())
	                .humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function fromNow(withoutSuffix) {
	        return this.from(createLocal(), withoutSuffix);
	    }

	    function to(time, withoutSuffix) {
	        if (
	            this.isValid() &&
	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
	        ) {
	            return createDuration({ from: this, to: time })
	                .locale(this.locale())
	                .humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function toNow(withoutSuffix) {
	        return this.to(createLocal(), withoutSuffix);
	    }

	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale(key) {
	        var newLocaleData;

	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }

	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );

	    function localeData() {
	        return this._locale;
	    }

	    var MS_PER_SECOND = 1000,
	        MS_PER_MINUTE = 60 * MS_PER_SECOND,
	        MS_PER_HOUR = 60 * MS_PER_MINUTE,
	        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

	    // actual modulo - handles negative numbers (for dates before 1970):
	    function mod$1(dividend, divisor) {
	        return ((dividend % divisor) + divisor) % divisor;
	    }

	    function localStartOfDate(y, m, d) {
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return new Date(y, m, d).valueOf();
	        }
	    }

	    function utcStartOfDate(y, m, d) {
	        // Date.UTC remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return Date.UTC(y, m, d);
	        }
	    }

	    function startOf(units) {
	        var time, startOfDate;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }

	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year(), 0, 1);
	                break;
	            case 'quarter':
	                time = startOfDate(
	                    this.year(),
	                    this.month() - (this.month() % 3),
	                    1
	                );
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month(), 1);
	                break;
	            case 'week':
	                time = startOfDate(
	                    this.year(),
	                    this.month(),
	                    this.date() - this.weekday()
	                );
	                break;
	            case 'isoWeek':
	                time = startOfDate(
	                    this.year(),
	                    this.month(),
	                    this.date() - (this.isoWeekday() - 1)
	                );
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date());
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time -= mod$1(
	                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
	                    MS_PER_HOUR
	                );
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_MINUTE);
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_SECOND);
	                break;
	        }

	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }

	    function endOf(units) {
	        var time, startOfDate;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }

	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year() + 1, 0, 1) - 1;
	                break;
	            case 'quarter':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month() - (this.month() % 3) + 3,
	                        1
	                    ) - 1;
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
	                break;
	            case 'week':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month(),
	                        this.date() - this.weekday() + 7
	                    ) - 1;
	                break;
	            case 'isoWeek':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month(),
	                        this.date() - (this.isoWeekday() - 1) + 7
	                    ) - 1;
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time +=
	                    MS_PER_HOUR -
	                    mod$1(
	                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
	                        MS_PER_HOUR
	                    ) -
	                    1;
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
	                break;
	        }

	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }

	    function valueOf() {
	        return this._d.valueOf() - (this._offset || 0) * 60000;
	    }

	    function unix() {
	        return Math.floor(this.valueOf() / 1000);
	    }

	    function toDate() {
	        return new Date(this.valueOf());
	    }

	    function toArray() {
	        var m = this;
	        return [
	            m.year(),
	            m.month(),
	            m.date(),
	            m.hour(),
	            m.minute(),
	            m.second(),
	            m.millisecond(),
	        ];
	    }

	    function toObject() {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds(),
	        };
	    }

	    function toJSON() {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }

	    function isValid$2() {
	        return isValid(this);
	    }

	    function parsingFlags() {
	        return extend({}, getParsingFlags(this));
	    }

	    function invalidAt() {
	        return getParsingFlags(this).overflow;
	    }

	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict,
	        };
	    }

	    addFormatToken('N', 0, 0, 'eraAbbr');
	    addFormatToken('NN', 0, 0, 'eraAbbr');
	    addFormatToken('NNN', 0, 0, 'eraAbbr');
	    addFormatToken('NNNN', 0, 0, 'eraName');
	    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

	    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
	    addFormatToken('y', ['yy', 2], 0, 'eraYear');
	    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
	    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

	    addRegexToken('N', matchEraAbbr);
	    addRegexToken('NN', matchEraAbbr);
	    addRegexToken('NNN', matchEraAbbr);
	    addRegexToken('NNNN', matchEraName);
	    addRegexToken('NNNNN', matchEraNarrow);

	    addParseToken(
	        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
	        function (input, array, config, token) {
	            var era = config._locale.erasParse(input, token, config._strict);
	            if (era) {
	                getParsingFlags(config).era = era;
	            } else {
	                getParsingFlags(config).invalidEra = input;
	            }
	        }
	    );

	    addRegexToken('y', matchUnsigned);
	    addRegexToken('yy', matchUnsigned);
	    addRegexToken('yyy', matchUnsigned);
	    addRegexToken('yyyy', matchUnsigned);
	    addRegexToken('yo', matchEraYearOrdinal);

	    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
	    addParseToken(['yo'], function (input, array, config, token) {
	        var match;
	        if (config._locale._eraYearOrdinalRegex) {
	            match = input.match(config._locale._eraYearOrdinalRegex);
	        }

	        if (config._locale.eraYearOrdinalParse) {
	            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
	        } else {
	            array[YEAR] = parseInt(input, 10);
	        }
	    });

	    function localeEras(m, format) {
	        var i,
	            l,
	            date,
	            eras = this._eras || getLocale('en')._eras;
	        for (i = 0, l = eras.length; i < l; ++i) {
	            switch (typeof eras[i].since) {
	                case 'string':
	                    // truncate time
	                    date = hooks(eras[i].since).startOf('day');
	                    eras[i].since = date.valueOf();
	                    break;
	            }

	            switch (typeof eras[i].until) {
	                case 'undefined':
	                    eras[i].until = +Infinity;
	                    break;
	                case 'string':
	                    // truncate time
	                    date = hooks(eras[i].until).startOf('day').valueOf();
	                    eras[i].until = date.valueOf();
	                    break;
	            }
	        }
	        return eras;
	    }

	    function localeErasParse(eraName, format, strict) {
	        var i,
	            l,
	            eras = this.eras(),
	            name,
	            abbr,
	            narrow;
	        eraName = eraName.toUpperCase();

	        for (i = 0, l = eras.length; i < l; ++i) {
	            name = eras[i].name.toUpperCase();
	            abbr = eras[i].abbr.toUpperCase();
	            narrow = eras[i].narrow.toUpperCase();

	            if (strict) {
	                switch (format) {
	                    case 'N':
	                    case 'NN':
	                    case 'NNN':
	                        if (abbr === eraName) {
	                            return eras[i];
	                        }
	                        break;

	                    case 'NNNN':
	                        if (name === eraName) {
	                            return eras[i];
	                        }
	                        break;

	                    case 'NNNNN':
	                        if (narrow === eraName) {
	                            return eras[i];
	                        }
	                        break;
	                }
	            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
	                return eras[i];
	            }
	        }
	    }

	    function localeErasConvertYear(era, year) {
	        var dir = era.since <= era.until ? +1 : -1;
	        if (year === undefined) {
	            return hooks(era.since).year();
	        } else {
	            return hooks(era.since).year() + (year - era.offset) * dir;
	        }
	    }

	    function getEraName() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();

	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].name;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].name;
	            }
	        }

	        return '';
	    }

	    function getEraNarrow() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();

	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].narrow;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].narrow;
	            }
	        }

	        return '';
	    }

	    function getEraAbbr() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();

	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].abbr;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].abbr;
	            }
	        }

	        return '';
	    }

	    function getEraYear() {
	        var i,
	            l,
	            dir,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            dir = eras[i].since <= eras[i].until ? +1 : -1;

	            // truncate time
	            val = this.clone().startOf('day').valueOf();

	            if (
	                (eras[i].since <= val && val <= eras[i].until) ||
	                (eras[i].until <= val && val <= eras[i].since)
	            ) {
	                return (
	                    (this.year() - hooks(eras[i].since).year()) * dir +
	                    eras[i].offset
	                );
	            }
	        }

	        return this.year();
	    }

	    function erasNameRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasNameRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasNameRegex : this._erasRegex;
	    }

	    function erasAbbrRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasAbbrRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasAbbrRegex : this._erasRegex;
	    }

	    function erasNarrowRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasNarrowRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasNarrowRegex : this._erasRegex;
	    }

	    function matchEraAbbr(isStrict, locale) {
	        return locale.erasAbbrRegex(isStrict);
	    }

	    function matchEraName(isStrict, locale) {
	        return locale.erasNameRegex(isStrict);
	    }

	    function matchEraNarrow(isStrict, locale) {
	        return locale.erasNarrowRegex(isStrict);
	    }

	    function matchEraYearOrdinal(isStrict, locale) {
	        return locale._eraYearOrdinalRegex || matchUnsigned;
	    }

	    function computeErasParse() {
	        var abbrPieces = [],
	            namePieces = [],
	            narrowPieces = [],
	            mixedPieces = [],
	            i,
	            l,
	            eras = this.eras();

	        for (i = 0, l = eras.length; i < l; ++i) {
	            namePieces.push(regexEscape(eras[i].name));
	            abbrPieces.push(regexEscape(eras[i].abbr));
	            narrowPieces.push(regexEscape(eras[i].narrow));

	            mixedPieces.push(regexEscape(eras[i].name));
	            mixedPieces.push(regexEscape(eras[i].abbr));
	            mixedPieces.push(regexEscape(eras[i].narrow));
	        }

	        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
	        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
	        this._erasNarrowRegex = new RegExp(
	            '^(' + narrowPieces.join('|') + ')',
	            'i'
	        );
	    }

	    // FORMATTING

	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });

	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });

	    function addWeekYearFormatToken(token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }

	    addWeekYearFormatToken('gggg', 'weekYear');
	    addWeekYearFormatToken('ggggg', 'weekYear');
	    addWeekYearFormatToken('GGGG', 'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	    // ALIASES

	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');

	    // PRIORITY

	    addUnitPriority('weekYear', 1);
	    addUnitPriority('isoWeekYear', 1);

	    // PARSING

	    addRegexToken('G', matchSigned);
	    addRegexToken('g', matchSigned);
	    addRegexToken('GG', match1to2, match2);
	    addRegexToken('gg', match1to2, match2);
	    addRegexToken('GGGG', match1to4, match4);
	    addRegexToken('gggg', match1to4, match4);
	    addRegexToken('GGGGG', match1to6, match6);
	    addRegexToken('ggggg', match1to6, match6);

	    addWeekParseToken(
	        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
	        function (input, week, config, token) {
	            week[token.substr(0, 2)] = toInt(input);
	        }
	    );

	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = hooks.parseTwoDigitYear(input);
	    });

	    // MOMENTS

	    function getSetWeekYear(input) {
	        return getSetWeekYearHelper.call(
	            this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy
	        );
	    }

	    function getSetISOWeekYear(input) {
	        return getSetWeekYearHelper.call(
	            this,
	            input,
	            this.isoWeek(),
	            this.isoWeekday(),
	            1,
	            4
	        );
	    }

	    function getISOWeeksInYear() {
	        return weeksInYear(this.year(), 1, 4);
	    }

	    function getISOWeeksInISOWeekYear() {
	        return weeksInYear(this.isoWeekYear(), 1, 4);
	    }

	    function getWeeksInYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }

	    function getWeeksInWeekYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
	    }

	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }

	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }

	    // FORMATTING

	    addFormatToken('Q', 0, 'Qo', 'quarter');

	    // ALIASES

	    addUnitAlias('quarter', 'Q');

	    // PRIORITY

	    addUnitPriority('quarter', 7);

	    // PARSING

	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });

	    // MOMENTS

	    function getSetQuarter(input) {
	        return input == null
	            ? Math.ceil((this.month() + 1) / 3)
	            : this.month((input - 1) * 3 + (this.month() % 3));
	    }

	    // FORMATTING

	    addFormatToken('D', ['DD', 2], 'Do', 'date');

	    // ALIASES

	    addUnitAlias('date', 'D');

	    // PRIORITY
	    addUnitPriority('date', 9);

	    // PARSING

	    addRegexToken('D', match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        return isStrict
	            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
	            : locale._dayOfMonthOrdinalParseLenient;
	    });

	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0]);
	    });

	    // MOMENTS

	    var getSetDayOfMonth = makeGetSet('Date', true);

	    // FORMATTING

	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	    // ALIASES

	    addUnitAlias('dayOfYear', 'DDD');

	    // PRIORITY
	    addUnitPriority('dayOfYear', 4);

	    // PARSING

	    addRegexToken('DDD', match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });

	    // HELPERS

	    // MOMENTS

	    function getSetDayOfYear(input) {
	        var dayOfYear =
	            Math.round(
	                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
	            ) + 1;
	        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
	    }

	    // FORMATTING

	    addFormatToken('m', ['mm', 2], 0, 'minute');

	    // ALIASES

	    addUnitAlias('minute', 'm');

	    // PRIORITY

	    addUnitPriority('minute', 14);

	    // PARSING

	    addRegexToken('m', match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);

	    // MOMENTS

	    var getSetMinute = makeGetSet('Minutes', false);

	    // FORMATTING

	    addFormatToken('s', ['ss', 2], 0, 'second');

	    // ALIASES

	    addUnitAlias('second', 's');

	    // PRIORITY

	    addUnitPriority('second', 15);

	    // PARSING

	    addRegexToken('s', match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);

	    // MOMENTS

	    var getSetSecond = makeGetSet('Seconds', false);

	    // FORMATTING

	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });

	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });

	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });

	    // ALIASES

	    addUnitAlias('millisecond', 'ms');

	    // PRIORITY

	    addUnitPriority('millisecond', 16);

	    // PARSING

	    addRegexToken('S', match1to3, match1);
	    addRegexToken('SS', match1to3, match2);
	    addRegexToken('SSS', match1to3, match3);

	    var token, getSetMillisecond;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }

	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }

	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }

	    getSetMillisecond = makeGetSet('Milliseconds', false);

	    // FORMATTING

	    addFormatToken('z', 0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');

	    // MOMENTS

	    function getZoneAbbr() {
	        return this._isUTC ? 'UTC' : '';
	    }

	    function getZoneName() {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }

	    var proto = Moment.prototype;

	    proto.add = add;
	    proto.calendar = calendar$1;
	    proto.clone = clone;
	    proto.diff = diff;
	    proto.endOf = endOf;
	    proto.format = format;
	    proto.from = from;
	    proto.fromNow = fromNow;
	    proto.to = to;
	    proto.toNow = toNow;
	    proto.get = stringGet;
	    proto.invalidAt = invalidAt;
	    proto.isAfter = isAfter;
	    proto.isBefore = isBefore;
	    proto.isBetween = isBetween;
	    proto.isSame = isSame;
	    proto.isSameOrAfter = isSameOrAfter;
	    proto.isSameOrBefore = isSameOrBefore;
	    proto.isValid = isValid$2;
	    proto.lang = lang;
	    proto.locale = locale;
	    proto.localeData = localeData;
	    proto.max = prototypeMax;
	    proto.min = prototypeMin;
	    proto.parsingFlags = parsingFlags;
	    proto.set = stringSet;
	    proto.startOf = startOf;
	    proto.subtract = subtract;
	    proto.toArray = toArray;
	    proto.toObject = toObject;
	    proto.toDate = toDate;
	    proto.toISOString = toISOString;
	    proto.inspect = inspect;
	    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
	        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
	            return 'Moment<' + this.format() + '>';
	        };
	    }
	    proto.toJSON = toJSON;
	    proto.toString = toString;
	    proto.unix = unix;
	    proto.valueOf = valueOf;
	    proto.creationData = creationData;
	    proto.eraName = getEraName;
	    proto.eraNarrow = getEraNarrow;
	    proto.eraAbbr = getEraAbbr;
	    proto.eraYear = getEraYear;
	    proto.year = getSetYear;
	    proto.isLeapYear = getIsLeapYear;
	    proto.weekYear = getSetWeekYear;
	    proto.isoWeekYear = getSetISOWeekYear;
	    proto.quarter = proto.quarters = getSetQuarter;
	    proto.month = getSetMonth;
	    proto.daysInMonth = getDaysInMonth;
	    proto.week = proto.weeks = getSetWeek;
	    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
	    proto.weeksInYear = getWeeksInYear;
	    proto.weeksInWeekYear = getWeeksInWeekYear;
	    proto.isoWeeksInYear = getISOWeeksInYear;
	    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
	    proto.date = getSetDayOfMonth;
	    proto.day = proto.days = getSetDayOfWeek;
	    proto.weekday = getSetLocaleDayOfWeek;
	    proto.isoWeekday = getSetISODayOfWeek;
	    proto.dayOfYear = getSetDayOfYear;
	    proto.hour = proto.hours = getSetHour;
	    proto.minute = proto.minutes = getSetMinute;
	    proto.second = proto.seconds = getSetSecond;
	    proto.millisecond = proto.milliseconds = getSetMillisecond;
	    proto.utcOffset = getSetOffset;
	    proto.utc = setOffsetToUTC;
	    proto.local = setOffsetToLocal;
	    proto.parseZone = setOffsetToParsedOffset;
	    proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    proto.isDST = isDaylightSavingTime;
	    proto.isLocal = isLocal;
	    proto.isUtcOffset = isUtcOffset;
	    proto.isUtc = isUtc;
	    proto.isUTC = isUtc;
	    proto.zoneAbbr = getZoneAbbr;
	    proto.zoneName = getZoneName;
	    proto.dates = deprecate(
	        'dates accessor is deprecated. Use date instead.',
	        getSetDayOfMonth
	    );
	    proto.months = deprecate(
	        'months accessor is deprecated. Use month instead',
	        getSetMonth
	    );
	    proto.years = deprecate(
	        'years accessor is deprecated. Use year instead',
	        getSetYear
	    );
	    proto.zone = deprecate(
	        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
	        getSetZone
	    );
	    proto.isDSTShifted = deprecate(
	        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
	        isDaylightSavingTimeShifted
	    );

	    function createUnix(input) {
	        return createLocal(input * 1000);
	    }

	    function createInZone() {
	        return createLocal.apply(null, arguments).parseZone();
	    }

	    function preParsePostFormat(string) {
	        return string;
	    }

	    var proto$1 = Locale.prototype;

	    proto$1.calendar = calendar;
	    proto$1.longDateFormat = longDateFormat;
	    proto$1.invalidDate = invalidDate;
	    proto$1.ordinal = ordinal;
	    proto$1.preparse = preParsePostFormat;
	    proto$1.postformat = preParsePostFormat;
	    proto$1.relativeTime = relativeTime;
	    proto$1.pastFuture = pastFuture;
	    proto$1.set = set;
	    proto$1.eras = localeEras;
	    proto$1.erasParse = localeErasParse;
	    proto$1.erasConvertYear = localeErasConvertYear;
	    proto$1.erasAbbrRegex = erasAbbrRegex;
	    proto$1.erasNameRegex = erasNameRegex;
	    proto$1.erasNarrowRegex = erasNarrowRegex;

	    proto$1.months = localeMonths;
	    proto$1.monthsShort = localeMonthsShort;
	    proto$1.monthsParse = localeMonthsParse;
	    proto$1.monthsRegex = monthsRegex;
	    proto$1.monthsShortRegex = monthsShortRegex;
	    proto$1.week = localeWeek;
	    proto$1.firstDayOfYear = localeFirstDayOfYear;
	    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

	    proto$1.weekdays = localeWeekdays;
	    proto$1.weekdaysMin = localeWeekdaysMin;
	    proto$1.weekdaysShort = localeWeekdaysShort;
	    proto$1.weekdaysParse = localeWeekdaysParse;

	    proto$1.weekdaysRegex = weekdaysRegex;
	    proto$1.weekdaysShortRegex = weekdaysShortRegex;
	    proto$1.weekdaysMinRegex = weekdaysMinRegex;

	    proto$1.isPM = localeIsPM;
	    proto$1.meridiem = localeMeridiem;

	    function get$1(format, index, field, setter) {
	        var locale = getLocale(),
	            utc = createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }

	    function listMonthsImpl(format, index, field) {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';

	        if (index != null) {
	            return get$1(format, index, field, 'month');
	        }

	        var i,
	            out = [];
	        for (i = 0; i < 12; i++) {
	            out[i] = get$1(format, i, field, 'month');
	        }
	        return out;
	    }

	    // ()
	    // (5)
	    // (fmt, 5)
	    // (fmt)
	    // (true)
	    // (true, 5)
	    // (true, fmt, 5)
	    // (true, fmt)
	    function listWeekdaysImpl(localeSorted, format, index, field) {
	        if (typeof localeSorted === 'boolean') {
	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        } else {
	            format = localeSorted;
	            index = format;
	            localeSorted = false;

	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        }

	        var locale = getLocale(),
	            shift = localeSorted ? locale._week.dow : 0,
	            i,
	            out = [];

	        if (index != null) {
	            return get$1(format, (index + shift) % 7, field, 'day');
	        }

	        for (i = 0; i < 7; i++) {
	            out[i] = get$1(format, (i + shift) % 7, field, 'day');
	        }
	        return out;
	    }

	    function listMonths(format, index) {
	        return listMonthsImpl(format, index, 'months');
	    }

	    function listMonthsShort(format, index) {
	        return listMonthsImpl(format, index, 'monthsShort');
	    }

	    function listWeekdays(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	    }

	    function listWeekdaysShort(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	    }

	    function listWeekdaysMin(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	    }

	    getSetGlobalLocale('en', {
	        eras: [
	            {
	                since: '0001-01-01',
	                until: +Infinity,
	                offset: 1,
	                name: 'Anno Domini',
	                narrow: 'AD',
	                abbr: 'AD',
	            },
	            {
	                since: '0000-12-31',
	                until: -Infinity,
	                offset: 1,
	                name: 'Before Christ',
	                narrow: 'BC',
	                abbr: 'BC',
	            },
	        ],
	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    toInt((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	    });

	    // Side effect imports

	    hooks.lang = deprecate(
	        'moment.lang is deprecated. Use moment.locale instead.',
	        getSetGlobalLocale
	    );
	    hooks.langData = deprecate(
	        'moment.langData is deprecated. Use moment.localeData instead.',
	        getLocale
	    );

	    var mathAbs = Math.abs;

	    function abs() {
	        var data = this._data;

	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days = mathAbs(this._days);
	        this._months = mathAbs(this._months);

	        data.milliseconds = mathAbs(data.milliseconds);
	        data.seconds = mathAbs(data.seconds);
	        data.minutes = mathAbs(data.minutes);
	        data.hours = mathAbs(data.hours);
	        data.months = mathAbs(data.months);
	        data.years = mathAbs(data.years);

	        return this;
	    }

	    function addSubtract$1(duration, input, value, direction) {
	        var other = createDuration(input, value);

	        duration._milliseconds += direction * other._milliseconds;
	        duration._days += direction * other._days;
	        duration._months += direction * other._months;

	        return duration._bubble();
	    }

	    // supports only 2.0-style add(1, 's') or add(duration)
	    function add$1(input, value) {
	        return addSubtract$1(this, input, value, 1);
	    }

	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function subtract$1(input, value) {
	        return addSubtract$1(this, input, value, -1);
	    }

	    function absCeil(number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }

	    function bubble() {
	        var milliseconds = this._milliseconds,
	            days = this._days,
	            months = this._months,
	            data = this._data,
	            seconds,
	            minutes,
	            hours,
	            years,
	            monthsFromDays;

	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (
	            !(
	                (milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0)
	            )
	        ) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }

	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;

	        seconds = absFloor(milliseconds / 1000);
	        data.seconds = seconds % 60;

	        minutes = absFloor(seconds / 60);
	        data.minutes = minutes % 60;

	        hours = absFloor(minutes / 60);
	        data.hours = hours % 24;

	        days += absFloor(hours / 24);

	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        data.days = days;
	        data.months = months;
	        data.years = years;

	        return this;
	    }

	    function daysToMonths(days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return (days * 4800) / 146097;
	    }

	    function monthsToDays(months) {
	        // the reverse of daysToMonths
	        return (months * 146097) / 4800;
	    }

	    function as(units) {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        var days,
	            months,
	            milliseconds = this._milliseconds;

	        units = normalizeUnits(units);

	        if (units === 'month' || units === 'quarter' || units === 'year') {
	            days = this._days + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            switch (units) {
	                case 'month':
	                    return months;
	                case 'quarter':
	                    return months / 3;
	                case 'year':
	                    return months / 12;
	            }
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week':
	                    return days / 7 + milliseconds / 6048e5;
	                case 'day':
	                    return days + milliseconds / 864e5;
	                case 'hour':
	                    return days * 24 + milliseconds / 36e5;
	                case 'minute':
	                    return days * 1440 + milliseconds / 6e4;
	                case 'second':
	                    return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond':
	                    return Math.floor(days * 864e5) + milliseconds;
	                default:
	                    throw new Error('Unknown unit ' + units);
	            }
	        }
	    }

	    // TODO: Use this.as('ms')?
	    function valueOf$1() {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }

	    function makeAs(alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }

	    var asMilliseconds = makeAs('ms'),
	        asSeconds = makeAs('s'),
	        asMinutes = makeAs('m'),
	        asHours = makeAs('h'),
	        asDays = makeAs('d'),
	        asWeeks = makeAs('w'),
	        asMonths = makeAs('M'),
	        asQuarters = makeAs('Q'),
	        asYears = makeAs('y');

	    function clone$1() {
	        return createDuration(this);
	    }

	    function get$2(units) {
	        units = normalizeUnits(units);
	        return this.isValid() ? this[units + 's']() : NaN;
	    }

	    function makeGetter(name) {
	        return function () {
	            return this.isValid() ? this._data[name] : NaN;
	        };
	    }

	    var milliseconds = makeGetter('milliseconds'),
	        seconds = makeGetter('seconds'),
	        minutes = makeGetter('minutes'),
	        hours = makeGetter('hours'),
	        days = makeGetter('days'),
	        months = makeGetter('months'),
	        years = makeGetter('years');

	    function weeks() {
	        return absFloor(this.days() / 7);
	    }

	    var round = Math.round,
	        thresholds = {
	            ss: 44, // a few seconds to seconds
	            s: 45, // seconds to minute
	            m: 45, // minutes to hour
	            h: 22, // hours to day
	            d: 26, // days to month/week
	            w: null, // weeks to month
	            M: 11, // months to year
	        };

	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
	        var duration = createDuration(posNegDuration).abs(),
	            seconds = round(duration.as('s')),
	            minutes = round(duration.as('m')),
	            hours = round(duration.as('h')),
	            days = round(duration.as('d')),
	            months = round(duration.as('M')),
	            weeks = round(duration.as('w')),
	            years = round(duration.as('y')),
	            a =
	                (seconds <= thresholds.ss && ['s', seconds]) ||
	                (seconds < thresholds.s && ['ss', seconds]) ||
	                (minutes <= 1 && ['m']) ||
	                (minutes < thresholds.m && ['mm', minutes]) ||
	                (hours <= 1 && ['h']) ||
	                (hours < thresholds.h && ['hh', hours]) ||
	                (days <= 1 && ['d']) ||
	                (days < thresholds.d && ['dd', days]);

	        if (thresholds.w != null) {
	            a =
	                a ||
	                (weeks <= 1 && ['w']) ||
	                (weeks < thresholds.w && ['ww', weeks]);
	        }
	        a = a ||
	            (months <= 1 && ['M']) ||
	            (months < thresholds.M && ['MM', months]) ||
	            (years <= 1 && ['y']) || ['yy', years];

	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }

	    // This function allows you to set the rounding function for relative time strings
	    function getSetRelativeTimeRounding(roundingFunction) {
	        if (roundingFunction === undefined) {
	            return round;
	        }
	        if (typeof roundingFunction === 'function') {
	            round = roundingFunction;
	            return true;
	        }
	        return false;
	    }

	    // This function allows you to set a threshold for relative time strings
	    function getSetRelativeTimeThreshold(threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        if (threshold === 's') {
	            thresholds.ss = limit - 1;
	        }
	        return true;
	    }

	    function humanize(argWithSuffix, argThresholds) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }

	        var withSuffix = false,
	            th = thresholds,
	            locale,
	            output;

	        if (typeof argWithSuffix === 'object') {
	            argThresholds = argWithSuffix;
	            argWithSuffix = false;
	        }
	        if (typeof argWithSuffix === 'boolean') {
	            withSuffix = argWithSuffix;
	        }
	        if (typeof argThresholds === 'object') {
	            th = Object.assign({}, thresholds, argThresholds);
	            if (argThresholds.s != null && argThresholds.ss == null) {
	                th.ss = argThresholds.s - 1;
	            }
	        }

	        locale = this.localeData();
	        output = relativeTime$1(this, !withSuffix, th, locale);

	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }

	        return locale.postformat(output);
	    }

	    var abs$1 = Math.abs;

	    function sign(x) {
	        return (x > 0) - (x < 0) || +x;
	    }

	    function toISOString$1() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }

	        var seconds = abs$1(this._milliseconds) / 1000,
	            days = abs$1(this._days),
	            months = abs$1(this._months),
	            minutes,
	            hours,
	            years,
	            s,
	            total = this.asSeconds(),
	            totalSign,
	            ymSign,
	            daysSign,
	            hmsSign;

	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }

	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes = absFloor(seconds / 60);
	        hours = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

	        totalSign = total < 0 ? '-' : '';
	        ymSign = sign(this._months) !== sign(total) ? '-' : '';
	        daysSign = sign(this._days) !== sign(total) ? '-' : '';
	        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

	        return (
	            totalSign +
	            'P' +
	            (years ? ymSign + years + 'Y' : '') +
	            (months ? ymSign + months + 'M' : '') +
	            (days ? daysSign + days + 'D' : '') +
	            (hours || minutes || seconds ? 'T' : '') +
	            (hours ? hmsSign + hours + 'H' : '') +
	            (minutes ? hmsSign + minutes + 'M' : '') +
	            (seconds ? hmsSign + s + 'S' : '')
	        );
	    }

	    var proto$2 = Duration.prototype;

	    proto$2.isValid = isValid$1;
	    proto$2.abs = abs;
	    proto$2.add = add$1;
	    proto$2.subtract = subtract$1;
	    proto$2.as = as;
	    proto$2.asMilliseconds = asMilliseconds;
	    proto$2.asSeconds = asSeconds;
	    proto$2.asMinutes = asMinutes;
	    proto$2.asHours = asHours;
	    proto$2.asDays = asDays;
	    proto$2.asWeeks = asWeeks;
	    proto$2.asMonths = asMonths;
	    proto$2.asQuarters = asQuarters;
	    proto$2.asYears = asYears;
	    proto$2.valueOf = valueOf$1;
	    proto$2._bubble = bubble;
	    proto$2.clone = clone$1;
	    proto$2.get = get$2;
	    proto$2.milliseconds = milliseconds;
	    proto$2.seconds = seconds;
	    proto$2.minutes = minutes;
	    proto$2.hours = hours;
	    proto$2.days = days;
	    proto$2.weeks = weeks;
	    proto$2.months = months;
	    proto$2.years = years;
	    proto$2.humanize = humanize;
	    proto$2.toISOString = toISOString$1;
	    proto$2.toString = toISOString$1;
	    proto$2.toJSON = toISOString$1;
	    proto$2.locale = locale;
	    proto$2.localeData = localeData;

	    proto$2.toIsoString = deprecate(
	        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
	        toISOString$1
	    );
	    proto$2.lang = lang;

	    // FORMATTING

	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');

	    // PARSING

	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });

	    //! moment.js

	    hooks.version = '2.29.4';

	    setHookCallback(createLocal);

	    hooks.fn = proto;
	    hooks.min = min;
	    hooks.max = max;
	    hooks.now = now;
	    hooks.utc = createUTC;
	    hooks.unix = createUnix;
	    hooks.months = listMonths;
	    hooks.isDate = isDate;
	    hooks.locale = getSetGlobalLocale;
	    hooks.invalid = createInvalid;
	    hooks.duration = createDuration;
	    hooks.isMoment = isMoment;
	    hooks.weekdays = listWeekdays;
	    hooks.parseZone = createInZone;
	    hooks.localeData = getLocale;
	    hooks.isDuration = isDuration;
	    hooks.monthsShort = listMonthsShort;
	    hooks.weekdaysMin = listWeekdaysMin;
	    hooks.defineLocale = defineLocale;
	    hooks.updateLocale = updateLocale;
	    hooks.locales = listLocales;
	    hooks.weekdaysShort = listWeekdaysShort;
	    hooks.normalizeUnits = normalizeUnits;
	    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	    hooks.calendarFormat = getCalendarFormat;
	    hooks.prototype = proto;

	    // currently HTML5 input type only supports 24-hour formats
	    hooks.HTML5_FMT = {
	        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
	        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
	        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
	        DATE: 'YYYY-MM-DD', // <input type="date" />
	        TIME: 'HH:mm', // <input type="time" />
	        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
	        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
	        WEEK: 'GGGG-[W]WW', // <input type="week" />
	        MONTH: 'YYYY-MM', // <input type="month" />
	    };

	    return hooks;

	}))); 
} (moment$2, moment$2.exports));

var momentExports = moment$2.exports;

var moment$1 = momentExports;

function isValidMoment(testMoment) {
  if (typeof moment$1.isMoment === 'function' && !moment$1.isMoment(testMoment)) {
    return false;
  }

  /* istanbul ignore else  */
  if (typeof testMoment.isValid === 'function') {
    // moment 1.7.0+
    return testMoment.isValid();
  }

  /* istanbul ignore next */
  return !isNaN(testMoment);
}

var momentValidationWrapper$1 = {
  isValidMoment : isValidMoment,
};

var messages = {
  invalidPredicate: '`predicate` must be a function',
  invalidPropValidator: '`propValidator` must be a function',
  requiredCore: 'is marked as required',
  invalidTypeCore: 'Invalid input type',
  predicateFailureCore: 'Failed to succeed with predicate',
  anonymousMessage: '<<anonymous>>',
  baseInvalidMessage: 'Invalid ',
};

function constructPropValidatorVariations(propValidator) {
  if (typeof propValidator !== 'function') {
    throw new Error(messages.invalidPropValidator);
  }

  var requiredPropValidator = propValidator.bind(null, false, null);
  requiredPropValidator.isRequired = propValidator.bind(null, true, null);

  requiredPropValidator.withPredicate = function predicateApplication(predicate) {
    if (typeof predicate !== 'function') {
      throw new Error(messages.invalidPredicate);
    }
    var basePropValidator = propValidator.bind(null, false, predicate);
    basePropValidator.isRequired = propValidator.bind(null, true, predicate);
    return basePropValidator;
  };

  return requiredPropValidator;
}

function createInvalidRequiredErrorMessage(propName, componentName, value) {
  return new Error(
    'The prop `' + propName + '` ' + messages.requiredCore +
    ' in `' + componentName + '`, but its value is `' + value + '`.'
  );
}

var independentGuardianValue = -1;

function preValidationRequireCheck(isRequired, componentName, propFullName, propValue) {
  var isPropValueUndefined = typeof propValue === 'undefined';
  var isPropValueNull = propValue === null;

  if (isRequired) {
    if (isPropValueUndefined) {
      return createInvalidRequiredErrorMessage(propFullName, componentName, 'undefined');
    } else if (isPropValueNull) {
      return createInvalidRequiredErrorMessage(propFullName, componentName, 'null');
    }
  }

  if (isPropValueUndefined || isPropValueNull) {
    return null;
  }

  return independentGuardianValue;
}

function createMomentChecker(type, typeValidator, validator, momentType) {

  function propValidator(
    isRequired, // Bound parameter to indicate with the propType is required
    predicate, // Bound parameter to allow user to add dynamic validation
    props,
    propName,
    componentName,
    location,
    propFullName
  ) {
    var propValue = props[ propName ];
    var propType = typeof propValue;

    componentName = componentName || messages.anonymousMessage;
    propFullName = propFullName || propName;

    var preValidationRequireCheckValue = preValidationRequireCheck(
      isRequired, componentName, propFullName, propValue
    );

    if (preValidationRequireCheckValue !== independentGuardianValue) {
      return preValidationRequireCheckValue;
    }

    if (typeValidator && !typeValidator(propValue)) {
      return new Error(
        messages.invalidTypeCore + ': `' + propName + '` of type `' + propType + '` ' +
        'supplied to `' + componentName + '`, expected `' + type + '`.'
      );
    }

    if (!validator(propValue)) {
      return new Error(
        messages.baseInvalidMessage + location + ' `' + propName + '` of type `' + propType + '` ' +
        'supplied to `' + componentName + '`, expected `' + momentType + '`.'
      );
    }

    if (predicate && !predicate(propValue)) {
      var predicateName = predicate.name || messages.anonymousMessage;
      return new Error(
        messages.baseInvalidMessage + location + ' `' + propName + '` of type `' + propType + '` ' +
        'supplied to `' + componentName + '`. ' + messages.predicateFailureCore + ' `' +
        predicateName + '`.'
      );
    }

    return null;

  }

  return constructPropValidatorVariations(propValidator);

}

var core$1 = {
  constructPropValidatorVariations: constructPropValidatorVariations,
  createMomentChecker: createMomentChecker,
  messages: messages,
};

var moment = momentExports;
var momentValidationWrapper = momentValidationWrapper$1;
var core = core$1;

var src$1 = {

  momentObj : core.createMomentChecker(
    'object',
    function(obj) {
      return typeof obj === 'object';
    },
    function isValid(value) {
      return momentValidationWrapper.isValidMoment(value);
    },
    'Moment'
  ),

  momentString : core.createMomentChecker(
    'string',
    function(str) {
      return typeof str === 'string';
    },
    function isValid(value) {
      return momentValidationWrapper.isValidMoment(moment(value));
    },
    'Moment'
  ),

  momentDurationObj : core.createMomentChecker(
    'object',
    function(obj) {
      return typeof obj === 'object';
    },
    function isValid(value) {
      return moment.isDuration(value);
    },
    'Duration'
  ),

};

var momentPropTypes = /*@__PURE__*/getDefaultExportFromCjs(src$1);

var registerCSSInterfaceWithDefaultTheme = {};

var dist = {};

var isArguments;
var hasRequiredIsArguments;

function requireIsArguments () {
	if (hasRequiredIsArguments) return isArguments;
	hasRequiredIsArguments = 1;

	var toStr = Object.prototype.toString;

	isArguments = function isArguments(value) {
		var str = toStr.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};
	return isArguments;
}

var implementation$a;
var hasRequiredImplementation$a;

function requireImplementation$a () {
	if (hasRequiredImplementation$a) return implementation$a;
	hasRequiredImplementation$a = 1;

	var keysShim;
	if (!Object.keys) {
		// modified from https://github.com/es-shims/es5-shim
		var has = Object.prototype.hasOwnProperty;
		var toStr = Object.prototype.toString;
		var isArgs = requireIsArguments(); // eslint-disable-line global-require
		var isEnumerable = Object.prototype.propertyIsEnumerable;
		var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
		var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
		var dontEnums = [
			'toString',
			'toLocaleString',
			'valueOf',
			'hasOwnProperty',
			'isPrototypeOf',
			'propertyIsEnumerable',
			'constructor'
		];
		var equalsConstructorPrototype = function (o) {
			var ctor = o.constructor;
			return ctor && ctor.prototype === o;
		};
		var excludedKeys = {
			$applicationCache: true,
			$console: true,
			$external: true,
			$frame: true,
			$frameElement: true,
			$frames: true,
			$innerHeight: true,
			$innerWidth: true,
			$onmozfullscreenchange: true,
			$onmozfullscreenerror: true,
			$outerHeight: true,
			$outerWidth: true,
			$pageXOffset: true,
			$pageYOffset: true,
			$parent: true,
			$scrollLeft: true,
			$scrollTop: true,
			$scrollX: true,
			$scrollY: true,
			$self: true,
			$webkitIndexedDB: true,
			$webkitStorageInfo: true,
			$window: true
		};
		var hasAutomationEqualityBug = (function () {
			/* global window */
			if (typeof window === 'undefined') { return false; }
			for (var k in window) {
				try {
					if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
						try {
							equalsConstructorPrototype(window[k]);
						} catch (e) {
							return true;
						}
					}
				} catch (e) {
					return true;
				}
			}
			return false;
		}());
		var equalsConstructorPrototypeIfNotBuggy = function (o) {
			/* global window */
			if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
				return equalsConstructorPrototype(o);
			}
			try {
				return equalsConstructorPrototype(o);
			} catch (e) {
				return false;
			}
		};

		keysShim = function keys(object) {
			var isObject = object !== null && typeof object === 'object';
			var isFunction = toStr.call(object) === '[object Function]';
			var isArguments = isArgs(object);
			var isString = isObject && toStr.call(object) === '[object String]';
			var theKeys = [];

			if (!isObject && !isFunction && !isArguments) {
				throw new TypeError('Object.keys called on a non-object');
			}

			var skipProto = hasProtoEnumBug && isFunction;
			if (isString && object.length > 0 && !has.call(object, 0)) {
				for (var i = 0; i < object.length; ++i) {
					theKeys.push(String(i));
				}
			}

			if (isArguments && object.length > 0) {
				for (var j = 0; j < object.length; ++j) {
					theKeys.push(String(j));
				}
			} else {
				for (var name in object) {
					if (!(skipProto && name === 'prototype') && has.call(object, name)) {
						theKeys.push(String(name));
					}
				}
			}

			if (hasDontEnumBug) {
				var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

				for (var k = 0; k < dontEnums.length; ++k) {
					if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
						theKeys.push(dontEnums[k]);
					}
				}
			}
			return theKeys;
		};
	}
	implementation$a = keysShim;
	return implementation$a;
}

var objectKeys;
var hasRequiredObjectKeys;

function requireObjectKeys () {
	if (hasRequiredObjectKeys) return objectKeys;
	hasRequiredObjectKeys = 1;

	var slice = Array.prototype.slice;
	var isArgs = requireIsArguments();

	var origKeys = Object.keys;
	var keysShim = origKeys ? function keys(o) { return origKeys(o); } : requireImplementation$a();

	var originalKeys = Object.keys;

	keysShim.shim = function shimObjectKeys() {
		if (Object.keys) {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				var args = Object.keys(arguments);
				return args && args.length === arguments.length;
			}(1, 2));
			if (!keysWorksWithArguments) {
				Object.keys = function keys(object) { // eslint-disable-line func-name-matching
					if (isArgs(object)) {
						return originalKeys(slice.call(object));
					}
					return originalKeys(object);
				};
			}
		} else {
			Object.keys = keysShim;
		}
		return Object.keys || keysShim;
	};

	objectKeys = keysShim;
	return objectKeys;
}

var shams$1;
var hasRequiredShams$1;

function requireShams$1 () {
	if (hasRequiredShams$1) return shams$1;
	hasRequiredShams$1 = 1;

	/* eslint complexity: [2, 18], max-statements: [2, 33] */
	shams$1 = function hasSymbols() {
		if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
		if (typeof Symbol.iterator === 'symbol') { return true; }

		var obj = {};
		var sym = Symbol('test');
		var symObj = Object(sym);
		if (typeof sym === 'string') { return false; }

		if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
		if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

		// temp disabled per https://github.com/ljharb/object.assign/issues/17
		// if (sym instanceof Symbol) { return false; }
		// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
		// if (!(symObj instanceof Symbol)) { return false; }

		// if (typeof Symbol.prototype.toString !== 'function') { return false; }
		// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

		var symVal = 42;
		obj[sym] = symVal;
		for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
		if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

		if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

		var syms = Object.getOwnPropertySymbols(obj);
		if (syms.length !== 1 || syms[0] !== sym) { return false; }

		if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

		if (typeof Object.getOwnPropertyDescriptor === 'function') {
			var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
			if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
		}

		return true;
	};
	return shams$1;
}

var hasSymbols;
var hasRequiredHasSymbols;

function requireHasSymbols () {
	if (hasRequiredHasSymbols) return hasSymbols;
	hasRequiredHasSymbols = 1;

	var origSymbol = typeof Symbol !== 'undefined' && Symbol;
	var hasSymbolSham = requireShams$1();

	hasSymbols = function hasNativeSymbols() {
		if (typeof origSymbol !== 'function') { return false; }
		if (typeof Symbol !== 'function') { return false; }
		if (typeof origSymbol('foo') !== 'symbol') { return false; }
		if (typeof Symbol('bar') !== 'symbol') { return false; }

		return hasSymbolSham();
	};
	return hasSymbols;
}

var implementation$9;
var hasRequiredImplementation$9;

function requireImplementation$9 () {
	if (hasRequiredImplementation$9) return implementation$9;
	hasRequiredImplementation$9 = 1;

	/* eslint no-invalid-this: 1 */

	var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
	var slice = Array.prototype.slice;
	var toStr = Object.prototype.toString;
	var funcType = '[object Function]';

	implementation$9 = function bind(that) {
	    var target = this;
	    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
	        throw new TypeError(ERROR_MESSAGE + target);
	    }
	    var args = slice.call(arguments, 1);

	    var bound;
	    var binder = function () {
	        if (this instanceof bound) {
	            var result = target.apply(
	                this,
	                args.concat(slice.call(arguments))
	            );
	            if (Object(result) === result) {
	                return result;
	            }
	            return this;
	        } else {
	            return target.apply(
	                that,
	                args.concat(slice.call(arguments))
	            );
	        }
	    };

	    var boundLength = Math.max(0, target.length - args.length);
	    var boundArgs = [];
	    for (var i = 0; i < boundLength; i++) {
	        boundArgs.push('$' + i);
	    }

	    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

	    if (target.prototype) {
	        var Empty = function Empty() {};
	        Empty.prototype = target.prototype;
	        bound.prototype = new Empty();
	        Empty.prototype = null;
	    }

	    return bound;
	};
	return implementation$9;
}

var functionBind;
var hasRequiredFunctionBind;

function requireFunctionBind () {
	if (hasRequiredFunctionBind) return functionBind;
	hasRequiredFunctionBind = 1;

	var implementation = requireImplementation$9();

	functionBind = Function.prototype.bind || implementation;
	return functionBind;
}

var src;
var hasRequiredSrc;

function requireSrc () {
	if (hasRequiredSrc) return src;
	hasRequiredSrc = 1;

	var bind = requireFunctionBind();

	src = bind.call(Function.call, Object.prototype.hasOwnProperty);
	return src;
}

var getIntrinsic;
var hasRequiredGetIntrinsic$1;

function requireGetIntrinsic$1 () {
	if (hasRequiredGetIntrinsic$1) return getIntrinsic;
	hasRequiredGetIntrinsic$1 = 1;

	var undefined$1;

	var $SyntaxError = SyntaxError;
	var $Function = Function;
	var $TypeError = TypeError;

	// eslint-disable-next-line consistent-return
	var getEvalledConstructor = function (expressionSyntax) {
		try {
			return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
		} catch (e) {}
	};

	var $gOPD = Object.getOwnPropertyDescriptor;
	if ($gOPD) {
		try {
			$gOPD({}, '');
		} catch (e) {
			$gOPD = null; // this is IE 8, which has a broken gOPD
		}
	}

	var throwTypeError = function () {
		throw new $TypeError();
	};
	var ThrowTypeError = $gOPD
		? (function () {
			try {
				// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
				arguments.callee; // IE 8 does not throw here
				return throwTypeError;
			} catch (calleeThrows) {
				try {
					// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
					return $gOPD(arguments, 'callee').get;
				} catch (gOPDthrows) {
					return throwTypeError;
				}
			}
		}())
		: throwTypeError;

	var hasSymbols = requireHasSymbols()();

	var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

	var needsEval = {};

	var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);

	var INTRINSICS = {
		'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
		'%Array%': Array,
		'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
		'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined$1,
		'%AsyncFromSyncIteratorPrototype%': undefined$1,
		'%AsyncFunction%': needsEval,
		'%AsyncGenerator%': needsEval,
		'%AsyncGeneratorFunction%': needsEval,
		'%AsyncIteratorPrototype%': needsEval,
		'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
		'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
		'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined$1 : BigInt64Array,
		'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined$1 : BigUint64Array,
		'%Boolean%': Boolean,
		'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
		'%Date%': Date,
		'%decodeURI%': decodeURI,
		'%decodeURIComponent%': decodeURIComponent,
		'%encodeURI%': encodeURI,
		'%encodeURIComponent%': encodeURIComponent,
		'%Error%': Error,
		'%eval%': eval, // eslint-disable-line no-eval
		'%EvalError%': EvalError,
		'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
		'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
		'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
		'%Function%': $Function,
		'%GeneratorFunction%': needsEval,
		'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
		'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
		'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
		'%isFinite%': isFinite,
		'%isNaN%': isNaN,
		'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
		'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
		'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
		'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
		'%Math%': Math,
		'%Number%': Number,
		'%Object%': Object,
		'%parseFloat%': parseFloat,
		'%parseInt%': parseInt,
		'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
		'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
		'%RangeError%': RangeError,
		'%ReferenceError%': ReferenceError,
		'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
		'%RegExp%': RegExp,
		'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
		'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
		'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
		'%String%': String,
		'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined$1,
		'%Symbol%': hasSymbols ? Symbol : undefined$1,
		'%SyntaxError%': $SyntaxError,
		'%ThrowTypeError%': ThrowTypeError,
		'%TypedArray%': TypedArray,
		'%TypeError%': $TypeError,
		'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
		'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
		'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
		'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
		'%URIError%': URIError,
		'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
		'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
		'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
	};

	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}

	var doEval = function doEval(name) {
		var value;
		if (name === '%AsyncFunction%') {
			value = getEvalledConstructor('async function () {}');
		} else if (name === '%GeneratorFunction%') {
			value = getEvalledConstructor('function* () {}');
		} else if (name === '%AsyncGeneratorFunction%') {
			value = getEvalledConstructor('async function* () {}');
		} else if (name === '%AsyncGenerator%') {
			var fn = doEval('%AsyncGeneratorFunction%');
			if (fn) {
				value = fn.prototype;
			}
		} else if (name === '%AsyncIteratorPrototype%') {
			var gen = doEval('%AsyncGenerator%');
			if (gen) {
				value = getProto(gen.prototype);
			}
		}

		INTRINSICS[name] = value;

		return value;
	};

	var LEGACY_ALIASES = {
		'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
		'%ArrayPrototype%': ['Array', 'prototype'],
		'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
		'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
		'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
		'%ArrayProto_values%': ['Array', 'prototype', 'values'],
		'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
		'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
		'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
		'%BooleanPrototype%': ['Boolean', 'prototype'],
		'%DataViewPrototype%': ['DataView', 'prototype'],
		'%DatePrototype%': ['Date', 'prototype'],
		'%ErrorPrototype%': ['Error', 'prototype'],
		'%EvalErrorPrototype%': ['EvalError', 'prototype'],
		'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
		'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
		'%FunctionPrototype%': ['Function', 'prototype'],
		'%Generator%': ['GeneratorFunction', 'prototype'],
		'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
		'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
		'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
		'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
		'%JSONParse%': ['JSON', 'parse'],
		'%JSONStringify%': ['JSON', 'stringify'],
		'%MapPrototype%': ['Map', 'prototype'],
		'%NumberPrototype%': ['Number', 'prototype'],
		'%ObjectPrototype%': ['Object', 'prototype'],
		'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
		'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
		'%PromisePrototype%': ['Promise', 'prototype'],
		'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
		'%Promise_all%': ['Promise', 'all'],
		'%Promise_reject%': ['Promise', 'reject'],
		'%Promise_resolve%': ['Promise', 'resolve'],
		'%RangeErrorPrototype%': ['RangeError', 'prototype'],
		'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
		'%RegExpPrototype%': ['RegExp', 'prototype'],
		'%SetPrototype%': ['Set', 'prototype'],
		'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
		'%StringPrototype%': ['String', 'prototype'],
		'%SymbolPrototype%': ['Symbol', 'prototype'],
		'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
		'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
		'%TypeErrorPrototype%': ['TypeError', 'prototype'],
		'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
		'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
		'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
		'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
		'%URIErrorPrototype%': ['URIError', 'prototype'],
		'%WeakMapPrototype%': ['WeakMap', 'prototype'],
		'%WeakSetPrototype%': ['WeakSet', 'prototype']
	};

	var bind = requireFunctionBind();
	var hasOwn = requireSrc();
	var $concat = bind.call(Function.call, Array.prototype.concat);
	var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
	var $replace = bind.call(Function.call, String.prototype.replace);
	var $strSlice = bind.call(Function.call, String.prototype.slice);
	var $exec = bind.call(Function.call, RegExp.prototype.exec);

	/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
	var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
	var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
	var stringToPath = function stringToPath(string) {
		var first = $strSlice(string, 0, 1);
		var last = $strSlice(string, -1);
		if (first === '%' && last !== '%') {
			throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
		} else if (last === '%' && first !== '%') {
			throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
		}
		var result = [];
		$replace(string, rePropName, function (match, number, quote, subString) {
			result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
		});
		return result;
	};
	/* end adaptation */

	var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
		var intrinsicName = name;
		var alias;
		if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
			alias = LEGACY_ALIASES[intrinsicName];
			intrinsicName = '%' + alias[0] + '%';
		}

		if (hasOwn(INTRINSICS, intrinsicName)) {
			var value = INTRINSICS[intrinsicName];
			if (value === needsEval) {
				value = doEval(intrinsicName);
			}
			if (typeof value === 'undefined' && !allowMissing) {
				throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
			}

			return {
				alias: alias,
				name: intrinsicName,
				value: value
			};
		}

		throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
	};

	getIntrinsic = function GetIntrinsic(name, allowMissing) {
		if (typeof name !== 'string' || name.length === 0) {
			throw new $TypeError('intrinsic name must be a non-empty string');
		}
		if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
			throw new $TypeError('"allowMissing" argument must be a boolean');
		}

		if ($exec(/^%?[^%]*%?$/, name) === null) {
			throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
		}
		var parts = stringToPath(name);
		var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

		var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
		var intrinsicRealName = intrinsic.name;
		var value = intrinsic.value;
		var skipFurtherCaching = false;

		var alias = intrinsic.alias;
		if (alias) {
			intrinsicBaseName = alias[0];
			$spliceApply(parts, $concat([0, 1], alias));
		}

		for (var i = 1, isOwn = true; i < parts.length; i += 1) {
			var part = parts[i];
			var first = $strSlice(part, 0, 1);
			var last = $strSlice(part, -1);
			if (
				(
					(first === '"' || first === "'" || first === '`')
					|| (last === '"' || last === "'" || last === '`')
				)
				&& first !== last
			) {
				throw new $SyntaxError('property names with quotes must have matching quotes');
			}
			if (part === 'constructor' || !isOwn) {
				skipFurtherCaching = true;
			}

			intrinsicBaseName += '.' + part;
			intrinsicRealName = '%' + intrinsicBaseName + '%';

			if (hasOwn(INTRINSICS, intrinsicRealName)) {
				value = INTRINSICS[intrinsicRealName];
			} else if (value != null) {
				if (!(part in value)) {
					if (!allowMissing) {
						throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
					}
					return void undefined$1;
				}
				if ($gOPD && (i + 1) >= parts.length) {
					var desc = $gOPD(value, part);
					isOwn = !!desc;

					// By convention, when a data property is converted to an accessor
					// property to emulate a data property that does not suffer from
					// the override mistake, that accessor's getter is marked with
					// an `originalValue` property. Here, when we detect this, we
					// uphold the illusion by pretending to see that original data
					// property, i.e., returning the value rather than the getter
					// itself.
					if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
						value = desc.get;
					} else {
						value = value[part];
					}
				} else {
					isOwn = hasOwn(value, part);
					value = value[part];
				}

				if (isOwn && !skipFurtherCaching) {
					INTRINSICS[intrinsicRealName] = value;
				}
			}
		}
		return value;
	};
	return getIntrinsic;
}

var hasPropertyDescriptors_1;
var hasRequiredHasPropertyDescriptors;

function requireHasPropertyDescriptors () {
	if (hasRequiredHasPropertyDescriptors) return hasPropertyDescriptors_1;
	hasRequiredHasPropertyDescriptors = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

	var hasPropertyDescriptors = function hasPropertyDescriptors() {
		if ($defineProperty) {
			try {
				$defineProperty({}, 'a', { value: 1 });
				return true;
			} catch (e) {
				// IE 8 has a broken defineProperty
				return false;
			}
		}
		return false;
	};

	hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
		// node v0.6 has a bug where array lengths can be Set but not Defined
		if (!hasPropertyDescriptors()) {
			return null;
		}
		try {
			return $defineProperty([], 'length', { value: 1 }).length !== 1;
		} catch (e) {
			// In Firefox 4-22, defining length on an array throws an exception.
			return true;
		}
	};

	hasPropertyDescriptors_1 = hasPropertyDescriptors;
	return hasPropertyDescriptors_1;
}

var defineProperties_1;
var hasRequiredDefineProperties;

function requireDefineProperties () {
	if (hasRequiredDefineProperties) return defineProperties_1;
	hasRequiredDefineProperties = 1;

	var keys = requireObjectKeys();
	var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

	var toStr = Object.prototype.toString;
	var concat = Array.prototype.concat;
	var origDefineProperty = Object.defineProperty;

	var isFunction = function (fn) {
		return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
	};

	var hasPropertyDescriptors = requireHasPropertyDescriptors()();

	var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;

	var defineProperty = function (object, name, value, predicate) {
		if (name in object) {
			if (predicate === true) {
				if (object[name] === value) {
					return;
				}
			} else if (!isFunction(predicate) || !predicate()) {
				return;
			}
		}
		if (supportsDescriptors) {
			origDefineProperty(object, name, {
				configurable: true,
				enumerable: false,
				value: value,
				writable: true
			});
		} else {
			object[name] = value; // eslint-disable-line no-param-reassign
		}
	};

	var defineProperties = function (object, map) {
		var predicates = arguments.length > 2 ? arguments[2] : {};
		var props = keys(map);
		if (hasSymbols) {
			props = concat.call(props, Object.getOwnPropertySymbols(map));
		}
		for (var i = 0; i < props.length; i += 1) {
			defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
		}
	};

	defineProperties.supportsDescriptors = !!supportsDescriptors;

	defineProperties_1 = defineProperties;
	return defineProperties_1;
}

var callBind = {exports: {}};

callBind.exports;

var hasRequiredCallBind;

function requireCallBind () {
	if (hasRequiredCallBind) return callBind.exports;
	hasRequiredCallBind = 1;
	(function (module) {

		var bind = requireFunctionBind();
		var GetIntrinsic = requireGetIntrinsic$1();

		var $apply = GetIntrinsic('%Function.prototype.apply%');
		var $call = GetIntrinsic('%Function.prototype.call%');
		var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

		var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
		var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
		var $max = GetIntrinsic('%Math.max%');

		if ($defineProperty) {
			try {
				$defineProperty({}, 'a', { value: 1 });
			} catch (e) {
				// IE 8 has a broken defineProperty
				$defineProperty = null;
			}
		}

		module.exports = function callBind(originalFunction) {
			var func = $reflectApply(bind, $call, arguments);
			if ($gOPD && $defineProperty) {
				var desc = $gOPD(func, 'length');
				if (desc.configurable) {
					// original length, plus the receiver, minus any additional arguments (after the receiver)
					$defineProperty(
						func,
						'length',
						{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
					);
				}
			}
			return func;
		};

		var applyBind = function applyBind() {
			return $reflectApply(bind, $apply, arguments);
		};

		if ($defineProperty) {
			$defineProperty(module.exports, 'apply', { value: applyBind });
		} else {
			module.exports.apply = applyBind;
		} 
	} (callBind));
	return callBind.exports;
}

var abs;
var hasRequiredAbs;

function requireAbs () {
	if (hasRequiredAbs) return abs;
	hasRequiredAbs = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $abs = GetIntrinsic('%Math.abs%');

	// http://262.ecma-international.org/5.1/#sec-5.2

	abs = function abs(x) {
		return $abs(x);
	};
	return abs;
}

var Type$1;
var hasRequiredType$1;

function requireType$1 () {
	if (hasRequiredType$1) return Type$1;
	hasRequiredType$1 = 1;

	// https://262.ecma-international.org/5.1/#sec-8

	Type$1 = function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	};
	return Type$1;
}

var Type;
var hasRequiredType;

function requireType () {
	if (hasRequiredType) return Type;
	hasRequiredType = 1;

	var ES5Type = requireType$1();

	// https://262.ecma-international.org/11.0/#sec-ecmascript-data-types-and-values

	Type = function Type(x) {
		if (typeof x === 'symbol') {
			return 'Symbol';
		}
		if (typeof x === 'bigint') {
			return 'BigInt';
		}
		return ES5Type(x);
	};
	return Type;
}

var floor;
var hasRequiredFloor;

function requireFloor () {
	if (hasRequiredFloor) return floor;
	hasRequiredFloor = 1;

	var Type = requireType();

	// var modulo = require('./modulo');
	var $floor = Math.floor;

	// http://262.ecma-international.org/11.0/#eqn-floor

	floor = function floor(x) {
		// return x - modulo(x, 1);
		if (Type(x) === 'BigInt') {
			return x;
		}
		return $floor(x);
	};
	return floor;
}

var _isNaN;
var hasRequired_isNaN;

function require_isNaN () {
	if (hasRequired_isNaN) return _isNaN;
	hasRequired_isNaN = 1;

	_isNaN = Number.isNaN || function isNaN(a) {
		return a !== a;
	};
	return _isNaN;
}

var _isFinite;
var hasRequired_isFinite;

function require_isFinite () {
	if (hasRequired_isFinite) return _isFinite;
	hasRequired_isFinite = 1;

	var $isNaN = require_isNaN();

	_isFinite = function (x) { return (typeof x === 'number' || typeof x === 'bigint') && !$isNaN(x) && x !== Infinity && x !== -Infinity; };
	return _isFinite;
}

var IsIntegralNumber;
var hasRequiredIsIntegralNumber;

function requireIsIntegralNumber () {
	if (hasRequiredIsIntegralNumber) return IsIntegralNumber;
	hasRequiredIsIntegralNumber = 1;

	var abs = requireAbs();
	var floor = requireFloor();
	var Type = requireType();

	var $isNaN = require_isNaN();
	var $isFinite = require_isFinite();

	// https://tc39.es/ecma262/#sec-isintegralnumber

	IsIntegralNumber = function IsIntegralNumber(argument) {
		if (Type(argument) !== 'Number' || $isNaN(argument) || !$isFinite(argument)) {
			return false;
		}
		var absValue = abs(argument);
		return floor(absValue) === absValue;
	};
	return IsIntegralNumber;
}

var hasProto;
var hasRequiredHasProto;

function requireHasProto () {
	if (hasRequiredHasProto) return hasProto;
	hasRequiredHasProto = 1;

	var test = {
		foo: {}
	};

	var $Object = Object;

	hasProto = function hasProto() {
		return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
	};
	return hasProto;
}

var ArrayCreate;
var hasRequiredArrayCreate;

function requireArrayCreate () {
	if (hasRequiredArrayCreate) return ArrayCreate;
	hasRequiredArrayCreate = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $ArrayPrototype = GetIntrinsic('%Array.prototype%');
	var $RangeError = GetIntrinsic('%RangeError%');
	var $SyntaxError = GetIntrinsic('%SyntaxError%');
	var $TypeError = GetIntrinsic('%TypeError%');

	var IsIntegralNumber = requireIsIntegralNumber();

	var MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1;

	var hasProto = requireHasProto()();

	var $setProto = GetIntrinsic('%Object.setPrototypeOf%', true) || (
		hasProto
			? function (O, proto) {
				O.__proto__ = proto; // eslint-disable-line no-proto, no-param-reassign
				return O;
			}
			: null
	);

	// https://262.ecma-international.org/12.0/#sec-arraycreate

	ArrayCreate = function ArrayCreate(length) {
		if (!IsIntegralNumber(length) || length < 0) {
			throw new $TypeError('Assertion failed: `length` must be an integer Number >= 0');
		}
		if (length > MAX_ARRAY_LENGTH) {
			throw new $RangeError('length is greater than (2**32 - 1)');
		}
		var proto = arguments.length > 1 ? arguments[1] : $ArrayPrototype;
		var A = []; // steps 3, 5
		if (proto !== $ArrayPrototype) { // step 4
			if (!$setProto) {
				throw new $SyntaxError('ArrayCreate: a `proto` argument that is not `Array.prototype` is not supported in an environment that does not support setting the [[Prototype]]');
			}
			$setProto(A, proto);
		}
		if (length !== 0) { // bypasses the need for step 6
			A.length = length;
		}
		/* step 6, the above as a shortcut for the below
		OrdinaryDefineOwnProperty(A, 'length', {
			'[[Configurable]]': false,
			'[[Enumerable]]': false,
			'[[Value]]': length,
			'[[Writable]]': true
		});
		*/
		return A;
	};
	return ArrayCreate;
}

var _nodeResolve_empty = {};

var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': _nodeResolve_empty
});

var require$$0 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

var objectInspect;
var hasRequiredObjectInspect;

function requireObjectInspect () {
	if (hasRequiredObjectInspect) return objectInspect;
	hasRequiredObjectInspect = 1;
	var hasMap = typeof Map === 'function' && Map.prototype;
	var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
	var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
	var mapForEach = hasMap && Map.prototype.forEach;
	var hasSet = typeof Set === 'function' && Set.prototype;
	var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
	var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
	var setForEach = hasSet && Set.prototype.forEach;
	var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
	var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
	var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
	var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
	var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
	var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
	var booleanValueOf = Boolean.prototype.valueOf;
	var objectToString = Object.prototype.toString;
	var functionToString = Function.prototype.toString;
	var $match = String.prototype.match;
	var $slice = String.prototype.slice;
	var $replace = String.prototype.replace;
	var $toUpperCase = String.prototype.toUpperCase;
	var $toLowerCase = String.prototype.toLowerCase;
	var $test = RegExp.prototype.test;
	var $concat = Array.prototype.concat;
	var $join = Array.prototype.join;
	var $arrSlice = Array.prototype.slice;
	var $floor = Math.floor;
	var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
	var gOPS = Object.getOwnPropertySymbols;
	var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
	var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
	// ie, `has-tostringtag/shams
	var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
	    ? Symbol.toStringTag
	    : null;
	var isEnumerable = Object.prototype.propertyIsEnumerable;

	var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
	    [].__proto__ === Array.prototype // eslint-disable-line no-proto
	        ? function (O) {
	            return O.__proto__; // eslint-disable-line no-proto
	        }
	        : null
	);

	function addNumericSeparator(num, str) {
	    if (
	        num === Infinity
	        || num === -Infinity
	        || num !== num
	        || (num && num > -1000 && num < 1000)
	        || $test.call(/e/, str)
	    ) {
	        return str;
	    }
	    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
	    if (typeof num === 'number') {
	        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
	        if (int !== num) {
	            var intStr = String(int);
	            var dec = $slice.call(str, intStr.length + 1);
	            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
	        }
	    }
	    return $replace.call(str, sepRegex, '$&_');
	}

	var utilInspect = require$$0;
	var inspectCustom = utilInspect.custom;
	var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;

	objectInspect = function inspect_(obj, options, depth, seen) {
	    var opts = options || {};

	    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
	        throw new TypeError('option "quoteStyle" must be "single" or "double"');
	    }
	    if (
	        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
	            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
	            : opts.maxStringLength !== null
	        )
	    ) {
	        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
	    }
	    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;
	    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
	        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
	    }

	    if (
	        has(opts, 'indent')
	        && opts.indent !== null
	        && opts.indent !== '\t'
	        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
	    ) {
	        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
	    }
	    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
	        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
	    }
	    var numericSeparator = opts.numericSeparator;

	    if (typeof obj === 'undefined') {
	        return 'undefined';
	    }
	    if (obj === null) {
	        return 'null';
	    }
	    if (typeof obj === 'boolean') {
	        return obj ? 'true' : 'false';
	    }

	    if (typeof obj === 'string') {
	        return inspectString(obj, opts);
	    }
	    if (typeof obj === 'number') {
	        if (obj === 0) {
	            return Infinity / obj > 0 ? '0' : '-0';
	        }
	        var str = String(obj);
	        return numericSeparator ? addNumericSeparator(obj, str) : str;
	    }
	    if (typeof obj === 'bigint') {
	        var bigIntStr = String(obj) + 'n';
	        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
	    }

	    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
	    if (typeof depth === 'undefined') { depth = 0; }
	    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
	        return isArray(obj) ? '[Array]' : '[Object]';
	    }

	    var indent = getIndent(opts, depth);

	    if (typeof seen === 'undefined') {
	        seen = [];
	    } else if (indexOf(seen, obj) >= 0) {
	        return '[Circular]';
	    }

	    function inspect(value, from, noIndent) {
	        if (from) {
	            seen = $arrSlice.call(seen);
	            seen.push(from);
	        }
	        if (noIndent) {
	            var newOpts = {
	                depth: opts.depth
	            };
	            if (has(opts, 'quoteStyle')) {
	                newOpts.quoteStyle = opts.quoteStyle;
	            }
	            return inspect_(value, newOpts, depth + 1, seen);
	        }
	        return inspect_(value, opts, depth + 1, seen);
	    }

	    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable
	        var name = nameOf(obj);
	        var keys = arrObjKeys(obj, inspect);
	        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
	    }
	    if (isSymbol(obj)) {
	        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
	        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
	    }
	    if (isElement(obj)) {
	        var s = '<' + $toLowerCase.call(String(obj.nodeName));
	        var attrs = obj.attributes || [];
	        for (var i = 0; i < attrs.length; i++) {
	            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
	        }
	        s += '>';
	        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
	        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
	        return s;
	    }
	    if (isArray(obj)) {
	        if (obj.length === 0) { return '[]'; }
	        var xs = arrObjKeys(obj, inspect);
	        if (indent && !singleLineValues(xs)) {
	            return '[' + indentedJoin(xs, indent) + ']';
	        }
	        return '[ ' + $join.call(xs, ', ') + ' ]';
	    }
	    if (isError(obj)) {
	        var parts = arrObjKeys(obj, inspect);
	        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {
	            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
	        }
	        if (parts.length === 0) { return '[' + String(obj) + ']'; }
	        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
	    }
	    if (typeof obj === 'object' && customInspect) {
	        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {
	            return utilInspect(obj, { depth: maxDepth - depth });
	        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
	            return obj.inspect();
	        }
	    }
	    if (isMap(obj)) {
	        var mapParts = [];
	        if (mapForEach) {
	            mapForEach.call(obj, function (value, key) {
	                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
	            });
	        }
	        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
	    }
	    if (isSet(obj)) {
	        var setParts = [];
	        if (setForEach) {
	            setForEach.call(obj, function (value) {
	                setParts.push(inspect(value, obj));
	            });
	        }
	        return collectionOf('Set', setSize.call(obj), setParts, indent);
	    }
	    if (isWeakMap(obj)) {
	        return weakCollectionOf('WeakMap');
	    }
	    if (isWeakSet(obj)) {
	        return weakCollectionOf('WeakSet');
	    }
	    if (isWeakRef(obj)) {
	        return weakCollectionOf('WeakRef');
	    }
	    if (isNumber(obj)) {
	        return markBoxed(inspect(Number(obj)));
	    }
	    if (isBigInt(obj)) {
	        return markBoxed(inspect(bigIntValueOf.call(obj)));
	    }
	    if (isBoolean(obj)) {
	        return markBoxed(booleanValueOf.call(obj));
	    }
	    if (isString(obj)) {
	        return markBoxed(inspect(String(obj)));
	    }
	    if (!isDate(obj) && !isRegExp(obj)) {
	        var ys = arrObjKeys(obj, inspect);
	        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
	        var protoTag = obj instanceof Object ? '' : 'null prototype';
	        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';
	        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
	        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
	        if (ys.length === 0) { return tag + '{}'; }
	        if (indent) {
	            return tag + '{' + indentedJoin(ys, indent) + '}';
	        }
	        return tag + '{ ' + $join.call(ys, ', ') + ' }';
	    }
	    return String(obj);
	};

	function wrapQuotes(s, defaultStyle, opts) {
	    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
	    return quoteChar + s + quoteChar;
	}

	function quote(s) {
	    return $replace.call(String(s), /"/g, '&quot;');
	}

	function isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

	// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
	function isSymbol(obj) {
	    if (hasShammedSymbols) {
	        return obj && typeof obj === 'object' && obj instanceof Symbol;
	    }
	    if (typeof obj === 'symbol') {
	        return true;
	    }
	    if (!obj || typeof obj !== 'object' || !symToString) {
	        return false;
	    }
	    try {
	        symToString.call(obj);
	        return true;
	    } catch (e) {}
	    return false;
	}

	function isBigInt(obj) {
	    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
	        return false;
	    }
	    try {
	        bigIntValueOf.call(obj);
	        return true;
	    } catch (e) {}
	    return false;
	}

	var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
	function has(obj, key) {
	    return hasOwn.call(obj, key);
	}

	function toStr(obj) {
	    return objectToString.call(obj);
	}

	function nameOf(f) {
	    if (f.name) { return f.name; }
	    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
	    if (m) { return m[1]; }
	    return null;
	}

	function indexOf(xs, x) {
	    if (xs.indexOf) { return xs.indexOf(x); }
	    for (var i = 0, l = xs.length; i < l; i++) {
	        if (xs[i] === x) { return i; }
	    }
	    return -1;
	}

	function isMap(x) {
	    if (!mapSize || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        mapSize.call(x);
	        try {
	            setSize.call(x);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof Map; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isWeakMap(x) {
	    if (!weakMapHas || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        weakMapHas.call(x, weakMapHas);
	        try {
	            weakSetHas.call(x, weakSetHas);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isWeakRef(x) {
	    if (!weakRefDeref || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        weakRefDeref.call(x);
	        return true;
	    } catch (e) {}
	    return false;
	}

	function isSet(x) {
	    if (!setSize || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        setSize.call(x);
	        try {
	            mapSize.call(x);
	        } catch (m) {
	            return true;
	        }
	        return x instanceof Set; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isWeakSet(x) {
	    if (!weakSetHas || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        weakSetHas.call(x, weakSetHas);
	        try {
	            weakMapHas.call(x, weakMapHas);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isElement(x) {
	    if (!x || typeof x !== 'object') { return false; }
	    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
	        return true;
	    }
	    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
	}

	function inspectString(str, opts) {
	    if (str.length > opts.maxStringLength) {
	        var remaining = str.length - opts.maxStringLength;
	        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
	        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
	    }
	    // eslint-disable-next-line no-control-regex
	    var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
	    return wrapQuotes(s, 'single', opts);
	}

	function lowbyte(c) {
	    var n = c.charCodeAt(0);
	    var x = {
	        8: 'b',
	        9: 't',
	        10: 'n',
	        12: 'f',
	        13: 'r'
	    }[n];
	    if (x) { return '\\' + x; }
	    return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
	}

	function markBoxed(str) {
	    return 'Object(' + str + ')';
	}

	function weakCollectionOf(type) {
	    return type + ' { ? }';
	}

	function collectionOf(type, size, entries, indent) {
	    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
	    return type + ' (' + size + ') {' + joinedEntries + '}';
	}

	function singleLineValues(xs) {
	    for (var i = 0; i < xs.length; i++) {
	        if (indexOf(xs[i], '\n') >= 0) {
	            return false;
	        }
	    }
	    return true;
	}

	function getIndent(opts, depth) {
	    var baseIndent;
	    if (opts.indent === '\t') {
	        baseIndent = '\t';
	    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
	        baseIndent = $join.call(Array(opts.indent + 1), ' ');
	    } else {
	        return null;
	    }
	    return {
	        base: baseIndent,
	        prev: $join.call(Array(depth + 1), baseIndent)
	    };
	}

	function indentedJoin(xs, indent) {
	    if (xs.length === 0) { return ''; }
	    var lineJoiner = '\n' + indent.prev + indent.base;
	    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
	}

	function arrObjKeys(obj, inspect) {
	    var isArr = isArray(obj);
	    var xs = [];
	    if (isArr) {
	        xs.length = obj.length;
	        for (var i = 0; i < obj.length; i++) {
	            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
	        }
	    }
	    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
	    var symMap;
	    if (hasShammedSymbols) {
	        symMap = {};
	        for (var k = 0; k < syms.length; k++) {
	            symMap['$' + syms[k]] = syms[k];
	        }
	    }

	    for (var key in obj) { // eslint-disable-line no-restricted-syntax
	        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
	        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
	        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
	            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
	            continue; // eslint-disable-line no-restricted-syntax, no-continue
	        } else if ($test.call(/[^\w$]/, key)) {
	            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
	        } else {
	            xs.push(key + ': ' + inspect(obj[key], obj));
	        }
	    }
	    if (typeof gOPS === 'function') {
	        for (var j = 0; j < syms.length; j++) {
	            if (isEnumerable.call(obj, syms[j])) {
	                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
	            }
	        }
	    }
	    return xs;
	}
	return objectInspect;
}

var IsPropertyKey;
var hasRequiredIsPropertyKey;

function requireIsPropertyKey () {
	if (hasRequiredIsPropertyKey) return IsPropertyKey;
	hasRequiredIsPropertyKey = 1;

	// https://262.ecma-international.org/6.0/#sec-ispropertykey

	IsPropertyKey = function IsPropertyKey(argument) {
		return typeof argument === 'string' || typeof argument === 'symbol';
	};
	return IsPropertyKey;
}

var Get;
var hasRequiredGet;

function requireGet () {
	if (hasRequiredGet) return Get;
	hasRequiredGet = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $TypeError = GetIntrinsic('%TypeError%');

	var inspect = requireObjectInspect();

	var IsPropertyKey = requireIsPropertyKey();
	var Type = requireType();

	// https://262.ecma-international.org/6.0/#sec-get-o-p

	Get = function Get(O, P) {
		// 7.3.1.1
		if (Type(O) !== 'Object') {
			throw new $TypeError('Assertion failed: Type(O) is not Object');
		}
		// 7.3.1.2
		if (!IsPropertyKey(P)) {
			throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true, got ' + inspect(P));
		}
		// 7.3.1.3
		return O[P];
	};
	return Get;
}

var callBound;
var hasRequiredCallBound;

function requireCallBound () {
	if (hasRequiredCallBound) return callBound;
	hasRequiredCallBound = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var callBind = requireCallBind();

	var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

	callBound = function callBoundIntrinsic(name, allowMissing) {
		var intrinsic = GetIntrinsic(name, !!allowMissing);
		if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
			return callBind(intrinsic);
		}
		return intrinsic;
	};
	return callBound;
}

var IsArray$1;
var hasRequiredIsArray$1;

function requireIsArray$1 () {
	if (hasRequiredIsArray$1) return IsArray$1;
	hasRequiredIsArray$1 = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $Array = GetIntrinsic('%Array%');

	// eslint-disable-next-line global-require
	var toStr = !$Array.isArray && requireCallBound()('Object.prototype.toString');

	IsArray$1 = $Array.isArray || function IsArray(argument) {
		return toStr(argument) === '[object Array]';
	};
	return IsArray$1;
}

var IsArray;
var hasRequiredIsArray;

function requireIsArray () {
	if (hasRequiredIsArray) return IsArray;
	hasRequiredIsArray = 1;

	// https://262.ecma-international.org/6.0/#sec-isarray
	IsArray = requireIsArray$1();
	return IsArray;
}

var IsConstructor = {exports: {}};

var GetIntrinsic;
var hasRequiredGetIntrinsic;

function requireGetIntrinsic () {
	if (hasRequiredGetIntrinsic) return GetIntrinsic;
	hasRequiredGetIntrinsic = 1;

	// TODO: remove, semver-major

	GetIntrinsic = requireGetIntrinsic$1();
	return GetIntrinsic;
}

var isPropertyDescriptor;
var hasRequiredIsPropertyDescriptor;

function requireIsPropertyDescriptor () {
	if (hasRequiredIsPropertyDescriptor) return isPropertyDescriptor;
	hasRequiredIsPropertyDescriptor = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var has = requireSrc();
	var $TypeError = GetIntrinsic('%TypeError%');

	isPropertyDescriptor = function IsPropertyDescriptor(ES, Desc) {
		if (ES.Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};

		for (var key in Desc) { // eslint-disable-line no-restricted-syntax
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}

		if (ES.IsDataDescriptor(Desc) && ES.IsAccessorDescriptor(Desc)) {
			throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	};
	return isPropertyDescriptor;
}

var DefineOwnProperty;
var hasRequiredDefineOwnProperty;

function requireDefineOwnProperty () {
	if (hasRequiredDefineOwnProperty) return DefineOwnProperty;
	hasRequiredDefineOwnProperty = 1;

	var hasPropertyDescriptors = requireHasPropertyDescriptors();

	var GetIntrinsic = requireGetIntrinsic$1();

	var $defineProperty = hasPropertyDescriptors() && GetIntrinsic('%Object.defineProperty%', true);

	var hasArrayLengthDefineBug = hasPropertyDescriptors.hasArrayLengthDefineBug();

	// eslint-disable-next-line global-require
	var isArray = hasArrayLengthDefineBug && requireIsArray$1();

	var callBound = requireCallBound();

	var $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');

	// eslint-disable-next-line max-params
	DefineOwnProperty = function DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, desc) {
		if (!$defineProperty) {
			if (!IsDataDescriptor(desc)) {
				// ES3 does not support getters/setters
				return false;
			}
			if (!desc['[[Configurable]]'] || !desc['[[Writable]]']) {
				return false;
			}

			// fallback for ES3
			if (P in O && $isEnumerable(O, P) !== !!desc['[[Enumerable]]']) {
				// a non-enumerable existing property
				return false;
			}

			// property does not exist at all, or exists but is enumerable
			var V = desc['[[Value]]'];
			// eslint-disable-next-line no-param-reassign
			O[P] = V; // will use [[Define]]
			return SameValue(O[P], V);
		}
		if (
			hasArrayLengthDefineBug
			&& P === 'length'
			&& '[[Value]]' in desc
			&& isArray(O)
			&& O.length !== desc['[[Value]]']
		) {
			// eslint-disable-next-line no-param-reassign
			O.length = desc['[[Value]]'];
			return O.length === desc['[[Value]]'];
		}

		$defineProperty(O, P, FromPropertyDescriptor(desc));
		return true;
	};
	return DefineOwnProperty;
}

var isMatchRecord;
var hasRequiredIsMatchRecord;

function requireIsMatchRecord () {
	if (hasRequiredIsMatchRecord) return isMatchRecord;
	hasRequiredIsMatchRecord = 1;

	var has = requireSrc();

	// https://262.ecma-international.org/13.0/#sec-match-records

	isMatchRecord = function isMatchRecord(record) {
		return (
			has(record, '[[StartIndex]]')
	        && has(record, '[[EndIndex]]')
	        && record['[[StartIndex]]'] >= 0
	        && record['[[EndIndex]]'] >= record['[[StartIndex]]']
	        && String(parseInt(record['[[StartIndex]]'], 10)) === String(record['[[StartIndex]]'])
	        && String(parseInt(record['[[EndIndex]]'], 10)) === String(record['[[EndIndex]]'])
		);
	};
	return isMatchRecord;
}

var assertRecord;
var hasRequiredAssertRecord;

function requireAssertRecord () {
	if (hasRequiredAssertRecord) return assertRecord;
	hasRequiredAssertRecord = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $TypeError = GetIntrinsic('%TypeError%');
	var $SyntaxError = GetIntrinsic('%SyntaxError%');

	var has = requireSrc();

	var isMatchRecord = requireIsMatchRecord();

	var predicates = {
		// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type
		'Property Descriptor': function isPropertyDescriptor(Desc) {
			var allowed = {
				'[[Configurable]]': true,
				'[[Enumerable]]': true,
				'[[Get]]': true,
				'[[Set]]': true,
				'[[Value]]': true,
				'[[Writable]]': true
			};

			if (!Desc) {
				return false;
			}
			for (var key in Desc) { // eslint-disable-line
				if (has(Desc, key) && !allowed[key]) {
					return false;
				}
			}

			var isData = has(Desc, '[[Value]]');
			var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
			if (isData && IsAccessor) {
				throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
			}
			return true;
		},
		// https://262.ecma-international.org/13.0/#sec-match-records
		'Match Record': isMatchRecord,
		'Iterator Record': function isIteratorRecord(value) {
			return has(value, '[[Iterator]]') && has(value, '[[NextMethod]]') && has(value, '[[Done]]');
		},
		'PromiseCapability Record': function isPromiseCapabilityRecord(value) {
			return !!value
				&& has(value, '[[Resolve]]')
				&& typeof value['[[Resolve]]'] === 'function'
				&& has(value, '[[Reject]]')
				&& typeof value['[[Reject]]'] === 'function'
				&& has(value, '[[Promise]]')
				&& value['[[Promise]]']
				&& typeof value['[[Promise]]'].then === 'function';
		},
		'AsyncGeneratorRequest Record': function isAsyncGeneratorRequestRecord(value) {
			return !!value
				&& has(value, '[[Completion]]') // TODO: confirm is a completion record
				&& has(value, '[[Capability]]')
				&& predicates['PromiseCapability Record'](value['[[Capability]]']);
		}
	};

	assertRecord = function assertRecord(Type, recordType, argumentName, value) {
		var predicate = predicates[recordType];
		if (typeof predicate !== 'function') {
			throw new $SyntaxError('unknown record type: ' + recordType);
		}
		if (Type(value) !== 'Object' || !predicate(value)) {
			throw new $TypeError(argumentName + ' must be a ' + recordType);
		}
	};
	return assertRecord;
}

var fromPropertyDescriptor;
var hasRequiredFromPropertyDescriptor$1;

function requireFromPropertyDescriptor$1 () {
	if (hasRequiredFromPropertyDescriptor$1) return fromPropertyDescriptor;
	hasRequiredFromPropertyDescriptor$1 = 1;

	fromPropertyDescriptor = function fromPropertyDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return Desc;
		}
		var obj = {};
		if ('[[Value]]' in Desc) {
			obj.value = Desc['[[Value]]'];
		}
		if ('[[Writable]]' in Desc) {
			obj.writable = !!Desc['[[Writable]]'];
		}
		if ('[[Get]]' in Desc) {
			obj.get = Desc['[[Get]]'];
		}
		if ('[[Set]]' in Desc) {
			obj.set = Desc['[[Set]]'];
		}
		if ('[[Enumerable]]' in Desc) {
			obj.enumerable = !!Desc['[[Enumerable]]'];
		}
		if ('[[Configurable]]' in Desc) {
			obj.configurable = !!Desc['[[Configurable]]'];
		}
		return obj;
	};
	return fromPropertyDescriptor;
}

var FromPropertyDescriptor;
var hasRequiredFromPropertyDescriptor;

function requireFromPropertyDescriptor () {
	if (hasRequiredFromPropertyDescriptor) return FromPropertyDescriptor;
	hasRequiredFromPropertyDescriptor = 1;

	var assertRecord = requireAssertRecord();
	var fromPropertyDescriptor = requireFromPropertyDescriptor$1();

	var Type = requireType();

	// https://262.ecma-international.org/6.0/#sec-frompropertydescriptor

	FromPropertyDescriptor = function FromPropertyDescriptor(Desc) {
		if (typeof Desc !== 'undefined') {
			assertRecord(Type, 'Property Descriptor', 'Desc', Desc);
		}

		return fromPropertyDescriptor(Desc);
	};
	return FromPropertyDescriptor;
}

var IsAccessorDescriptor;
var hasRequiredIsAccessorDescriptor;

function requireIsAccessorDescriptor () {
	if (hasRequiredIsAccessorDescriptor) return IsAccessorDescriptor;
	hasRequiredIsAccessorDescriptor = 1;

	var has = requireSrc();

	var Type = requireType();

	var assertRecord = requireAssertRecord();

	// https://262.ecma-international.org/5.1/#sec-8.10.1

	IsAccessorDescriptor = function IsAccessorDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

		if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
			return false;
		}

		return true;
	};
	return IsAccessorDescriptor;
}

var IsDataDescriptor;
var hasRequiredIsDataDescriptor;

function requireIsDataDescriptor () {
	if (hasRequiredIsDataDescriptor) return IsDataDescriptor;
	hasRequiredIsDataDescriptor = 1;

	var has = requireSrc();

	var Type = requireType();

	var assertRecord = requireAssertRecord();

	// https://262.ecma-international.org/5.1/#sec-8.10.2

	IsDataDescriptor = function IsDataDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

		if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
			return false;
		}

		return true;
	};
	return IsDataDescriptor;
}

var SameValue;
var hasRequiredSameValue;

function requireSameValue () {
	if (hasRequiredSameValue) return SameValue;
	hasRequiredSameValue = 1;

	var $isNaN = require_isNaN();

	// http://262.ecma-international.org/5.1/#sec-9.12

	SameValue = function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return $isNaN(x) && $isNaN(y);
	};
	return SameValue;
}

var ToBoolean;
var hasRequiredToBoolean;

function requireToBoolean () {
	if (hasRequiredToBoolean) return ToBoolean;
	hasRequiredToBoolean = 1;

	// http://262.ecma-international.org/5.1/#sec-9.2

	ToBoolean = function ToBoolean(value) { return !!value; };
	return ToBoolean;
}

var isCallable;
var hasRequiredIsCallable$2;

function requireIsCallable$2 () {
	if (hasRequiredIsCallable$2) return isCallable;
	hasRequiredIsCallable$2 = 1;

	var fnToStr = Function.prototype.toString;
	var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
	var badArrayLike;
	var isCallableMarker;
	if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
		try {
			badArrayLike = Object.defineProperty({}, 'length', {
				get: function () {
					throw isCallableMarker;
				}
			});
			isCallableMarker = {};
			// eslint-disable-next-line no-throw-literal
			reflectApply(function () { throw 42; }, null, badArrayLike);
		} catch (_) {
			if (_ !== isCallableMarker) {
				reflectApply = null;
			}
		}
	} else {
		reflectApply = null;
	}

	var constructorRegex = /^\s*class\b/;
	var isES6ClassFn = function isES6ClassFunction(value) {
		try {
			var fnStr = fnToStr.call(value);
			return constructorRegex.test(fnStr);
		} catch (e) {
			return false; // not a function
		}
	};

	var tryFunctionObject = function tryFunctionToStr(value) {
		try {
			if (isES6ClassFn(value)) { return false; }
			fnToStr.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};
	var toStr = Object.prototype.toString;
	var objectClass = '[object Object]';
	var fnClass = '[object Function]';
	var genClass = '[object GeneratorFunction]';
	var ddaClass = '[object HTMLAllCollection]'; // IE 11
	var ddaClass2 = '[object HTML document.all class]';
	var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
	var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

	var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

	var isDDA = function isDocumentDotAll() { return false; };
	if (typeof document === 'object') {
		// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
		var all = document.all;
		if (toStr.call(all) === toStr.call(document.all)) {
			isDDA = function isDocumentDotAll(value) {
				/* globals document: false */
				// in IE 6-8, typeof document.all is "object" and it's truthy
				if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
					try {
						var str = toStr.call(value);
						return (
							str === ddaClass
							|| str === ddaClass2
							|| str === ddaClass3 // opera 12.16
							|| str === objectClass // IE 6-8
						) && value('') == null; // eslint-disable-line eqeqeq
					} catch (e) { /**/ }
				}
				return false;
			};
		}
	}

	isCallable = reflectApply
		? function isCallable(value) {
			if (isDDA(value)) { return true; }
			if (!value) { return false; }
			if (typeof value !== 'function' && typeof value !== 'object') { return false; }
			try {
				reflectApply(value, null, badArrayLike);
			} catch (e) {
				if (e !== isCallableMarker) { return false; }
			}
			return !isES6ClassFn(value) && tryFunctionObject(value);
		}
		: function isCallable(value) {
			if (isDDA(value)) { return true; }
			if (!value) { return false; }
			if (typeof value !== 'function' && typeof value !== 'object') { return false; }
			if (hasToStringTag) { return tryFunctionObject(value); }
			if (isES6ClassFn(value)) { return false; }
			var strClass = toStr.call(value);
			if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
			return tryFunctionObject(value);
		};
	return isCallable;
}

var IsCallable$1;
var hasRequiredIsCallable$1;

function requireIsCallable$1 () {
	if (hasRequiredIsCallable$1) return IsCallable$1;
	hasRequiredIsCallable$1 = 1;

	// http://262.ecma-international.org/5.1/#sec-9.11

	IsCallable$1 = requireIsCallable$2();
	return IsCallable$1;
}

var ToPropertyDescriptor;
var hasRequiredToPropertyDescriptor;

function requireToPropertyDescriptor () {
	if (hasRequiredToPropertyDescriptor) return ToPropertyDescriptor;
	hasRequiredToPropertyDescriptor = 1;

	var has = requireSrc();

	var GetIntrinsic = requireGetIntrinsic$1();

	var $TypeError = GetIntrinsic('%TypeError%');

	var Type = requireType();
	var ToBoolean = requireToBoolean();
	var IsCallable = requireIsCallable$1();

	// https://262.ecma-international.org/5.1/#sec-8.10.5

	ToPropertyDescriptor = function ToPropertyDescriptor(Obj) {
		if (Type(Obj) !== 'Object') {
			throw new $TypeError('ToPropertyDescriptor requires an object');
		}

		var desc = {};
		if (has(Obj, 'enumerable')) {
			desc['[[Enumerable]]'] = ToBoolean(Obj.enumerable);
		}
		if (has(Obj, 'configurable')) {
			desc['[[Configurable]]'] = ToBoolean(Obj.configurable);
		}
		if (has(Obj, 'value')) {
			desc['[[Value]]'] = Obj.value;
		}
		if (has(Obj, 'writable')) {
			desc['[[Writable]]'] = ToBoolean(Obj.writable);
		}
		if (has(Obj, 'get')) {
			var getter = Obj.get;
			if (typeof getter !== 'undefined' && !IsCallable(getter)) {
				throw new $TypeError('getter must be a function');
			}
			desc['[[Get]]'] = getter;
		}
		if (has(Obj, 'set')) {
			var setter = Obj.set;
			if (typeof setter !== 'undefined' && !IsCallable(setter)) {
				throw new $TypeError('setter must be a function');
			}
			desc['[[Set]]'] = setter;
		}

		if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
			throw new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
		}
		return desc;
	};
	return ToPropertyDescriptor;
}

var DefinePropertyOrThrow;
var hasRequiredDefinePropertyOrThrow;

function requireDefinePropertyOrThrow () {
	if (hasRequiredDefinePropertyOrThrow) return DefinePropertyOrThrow;
	hasRequiredDefinePropertyOrThrow = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $TypeError = GetIntrinsic('%TypeError%');

	var isPropertyDescriptor = requireIsPropertyDescriptor();
	var DefineOwnProperty = requireDefineOwnProperty();

	var FromPropertyDescriptor = requireFromPropertyDescriptor();
	var IsAccessorDescriptor = requireIsAccessorDescriptor();
	var IsDataDescriptor = requireIsDataDescriptor();
	var IsPropertyKey = requireIsPropertyKey();
	var SameValue = requireSameValue();
	var ToPropertyDescriptor = requireToPropertyDescriptor();
	var Type = requireType();

	// https://262.ecma-international.org/6.0/#sec-definepropertyorthrow

	DefinePropertyOrThrow = function DefinePropertyOrThrow(O, P, desc) {
		if (Type(O) !== 'Object') {
			throw new $TypeError('Assertion failed: Type(O) is not Object');
		}

		if (!IsPropertyKey(P)) {
			throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');
		}

		var Desc = isPropertyDescriptor({
			Type: Type,
			IsDataDescriptor: IsDataDescriptor,
			IsAccessorDescriptor: IsAccessorDescriptor
		}, desc) ? desc : ToPropertyDescriptor(desc);
		if (!isPropertyDescriptor({
			Type: Type,
			IsDataDescriptor: IsDataDescriptor,
			IsAccessorDescriptor: IsAccessorDescriptor
		}, Desc)) {
			throw new $TypeError('Assertion failed: Desc is not a valid Property Descriptor');
		}

		return DefineOwnProperty(
			IsDataDescriptor,
			SameValue,
			FromPropertyDescriptor,
			O,
			P,
			Desc
		);
	};
	return DefinePropertyOrThrow;
}

var hasRequiredIsConstructor;

function requireIsConstructor () {
	if (hasRequiredIsConstructor) return IsConstructor.exports;
	hasRequiredIsConstructor = 1;

	var GetIntrinsic = requireGetIntrinsic();

	var $construct = GetIntrinsic('%Reflect.construct%', true);

	var DefinePropertyOrThrow = requireDefinePropertyOrThrow();
	try {
		DefinePropertyOrThrow({}, '', { '[[Get]]': function () {} });
	} catch (e) {
		// Accessor properties aren't supported
		DefinePropertyOrThrow = null;
	}

	// https://262.ecma-international.org/6.0/#sec-isconstructor

	if (DefinePropertyOrThrow && $construct) {
		var isConstructorMarker = {};
		var badArrayLike = {};
		DefinePropertyOrThrow(badArrayLike, 'length', {
			'[[Get]]': function () {
				throw isConstructorMarker;
			},
			'[[Enumerable]]': true
		});

		IsConstructor.exports = function IsConstructor(argument) {
			try {
				// `Reflect.construct` invokes `IsConstructor(target)` before `Get(args, 'length')`:
				$construct(argument, badArrayLike);
			} catch (err) {
				return err === isConstructorMarker;
			}
		};
	} else {
		IsConstructor.exports = function IsConstructor(argument) {
			// unfortunately there's no way to truly check this without try/catch `new argument` in old environments
			return typeof argument === 'function' && !!argument.prototype;
		};
	}
	return IsConstructor.exports;
}

var ArraySpeciesCreate;
var hasRequiredArraySpeciesCreate;

function requireArraySpeciesCreate () {
	if (hasRequiredArraySpeciesCreate) return ArraySpeciesCreate;
	hasRequiredArraySpeciesCreate = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $species = GetIntrinsic('%Symbol.species%', true);
	var $TypeError = GetIntrinsic('%TypeError%');

	var ArrayCreate = requireArrayCreate();
	var Get = requireGet();
	var IsArray = requireIsArray();
	var IsConstructor = requireIsConstructor();
	var IsIntegralNumber = requireIsIntegralNumber();
	var Type = requireType();

	// https://262.ecma-international.org/12.0/#sec-arrayspeciescreate

	ArraySpeciesCreate = function ArraySpeciesCreate(originalArray, length) {
		if (!IsIntegralNumber(length) || length < 0) {
			throw new $TypeError('Assertion failed: length must be an integer >= 0');
		}

		var isArray = IsArray(originalArray);
		if (!isArray) {
			return ArrayCreate(length);
		}

		var C = Get(originalArray, 'constructor');
		// TODO: figure out how to make a cross-realm normal Array, a same-realm Array
		// if (IsConstructor(C)) {
		// 	if C is another realm's Array, C = undefined
		// 	Object.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?
		// }
		if ($species && Type(C) === 'Object') {
			C = Get(C, $species);
			if (C === null) {
				C = void 0;
			}
		}

		if (typeof C === 'undefined') {
			return ArrayCreate(length);
		}
		if (!IsConstructor(C)) {
			throw new $TypeError('C must be a constructor');
		}
		return new C(length); // Construct(C, length);
	};
	return ArraySpeciesCreate;
}

var maxSafeInteger;
var hasRequiredMaxSafeInteger;

function requireMaxSafeInteger () {
	if (hasRequiredMaxSafeInteger) return maxSafeInteger;
	hasRequiredMaxSafeInteger = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $Math = GetIntrinsic('%Math%');
	var $Number = GetIntrinsic('%Number%');

	maxSafeInteger = $Number.MAX_SAFE_INTEGER || $Math.pow(2, 53) - 1;
	return maxSafeInteger;
}

var Call;
var hasRequiredCall;

function requireCall () {
	if (hasRequiredCall) return Call;
	hasRequiredCall = 1;

	var GetIntrinsic = requireGetIntrinsic$1();
	var callBound = requireCallBound();

	var $TypeError = GetIntrinsic('%TypeError%');

	var IsArray = requireIsArray();

	var $apply = GetIntrinsic('%Reflect.apply%', true) || callBound('Function.prototype.apply');

	// https://262.ecma-international.org/6.0/#sec-call

	Call = function Call(F, V) {
		var argumentsList = arguments.length > 2 ? arguments[2] : [];
		if (!IsArray(argumentsList)) {
			throw new $TypeError('Assertion failed: optional `argumentsList`, if provided, must be a List');
		}
		return $apply(F, V, argumentsList);
	};
	return Call;
}

var gopd;
var hasRequiredGopd;

function requireGopd () {
	if (hasRequiredGopd) return gopd;
	hasRequiredGopd = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

	if ($gOPD) {
		try {
			$gOPD([], 'length');
		} catch (e) {
			// IE 8 has a broken gOPD
			$gOPD = null;
		}
	}

	gopd = $gOPD;
	return gopd;
}

var isPrimitive$2;
var hasRequiredIsPrimitive$2;

function requireIsPrimitive$2 () {
	if (hasRequiredIsPrimitive$2) return isPrimitive$2;
	hasRequiredIsPrimitive$2 = 1;

	isPrimitive$2 = function isPrimitive(value) {
		return value === null || (typeof value !== 'function' && typeof value !== 'object');
	};
	return isPrimitive$2;
}

var IsExtensible;
var hasRequiredIsExtensible;

function requireIsExtensible () {
	if (hasRequiredIsExtensible) return IsExtensible;
	hasRequiredIsExtensible = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $preventExtensions = GetIntrinsic('%Object.preventExtensions%', true);
	var $isExtensible = GetIntrinsic('%Object.isExtensible%', true);

	var isPrimitive = requireIsPrimitive$2();

	// https://262.ecma-international.org/6.0/#sec-isextensible-o

	IsExtensible = $preventExtensions
		? function IsExtensible(obj) {
			return !isPrimitive(obj) && $isExtensible(obj);
		}
		: function IsExtensible(obj) {
			return !isPrimitive(obj);
		};
	return IsExtensible;
}

var isFullyPopulatedPropertyDescriptor;
var hasRequiredIsFullyPopulatedPropertyDescriptor;

function requireIsFullyPopulatedPropertyDescriptor () {
	if (hasRequiredIsFullyPopulatedPropertyDescriptor) return isFullyPopulatedPropertyDescriptor;
	hasRequiredIsFullyPopulatedPropertyDescriptor = 1;

	isFullyPopulatedPropertyDescriptor = function isFullyPopulatedPropertyDescriptor(ES, Desc) {
		return !!Desc
			&& typeof Desc === 'object'
			&& '[[Enumerable]]' in Desc
			&& '[[Configurable]]' in Desc
			&& (ES.IsAccessorDescriptor(Desc) || ES.IsDataDescriptor(Desc));
	};
	return isFullyPopulatedPropertyDescriptor;
}

var IsGenericDescriptor;
var hasRequiredIsGenericDescriptor;

function requireIsGenericDescriptor () {
	if (hasRequiredIsGenericDescriptor) return IsGenericDescriptor;
	hasRequiredIsGenericDescriptor = 1;

	var assertRecord = requireAssertRecord();

	var IsAccessorDescriptor = requireIsAccessorDescriptor();
	var IsDataDescriptor = requireIsDataDescriptor();
	var Type = requireType();

	// https://262.ecma-international.org/6.0/#sec-isgenericdescriptor

	IsGenericDescriptor = function IsGenericDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

		if (!IsAccessorDescriptor(Desc) && !IsDataDescriptor(Desc)) {
			return true;
		}

		return false;
	};
	return IsGenericDescriptor;
}

var ValidateAndApplyPropertyDescriptor;
var hasRequiredValidateAndApplyPropertyDescriptor;

function requireValidateAndApplyPropertyDescriptor () {
	if (hasRequiredValidateAndApplyPropertyDescriptor) return ValidateAndApplyPropertyDescriptor;
	hasRequiredValidateAndApplyPropertyDescriptor = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $TypeError = GetIntrinsic('%TypeError%');

	var DefineOwnProperty = requireDefineOwnProperty();
	var isFullyPopulatedPropertyDescriptor = requireIsFullyPopulatedPropertyDescriptor();
	var isPropertyDescriptor = requireIsPropertyDescriptor();

	var FromPropertyDescriptor = requireFromPropertyDescriptor();
	var IsAccessorDescriptor = requireIsAccessorDescriptor();
	var IsDataDescriptor = requireIsDataDescriptor();
	var IsGenericDescriptor = requireIsGenericDescriptor();
	var IsPropertyKey = requireIsPropertyKey();
	var SameValue = requireSameValue();
	var Type = requireType();

	// https://262.ecma-international.org/13.0/#sec-validateandapplypropertydescriptor

	// see https://github.com/tc39/ecma262/pull/2468 for ES2022 changes

	// eslint-disable-next-line max-lines-per-function, max-statements, max-params
	ValidateAndApplyPropertyDescriptor = function ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current) {
		var oType = Type(O);
		if (oType !== 'Undefined' && oType !== 'Object') {
			throw new $TypeError('Assertion failed: O must be undefined or an Object');
		}
		if (!IsPropertyKey(P)) {
			throw new $TypeError('Assertion failed: P must be a Property Key');
		}
		if (Type(extensible) !== 'Boolean') {
			throw new $TypeError('Assertion failed: extensible must be a Boolean');
		}
		if (!isPropertyDescriptor({
			Type: Type,
			IsDataDescriptor: IsDataDescriptor,
			IsAccessorDescriptor: IsAccessorDescriptor
		}, Desc)) {
			throw new $TypeError('Assertion failed: Desc must be a Property Descriptor');
		}
		if (Type(current) !== 'Undefined' && !isPropertyDescriptor({
			Type: Type,
			IsDataDescriptor: IsDataDescriptor,
			IsAccessorDescriptor: IsAccessorDescriptor
		}, current)) {
			throw new $TypeError('Assertion failed: current must be a Property Descriptor, or undefined');
		}

		if (Type(current) === 'Undefined') { // step 2
			if (!extensible) {
				return false; // step 2.a
			}
			if (oType === 'Undefined') {
				return true; // step 2.b
			}
			if (IsAccessorDescriptor(Desc)) { // step 2.c
				return DefineOwnProperty(
					IsDataDescriptor,
					SameValue,
					FromPropertyDescriptor,
					O,
					P,
					Desc
				);
			}
			// step 2.d
			return DefineOwnProperty(
				IsDataDescriptor,
				SameValue,
				FromPropertyDescriptor,
				O,
				P,
				{
					'[[Configurable]]': !!Desc['[[Configurable]]'],
					'[[Enumerable]]': !!Desc['[[Enumerable]]'],
					'[[Value]]': Desc['[[Value]]'],
					'[[Writable]]': !!Desc['[[Writable]]']
				}
			);
		}

		// 3. Assert: current is a fully populated Property Descriptor.
		if (!isFullyPopulatedPropertyDescriptor({
			IsAccessorDescriptor: IsAccessorDescriptor,
			IsDataDescriptor: IsDataDescriptor
		}, current)) {
			throw new $TypeError('`current`, when present, must be a fully populated and valid Property Descriptor');
		}

		// 4. If every field in Desc is absent, return true.
		// this can't really match the assertion that it's a Property Descriptor in our JS implementation

		// 5. If current.[[Configurable]] is false, then
		if (!current['[[Configurable]]']) {
			if ('[[Configurable]]' in Desc && Desc['[[Configurable]]']) {
				// step 5.a
				return false;
			}
			if ('[[Enumerable]]' in Desc && !SameValue(Desc['[[Enumerable]]'], current['[[Enumerable]]'])) {
				// step 5.b
				return false;
			}
			if (!IsGenericDescriptor(Desc) && !SameValue(IsAccessorDescriptor(Desc), IsAccessorDescriptor(current))) {
				// step 5.c
				return false;
			}
			if (IsAccessorDescriptor(current)) { // step 5.d
				if ('[[Get]]' in Desc && !SameValue(Desc['[[Get]]'], current['[[Get]]'])) {
					return false;
				}
				if ('[[Set]]' in Desc && !SameValue(Desc['[[Set]]'], current['[[Set]]'])) {
					return false;
				}
			} else if (!current['[[Writable]]']) { // step 5.e
				if ('[[Writable]]' in Desc && Desc['[[Writable]]']) {
					return false;
				}
				if ('[[Value]]' in Desc && !SameValue(Desc['[[Value]]'], current['[[Value]]'])) {
					return false;
				}
			}
		}

		// 6. If O is not undefined, then
		if (oType !== 'Undefined') {
			var configurable;
			var enumerable;
			if (IsDataDescriptor(current) && IsAccessorDescriptor(Desc)) { // step 6.a
				configurable = ('[[Configurable]]' in Desc ? Desc : current)['[[Configurable]]'];
				enumerable = ('[[Enumerable]]' in Desc ? Desc : current)['[[Enumerable]]'];
				// Replace the property named P of object O with an accessor property having [[Configurable]] and [[Enumerable]] attributes as described by current and each other attribute set to its default value.
				return DefineOwnProperty(
					IsDataDescriptor,
					SameValue,
					FromPropertyDescriptor,
					O,
					P,
					{
						'[[Configurable]]': !!configurable,
						'[[Enumerable]]': !!enumerable,
						'[[Get]]': ('[[Get]]' in Desc ? Desc : current)['[[Get]]'],
						'[[Set]]': ('[[Set]]' in Desc ? Desc : current)['[[Set]]']
					}
				);
			} else if (IsAccessorDescriptor(current) && IsDataDescriptor(Desc)) {
				configurable = ('[[Configurable]]' in Desc ? Desc : current)['[[Configurable]]'];
				enumerable = ('[[Enumerable]]' in Desc ? Desc : current)['[[Enumerable]]'];
				// i. Replace the property named P of object O with a data property having [[Configurable]] and [[Enumerable]] attributes as described by current and each other attribute set to its default value.
				return DefineOwnProperty(
					IsDataDescriptor,
					SameValue,
					FromPropertyDescriptor,
					O,
					P,
					{
						'[[Configurable]]': !!configurable,
						'[[Enumerable]]': !!enumerable,
						'[[Value]]': ('[[Value]]' in Desc ? Desc : current)['[[Value]]'],
						'[[Writable]]': !!('[[Writable]]' in Desc ? Desc : current)['[[Writable]]']
					}
				);
			}

			// For each field of Desc that is present, set the corresponding attribute of the property named P of object O to the value of the field.
			return DefineOwnProperty(
				IsDataDescriptor,
				SameValue,
				FromPropertyDescriptor,
				O,
				P,
				Desc
			);
		}

		return true; // step 7
	};
	return ValidateAndApplyPropertyDescriptor;
}

var OrdinaryDefineOwnProperty;
var hasRequiredOrdinaryDefineOwnProperty;

function requireOrdinaryDefineOwnProperty () {
	if (hasRequiredOrdinaryDefineOwnProperty) return OrdinaryDefineOwnProperty;
	hasRequiredOrdinaryDefineOwnProperty = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $gOPD = requireGopd();
	var $SyntaxError = GetIntrinsic('%SyntaxError%');
	var $TypeError = GetIntrinsic('%TypeError%');

	var isPropertyDescriptor = requireIsPropertyDescriptor();

	var IsAccessorDescriptor = requireIsAccessorDescriptor();
	var IsDataDescriptor = requireIsDataDescriptor();
	var IsExtensible = requireIsExtensible();
	var IsPropertyKey = requireIsPropertyKey();
	var ToPropertyDescriptor = requireToPropertyDescriptor();
	var SameValue = requireSameValue();
	var Type = requireType();
	var ValidateAndApplyPropertyDescriptor = requireValidateAndApplyPropertyDescriptor();

	// https://262.ecma-international.org/6.0/#sec-ordinarydefineownproperty

	OrdinaryDefineOwnProperty = function OrdinaryDefineOwnProperty(O, P, Desc) {
		if (Type(O) !== 'Object') {
			throw new $TypeError('Assertion failed: O must be an Object');
		}
		if (!IsPropertyKey(P)) {
			throw new $TypeError('Assertion failed: P must be a Property Key');
		}
		if (!isPropertyDescriptor({
			Type: Type,
			IsDataDescriptor: IsDataDescriptor,
			IsAccessorDescriptor: IsAccessorDescriptor
		}, Desc)) {
			throw new $TypeError('Assertion failed: Desc must be a Property Descriptor');
		}
		if (!$gOPD) {
			// ES3/IE 8 fallback
			if (IsAccessorDescriptor(Desc)) {
				throw new $SyntaxError('This environment does not support accessor property descriptors.');
			}
			var creatingNormalDataProperty = !(P in O)
				&& Desc['[[Writable]]']
				&& Desc['[[Enumerable]]']
				&& Desc['[[Configurable]]']
				&& '[[Value]]' in Desc;
			var settingExistingDataProperty = (P in O)
				&& (!('[[Configurable]]' in Desc) || Desc['[[Configurable]]'])
				&& (!('[[Enumerable]]' in Desc) || Desc['[[Enumerable]]'])
				&& (!('[[Writable]]' in Desc) || Desc['[[Writable]]'])
				&& '[[Value]]' in Desc;
			if (creatingNormalDataProperty || settingExistingDataProperty) {
				O[P] = Desc['[[Value]]']; // eslint-disable-line no-param-reassign
				return SameValue(O[P], Desc['[[Value]]']);
			}
			throw new $SyntaxError('This environment does not support defining non-writable, non-enumerable, or non-configurable properties');
		}
		var desc = $gOPD(O, P);
		var current = desc && ToPropertyDescriptor(desc);
		var extensible = IsExtensible(O);
		return ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current);
	};
	return OrdinaryDefineOwnProperty;
}

var CreateDataProperty;
var hasRequiredCreateDataProperty;

function requireCreateDataProperty () {
	if (hasRequiredCreateDataProperty) return CreateDataProperty;
	hasRequiredCreateDataProperty = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $TypeError = GetIntrinsic('%TypeError%');

	var IsPropertyKey = requireIsPropertyKey();
	var OrdinaryDefineOwnProperty = requireOrdinaryDefineOwnProperty();
	var Type = requireType();

	// https://262.ecma-international.org/6.0/#sec-createdataproperty

	CreateDataProperty = function CreateDataProperty(O, P, V) {
		if (Type(O) !== 'Object') {
			throw new $TypeError('Assertion failed: Type(O) is not Object');
		}
		if (!IsPropertyKey(P)) {
			throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');
		}
		var newDesc = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Value]]': V,
			'[[Writable]]': true
		};
		return OrdinaryDefineOwnProperty(O, P, newDesc);
	};
	return CreateDataProperty;
}

var CreateDataPropertyOrThrow;
var hasRequiredCreateDataPropertyOrThrow;

function requireCreateDataPropertyOrThrow () {
	if (hasRequiredCreateDataPropertyOrThrow) return CreateDataPropertyOrThrow;
	hasRequiredCreateDataPropertyOrThrow = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $TypeError = GetIntrinsic('%TypeError%');

	var CreateDataProperty = requireCreateDataProperty();
	var IsPropertyKey = requireIsPropertyKey();
	var Type = requireType();

	// // https://262.ecma-international.org/6.0/#sec-createdatapropertyorthrow

	CreateDataPropertyOrThrow = function CreateDataPropertyOrThrow(O, P, V) {
		if (Type(O) !== 'Object') {
			throw new $TypeError('Assertion failed: Type(O) is not Object');
		}
		if (!IsPropertyKey(P)) {
			throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');
		}
		var success = CreateDataProperty(O, P, V);
		if (!success) {
			throw new $TypeError('unable to create data property');
		}
		return success;
	};
	return CreateDataPropertyOrThrow;
}

var HasProperty;
var hasRequiredHasProperty;

function requireHasProperty () {
	if (hasRequiredHasProperty) return HasProperty;
	hasRequiredHasProperty = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $TypeError = GetIntrinsic('%TypeError%');

	var IsPropertyKey = requireIsPropertyKey();
	var Type = requireType();

	// https://262.ecma-international.org/6.0/#sec-hasproperty

	HasProperty = function HasProperty(O, P) {
		if (Type(O) !== 'Object') {
			throw new $TypeError('Assertion failed: `O` must be an Object');
		}
		if (!IsPropertyKey(P)) {
			throw new $TypeError('Assertion failed: `P` must be a Property Key');
		}
		return P in O;
	};
	return HasProperty;
}

var isPrimitive$1;
var hasRequiredIsPrimitive$1;

function requireIsPrimitive$1 () {
	if (hasRequiredIsPrimitive$1) return isPrimitive$1;
	hasRequiredIsPrimitive$1 = 1;

	isPrimitive$1 = function isPrimitive(value) {
		return value === null || (typeof value !== 'function' && typeof value !== 'object');
	};
	return isPrimitive$1;
}

var shams;
var hasRequiredShams;

function requireShams () {
	if (hasRequiredShams) return shams;
	hasRequiredShams = 1;

	var hasSymbols = requireShams$1();

	shams = function hasToStringTagShams() {
		return hasSymbols() && !!Symbol.toStringTag;
	};
	return shams;
}

var isDateObject;
var hasRequiredIsDateObject;

function requireIsDateObject () {
	if (hasRequiredIsDateObject) return isDateObject;
	hasRequiredIsDateObject = 1;

	var getDay = Date.prototype.getDay;
	var tryDateObject = function tryDateGetDayCall(value) {
		try {
			getDay.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};

	var toStr = Object.prototype.toString;
	var dateClass = '[object Date]';
	var hasToStringTag = requireShams()();

	isDateObject = function isDateObject(value) {
		if (typeof value !== 'object' || value === null) {
			return false;
		}
		return hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;
	};
	return isDateObject;
}

var isSymbol = {exports: {}};

var hasRequiredIsSymbol$1;

function requireIsSymbol$1 () {
	if (hasRequiredIsSymbol$1) return isSymbol.exports;
	hasRequiredIsSymbol$1 = 1;

	var toStr = Object.prototype.toString;
	var hasSymbols = requireHasSymbols()();

	if (hasSymbols) {
		var symToStr = Symbol.prototype.toString;
		var symStringRegex = /^Symbol\(.*\)$/;
		var isSymbolObject = function isRealSymbolObject(value) {
			if (typeof value.valueOf() !== 'symbol') {
				return false;
			}
			return symStringRegex.test(symToStr.call(value));
		};

		isSymbol.exports = function isSymbol(value) {
			if (typeof value === 'symbol') {
				return true;
			}
			if (toStr.call(value) !== '[object Symbol]') {
				return false;
			}
			try {
				return isSymbolObject(value);
			} catch (e) {
				return false;
			}
		};
	} else {

		isSymbol.exports = function isSymbol(value) {
			// this environment does not support Symbols.
			return false ;
		};
	}
	return isSymbol.exports;
}

var es2015;
var hasRequiredEs2015;

function requireEs2015 () {
	if (hasRequiredEs2015) return es2015;
	hasRequiredEs2015 = 1;

	var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';

	var isPrimitive = requireIsPrimitive$1();
	var isCallable = requireIsCallable$2();
	var isDate = requireIsDateObject();
	var isSymbol = requireIsSymbol$1();

	var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
		if (typeof O === 'undefined' || O === null) {
			throw new TypeError('Cannot call method on ' + O);
		}
		if (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) {
			throw new TypeError('hint must be "string" or "number"');
		}
		var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
		var method, result, i;
		for (i = 0; i < methodNames.length; ++i) {
			method = O[methodNames[i]];
			if (isCallable(method)) {
				result = method.call(O);
				if (isPrimitive(result)) {
					return result;
				}
			}
		}
		throw new TypeError('No default value');
	};

	var GetMethod = function GetMethod(O, P) {
		var func = O[P];
		if (func !== null && typeof func !== 'undefined') {
			if (!isCallable(func)) {
				throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
			}
			return func;
		}
		return void 0;
	};

	// http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
	es2015 = function ToPrimitive(input) {
		if (isPrimitive(input)) {
			return input;
		}
		var hint = 'default';
		if (arguments.length > 1) {
			if (arguments[1] === String) {
				hint = 'string';
			} else if (arguments[1] === Number) {
				hint = 'number';
			}
		}

		var exoticToPrim;
		if (hasSymbols) {
			if (Symbol.toPrimitive) {
				exoticToPrim = GetMethod(input, Symbol.toPrimitive);
			} else if (isSymbol(input)) {
				exoticToPrim = Symbol.prototype.valueOf;
			}
		}
		if (typeof exoticToPrim !== 'undefined') {
			var result = exoticToPrim.call(input, hint);
			if (isPrimitive(result)) {
				return result;
			}
			throw new TypeError('unable to convert exotic object to primitive');
		}
		if (hint === 'default' && (isDate(input) || isSymbol(input))) {
			hint = 'string';
		}
		return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
	};
	return es2015;
}

var ToPrimitive;
var hasRequiredToPrimitive$1;

function requireToPrimitive$1 () {
	if (hasRequiredToPrimitive$1) return ToPrimitive;
	hasRequiredToPrimitive$1 = 1;

	var toPrimitive = requireEs2015();

	// https://262.ecma-international.org/6.0/#sec-toprimitive

	ToPrimitive = function ToPrimitive(input) {
		if (arguments.length > 1) {
			return toPrimitive(input, arguments[1]);
		}
		return toPrimitive(input);
	};
	return ToPrimitive;
}

var isRegex;
var hasRequiredIsRegex;

function requireIsRegex () {
	if (hasRequiredIsRegex) return isRegex;
	hasRequiredIsRegex = 1;

	var callBound = requireCallBound();
	var hasToStringTag = requireShams()();
	var has;
	var $exec;
	var isRegexMarker;
	var badStringifier;

	if (hasToStringTag) {
		has = callBound('Object.prototype.hasOwnProperty');
		$exec = callBound('RegExp.prototype.exec');
		isRegexMarker = {};

		var throwRegexMarker = function () {
			throw isRegexMarker;
		};
		badStringifier = {
			toString: throwRegexMarker,
			valueOf: throwRegexMarker
		};

		if (typeof Symbol.toPrimitive === 'symbol') {
			badStringifier[Symbol.toPrimitive] = throwRegexMarker;
		}
	}

	var $toString = callBound('Object.prototype.toString');
	var gOPD = Object.getOwnPropertyDescriptor;
	var regexClass = '[object RegExp]';

	isRegex = hasToStringTag
		// eslint-disable-next-line consistent-return
		? function isRegex(value) {
			if (!value || typeof value !== 'object') {
				return false;
			}

			var descriptor = gOPD(value, 'lastIndex');
			var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');
			if (!hasLastIndexDataProperty) {
				return false;
			}

			try {
				$exec(value, badStringifier);
			} catch (e) {
				return e === isRegexMarker;
			}
		}
		: function isRegex(value) {
			// In older browsers, typeof regex incorrectly returns 'function'
			if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
				return false;
			}

			return $toString(value) === regexClass;
		};
	return isRegex;
}

var safeRegexTest;
var hasRequiredSafeRegexTest;

function requireSafeRegexTest () {
	if (hasRequiredSafeRegexTest) return safeRegexTest;
	hasRequiredSafeRegexTest = 1;

	var callBound = requireCallBound();
	var GetIntrinsic = requireGetIntrinsic$1();
	var isRegex = requireIsRegex();

	var $exec = callBound('RegExp.prototype.exec');
	var $TypeError = GetIntrinsic('%TypeError%');

	safeRegexTest = function regexTester(regex) {
		if (!isRegex(regex)) {
			throw new $TypeError('`regex` must be a RegExp');
		}
		return function test(s) {
			return $exec(regex, s) !== null;
		};
	};
	return safeRegexTest;
}

var CheckObjectCoercible;
var hasRequiredCheckObjectCoercible;

function requireCheckObjectCoercible () {
	if (hasRequiredCheckObjectCoercible) return CheckObjectCoercible;
	hasRequiredCheckObjectCoercible = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $TypeError = GetIntrinsic('%TypeError%');

	// http://262.ecma-international.org/5.1/#sec-9.10

	CheckObjectCoercible = function CheckObjectCoercible(value, optMessage) {
		if (value == null) {
			throw new $TypeError(optMessage || ('Cannot call method on ' + value));
		}
		return value;
	};
	return CheckObjectCoercible;
}

var RequireObjectCoercible;
var hasRequiredRequireObjectCoercible;

function requireRequireObjectCoercible () {
	if (hasRequiredRequireObjectCoercible) return RequireObjectCoercible;
	hasRequiredRequireObjectCoercible = 1;

	RequireObjectCoercible = requireCheckObjectCoercible();
	return RequireObjectCoercible;
}

var ToString;
var hasRequiredToString;

function requireToString () {
	if (hasRequiredToString) return ToString;
	hasRequiredToString = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $String = GetIntrinsic('%String%');
	var $TypeError = GetIntrinsic('%TypeError%');

	// https://262.ecma-international.org/6.0/#sec-tostring

	ToString = function ToString(argument) {
		if (typeof argument === 'symbol') {
			throw new $TypeError('Cannot convert a Symbol value to a string');
		}
		return $String(argument);
	};
	return ToString;
}

var implementation$8;
var hasRequiredImplementation$8;

function requireImplementation$8 () {
	if (hasRequiredImplementation$8) return implementation$8;
	hasRequiredImplementation$8 = 1;

	var RequireObjectCoercible = requireRequireObjectCoercible();
	var ToString = requireToString();
	var callBound = requireCallBound();
	var $replace = callBound('String.prototype.replace');

	var mvsIsWS = (/^\s$/).test('\u180E');
	/* eslint-disable no-control-regex */
	var leftWhitespace = mvsIsWS
		? /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/
		: /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
	var rightWhitespace = mvsIsWS
		? /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/
		: /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;
	/* eslint-enable no-control-regex */

	implementation$8 = function trim() {
		var S = ToString(RequireObjectCoercible(this));
		return $replace($replace(S, leftWhitespace, ''), rightWhitespace, '');
	};
	return implementation$8;
}

var polyfill$8;
var hasRequiredPolyfill$8;

function requirePolyfill$8 () {
	if (hasRequiredPolyfill$8) return polyfill$8;
	hasRequiredPolyfill$8 = 1;

	var implementation = requireImplementation$8();

	var zeroWidthSpace = '\u200b';
	var mongolianVowelSeparator = '\u180E';

	polyfill$8 = function getPolyfill() {
		if (
			String.prototype.trim
			&& zeroWidthSpace.trim() === zeroWidthSpace
			&& mongolianVowelSeparator.trim() === mongolianVowelSeparator
			&& ('_' + mongolianVowelSeparator).trim() === ('_' + mongolianVowelSeparator)
			&& (mongolianVowelSeparator + '_').trim() === (mongolianVowelSeparator + '_')
		) {
			return String.prototype.trim;
		}
		return implementation;
	};
	return polyfill$8;
}

var shim$8;
var hasRequiredShim$8;

function requireShim$8 () {
	if (hasRequiredShim$8) return shim$8;
	hasRequiredShim$8 = 1;

	var define = requireDefineProperties();
	var getPolyfill = requirePolyfill$8();

	shim$8 = function shimStringTrim() {
		var polyfill = getPolyfill();
		define(String.prototype, { trim: polyfill }, {
			trim: function testTrim() {
				return String.prototype.trim !== polyfill;
			}
		});
		return polyfill;
	};
	return shim$8;
}

var string_prototype_trim;
var hasRequiredString_prototype_trim;

function requireString_prototype_trim () {
	if (hasRequiredString_prototype_trim) return string_prototype_trim;
	hasRequiredString_prototype_trim = 1;

	var callBind = requireCallBind();
	var define = requireDefineProperties();
	var RequireObjectCoercible = requireRequireObjectCoercible();

	var implementation = requireImplementation$8();
	var getPolyfill = requirePolyfill$8();
	var shim = requireShim$8();

	var bound = callBind(getPolyfill());
	var boundMethod = function trim(receiver) {
		RequireObjectCoercible(receiver);
		return bound(receiver);
	};

	define(boundMethod, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});

	string_prototype_trim = boundMethod;
	return string_prototype_trim;
}

var StringToNumber;
var hasRequiredStringToNumber;

function requireStringToNumber () {
	if (hasRequiredStringToNumber) return StringToNumber;
	hasRequiredStringToNumber = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $Number = GetIntrinsic('%Number%');
	var $RegExp = GetIntrinsic('%RegExp%');
	var $TypeError = GetIntrinsic('%TypeError%');
	var $parseInteger = GetIntrinsic('%parseInt%');

	var callBound = requireCallBound();
	var regexTester = requireSafeRegexTest();

	var $strSlice = callBound('String.prototype.slice');
	var isBinary = regexTester(/^0b[01]+$/i);
	var isOctal = regexTester(/^0o[0-7]+$/i);
	var isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);
	var nonWS = ['\u0085', '\u200b', '\ufffe'].join('');
	var nonWSregex = new $RegExp('[' + nonWS + ']', 'g');
	var hasNonWS = regexTester(nonWSregex);

	var $trim = requireString_prototype_trim();

	var Type = requireType();

	// https://262.ecma-international.org/13.0/#sec-stringtonumber

	StringToNumber = function StringToNumber(argument) {
		if (Type(argument) !== 'String') {
			throw new $TypeError('Assertion failed: `argument` is not a String');
		}
		if (isBinary(argument)) {
			return $Number($parseInteger($strSlice(argument, 2), 2));
		}
		if (isOctal(argument)) {
			return $Number($parseInteger($strSlice(argument, 2), 8));
		}
		if (hasNonWS(argument) || isInvalidHexLiteral(argument)) {
			return NaN;
		}
		var trimmed = $trim(argument);
		if (trimmed !== argument) {
			return StringToNumber(trimmed);
		}
		return $Number(argument);
	};
	return StringToNumber;
}

var ToNumber;
var hasRequiredToNumber$1;

function requireToNumber$1 () {
	if (hasRequiredToNumber$1) return ToNumber;
	hasRequiredToNumber$1 = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $TypeError = GetIntrinsic('%TypeError%');
	var $Number = GetIntrinsic('%Number%');
	var isPrimitive = requireIsPrimitive$2();

	var ToPrimitive = requireToPrimitive$1();
	var StringToNumber = requireStringToNumber();

	// https://262.ecma-international.org/13.0/#sec-tonumber

	ToNumber = function ToNumber(argument) {
		var value = isPrimitive(argument) ? argument : ToPrimitive(argument, $Number);
		if (typeof value === 'symbol') {
			throw new $TypeError('Cannot convert a Symbol value to a number');
		}
		if (typeof value === 'bigint') {
			throw new $TypeError('Conversion from \'BigInt\' to \'number\' is not allowed.');
		}
		if (typeof value === 'string') {
			return StringToNumber(value);
		}
		return $Number(value);
	};
	return ToNumber;
}

var sign;
var hasRequiredSign;

function requireSign () {
	if (hasRequiredSign) return sign;
	hasRequiredSign = 1;

	sign = function sign(number) {
		return number >= 0 ? 1 : -1;
	};
	return sign;
}

var ToIntegerOrInfinity;
var hasRequiredToIntegerOrInfinity;

function requireToIntegerOrInfinity () {
	if (hasRequiredToIntegerOrInfinity) return ToIntegerOrInfinity;
	hasRequiredToIntegerOrInfinity = 1;

	var abs = requireAbs();
	var floor = requireFloor();
	var ToNumber = requireToNumber$1();

	var $isNaN = require_isNaN();
	var $isFinite = require_isFinite();
	var $sign = requireSign();

	// https://262.ecma-international.org/12.0/#sec-tointegerorinfinity

	ToIntegerOrInfinity = function ToIntegerOrInfinity(value) {
		var number = ToNumber(value);
		if ($isNaN(number) || number === 0) { return 0; }
		if (!$isFinite(number)) { return number; }
		var integer = floor(abs(number));
		if (integer === 0) { return 0; }
		return $sign(number) * integer;
	};
	return ToIntegerOrInfinity;
}

var ToLength;
var hasRequiredToLength;

function requireToLength () {
	if (hasRequiredToLength) return ToLength;
	hasRequiredToLength = 1;

	var MAX_SAFE_INTEGER = requireMaxSafeInteger();

	var ToIntegerOrInfinity = requireToIntegerOrInfinity();

	ToLength = function ToLength(argument) {
		var len = ToIntegerOrInfinity(argument);
		if (len <= 0) { return 0; } // includes converting -0 to +0
		if (len > MAX_SAFE_INTEGER) { return MAX_SAFE_INTEGER; }
		return len;
	};
	return ToLength;
}

var LengthOfArrayLike;
var hasRequiredLengthOfArrayLike;

function requireLengthOfArrayLike () {
	if (hasRequiredLengthOfArrayLike) return LengthOfArrayLike;
	hasRequiredLengthOfArrayLike = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $TypeError = GetIntrinsic('%TypeError%');

	var Get = requireGet();
	var ToLength = requireToLength();
	var Type = requireType();

	// https://262.ecma-international.org/11.0/#sec-lengthofarraylike

	LengthOfArrayLike = function LengthOfArrayLike(obj) {
		if (Type(obj) !== 'Object') {
			throw new $TypeError('Assertion failed: `obj` must be an Object');
		}
		return ToLength(Get(obj, 'length'));
	};

	// TODO: use this all over
	return LengthOfArrayLike;
}

var FlattenIntoArray;
var hasRequiredFlattenIntoArray;

function requireFlattenIntoArray () {
	if (hasRequiredFlattenIntoArray) return FlattenIntoArray;
	hasRequiredFlattenIntoArray = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $TypeError = GetIntrinsic('%TypeError%');

	var MAX_SAFE_INTEGER = requireMaxSafeInteger();

	var Call = requireCall();
	var CreateDataPropertyOrThrow = requireCreateDataPropertyOrThrow();
	var Get = requireGet();
	var HasProperty = requireHasProperty();
	var IsArray = requireIsArray();
	var LengthOfArrayLike = requireLengthOfArrayLike();
	var ToString = requireToString();

	// https://262.ecma-international.org/11.0/#sec-flattenintoarray

	// eslint-disable-next-line max-params
	FlattenIntoArray = function FlattenIntoArray(target, source, sourceLen, start, depth) {
		var mapperFunction;
		if (arguments.length > 5) {
			mapperFunction = arguments[5];
		}

		var targetIndex = start;
		var sourceIndex = 0;
		while (sourceIndex < sourceLen) {
			var P = ToString(sourceIndex);
			var exists = HasProperty(source, P);
			if (exists === true) {
				var element = Get(source, P);
				if (typeof mapperFunction !== 'undefined') {
					if (arguments.length <= 6) {
						throw new $TypeError('Assertion failed: thisArg is required when mapperFunction is provided');
					}
					element = Call(mapperFunction, arguments[6], [element, sourceIndex, source]);
				}
				var shouldFlatten = false;
				if (depth > 0) {
					shouldFlatten = IsArray(element);
				}
				if (shouldFlatten) {
					var elementLen = LengthOfArrayLike(element);
					targetIndex = FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1);
				} else {
					if (targetIndex >= MAX_SAFE_INTEGER) {
						throw new $TypeError('index too large');
					}
					CreateDataPropertyOrThrow(target, ToString(targetIndex), element);
					targetIndex += 1;
				}
			}
			sourceIndex += 1;
		}

		return targetIndex;
	};
	return FlattenIntoArray;
}

var ToObject;
var hasRequiredToObject;

function requireToObject () {
	if (hasRequiredToObject) return ToObject;
	hasRequiredToObject = 1;

	var GetIntrinsic = requireGetIntrinsic$1();

	var $Object = GetIntrinsic('%Object%');

	var RequireObjectCoercible = requireRequireObjectCoercible();

	// https://262.ecma-international.org/6.0/#sec-toobject

	ToObject = function ToObject(value) {
		RequireObjectCoercible(value);
		return $Object(value);
	};
	return ToObject;
}

var implementation$7;
var hasRequiredImplementation$7;

function requireImplementation$7 () {
	if (hasRequiredImplementation$7) return implementation$7;
	hasRequiredImplementation$7 = 1;

	var ArraySpeciesCreate = requireArraySpeciesCreate();
	var FlattenIntoArray = requireFlattenIntoArray();
	var Get = requireGet();
	var ToIntegerOrInfinity = requireToIntegerOrInfinity();
	var ToLength = requireToLength();
	var ToObject = requireToObject();

	implementation$7 = function flat() {
		var O = ToObject(this);
		var sourceLen = ToLength(Get(O, 'length'));

		var depthNum = 1;
		if (arguments.length > 0 && typeof arguments[0] !== 'undefined') {
			depthNum = ToIntegerOrInfinity(arguments[0]);
		}

		var A = ArraySpeciesCreate(O, 0);
		FlattenIntoArray(A, O, sourceLen, 0, depthNum);
		return A;
	};
	return implementation$7;
}

var polyfill$7;
var hasRequiredPolyfill$7;

function requirePolyfill$7 () {
	if (hasRequiredPolyfill$7) return polyfill$7;
	hasRequiredPolyfill$7 = 1;

	var implementation = requireImplementation$7();

	polyfill$7 = function getPolyfill() {
		return Array.prototype.flat || implementation;
	};
	return polyfill$7;
}

var esShimUnscopables;
var hasRequiredEsShimUnscopables;

function requireEsShimUnscopables () {
	if (hasRequiredEsShimUnscopables) return esShimUnscopables;
	hasRequiredEsShimUnscopables = 1;

	var has = requireSrc();

	var hasUnscopables = typeof Symbol === 'function' && typeof Symbol.unscopables === 'symbol';

	var map = hasUnscopables && Array.prototype[Symbol.unscopables];

	var $TypeError = TypeError;

	esShimUnscopables = function shimUnscopables(method) {
		if (typeof method !== 'string' || !method) {
			throw new $TypeError('method must be a non-empty string');
		}
		if (!has(Array.prototype, method)) {
			throw new $TypeError('method must be on Array.prototype');
		}
		if (hasUnscopables) {
			map[method] = true;
		}
	};
	return esShimUnscopables;
}

var shim$7;
var hasRequiredShim$7;

function requireShim$7 () {
	if (hasRequiredShim$7) return shim$7;
	hasRequiredShim$7 = 1;

	var define = requireDefineProperties();
	var shimUnscopables = requireEsShimUnscopables();

	var getPolyfill = requirePolyfill$7();

	shim$7 = function shimFlat() {
		var polyfill = getPolyfill();

		define(
			Array.prototype,
			{ flat: polyfill },
			{ flat: function () { return Array.prototype.flat !== polyfill; } }
		);

		shimUnscopables('flat');

		return polyfill;
	};
	return shim$7;
}

var array_prototype_flat;
var hasRequiredArray_prototype_flat;

function requireArray_prototype_flat () {
	if (hasRequiredArray_prototype_flat) return array_prototype_flat;
	hasRequiredArray_prototype_flat = 1;

	var define = requireDefineProperties();
	var callBind = requireCallBind();

	var implementation = requireImplementation$7();
	var getPolyfill = requirePolyfill$7();
	var polyfill = getPolyfill();
	var shim = requireShim$7();

	var boundFlat = callBind(polyfill);

	define(boundFlat, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});

	array_prototype_flat = boundFlat;
	return array_prototype_flat;
}

var globalCache_1;
var hasRequiredGlobalCache;

function requireGlobalCache () {
	if (hasRequiredGlobalCache) return globalCache_1;
	hasRequiredGlobalCache = 1;

	var define = requireDefineProperties();
	var isSymbol = requireIsSymbol$1();

	var globalKey = '__ global cache key __';
	/* istanbul ignore else */
	// eslint-disable-next-line no-restricted-properties
	if (typeof Symbol === 'function' && isSymbol(Symbol('foo')) && typeof Symbol['for'] === 'function') {
		// eslint-disable-next-line no-restricted-properties
		globalKey = Symbol['for'](globalKey);
	}

	var trueThunk = function () {
		return true;
	};

	var ensureCache = function ensureCache() {
		if (!commonjsGlobal[globalKey]) {
			var properties = {};
			properties[globalKey] = {};
			var predicates = {};
			predicates[globalKey] = trueThunk;
			define(commonjsGlobal, properties, predicates);
		}
		return commonjsGlobal[globalKey];
	};

	var cache = ensureCache();

	var isPrimitive = function isPrimitive(val) {
		return val === null || (typeof val !== 'object' && typeof val !== 'function');
	};

	var getPrimitiveKey = function getPrimitiveKey(val) {
		if (isSymbol(val)) {
			return Symbol.prototype.valueOf.call(val);
		}
		return typeof val + ' | ' + String(val);
	};

	var requirePrimitiveKey = function requirePrimitiveKey(val) {
		if (!isPrimitive(val)) {
			throw new TypeError('key must not be an object');
		}
	};

	var globalCache = {
		clear: function clear() {
			delete commonjsGlobal[globalKey];
			cache = ensureCache();
		},

		'delete': function deleteKey(key) {
			requirePrimitiveKey(key);
			delete cache[getPrimitiveKey(key)];
			return !globalCache.has(key);
		},

		get: function get(key) {
			requirePrimitiveKey(key);
			return cache[getPrimitiveKey(key)];
		},

		has: function has(key) {
			requirePrimitiveKey(key);
			return getPrimitiveKey(key) in cache;
		},

		set: function set(key, value) {
			requirePrimitiveKey(key);
			var primitiveKey = getPrimitiveKey(key);
			var props = {};
			props[primitiveKey] = value;
			var predicates = {};
			predicates[primitiveKey] = trueThunk;
			define(cache, props, predicates);
			return globalCache.has(key);
		},

		setIfMissingThenGet: function setIfMissingThenGet(key, valueThunk) {
			if (globalCache.has(key)) {
				return globalCache.get(key);
			}
			var item = valueThunk();
			globalCache.set(key, item);
			return item;
		}
	};

	globalCache_1 = globalCache;
	return globalCache_1;
}

var constants$2 = {};

var hasRequiredConstants$2;

function requireConstants$2 () {
	if (hasRequiredConstants$2) return constants$2;
	hasRequiredConstants$2 = 1;

	Object.defineProperty(constants$2, "__esModule", {
	  value: true
	});
	constants$2.MAX_SPECIFICITY = constants$2.GLOBAL_CACHE_KEY = void 0;
	var GLOBAL_CACHE_KEY = 'reactWithStylesInterfaceCSS';
	constants$2.GLOBAL_CACHE_KEY = GLOBAL_CACHE_KEY;
	var MAX_SPECIFICITY = 20;
	constants$2.MAX_SPECIFICITY = MAX_SPECIFICITY;
	return constants$2;
}

var getClassName = {};

var hasRequiredGetClassName;

function requireGetClassName () {
	if (hasRequiredGetClassName) return getClassName;
	hasRequiredGetClassName = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getClassName;

		/**
		 * Construct a class name.
		 *
		 * namespace {String} Used to construct unique class names.
		 * styleName {String} Name identifying the specific style.
		 *
		 * Return the class name.
		 */
		function getClassName(namespace, styleName) {
		  var namespaceSegment = namespace.length > 0 ? "".concat(namespace, "__") : '';
		  return "".concat(namespaceSegment).concat(styleName);
		} 
	} (getClassName));
	return getClassName;
}

var separateStyles = {};

var hasRequiredSeparateStyles;

function requireSeparateStyles () {
	if (hasRequiredSeparateStyles) return separateStyles;
	hasRequiredSeparateStyles = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		// This function takes an array of styles and separates them into styles that
		// are handled by Aphrodite and inline styles.
		function separateStyles(stylesArray) {
		  var classNames = []; // Since determining if an Object is empty requires collecting all of its
		  // keys, and we want the best performance in this code because we are in the
		  // render path, we are going to do a little bookkeeping ourselves.

		  var hasInlineStyles = false;
		  var inlineStyles = {}; // This is run on potentially every node in the tree when rendering, where
		  // performance is critical. Normally we would prefer using `forEach`, but
		  // old-fashioned for loops are faster so that's what we have chosen here.

		  for (var i = 0; i < stylesArray.length; i++) {
		    // eslint-disable-line no-plusplus
		    var style = stylesArray[i]; // If this  style is falsy, we just want to disregard it. This allows for
		    // syntax like:
		    //
		    //   css(isFoo && styles.foo)

		    if (style) {
		      if (typeof style === 'string') {
		        classNames.push(style);
		      } else {
		        Object.assign(inlineStyles, style);
		        hasInlineStyles = true;
		      }
		    }
		  }

		  return {
		    classNames: classNames,
		    hasInlineStyles: hasInlineStyles,
		    inlineStyles: inlineStyles
		  };
		}

		var _default = separateStyles;
		exports["default"] = _default; 
	} (separateStyles));
	return separateStyles;
}

var hasRequiredDist;

function requireDist () {
	if (hasRequiredDist) return dist;
	hasRequiredDist = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _arrayPrototype = _interopRequireDefault(requireArray_prototype_flat());

		var _globalCache = _interopRequireDefault(requireGlobalCache());

		var _constants = requireConstants$2();

		var _getClassName = _interopRequireDefault(requireGetClassName());

		var _separateStyles2 = _interopRequireDefault(requireSeparateStyles());

		/**
		 * Function required as part of the react-with-styles interface. Parses the styles provided by
		 * react-with-styles to produce class names based on the style name and optionally the namespace if
		 * available.
		 *
		 * stylesObject {Object} The styles object passed to withStyles.
		 *
		 * Return an object mapping style names to class names.
		 */
		function create(stylesObject) {
		  var stylesToClasses = {};
		  var styleNames = Object.keys(stylesObject);
		  var sharedState = _globalCache["default"].get(_constants.GLOBAL_CACHE_KEY) || {};
		  var _sharedState$namespac = sharedState.namespace,
		      namespace = _sharedState$namespac === void 0 ? '' : _sharedState$namespac;
		  styleNames.forEach(function (styleName) {
		    var className = (0, _getClassName["default"])(namespace, styleName);
		    stylesToClasses[styleName] = className;
		  });
		  return stylesToClasses;
		}
		/**
		 * Process styles to be consumed by a component.
		 *
		 * stylesArray {Array} Array of the following: values returned by create, plain JavaScript objects
		 * representing inline styles, or arrays thereof.
		 *
		 * Return an object with optional className and style properties to be spread on a component.
		 */


		function resolve(stylesArray) {
		  var flattenedStyles = (0, _arrayPrototype["default"])(stylesArray, Infinity);

		  var _separateStyles = (0, _separateStyles2["default"])(flattenedStyles),
		      classNames = _separateStyles.classNames,
		      hasInlineStyles = _separateStyles.hasInlineStyles,
		      inlineStyles = _separateStyles.inlineStyles;

		  var specificClassNames = classNames.map(function (name, index) {
		    return "".concat(name, " ").concat(name, "_").concat(index + 1);
		  });
		  var className = specificClassNames.join(' ');
		  var result = {
		    className: className
		  };
		  if (hasInlineStyles) result.style = inlineStyles;
		  return result;
		}

		var _default = {
		  create: create,
		  resolve: resolve
		};
		exports["default"] = _default; 
	} (dist));
	return dist;
}

var reactWithStylesInterfaceCss;
var hasRequiredReactWithStylesInterfaceCss;

function requireReactWithStylesInterfaceCss () {
	if (hasRequiredReactWithStylesInterfaceCss) return reactWithStylesInterfaceCss;
	hasRequiredReactWithStylesInterfaceCss = 1;
	// eslint-disable-next-line import/no-unresolved
	reactWithStylesInterfaceCss = requireDist().default;
	return reactWithStylesInterfaceCss;
}

var registerInterfaceWithDefaultTheme = {};

var ThemedStyleSheet = {};

var hasRequiredThemedStyleSheet;

function requireThemedStyleSheet () {
	if (hasRequiredThemedStyleSheet) return ThemedStyleSheet;
	hasRequiredThemedStyleSheet = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports._getInterface = _getInterface;
		exports._getTheme = get;
		exports["default"] = void 0;
		var styleInterface;
		var styleTheme;
		var START_MARK = 'react-with-styles.resolve.start';
		var END_MARK = 'react-with-styles.resolve.end';
		var MEASURE_MARK = "\uD83D\uDC69\u200D\uD83C\uDFA8 [resolve]";

		function registerTheme(theme) {
		  styleTheme = theme;
		}

		function registerInterface(interfaceToRegister) {
		  styleInterface = interfaceToRegister;
		}

		function create(makeFromTheme, createWithDirection) {
		  var styles = createWithDirection(makeFromTheme(styleTheme));
		  return function () {
		    return styles;
		  };
		}

		function createLTR(makeFromTheme) {
		  return create(makeFromTheme, styleInterface.createLTR || styleInterface.create);
		}

		function createRTL(makeFromTheme) {
		  return create(makeFromTheme, styleInterface.createRTL || styleInterface.create);
		}

		function get() {
		  return styleTheme;
		}

		function resolve() {
		  if (process.env.NODE_ENV !== 'production' && typeof performance !== 'undefined' && performance.mark !== undefined && typeof performance.clearMarks === 'function') {
		    performance.clearMarks(START_MARK);
		    performance.mark(START_MARK);
		  }

		  for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {
		    styles[_key] = arguments[_key];
		  }

		  var result = styleInterface.resolve(styles);

		  if (process.env.NODE_ENV !== 'production' && typeof performance !== 'undefined' && performance.mark !== undefined && typeof performance.clearMarks === 'function') {
		    performance.clearMarks(END_MARK);
		    performance.mark(END_MARK);
		    performance.measure(MEASURE_MARK, START_MARK, END_MARK);
		    performance.clearMarks(MEASURE_MARK);
		  }

		  return result;
		}

		function resolveLTR() {
		  for (var _len2 = arguments.length, styles = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		    styles[_key2] = arguments[_key2];
		  }

		  if (styleInterface.resolveLTR) {
		    return styleInterface.resolveLTR(styles);
		  }

		  return resolve(styles);
		}

		function resolveRTL() {
		  for (var _len3 = arguments.length, styles = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
		    styles[_key3] = arguments[_key3];
		  }

		  if (styleInterface.resolveRTL) {
		    return styleInterface.resolveRTL(styles);
		  }

		  return resolve(styles);
		}

		function flush() {
		  if (styleInterface.flush) {
		    styleInterface.flush();
		  }
		} // Exported until we deprecate this API completely
		// eslint-disable-next-line no-underscore-dangle


		function _getInterface() {
		  return styleInterface;
		} // Exported until we deprecate this API completely


		var _default = {
		  registerTheme: registerTheme,
		  registerInterface: registerInterface,
		  create: createLTR,
		  createLTR: createLTR,
		  createRTL: createRTL,
		  get: get,
		  resolve: resolveLTR,
		  resolveLTR: resolveLTR,
		  resolveRTL: resolveRTL,
		  flush: flush
		};
		exports["default"] = _default; 
	} (ThemedStyleSheet));
	return ThemedStyleSheet;
}

var DefaultTheme = {};

var hasRequiredDefaultTheme;

function requireDefaultTheme () {
	if (hasRequiredDefaultTheme) return DefaultTheme;
	hasRequiredDefaultTheme = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var core = {
		  white: '#fff',
		  gray: '#484848',
		  grayLight: '#82888a',
		  grayLighter: '#cacccd',
		  grayLightest: '#f2f2f2',
		  borderMedium: '#c4c4c4',
		  border: '#dbdbdb',
		  borderLight: '#e4e7e7',
		  borderLighter: '#eceeee',
		  borderBright: '#f4f5f5',
		  primary: '#00a699',
		  primaryShade_1: '#33dacd',
		  primaryShade_2: '#66e2da',
		  primaryShade_3: '#80e8e0',
		  primaryShade_4: '#b2f1ec',
		  primary_dark: '#008489',
		  secondary: '#007a87',
		  yellow: '#ffe8bc',
		  yellow_dark: '#ffce71'
		};
		var _default = {
		  reactDates: {
		    zIndex: 0,
		    border: {
		      input: {
		        border: 0,
		        borderTop: 0,
		        borderRight: 0,
		        borderBottom: '2px solid transparent',
		        borderLeft: 0,
		        outlineFocused: 0,
		        borderFocused: 0,
		        borderTopFocused: 0,
		        borderLeftFocused: 0,
		        borderBottomFocused: "2px solid ".concat(core.primary_dark),
		        borderRightFocused: 0,
		        borderRadius: 0
		      },
		      pickerInput: {
		        borderWidth: 1,
		        borderStyle: 'solid',
		        borderRadius: 2
		      }
		    },
		    color: {
		      core: core,
		      disabled: core.grayLightest,
		      background: core.white,
		      backgroundDark: '#f2f2f2',
		      backgroundFocused: core.white,
		      border: 'rgb(219, 219, 219)',
		      text: core.gray,
		      textDisabled: core.border,
		      textFocused: '#007a87',
		      placeholderText: '#757575',
		      outside: {
		        backgroundColor: core.white,
		        backgroundColor_active: core.white,
		        backgroundColor_hover: core.white,
		        color: core.gray,
		        color_active: core.gray,
		        color_hover: core.gray
		      },
		      highlighted: {
		        backgroundColor: core.yellow,
		        backgroundColor_active: core.yellow_dark,
		        backgroundColor_hover: core.yellow_dark,
		        color: core.gray,
		        color_active: core.gray,
		        color_hover: core.gray
		      },
		      minimumNights: {
		        backgroundColor: core.white,
		        backgroundColor_active: core.white,
		        backgroundColor_hover: core.white,
		        borderColor: core.borderLighter,
		        color: core.grayLighter,
		        color_active: core.grayLighter,
		        color_hover: core.grayLighter
		      },
		      hoveredSpan: {
		        backgroundColor: core.primaryShade_4,
		        backgroundColor_active: core.primaryShade_3,
		        backgroundColor_hover: core.primaryShade_4,
		        borderColor: core.primaryShade_3,
		        borderColor_active: core.primaryShade_3,
		        borderColor_hover: core.primaryShade_3,
		        color: core.secondary,
		        color_active: core.secondary,
		        color_hover: core.secondary
		      },
		      selectedSpan: {
		        backgroundColor: core.primaryShade_2,
		        backgroundColor_active: core.primaryShade_1,
		        backgroundColor_hover: core.primaryShade_1,
		        borderColor: core.primaryShade_1,
		        borderColor_active: core.primary,
		        borderColor_hover: core.primary,
		        color: core.white,
		        color_active: core.white,
		        color_hover: core.white
		      },
		      selected: {
		        backgroundColor: core.primary,
		        backgroundColor_active: core.primary,
		        backgroundColor_hover: core.primary,
		        borderColor: core.primary,
		        borderColor_active: core.primary,
		        borderColor_hover: core.primary,
		        color: core.white,
		        color_active: core.white,
		        color_hover: core.white
		      },
		      blocked_calendar: {
		        backgroundColor: core.grayLighter,
		        backgroundColor_active: core.grayLighter,
		        backgroundColor_hover: core.grayLighter,
		        borderColor: core.grayLighter,
		        borderColor_active: core.grayLighter,
		        borderColor_hover: core.grayLighter,
		        color: core.grayLight,
		        color_active: core.grayLight,
		        color_hover: core.grayLight
		      },
		      blocked_out_of_range: {
		        backgroundColor: core.white,
		        backgroundColor_active: core.white,
		        backgroundColor_hover: core.white,
		        borderColor: core.borderLight,
		        borderColor_active: core.borderLight,
		        borderColor_hover: core.borderLight,
		        color: core.grayLighter,
		        color_active: core.grayLighter,
		        color_hover: core.grayLighter
		      }
		    },
		    spacing: {
		      dayPickerHorizontalPadding: 9,
		      captionPaddingTop: 22,
		      captionPaddingBottom: 37,
		      inputPadding: 0,
		      displayTextPaddingVertical: undefined,
		      displayTextPaddingTop: 11,
		      displayTextPaddingBottom: 9,
		      displayTextPaddingHorizontal: undefined,
		      displayTextPaddingLeft: 11,
		      displayTextPaddingRight: 11,
		      displayTextPaddingVertical_small: undefined,
		      displayTextPaddingTop_small: 7,
		      displayTextPaddingBottom_small: 5,
		      displayTextPaddingHorizontal_small: undefined,
		      displayTextPaddingLeft_small: 7,
		      displayTextPaddingRight_small: 7
		    },
		    sizing: {
		      inputWidth: 130,
		      inputWidth_small: 97,
		      arrowWidth: 24
		    },
		    noScrollBarOnVerticalScrollable: false,
		    font: {
		      size: 14,
		      captionSize: 18,
		      input: {
		        size: 19,
		        weight: 200,
		        lineHeight: '24px',
		        size_small: 15,
		        lineHeight_small: '18px',
		        letterSpacing_small: '0.2px',
		        styleDisabled: 'italic'
		      }
		    }
		  }
		};
		exports["default"] = _default; 
	} (DefaultTheme));
	return DefaultTheme;
}

var hasRequiredRegisterInterfaceWithDefaultTheme;

function requireRegisterInterfaceWithDefaultTheme () {
	if (hasRequiredRegisterInterfaceWithDefaultTheme) return registerInterfaceWithDefaultTheme;
	hasRequiredRegisterInterfaceWithDefaultTheme = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = registerInterfaceWithDefaultTheme;

		var _ThemedStyleSheet = _interopRequireDefault(requireThemedStyleSheet());

		var _DefaultTheme = _interopRequireDefault(requireDefaultTheme());

		function registerInterfaceWithDefaultTheme(reactWithStylesInterface) {
		  _ThemedStyleSheet["default"].registerInterface(reactWithStylesInterface);

		  _ThemedStyleSheet["default"].registerTheme(_DefaultTheme["default"]);
		} 
	} (registerInterfaceWithDefaultTheme));
	return registerInterfaceWithDefaultTheme;
}

var hasRequiredRegisterCSSInterfaceWithDefaultTheme;

function requireRegisterCSSInterfaceWithDefaultTheme () {
	if (hasRequiredRegisterCSSInterfaceWithDefaultTheme) return registerCSSInterfaceWithDefaultTheme;
	hasRequiredRegisterCSSInterfaceWithDefaultTheme = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = registerCSSInterfaceWithDefaultTheme;

		var _reactWithStylesInterfaceCss = _interopRequireDefault(requireReactWithStylesInterfaceCss());

		var _registerInterfaceWithDefaultTheme = _interopRequireDefault(requireRegisterInterfaceWithDefaultTheme());

		function registerCSSInterfaceWithDefaultTheme() {
		  (0, _registerInterfaceWithDefaultTheme["default"])(_reactWithStylesInterfaceCss["default"]);
		} 
	} (registerCSSInterfaceWithDefaultTheme));
	return registerCSSInterfaceWithDefaultTheme;
}

var _interopRequireDefault = interopRequireDefaultExports;

var _registerCSSInterfaceWithDefaultTheme = _interopRequireDefault(requireRegisterCSSInterfaceWithDefaultTheme());

(0, _registerCSSInterfaceWithDefaultTheme["default"])();

var SingleDatePicker$1 = {};

var build$3 = {exports: {}};

var implementation$6;
var hasRequiredImplementation$6;

function requireImplementation$6 () {
	if (hasRequiredImplementation$6) return implementation$6;
	hasRequiredImplementation$6 = 1;

	var numberIsNaN = function (value) {
		return value !== value;
	};

	implementation$6 = function is(a, b) {
		if (a === 0 && b === 0) {
			return 1 / a === 1 / b;
		}
		if (a === b) {
			return true;
		}
		if (numberIsNaN(a) && numberIsNaN(b)) {
			return true;
		}
		return false;
	};
	return implementation$6;
}

var polyfill$6;
var hasRequiredPolyfill$6;

function requirePolyfill$6 () {
	if (hasRequiredPolyfill$6) return polyfill$6;
	hasRequiredPolyfill$6 = 1;

	var implementation = requireImplementation$6();

	polyfill$6 = function getPolyfill() {
		return typeof Object.is === 'function' ? Object.is : implementation;
	};
	return polyfill$6;
}

var shim$6;
var hasRequiredShim$6;

function requireShim$6 () {
	if (hasRequiredShim$6) return shim$6;
	hasRequiredShim$6 = 1;

	var getPolyfill = requirePolyfill$6();
	var define = requireDefineProperties();

	shim$6 = function shimObjectIs() {
		var polyfill = getPolyfill();
		define(Object, { is: polyfill }, {
			is: function testObjectIs() {
				return Object.is !== polyfill;
			}
		});
		return polyfill;
	};
	return shim$6;
}

var objectIs;
var hasRequiredObjectIs;

function requireObjectIs () {
	if (hasRequiredObjectIs) return objectIs;
	hasRequiredObjectIs = 1;

	var define = requireDefineProperties();
	var callBind = requireCallBind();

	var implementation = requireImplementation$6();
	var getPolyfill = requirePolyfill$6();
	var shim = requireShim$6();

	var polyfill = callBind(getPolyfill(), Object);

	define(polyfill, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});

	objectIs = polyfill;
	return objectIs;
}

build$3.exports;

var hasRequiredBuild$3;

function requireBuild$3 () {
	if (hasRequiredBuild$3) return build$3.exports;
	hasRequiredBuild$3 = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = shallowEqual;
		var _objectIs = _interopRequireDefault(requireObjectIs());
		var _has = _interopRequireDefault(requireSrc());
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
		function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
		// adapted from https://github.com/facebook/react/blob/144328fe81719e916b946e22660479e31561bb0b/packages/shared/shallowEqual.js#L36-L68
		function shallowEqual(objA, objB) {
		  if ((0, _objectIs["default"])(objA, objB)) {
		    return true;
		  }
		  if (!objA || !objB || _typeof(objA) !== 'object' || _typeof(objB) !== 'object') {
		    return false;
		  }
		  var keysA = Object.keys(objA);
		  var keysB = Object.keys(objB);
		  if (keysA.length !== keysB.length) {
		    return false;
		  }
		  keysA.sort();
		  keysB.sort();

		  // Test for A's keys different from B.
		  for (var i = 0; i < keysA.length; i += 1) {
		    if (!(0, _has["default"])(objB, keysA[i]) || !(0, _objectIs["default"])(objA[keysA[i]], objB[keysA[i]])) {
		      return false;
		    }
		  }
		  return true;
		}
		module.exports = exports.default;
		
		
	} (build$3, build$3.exports));
	return build$3.exports;
}

var _extends = {exports: {}};

_extends.exports;

var hasRequired_extends;

function require_extends () {
	if (hasRequired_extends) return _extends.exports;
	hasRequired_extends = 1;
	(function (module) {
		function _extends() {
		  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];
		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }
		    return target;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
		  return _extends.apply(this, arguments);
		}
		module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (_extends));
	return _extends.exports;
}

var assertThisInitialized = {exports: {}};

assertThisInitialized.exports;

var hasRequiredAssertThisInitialized;

function requireAssertThisInitialized () {
	if (hasRequiredAssertThisInitialized) return assertThisInitialized.exports;
	hasRequiredAssertThisInitialized = 1;
	(function (module) {
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (assertThisInitialized));
	return assertThisInitialized.exports;
}

var inheritsLoose = {exports: {}};

var setPrototypeOf = {exports: {}};

setPrototypeOf.exports;

var hasRequiredSetPrototypeOf;

function requireSetPrototypeOf () {
	if (hasRequiredSetPrototypeOf) return setPrototypeOf.exports;
	hasRequiredSetPrototypeOf = 1;
	(function (module) {
		function _setPrototypeOf(o, p) {
		  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
		  return _setPrototypeOf(o, p);
		}
		module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (setPrototypeOf));
	return setPrototypeOf.exports;
}

inheritsLoose.exports;

var hasRequiredInheritsLoose;

function requireInheritsLoose () {
	if (hasRequiredInheritsLoose) return inheritsLoose.exports;
	hasRequiredInheritsLoose = 1;
	(function (module) {
		var setPrototypeOf = requireSetPrototypeOf();
		function _inheritsLoose(subClass, superClass) {
		  subClass.prototype = Object.create(superClass.prototype);
		  subClass.prototype.constructor = subClass;
		  setPrototypeOf(subClass, superClass);
		}
		module.exports = _inheritsLoose, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (inheritsLoose));
	return inheritsLoose.exports;
}

var defineProperty = {exports: {}};

var toPropertyKey = {exports: {}};

var _typeof = {exports: {}};

_typeof.exports;

var hasRequired_typeof;

function require_typeof () {
	if (hasRequired_typeof) return _typeof.exports;
	hasRequired_typeof = 1;
	(function (module) {
		function _typeof(obj) {
		  "@babel/helpers - typeof";

		  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
		    return typeof obj;
		  } : function (obj) {
		    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
		}
		module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (_typeof));
	return _typeof.exports;
}

var toPrimitive = {exports: {}};

toPrimitive.exports;

var hasRequiredToPrimitive;

function requireToPrimitive () {
	if (hasRequiredToPrimitive) return toPrimitive.exports;
	hasRequiredToPrimitive = 1;
	(function (module) {
		var _typeof = require_typeof()["default"];
		function _toPrimitive(input, hint) {
		  if (_typeof(input) !== "object" || input === null) return input;
		  var prim = input[Symbol.toPrimitive];
		  if (prim !== undefined) {
		    var res = prim.call(input, hint || "default");
		    if (_typeof(res) !== "object") return res;
		    throw new TypeError("@@toPrimitive must return a primitive value.");
		  }
		  return (hint === "string" ? String : Number)(input);
		}
		module.exports = _toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (toPrimitive));
	return toPrimitive.exports;
}

toPropertyKey.exports;

var hasRequiredToPropertyKey;

function requireToPropertyKey () {
	if (hasRequiredToPropertyKey) return toPropertyKey.exports;
	hasRequiredToPropertyKey = 1;
	(function (module) {
		var _typeof = require_typeof()["default"];
		var toPrimitive = requireToPrimitive();
		function _toPropertyKey(arg) {
		  var key = toPrimitive(arg, "string");
		  return _typeof(key) === "symbol" ? key : String(key);
		}
		module.exports = _toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (toPropertyKey));
	return toPropertyKey.exports;
}

defineProperty.exports;

var hasRequiredDefineProperty;

function requireDefineProperty () {
	if (hasRequiredDefineProperty) return defineProperty.exports;
	hasRequiredDefineProperty = 1;
	(function (module) {
		var toPropertyKey = requireToPropertyKey();
		function _defineProperty(obj, key, value) {
		  key = toPropertyKey(key);
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (defineProperty));
	return defineProperty.exports;
}

var withStyles = {};

var interopRequireWildcard = {exports: {}};

interopRequireWildcard.exports;

var hasRequiredInteropRequireWildcard;

function requireInteropRequireWildcard () {
	if (hasRequiredInteropRequireWildcard) return interopRequireWildcard.exports;
	hasRequiredInteropRequireWildcard = 1;
	(function (module) {
		var _typeof = require_typeof()["default"];
		function _getRequireWildcardCache(nodeInterop) {
		  if (typeof WeakMap !== "function") return null;
		  var cacheBabelInterop = new WeakMap();
		  var cacheNodeInterop = new WeakMap();
		  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
		    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
		  })(nodeInterop);
		}
		function _interopRequireWildcard(obj, nodeInterop) {
		  if (!nodeInterop && obj && obj.__esModule) {
		    return obj;
		  }
		  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
		    return {
		      "default": obj
		    };
		  }
		  var cache = _getRequireWildcardCache(nodeInterop);
		  if (cache && cache.has(obj)) {
		    return cache.get(obj);
		  }
		  var newObj = {};
		  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		  for (var key in obj) {
		    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
		      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
		      if (desc && (desc.get || desc.set)) {
		        Object.defineProperty(newObj, key, desc);
		      } else {
		        newObj[key] = obj[key];
		      }
		    }
		  }
		  newObj["default"] = obj;
		  if (cache) {
		    cache.set(obj, newObj);
		  }
		  return newObj;
		}
		module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (interopRequireWildcard));
	return interopRequireWildcard.exports;
}

var objectWithoutProperties = {exports: {}};

var objectWithoutPropertiesLoose = {exports: {}};

objectWithoutPropertiesLoose.exports;

var hasRequiredObjectWithoutPropertiesLoose;

function requireObjectWithoutPropertiesLoose () {
	if (hasRequiredObjectWithoutPropertiesLoose) return objectWithoutPropertiesLoose.exports;
	hasRequiredObjectWithoutPropertiesLoose = 1;
	(function (module) {
		function _objectWithoutPropertiesLoose(source, excluded) {
		  if (source == null) return {};
		  var target = {};
		  var sourceKeys = Object.keys(source);
		  var key, i;
		  for (i = 0; i < sourceKeys.length; i++) {
		    key = sourceKeys[i];
		    if (excluded.indexOf(key) >= 0) continue;
		    target[key] = source[key];
		  }
		  return target;
		}
		module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (objectWithoutPropertiesLoose));
	return objectWithoutPropertiesLoose.exports;
}

objectWithoutProperties.exports;

var hasRequiredObjectWithoutProperties;

function requireObjectWithoutProperties () {
	if (hasRequiredObjectWithoutProperties) return objectWithoutProperties.exports;
	hasRequiredObjectWithoutProperties = 1;
	(function (module) {
		var objectWithoutPropertiesLoose = requireObjectWithoutPropertiesLoose();
		function _objectWithoutProperties(source, excluded) {
		  if (source == null) return {};
		  var target = objectWithoutPropertiesLoose(source, excluded);
		  var key, i;
		  if (Object.getOwnPropertySymbols) {
		    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
		    for (i = 0; i < sourceSymbolKeys.length; i++) {
		      key = sourceSymbolKeys[i];
		      if (excluded.indexOf(key) >= 0) continue;
		      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
		      target[key] = source[key];
		    }
		  }
		  return target;
		}
		module.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (objectWithoutProperties));
	return objectWithoutProperties.exports;
}

var reactIs$1 = {exports: {}};

var reactIs_production_min$1 = {};

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_production_min$1;

function requireReactIs_production_min$1 () {
	if (hasRequiredReactIs_production_min$1) return reactIs_production_min$1;
	hasRequiredReactIs_production_min$1 = 1;
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
	Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
	function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min$1.AsyncMode=l;reactIs_production_min$1.ConcurrentMode=m;reactIs_production_min$1.ContextConsumer=k;reactIs_production_min$1.ContextProvider=h;reactIs_production_min$1.Element=c;reactIs_production_min$1.ForwardRef=n;reactIs_production_min$1.Fragment=e;reactIs_production_min$1.Lazy=t;reactIs_production_min$1.Memo=r;reactIs_production_min$1.Portal=d;
	reactIs_production_min$1.Profiler=g;reactIs_production_min$1.StrictMode=f;reactIs_production_min$1.Suspense=p;reactIs_production_min$1.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min$1.isConcurrentMode=A;reactIs_production_min$1.isContextConsumer=function(a){return z(a)===k};reactIs_production_min$1.isContextProvider=function(a){return z(a)===h};reactIs_production_min$1.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min$1.isForwardRef=function(a){return z(a)===n};reactIs_production_min$1.isFragment=function(a){return z(a)===e};reactIs_production_min$1.isLazy=function(a){return z(a)===t};
	reactIs_production_min$1.isMemo=function(a){return z(a)===r};reactIs_production_min$1.isPortal=function(a){return z(a)===d};reactIs_production_min$1.isProfiler=function(a){return z(a)===g};reactIs_production_min$1.isStrictMode=function(a){return z(a)===f};reactIs_production_min$1.isSuspense=function(a){return z(a)===p};
	reactIs_production_min$1.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min$1.typeOf=z;
	return reactIs_production_min$1;
}

var reactIs_development$1 = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development$1;

function requireReactIs_development$1 () {
	if (hasRequiredReactIs_development$1) return reactIs_development$1;
	hasRequiredReactIs_development$1 = 1;



	if (process.env.NODE_ENV !== "production") {
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development$1.AsyncMode = AsyncMode;
	reactIs_development$1.ConcurrentMode = ConcurrentMode;
	reactIs_development$1.ContextConsumer = ContextConsumer;
	reactIs_development$1.ContextProvider = ContextProvider;
	reactIs_development$1.Element = Element;
	reactIs_development$1.ForwardRef = ForwardRef;
	reactIs_development$1.Fragment = Fragment;
	reactIs_development$1.Lazy = Lazy;
	reactIs_development$1.Memo = Memo;
	reactIs_development$1.Portal = Portal;
	reactIs_development$1.Profiler = Profiler;
	reactIs_development$1.StrictMode = StrictMode;
	reactIs_development$1.Suspense = Suspense;
	reactIs_development$1.isAsyncMode = isAsyncMode;
	reactIs_development$1.isConcurrentMode = isConcurrentMode;
	reactIs_development$1.isContextConsumer = isContextConsumer;
	reactIs_development$1.isContextProvider = isContextProvider;
	reactIs_development$1.isElement = isElement;
	reactIs_development$1.isForwardRef = isForwardRef;
	reactIs_development$1.isFragment = isFragment;
	reactIs_development$1.isLazy = isLazy;
	reactIs_development$1.isMemo = isMemo;
	reactIs_development$1.isPortal = isPortal;
	reactIs_development$1.isProfiler = isProfiler;
	reactIs_development$1.isStrictMode = isStrictMode;
	reactIs_development$1.isSuspense = isSuspense;
	reactIs_development$1.isValidElementType = isValidElementType;
	reactIs_development$1.typeOf = typeOf;
	  })();
	}
	return reactIs_development$1;
}

var hasRequiredReactIs$1;

function requireReactIs$1 () {
	if (hasRequiredReactIs$1) return reactIs$1.exports;
	hasRequiredReactIs$1 = 1;

	if (process.env.NODE_ENV === 'production') {
	  reactIs$1.exports = requireReactIs_production_min$1();
	} else {
	  reactIs$1.exports = requireReactIs_development$1();
	}
	return reactIs$1.exports;
}

var hoistNonReactStatics_cjs;
var hasRequiredHoistNonReactStatics_cjs;

function requireHoistNonReactStatics_cjs () {
	if (hasRequiredHoistNonReactStatics_cjs) return hoistNonReactStatics_cjs;
	hasRequiredHoistNonReactStatics_cjs = 1;

	var reactIs = requireReactIs$1();

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	  childContextTypes: true,
	  contextType: true,
	  contextTypes: true,
	  defaultProps: true,
	  displayName: true,
	  getDefaultProps: true,
	  getDerivedStateFromError: true,
	  getDerivedStateFromProps: true,
	  mixins: true,
	  propTypes: true,
	  type: true
	};
	var KNOWN_STATICS = {
	  name: true,
	  length: true,
	  prototype: true,
	  caller: true,
	  callee: true,
	  arguments: true,
	  arity: true
	};
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	function getStatics(component) {
	  // React v16.11 and below
	  if (reactIs.isMemo(component)) {
	    return MEMO_STATICS;
	  } // React v16.12 and above


	  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
	}

	var defineProperty = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = Object.prototype;
	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	  if (typeof sourceComponent !== 'string') {
	    // don't hoist over string (html) components
	    if (objectPrototype) {
	      var inheritedComponent = getPrototypeOf(sourceComponent);

	      if (inheritedComponent && inheritedComponent !== objectPrototype) {
	        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	      }
	    }

	    var keys = getOwnPropertyNames(sourceComponent);

	    if (getOwnPropertySymbols) {
	      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	    }

	    var targetStatics = getStatics(targetComponent);
	    var sourceStatics = getStatics(sourceComponent);

	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i];

	      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

	        try {
	          // Avoid failures from read-only properties
	          defineProperty(targetComponent, key, descriptor);
	        } catch (e) {}
	      }
	    }
	  }

	  return targetComponent;
	}

	hoistNonReactStatics_cjs = hoistNonReactStatics;
	return hoistNonReactStatics_cjs;
}

var getComponentName = {};

var IsCallable;
var hasRequiredIsCallable;

function requireIsCallable () {
	if (hasRequiredIsCallable) return IsCallable;
	hasRequiredIsCallable = 1;

	// http://262.ecma-international.org/5.1/#sec-9.11

	IsCallable = requireIsCallable$2();
	return IsCallable;
}

var functionsHaveNames_1;
var hasRequiredFunctionsHaveNames;

function requireFunctionsHaveNames () {
	if (hasRequiredFunctionsHaveNames) return functionsHaveNames_1;
	hasRequiredFunctionsHaveNames = 1;

	var functionsHaveNames = function functionsHaveNames() {
		return typeof function f() {}.name === 'string';
	};

	var gOPD = Object.getOwnPropertyDescriptor;
	if (gOPD) {
		try {
			gOPD([], 'length');
		} catch (e) {
			// IE 8 has a broken gOPD
			gOPD = null;
		}
	}

	functionsHaveNames.functionsHaveConfigurableNames = function functionsHaveConfigurableNames() {
		if (!functionsHaveNames() || !gOPD) {
			return false;
		}
		var desc = gOPD(function () {}, 'name');
		return !!desc && !!desc.configurable;
	};

	var $bind = Function.prototype.bind;

	functionsHaveNames.boundFunctionsHaveNames = function boundFunctionsHaveNames() {
		return functionsHaveNames() && typeof $bind === 'function' && function f() {}.bind().name !== '';
	};

	functionsHaveNames_1 = functionsHaveNames;
	return functionsHaveNames_1;
}

var implementation$5;
var hasRequiredImplementation$5;

function requireImplementation$5 () {
	if (hasRequiredImplementation$5) return implementation$5;
	hasRequiredImplementation$5 = 1;

	var IsCallable = requireIsCallable();
	var functionsHaveNames = requireFunctionsHaveNames()();
	var callBound = requireCallBound();
	var $functionToString = callBound('Function.prototype.toString');
	var $stringMatch = callBound('String.prototype.match');

	var classRegex = /^class /;

	var isClass = function isClassConstructor(fn) {
		if (IsCallable(fn)) {
			return false;
		}
		if (typeof fn !== 'function') {
			return false;
		}
		try {
			var match = $stringMatch($functionToString(fn), classRegex);
			return !!match;
		} catch (e) {}
		return false;
	};

	var regex = /\s*function\s+([^(\s]*)\s*/;

	var functionProto = Function.prototype;

	implementation$5 = function getName() {
		if (!isClass(this) && !IsCallable(this)) {
			throw new TypeError('Function.prototype.name sham getter called on non-function');
		}
		if (functionsHaveNames) {
			return this.name;
		}
		if (this === functionProto) {
			return '';
		}
		var str = $functionToString(this);
		var match = $stringMatch(str, regex);
		var name = match && match[1];
		return name;
	};
	return implementation$5;
}

var polyfill$5;
var hasRequiredPolyfill$5;

function requirePolyfill$5 () {
	if (hasRequiredPolyfill$5) return polyfill$5;
	hasRequiredPolyfill$5 = 1;

	var implementation = requireImplementation$5();

	polyfill$5 = function getPolyfill() {
		return implementation;
	};
	return polyfill$5;
}

var shim$5;
var hasRequiredShim$5;

function requireShim$5 () {
	if (hasRequiredShim$5) return shim$5;
	hasRequiredShim$5 = 1;

	var supportsDescriptors = requireDefineProperties().supportsDescriptors;
	var functionsHaveNames = requireFunctionsHaveNames()();
	var getPolyfill = requirePolyfill$5();
	var defineProperty = Object.defineProperty;
	var TypeErr = TypeError;

	shim$5 = function shimName() {
		var polyfill = getPolyfill();
		if (functionsHaveNames) {
			return polyfill;
		}
		if (!supportsDescriptors) {
			throw new TypeErr('Shimming Function.prototype.name support requires ES5 property descriptor support.');
		}
		var functionProto = Function.prototype;
		defineProperty(functionProto, 'name', {
			configurable: true,
			enumerable: false,
			get: function () {
				var name = polyfill.call(this);
				if (this !== functionProto) {
					defineProperty(this, 'name', {
						configurable: true,
						enumerable: false,
						value: name,
						writable: false
					});
				}
				return name;
			}
		});
		return polyfill;
	};
	return shim$5;
}

var function_prototype_name;
var hasRequiredFunction_prototype_name;

function requireFunction_prototype_name () {
	if (hasRequiredFunction_prototype_name) return function_prototype_name;
	hasRequiredFunction_prototype_name = 1;

	var define = requireDefineProperties();
	var callBind = requireCallBind();

	var implementation = requireImplementation$5();
	var getPolyfill = requirePolyfill$5();
	var shim = requireShim$5();

	var bound = callBind(implementation);

	define(bound, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});

	function_prototype_name = bound;
	return function_prototype_name;
}

var reactIs = {exports: {}};

var reactIs_production_min = {};

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_production_min;

function requireReactIs_production_min () {
	if (hasRequiredReactIs_production_min) return reactIs_production_min;
	hasRequiredReactIs_production_min = 1;
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
	Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
	function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
	reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
	reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
	reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;
	return reactIs_production_min;
}

var reactIs_development = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development;

function requireReactIs_development () {
	if (hasRequiredReactIs_development) return reactIs_development;
	hasRequiredReactIs_development = 1;



	if (process.env.NODE_ENV !== "production") {
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development.AsyncMode = AsyncMode;
	reactIs_development.ConcurrentMode = ConcurrentMode;
	reactIs_development.ContextConsumer = ContextConsumer;
	reactIs_development.ContextProvider = ContextProvider;
	reactIs_development.Element = Element;
	reactIs_development.ForwardRef = ForwardRef;
	reactIs_development.Fragment = Fragment;
	reactIs_development.Lazy = Lazy;
	reactIs_development.Memo = Memo;
	reactIs_development.Portal = Portal;
	reactIs_development.Profiler = Profiler;
	reactIs_development.StrictMode = StrictMode;
	reactIs_development.Suspense = Suspense;
	reactIs_development.isAsyncMode = isAsyncMode;
	reactIs_development.isConcurrentMode = isConcurrentMode;
	reactIs_development.isContextConsumer = isContextConsumer;
	reactIs_development.isContextProvider = isContextProvider;
	reactIs_development.isElement = isElement;
	reactIs_development.isForwardRef = isForwardRef;
	reactIs_development.isFragment = isFragment;
	reactIs_development.isLazy = isLazy;
	reactIs_development.isMemo = isMemo;
	reactIs_development.isPortal = isPortal;
	reactIs_development.isProfiler = isProfiler;
	reactIs_development.isStrictMode = isStrictMode;
	reactIs_development.isSuspense = isSuspense;
	reactIs_development.isValidElementType = isValidElementType;
	reactIs_development.typeOf = typeOf;
	  })();
	}
	return reactIs_development;
}

var hasRequiredReactIs;

function requireReactIs () {
	if (hasRequiredReactIs) return reactIs.exports;
	hasRequiredReactIs = 1;

	if (process.env.NODE_ENV === 'production') {
	  reactIs.exports = requireReactIs_production_min();
	} else {
	  reactIs.exports = requireReactIs_development();
	}
	return reactIs.exports;
}

var hasRequiredGetComponentName;

function requireGetComponentName () {
	if (hasRequiredGetComponentName) return getComponentName;
	hasRequiredGetComponentName = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getComponentName;

		var _functionPrototype = _interopRequireDefault(requireFunction_prototype_name());

		var _reactIs = requireReactIs();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function getComponentName(Component) {
		  if (typeof Component === 'string') {
		    return Component;
		  }

		  if (typeof Component === 'function') {
		    return Component.displayName || (0, _functionPrototype["default"])(Component);
		  }

		  if ((0, _reactIs.isForwardRef)({
		    type: Component,
		    $$typeof: _reactIs.Element
		  })) {
		    return Component.displayName;
		  }

		  if ((0, _reactIs.isMemo)(Component)) {
		    return getComponentName(Component.type);
		  }

		  return null;
		}
		
	} (getComponentName));
	return getComponentName;
}

var ref = {};

var isPlainObject$1 = {};

var isPlainObject = {exports: {}};

isPlainObject.exports;

var hasRequiredIsPlainObject$1;

function requireIsPlainObject$1 () {
	if (hasRequiredIsPlainObject$1) return isPlainObject.exports;
	hasRequiredIsPlainObject$1 = 1;
	(function (module, exports) {
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});

		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

		exports['default'] = isPlainObject;
		function isPlainObject(x) {
		  return x && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && !Array.isArray(x);
		}
		module.exports = exports['default'];
		
	} (isPlainObject, isPlainObject.exports));
	return isPlainObject.exports;
}

var hasRequiredIsPlainObject;

function requireIsPlainObject () {
	if (hasRequiredIsPlainObject) return isPlainObject$1;
	hasRequiredIsPlainObject = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _isPlainObject = _interopRequireDefault(requireIsPlainObject$1());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		var _default = _isPlainObject["default"];
		exports["default"] = _default;
		
	} (isPlainObject$1));
	return isPlainObject$1;
}

var wrapValidator = {};

var implementation$4;
var hasRequiredImplementation$4;

function requireImplementation$4 () {
	if (hasRequiredImplementation$4) return implementation$4;
	hasRequiredImplementation$4 = 1;

	// modified from https://github.com/es-shims/es6-shim
	var objectKeys = requireObjectKeys();
	var hasSymbols = requireShams$1()();
	var callBound = requireCallBound();
	var toObject = Object;
	var $push = callBound('Array.prototype.push');
	var $propIsEnumerable = callBound('Object.prototype.propertyIsEnumerable');
	var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;

	// eslint-disable-next-line no-unused-vars
	implementation$4 = function assign(target, source1) {
		if (target == null) { throw new TypeError('target must be an object'); }
		var to = toObject(target); // step 1
		if (arguments.length === 1) {
			return to; // step 2
		}
		for (var s = 1; s < arguments.length; ++s) {
			var from = toObject(arguments[s]); // step 3.a.i

			// step 3.a.ii:
			var keys = objectKeys(from);
			var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
			if (getSymbols) {
				var syms = getSymbols(from);
				for (var j = 0; j < syms.length; ++j) {
					var key = syms[j];
					if ($propIsEnumerable(from, key)) {
						$push(keys, key);
					}
				}
			}

			// step 3.a.iii:
			for (var i = 0; i < keys.length; ++i) {
				var nextKey = keys[i];
				if ($propIsEnumerable(from, nextKey)) { // step 3.a.iii.2
					var propValue = from[nextKey]; // step 3.a.iii.2.a
					to[nextKey] = propValue; // step 3.a.iii.2.b
				}
			}
		}

		return to; // step 4
	};
	return implementation$4;
}

var polyfill$4;
var hasRequiredPolyfill$4;

function requirePolyfill$4 () {
	if (hasRequiredPolyfill$4) return polyfill$4;
	hasRequiredPolyfill$4 = 1;

	var implementation = requireImplementation$4();

	var lacksProperEnumerationOrder = function () {
		if (!Object.assign) {
			return false;
		}
		/*
		 * v8, specifically in node 4.x, has a bug with incorrect property enumeration order
		 * note: this does not detect the bug unless there's 20 characters
		 */
		var str = 'abcdefghijklmnopqrst';
		var letters = str.split('');
		var map = {};
		for (var i = 0; i < letters.length; ++i) {
			map[letters[i]] = letters[i];
		}
		var obj = Object.assign({}, map);
		var actual = '';
		for (var k in obj) {
			actual += k;
		}
		return str !== actual;
	};

	var assignHasPendingExceptions = function () {
		if (!Object.assign || !Object.preventExtensions) {
			return false;
		}
		/*
		 * Firefox 37 still has "pending exception" logic in its Object.assign implementation,
		 * which is 72% slower than our shim, and Firefox 40's native implementation.
		 */
		var thrower = Object.preventExtensions({ 1: 2 });
		try {
			Object.assign(thrower, 'xy');
		} catch (e) {
			return thrower[1] === 'y';
		}
		return false;
	};

	polyfill$4 = function getPolyfill() {
		if (!Object.assign) {
			return implementation;
		}
		if (lacksProperEnumerationOrder()) {
			return implementation;
		}
		if (assignHasPendingExceptions()) {
			return implementation;
		}
		return Object.assign;
	};
	return polyfill$4;
}

var shim$4;
var hasRequiredShim$4;

function requireShim$4 () {
	if (hasRequiredShim$4) return shim$4;
	hasRequiredShim$4 = 1;

	var define = requireDefineProperties();
	var getPolyfill = requirePolyfill$4();

	shim$4 = function shimAssign() {
		var polyfill = getPolyfill();
		define(
			Object,
			{ assign: polyfill },
			{ assign: function () { return Object.assign !== polyfill; } }
		);
		return polyfill;
	};
	return shim$4;
}

var object_assign;
var hasRequiredObject_assign;

function requireObject_assign () {
	if (hasRequiredObject_assign) return object_assign;
	hasRequiredObject_assign = 1;

	var defineProperties = requireDefineProperties();
	var callBind = requireCallBind();

	var implementation = requireImplementation$4();
	var getPolyfill = requirePolyfill$4();
	var shim = requireShim$4();

	var polyfill = callBind.apply(getPolyfill());
	// eslint-disable-next-line no-unused-vars
	var bound = function assign(target, source1) {
		return polyfill(Object, arguments);
	};

	defineProperties(bound, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});

	object_assign = bound;
	return object_assign;
}

var hasRequiredWrapValidator;

function requireWrapValidator () {
	if (hasRequiredWrapValidator) return wrapValidator;
	hasRequiredWrapValidator = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = wrapValidator;

		var _object = _interopRequireDefault(requireObject_assign());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function wrapValidator(validator, typeName) {
		  var typeChecker = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
		  return (0, _object["default"])(validator.bind(), {
		    typeName: typeName,
		    typeChecker: typeChecker,
		    isRequired: (0, _object["default"])(validator.isRequired.bind(), {
		      typeName: typeName,
		      typeChecker: typeChecker,
		      typeRequired: true
		    })
		  });
		}
		
	} (wrapValidator));
	return wrapValidator;
}

var hasRequiredRef;

function requireRef () {
	if (hasRequiredRef) return ref;
	hasRequiredRef = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _react = reactExports;

		var _isPlainObject = _interopRequireDefault(requireIsPlainObject());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		var isPrototypeOf = Object.prototype.isPrototypeOf;

		function isNewRef(prop) {
		  if (!(0, _isPlainObject["default"])(prop)) {
		    return false;
		  }

		  var ownProperties = Object.keys(prop);
		  return ownProperties.length === 1 && ownProperties[0] === 'current';
		}

		function isCallbackRef(prop) {
		  return typeof prop === 'function' && !isPrototypeOf.call(_react.Component, prop) && (!_react.PureComponent || !isPrototypeOf.call(_react.PureComponent, prop));
		}

		function requiredRef(props, propName, componentName) {
		  var propValue = props[propName];

		  if (isCallbackRef(propValue) || isNewRef(propValue)) {
		    return null;
		  }

		  return new TypeError("".concat(propName, " in ").concat(componentName, " must be a ref"));
		}

		function ref(props, propName, componentName) {
		  var propValue = props[propName];

		  if (propValue == null) {
		    return null;
		  }

		  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
		    rest[_key - 3] = arguments[_key];
		  }

		  return requiredRef.apply(void 0, [props, propName, componentName].concat(rest));
		}

		ref.isRequired = requiredRef;

		var _default = function _default() {
		  return (0, _wrapValidator["default"])(ref, 'ref');
		};

		exports["default"] = _default;
		
	} (ref));
	return ref;
}

var emptyStylesFn = {};

var hasRequiredEmptyStylesFn;

function requireEmptyStylesFn () {
	if (hasRequiredEmptyStylesFn) return emptyStylesFn;
	hasRequiredEmptyStylesFn = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var EMPTY_STYLES = {};

		var EMPTY_STYLES_FN = function EMPTY_STYLES_FN() {
		  return EMPTY_STYLES;
		};

		var _default = EMPTY_STYLES_FN;
		exports["default"] = _default; 
	} (emptyStylesFn));
	return emptyStylesFn;
}

var perf = {};

var hasRequiredPerf;

function requirePerf () {
	if (hasRequiredPerf) return perf;
	hasRequiredPerf = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.perfStart = perfStart;
		exports.perfEnd = perfEnd;
		exports["default"] = withPerf;

		function perfStart(startMark) {
		  if (typeof performance !== 'undefined' && performance.mark !== undefined && typeof performance.clearMarks === 'function' && startMark) {
		    performance.clearMarks(startMark);
		    performance.mark(startMark);
		  }
		}

		function perfEnd(startMark, endMark, measureName) {
		  if (typeof performance !== 'undefined' && performance.mark !== undefined && typeof performance.clearMarks === 'function') {
		    performance.clearMarks(endMark);
		    performance.mark(endMark);
		    performance.measure(measureName, startMark, endMark);
		    performance.clearMarks(measureName);
		  }
		}

		function withPerf(methodName) {
		  var startMark = "react-with-styles.".concat(methodName, ".start");
		  var endMark = "react-with-styles.".concat(methodName, ".end");
		  var measureName = "\uD83D\uDC69\u200D\uD83C\uDFA8 [".concat(methodName, "]");
		  return function (fn) {
		    return function () {
		      if (process.env.NODE_ENV !== 'production') {
		        perfStart(startMark);
		      }

		      var result = fn.apply(void 0, arguments);

		      if (process.env.NODE_ENV !== 'production') {
		        perfEnd(startMark, endMark, measureName);
		      }

		      return result;
		    };
		  };
		} 
	} (perf));
	return perf;
}

var WithStylesContext = {};

var withDirection = {};

var cjs;
var hasRequiredCjs;

function requireCjs () {
	if (hasRequiredCjs) return cjs;
	hasRequiredCjs = 1;

	var isMergeableObject = function isMergeableObject(value) {
		return isNonNullObject(value)
			&& !isSpecial(value)
	};

	function isNonNullObject(value) {
		return !!value && typeof value === 'object'
	}

	function isSpecial(value) {
		var stringValue = Object.prototype.toString.call(value);

		return stringValue === '[object RegExp]'
			|| stringValue === '[object Date]'
			|| isReactElement(value)
	}

	// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
	var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

	function isReactElement(value) {
		return value.$$typeof === REACT_ELEMENT_TYPE
	}

	function emptyTarget(val) {
	    return Array.isArray(val) ? [] : {}
	}

	function cloneIfNecessary(value, optionsArgument) {
	    var clone = optionsArgument && optionsArgument.clone === true;
	    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
	}

	function defaultArrayMerge(target, source, optionsArgument) {
	    var destination = target.slice();
	    source.forEach(function(e, i) {
	        if (typeof destination[i] === 'undefined') {
	            destination[i] = cloneIfNecessary(e, optionsArgument);
	        } else if (isMergeableObject(e)) {
	            destination[i] = deepmerge(target[i], e, optionsArgument);
	        } else if (target.indexOf(e) === -1) {
	            destination.push(cloneIfNecessary(e, optionsArgument));
	        }
	    });
	    return destination
	}

	function mergeObject(target, source, optionsArgument) {
	    var destination = {};
	    if (isMergeableObject(target)) {
	        Object.keys(target).forEach(function(key) {
	            destination[key] = cloneIfNecessary(target[key], optionsArgument);
	        });
	    }
	    Object.keys(source).forEach(function(key) {
	        if (!isMergeableObject(source[key]) || !target[key]) {
	            destination[key] = cloneIfNecessary(source[key], optionsArgument);
	        } else {
	            destination[key] = deepmerge(target[key], source[key], optionsArgument);
	        }
	    });
	    return destination
	}

	function deepmerge(target, source, optionsArgument) {
	    var sourceIsArray = Array.isArray(source);
	    var targetIsArray = Array.isArray(target);
	    var options = optionsArgument || { arrayMerge: defaultArrayMerge };
	    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	    if (!sourceAndTargetTypesMatch) {
	        return cloneIfNecessary(source, optionsArgument)
	    } else if (sourceIsArray) {
	        var arrayMerge = options.arrayMerge || defaultArrayMerge;
	        return arrayMerge(target, source, optionsArgument)
	    } else {
	        return mergeObject(target, source, optionsArgument)
	    }
	}

	deepmerge.all = function deepmergeAll(array, optionsArgument) {
	    if (!Array.isArray(array) || array.length < 2) {
	        throw new Error('first argument should be an array with at least two elements')
	    }

	    // we are sure there are at least 2 values, so it is safe to have no initial value
	    return array.reduce(function(prev, next) {
	        return deepmerge(prev, next, optionsArgument)
	    })
	};

	var deepmerge_1 = deepmerge;

	cjs = deepmerge_1;
	return cjs;
}

var constants$1 = {};

var hasRequiredConstants$1;

function requireConstants$1 () {
	if (hasRequiredConstants$1) return constants$1;
	hasRequiredConstants$1 = 1;

	Object.defineProperty(constants$1, "__esModule", {
	  value: true
	});
	constants$1.CHANNEL = '__direction__';

	constants$1.DIRECTIONS = {
	  LTR: 'ltr',
	  RTL: 'rtl'
	};
	return constants$1;
}

var brcast = {};

var hasRequiredBrcast;

function requireBrcast () {
	if (hasRequiredBrcast) return brcast;
	hasRequiredBrcast = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});

		var _propTypes = PropTypes$1;

		var _propTypes2 = _interopRequireDefault(_propTypes);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		exports['default'] = _propTypes2['default'].shape({
		  getState: _propTypes2['default'].func,
		  setState: _propTypes2['default'].func,
		  subscribe: _propTypes2['default'].func
		}); 
	} (brcast));
	return brcast;
}

var direction = {};

var implementation$3;
var hasRequiredImplementation$3;

function requireImplementation$3 () {
	if (hasRequiredImplementation$3) return implementation$3;
	hasRequiredImplementation$3 = 1;

	var RequireObjectCoercible = requireRequireObjectCoercible();
	var callBound = requireCallBound();

	var $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');
	var $push = callBound('Array.prototype.push');

	implementation$3 = function values(O) {
		var obj = RequireObjectCoercible(O);
		var vals = [];
		for (var key in obj) {
			if ($isEnumerable(obj, key)) { // checks own-ness as well
				$push(vals, obj[key]);
			}
		}
		return vals;
	};
	return implementation$3;
}

var polyfill$3;
var hasRequiredPolyfill$3;

function requirePolyfill$3 () {
	if (hasRequiredPolyfill$3) return polyfill$3;
	hasRequiredPolyfill$3 = 1;

	var implementation = requireImplementation$3();

	polyfill$3 = function getPolyfill() {
		return typeof Object.values === 'function' ? Object.values : implementation;
	};
	return polyfill$3;
}

var shim$3;
var hasRequiredShim$3;

function requireShim$3 () {
	if (hasRequiredShim$3) return shim$3;
	hasRequiredShim$3 = 1;

	var getPolyfill = requirePolyfill$3();
	var define = requireDefineProperties();

	shim$3 = function shimValues() {
		var polyfill = getPolyfill();
		define(Object, { values: polyfill }, {
			values: function testValues() {
				return Object.values !== polyfill;
			}
		});
		return polyfill;
	};
	return shim$3;
}

var object_values;
var hasRequiredObject_values;

function requireObject_values () {
	if (hasRequiredObject_values) return object_values;
	hasRequiredObject_values = 1;

	var define = requireDefineProperties();
	var callBind = requireCallBind();

	var implementation = requireImplementation$3();
	var getPolyfill = requirePolyfill$3();
	var shim = requireShim$3();

	var polyfill = callBind(getPolyfill(), Object);

	define(polyfill, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});

	object_values = polyfill;
	return object_values;
}

var hasRequiredDirection;

function requireDirection () {
	if (hasRequiredDirection) return direction;
	hasRequiredDirection = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});

		var _object = requireObject_values();

		var _object2 = _interopRequireDefault(_object);

		var _propTypes = PropTypes$1;

		var _propTypes2 = _interopRequireDefault(_propTypes);

		var _constants = requireConstants$1();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		exports['default'] = _propTypes2['default'].oneOf((0, _object2['default'])(_constants.DIRECTIONS)); 
	} (direction));
	return direction;
}

var hasRequiredWithDirection;

function requireWithDirection () {
	if (hasRequiredWithDirection) return withDirection;
	hasRequiredWithDirection = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.withDirectionPropTypes = exports.DIRECTIONS = undefined;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		exports['default'] = withDirection;

		var _react = reactExports;

		var _react2 = _interopRequireDefault(_react);

		var _hoistNonReactStatics = requireHoistNonReactStatics_cjs();

		var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

		var _deepmerge = requireCjs();

		var _deepmerge2 = _interopRequireDefault(_deepmerge);

		var _getComponentName = requireGetComponentName();

		var _getComponentName2 = _interopRequireDefault(_getComponentName);

		var _constants = requireConstants$1();

		var _brcast = requireBrcast();

		var _brcast2 = _interopRequireDefault(_brcast);

		var _direction = requireDirection();

		var _direction2 = _interopRequireDefault(_direction);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /* eslint-disable react/forbid-foreign-prop-types */
		// This higher-order component consumes a string from React context that is
		// provided by the DirectionProvider component.
		// We can use this to conditionally switch layout/direction for right-to-left layouts.

		var contextTypes = _defineProperty({}, _constants.CHANNEL, _brcast2['default']);

		exports.DIRECTIONS = _constants.DIRECTIONS;

		// set a default direction so that a component wrapped with this HOC can be
		// used even without a DirectionProvider ancestor in its react tree.

		var defaultDirection = _constants.DIRECTIONS.LTR;

		// export for convenience, in order for components to spread these onto their propTypes
		exports.withDirectionPropTypes = {
		  direction: _direction2['default'].isRequired
		};

		function withDirection(WrappedComponent) {
		  var WithDirection = function (_React$Component) {
		    _inherits(WithDirection, _React$Component);

		    function WithDirection(props, context) {
		      _classCallCheck(this, WithDirection);

		      var _this = _possibleConstructorReturn(this, (WithDirection.__proto__ || Object.getPrototypeOf(WithDirection)).call(this, props, context));

		      _this.state = {
		        direction: context[_constants.CHANNEL] ? context[_constants.CHANNEL].getState() : defaultDirection
		      };
		      return _this;
		    }

		    _createClass(WithDirection, [{
		      key: 'componentDidMount',
		      value: function () {
		        function componentDidMount() {
		          var _this2 = this;

		          if (this.context[_constants.CHANNEL]) {
		            // subscribe to future direction changes
		            this.channelUnsubscribe = this.context[_constants.CHANNEL].subscribe(function (direction) {
		              _this2.setState({ direction: direction });
		            });
		          }
		        }

		        return componentDidMount;
		      }()
		    }, {
		      key: 'componentWillUnmount',
		      value: function () {
		        function componentWillUnmount() {
		          if (this.channelUnsubscribe) {
		            this.channelUnsubscribe();
		          }
		        }

		        return componentWillUnmount;
		      }()
		    }, {
		      key: 'render',
		      value: function () {
		        function render() {
		          var direction = this.state.direction;


		          return _react2['default'].createElement(WrappedComponent, _extends({}, this.props, {
		            direction: direction
		          }));
		        }

		        return render;
		      }()
		    }]);

		    return WithDirection;
		  }(_react2['default'].Component);

		  var wrappedComponentName = (0, _getComponentName2['default'])(WrappedComponent) || 'Component';

		  WithDirection.WrappedComponent = WrappedComponent;
		  WithDirection.contextTypes = contextTypes;
		  WithDirection.displayName = 'withDirection(' + String(wrappedComponentName) + ')';
		  if (WrappedComponent.propTypes) {
		    WithDirection.propTypes = (0, _deepmerge2['default'])({}, WrappedComponent.propTypes);
		    delete WithDirection.propTypes.direction;
		  }
		  if (WrappedComponent.defaultProps) {
		    WithDirection.defaultProps = (0, _deepmerge2['default'])({}, WrappedComponent.defaultProps);
		  }

		  return (0, _hoistNonReactStatics2['default'])(WithDirection, WrappedComponent);
		} 
	} (withDirection));
	return withDirection;
}

var hasRequiredWithStylesContext;

function requireWithStylesContext () {
	if (hasRequiredWithStylesContext) return WithStylesContext;
	hasRequiredWithStylesContext = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "DIRECTIONS", {
		  enumerable: true,
		  get: function get() {
		    return _reactWithDirection.DIRECTIONS;
		  }
		});
		exports["default"] = void 0;

		var _react = reactExports;

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _reactWithDirection = requireWithDirection();

		function detectAndCreateContext(defaultValue) {
		  if (_react.createContext) {
		    return /*#__PURE__*/(0, _react.createContext)(defaultValue);
		  }

		  return {
		    Provider: function Provider() {
		      throw new ReferenceError('WithStylesContext requires React 16.3 or later');
		    },
		    Consumer: function Consumer() {
		      throw new ReferenceError('WithStylesContext requires React 16.3 or later');
		    }
		  };
		}

		var WithStylesContext = detectAndCreateContext({
		  stylesInterface: null,
		  stylesTheme: null,
		  direction: null
		});
		WithStylesContext.Provider.propTypes = {
		  stylesInterface: _propTypes["default"].object,
		  // eslint-disable-line react/forbid-prop-types
		  stylesTheme: _propTypes["default"].object,
		  // eslint-disable-line react/forbid-prop-types
		  direction: _propTypes["default"].oneOf([_reactWithDirection.DIRECTIONS.LTR, _reactWithDirection.DIRECTIONS.RTL])
		};
		var _default = WithStylesContext;
		exports["default"] = _default; 
	} (WithStylesContext));
	return WithStylesContext;
}

var withStylesPropTypes = {};

var hasRequiredWithStylesPropTypes;

function requireWithStylesPropTypes () {
	if (hasRequiredWithStylesPropTypes) return withStylesPropTypes;
	hasRequiredWithStylesPropTypes = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = exports.withStylesPropTypes = void 0;

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var withStylesPropTypes = {
		  styles: _propTypes["default"].object.isRequired,
		  theme: _propTypes["default"].object.isRequired,
		  css: _propTypes["default"].func.isRequired
		};
		exports.withStylesPropTypes = withStylesPropTypes;
		var _default = withStylesPropTypes;
		exports["default"] = _default; 
	} (withStylesPropTypes));
	return withStylesPropTypes;
}

var hasRequiredWithStyles;

function requireWithStyles () {
	if (hasRequiredWithStyles) return withStyles;
	hasRequiredWithStyles = 1;
	(function (exports) {

		var _interopRequireWildcard = requireInteropRequireWildcard();

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.withStyles = withStyles;
		Object.defineProperty(exports, "withStylesPropTypes", {
		  enumerable: true,
		  get: function get() {
		    return _withStylesPropTypes.withStylesPropTypes;
		  }
		});
		exports.css = exports["default"] = void 0;

		var _extends2 = _interopRequireDefault(require_extends());

		var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

		var _objectWithoutProperties2 = _interopRequireDefault(requireObjectWithoutProperties());

		var _inheritsLoose2 = _interopRequireDefault(requireInheritsLoose());

		var _react = _interopRequireDefault(reactExports);

		var _hoistNonReactStatics = _interopRequireDefault(requireHoistNonReactStatics_cjs());

		var _getComponentName = _interopRequireDefault(requireGetComponentName());

		var _ref3 = _interopRequireDefault(requireRef());

		var _emptyStylesFn = _interopRequireDefault(requireEmptyStylesFn());

		var _perf = _interopRequireDefault(requirePerf());

		var _WithStylesContext = _interopRequireWildcard(requireWithStylesContext());

		var _ThemedStyleSheet = _interopRequireWildcard(requireThemedStyleSheet());

		var _withStylesPropTypes = requireWithStylesPropTypes();

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		/**
		 * A higher order function that returns a higher order class component that injects
		 * CSS-in-JS props derived from the react-with-styles theme, interface, and
		 * direction provided through the WithStylesContext provider.
		 *
		 * The function should be used as follows:
		 * `withStyles((theme) => styles, options)(Component)`
		 *
		 * Options can be used to rename the injected props, memoize the component, and flush
		 * the styles to the styles tag (or whatever the interface implements as flush) before
		 * rendering.
		 *
		 * @export
		 * @param {Function|null|undefined} [stylesFn=EMPTY_STYLES_FN]
		 * @param {Object} [{
		 *     stylesPropName = 'styles',
		 *     themePropName = 'theme',
		 *     cssPropName = 'css',
		 *     flushBefore = false,
		 *     pureComponent = false,
		 *   }={}]
		 * @returns a higher order component that wraps the provided component and injects
		 * the react-with-styles css, styles, and theme props.
		 */
		function withStyles() {
		  var stylesFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emptyStylesFn["default"];

		  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
		      _ref$stylesPropName = _ref.stylesPropName,
		      stylesPropName = _ref$stylesPropName === void 0 ? 'styles' : _ref$stylesPropName,
		      _ref$themePropName = _ref.themePropName,
		      themePropName = _ref$themePropName === void 0 ? 'theme' : _ref$themePropName,
		      _ref$cssPropName = _ref.cssPropName,
		      cssPropName = _ref$cssPropName === void 0 ? 'css' : _ref$cssPropName,
		      _ref$flushBefore = _ref.flushBefore,
		      flushBefore = _ref$flushBefore === void 0 ? false : _ref$flushBefore,
		      _ref$pureComponent = _ref.pureComponent,
		      pureComponent = _ref$pureComponent === void 0 ? false : _ref$pureComponent;

		  stylesFn = stylesFn || _emptyStylesFn["default"];
		  var BaseClass = pureComponent ? _react["default"].PureComponent : _react["default"].Component;
		  /** Cache for storing the result of stylesFn(theme) for all themes. */

		  var stylesFnResultCacheMap = typeof WeakMap === 'undefined' ? new Map() : new WeakMap();

		  function getOrCreateStylesFnResultCache(theme) {
		    // Get and store the result in the stylesFnResultsCache for the component
		    // -- not the instance -- so we only apply the theme to the stylesFn
		    // once per theme for this component.
		    var cachedResultForTheme = stylesFnResultCacheMap.get(theme);
		    var stylesFnResult = cachedResultForTheme || stylesFn(theme) || {};
		    stylesFnResultCacheMap.set(theme, stylesFnResult); // cache the result of stylesFn(theme)

		    return stylesFnResult;
		  }
		  /**
		   * Cache for storing the results of computations:
		   * `WeakMap<Theme, WeakMap<typeof WithStyles, { ltr: {}, rtl: {} }>>`
		   * Falling back to `Map` whenever `WeakMap` is not supported
		   */


		  var withStylesCache = typeof WeakMap === 'undefined' ? new Map() : new WeakMap();

		  function getComponentCache(theme, component, direction) {
		    var themeCache = withStylesCache.get(theme);

		    if (!themeCache) {
		      return null;
		    }

		    var componentCache = themeCache.get(component);

		    if (!componentCache) {
		      return null;
		    }

		    return componentCache[direction];
		  }

		  function updateComponentCache(theme, component, direction, results) {
		    var themeCache = withStylesCache.get(theme);

		    if (!themeCache) {
		      themeCache = typeof WeakMap === 'undefined' ? new Map() : new WeakMap();
		      withStylesCache.set(theme, themeCache);
		    }

		    var componentCache = themeCache.get(component);

		    if (!componentCache) {
		      componentCache = {
		        ltr: {},
		        rtl: {}
		      };
		      themeCache.set(component, componentCache);
		    }

		    componentCache[direction] = results;
		  }
		  /** Derive the create function from the interface and direction */


		  function makeCreateFn(direction, stylesInterface) {
		    var directionSelector = direction === _WithStylesContext.DIRECTIONS.RTL ? 'RTL' : 'LTR';
		    var create = stylesInterface["create".concat(directionSelector)] || stylesInterface.create;
		    var original = create;

		    if (process.env.NODE_ENV !== 'production') {
		      create = (0, _perf["default"])('create')(create);
		    }

		    return {
		      create: create,
		      original: original
		    };
		  }
		  /** Derive the resolve function from the interface and direction */


		  function makeResolveFn(direction, stylesInterface) {
		    var directionSelector = direction === _WithStylesContext.DIRECTIONS.RTL ? 'RTL' : 'LTR';
		    var resolve = stylesInterface["resolve".concat(directionSelector)] || stylesInterface.resolve;
		    var original = resolve;

		    if (process.env.NODE_ENV !== 'production') {
		      resolve = (0, _perf["default"])('resolve')(resolve);
		    }

		    return {
		      resolve: resolve,
		      original: original
		    };
		  } // The function that wraps the provided component in a wrapper
		  // component that injects the withStyles props


		  return function withStylesHOC(WrappedComponent) {
		    var wrappedComponentName = (0, _getComponentName["default"])(WrappedComponent); // The wrapper component that injects the withStyles props

		    var WithStyles = /*#__PURE__*/function (_BaseClass) {
		      (0, _inheritsLoose2["default"])(WithStyles, _BaseClass);

		      function WithStyles() {
		        return _BaseClass.apply(this, arguments) || this;
		      }

		      var _proto = WithStyles.prototype;

		      _proto.getCurrentInterface = function getCurrentInterface() {
		        // Fallback to the singleton implementation
		        return this.context && this.context.stylesInterface || (0, _ThemedStyleSheet._getInterface)();
		      };

		      _proto.getCurrentTheme = function getCurrentTheme() {
		        // Fallback to the singleton implementation
		        return this.context && this.context.stylesTheme || (0, _ThemedStyleSheet._getTheme)();
		      };

		      _proto.getCurrentDirection = function getCurrentDirection() {
		        return this.context && this.context.direction || _WithStylesContext.DIRECTIONS.LTR;
		      };

		      _proto.getProps = function getProps() {
		        // Get the styles interface, theme, and direction from context
		        var stylesInterface = this.getCurrentInterface();
		        var theme = this.getCurrentTheme();
		        var direction = this.getCurrentDirection(); // Use a cache to store the interface methods and created styles by direction.
		        // This way, if the theme and the interface don't change, we do not recalculate
		        // styles or any other interface derivations. They are effectively only calculated
		        // once per direction, until the theme or interface change.
		        // Assume: always an object.

		        var componentCache = getComponentCache(theme, WithStyles, direction); // Determine what's changed

		        var interfaceChanged = !componentCache || !componentCache.stylesInterface || stylesInterface && componentCache.stylesInterface !== stylesInterface;
		        var themeChanged = !componentCache || componentCache.theme !== theme; // If the interface and theme haven't changed for this direction,
		        // we return the cached props immediately.

		        if (!interfaceChanged && !themeChanged) {
		          return componentCache.props;
		        } // If the theme or the interface changed, then there are some values
		        // we need to recalculate. We avoid recalculating the ones we already
		        // calculated in the past if the objects they're derived from have not
		        // changed.


		        var createFn = interfaceChanged && makeCreateFn(direction, stylesInterface) || componentCache.create;
		        var resolveFn = interfaceChanged && makeResolveFn(direction, stylesInterface) || componentCache.resolve;
		        var create = createFn.create;
		        var resolve = resolveFn.resolve; // Determine if create or resolve functions have changed, which will then
		        // determine if we need to create new styles or css props

		        var createChanged = !componentCache || !componentCache.create || createFn.original !== componentCache.create.original;
		        var resolveChanged = !componentCache || !componentCache.resolve || resolveFn.original !== componentCache.resolve.original; // Derive the css function prop: recalculate it if resolve changed

		        var css = resolveChanged && function () {
		          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		            args[_key] = arguments[_key];
		          }

		          return resolve(args);
		        } || componentCache.props.css; // Get or calculate the themed styles from the stylesFn:
		        // Uses a separate cache at the component level, not at the instance level,
		        // to only apply the theme to the stylesFn once per component class per theme.


		        var stylesFnResult = getOrCreateStylesFnResultCache(theme); // Derive the styles prop: recalculate it if create changed, or stylesFnResult changed

		        var styles = (createChanged || stylesFnResult !== componentCache.stylesFnResult) && create(stylesFnResult) || componentCache.props.styles; // Put the new props together

		        var props = {
		          css: css,
		          styles: styles,
		          theme: theme
		        }; // Update the cache with all the new values

		        updateComponentCache(theme, WithStyles, direction, {
		          stylesInterface: stylesInterface,
		          theme: theme,
		          create: createFn,
		          resolve: resolveFn,
		          stylesFnResult: stylesFnResult,
		          props: props
		        });
		        return props;
		      };

		      _proto.flush = function flush() {
		        var stylesInterface = this.getCurrentInterface();

		        if (stylesInterface && stylesInterface.flush) {
		          stylesInterface.flush();
		        }
		      };

		      _proto.render = function render() {
		        var _ref2;

		        // We only want to re-render if the theme, stylesInterface, or direction change.
		        // These values are in context so we're listening for their updates.
		        // this.getProps() derives the props from the theme, stylesInterface, and direction in
		        // context, and memoizes them on the instance per direction.
		        var _this$getProps = this.getProps(),
		            theme = _this$getProps.theme,
		            styles = _this$getProps.styles,
		            css = _this$getProps.css; // Flush if specified


		        if (flushBefore) {
		          this.flush();
		        }

		        var _this$props = this.props,
		            forwardedRef = _this$props.forwardedRef,
		            rest = (0, _objectWithoutProperties2["default"])(_this$props, ["forwardedRef"]);
		        return /*#__PURE__*/_react["default"].createElement(WrappedComponent // TODO: remove conditional once breaking change to only support React 16.3+
		        // ref: https://github.com/airbnb/react-with-styles/pull/240#discussion_r533497857
		        , (0, _extends2["default"])({
		          ref: typeof _react["default"].forwardRef === 'undefined' ? undefined : forwardedRef
		        }, typeof _react["default"].forwardRef === 'undefined' ? this.props : rest, (_ref2 = {}, (0, _defineProperty2["default"])(_ref2, themePropName, theme), (0, _defineProperty2["default"])(_ref2, stylesPropName, styles), (0, _defineProperty2["default"])(_ref2, cssPropName, css), _ref2)));
		      };

		      return WithStyles;
		    }(BaseClass); // TODO: remove conditional once breaking change to only support React 16.3+
		    // ref: https://github.com/airbnb/react-with-styles/pull/240#discussion_r533497857


		    if (typeof _react["default"].forwardRef !== 'undefined') {
		      WithStyles.propTypes = {
		        forwardedRef: (0, _ref3["default"])()
		      };
		    } // TODO: remove conditional once breaking change to only support React 16.3+
		    // ref: https://github.com/airbnb/react-with-styles/pull/240#discussion_r533497857


		    var ForwardedWithStyles = typeof _react["default"].forwardRef === 'undefined' ? WithStyles : /*#__PURE__*/_react["default"].forwardRef(function (props, forwardedRef) {
		      return /*#__PURE__*/_react["default"].createElement(WithStyles, (0, _extends2["default"])({}, props, {
		        forwardedRef: forwardedRef
		      }));
		    }); // Copy the wrapped component's prop types and default props on WithStyles

		    if (WrappedComponent.propTypes) {
		      ForwardedWithStyles.propTypes = _objectSpread({}, WrappedComponent.propTypes);
		      delete ForwardedWithStyles.propTypes[stylesPropName];
		      delete ForwardedWithStyles.propTypes[themePropName];
		      delete ForwardedWithStyles.propTypes[cssPropName];
		    }

		    if (WrappedComponent.defaultProps) {
		      ForwardedWithStyles.defaultProps = _objectSpread({}, WrappedComponent.defaultProps);
		    }

		    WithStyles.contextType = _WithStylesContext["default"];
		    ForwardedWithStyles.WrappedComponent = WrappedComponent;
		    ForwardedWithStyles.displayName = "withStyles(".concat(wrappedComponentName, ")");
		    return (0, _hoistNonReactStatics["default"])(ForwardedWithStyles, WrappedComponent);
		  };
		}

		var _default = withStyles;
		/**
		 * Deprecated: Do not use directly. Please wrap your component in `withStyles` and use the `css`
		 * prop injected via props instead.
		 */

		exports["default"] = _default;
		var css = _ThemedStyleSheet["default"].resolveLTR;
		exports.css = css; 
	} (withStyles));
	return withStyles;
}

var lib$1 = {};

var PortalCompat = {};

var Portal = {};

var utils = {};

var hasRequiredUtils;

function requireUtils () {
	if (hasRequiredUtils) return utils;
	hasRequiredUtils = 1;

	Object.defineProperty(utils, "__esModule", {
	  value: true
	});
	utils.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	return utils;
}

var hasRequiredPortal;

function requirePortal () {
	if (hasRequiredPortal) return Portal;
	hasRequiredPortal = 1;

	Object.defineProperty(Portal, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = reactExports;

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = PropTypes$1;

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = reactDomExports;

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _utils = requireUtils();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Portal$1 = function (_React$Component) {
	  _inherits(Portal, _React$Component);

	  function Portal() {
	    _classCallCheck(this, Portal);

	    return _possibleConstructorReturn(this, (Portal.__proto__ || Object.getPrototypeOf(Portal)).apply(this, arguments));
	  }

	  _createClass(Portal, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.defaultNode) {
	        document.body.removeChild(this.defaultNode);
	      }
	      this.defaultNode = null;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (!_utils.canUseDOM) {
	        return null;
	      }
	      if (!this.props.node && !this.defaultNode) {
	        this.defaultNode = document.createElement('div');
	        document.body.appendChild(this.defaultNode);
	      }
	      return _reactDom2.default.createPortal(this.props.children, this.props.node || this.defaultNode);
	    }
	  }]);

	  return Portal;
	}(_react2.default.Component);

	Portal$1.propTypes = {
	  children: _propTypes2.default.node.isRequired,
	  node: _propTypes2.default.any
	};

	Portal.default = Portal$1;
	return Portal;
}

var LegacyPortal = {};

var hasRequiredLegacyPortal;

function requireLegacyPortal () {
	if (hasRequiredLegacyPortal) return LegacyPortal;
	hasRequiredLegacyPortal = 1;

	Object.defineProperty(LegacyPortal, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = reactExports;

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = reactDomExports;

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _propTypes = PropTypes$1;

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // This file is a fallback for a consumer who is not yet on React 16
	// as createPortal was introduced in React 16

	var Portal = function (_React$Component) {
	  _inherits(Portal, _React$Component);

	  function Portal() {
	    _classCallCheck(this, Portal);

	    return _possibleConstructorReturn(this, (Portal.__proto__ || Object.getPrototypeOf(Portal)).apply(this, arguments));
	  }

	  _createClass(Portal, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.renderPortal();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(props) {
	      this.renderPortal();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _reactDom2.default.unmountComponentAtNode(this.defaultNode || this.props.node);
	      if (this.defaultNode) {
	        document.body.removeChild(this.defaultNode);
	      }
	      this.defaultNode = null;
	      this.portal = null;
	    }
	  }, {
	    key: 'renderPortal',
	    value: function renderPortal(props) {
	      if (!this.props.node && !this.defaultNode) {
	        this.defaultNode = document.createElement('div');
	        document.body.appendChild(this.defaultNode);
	      }

	      var children = this.props.children;
	      // https://gist.github.com/jimfb/d99e0678e9da715ccf6454961ef04d1b
	      if (typeof this.props.children.type === 'function') {
	        children = _react2.default.cloneElement(this.props.children);
	      }

	      this.portal = _reactDom2.default.unstable_renderSubtreeIntoContainer(this, children, this.props.node || this.defaultNode);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return null;
	    }
	  }]);

	  return Portal;
	}(_react2.default.Component);

	LegacyPortal.default = Portal;


	Portal.propTypes = {
	  children: _propTypes2.default.node.isRequired,
	  node: _propTypes2.default.any
	};
	return LegacyPortal;
}

var hasRequiredPortalCompat;

function requirePortalCompat () {
	if (hasRequiredPortalCompat) return PortalCompat;
	hasRequiredPortalCompat = 1;

	Object.defineProperty(PortalCompat, "__esModule", {
	  value: true
	});

	var _reactDom = reactDomExports;

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Portal = requirePortal();

	var _Portal2 = _interopRequireDefault(_Portal);

	var _LegacyPortal = requireLegacyPortal();

	var _LegacyPortal2 = _interopRequireDefault(_LegacyPortal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Portal = void 0;

	if (_reactDom2.default.createPortal) {
	  Portal = _Portal2.default;
	} else {
	  Portal = _LegacyPortal2.default;
	}

	PortalCompat.default = Portal;
	return PortalCompat;
}

var PortalWithState = {};

var hasRequiredPortalWithState;

function requirePortalWithState () {
	if (hasRequiredPortalWithState) return PortalWithState;
	hasRequiredPortalWithState = 1;

	Object.defineProperty(PortalWithState, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = reactExports;

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = PropTypes$1;

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _PortalCompat = requirePortalCompat();

	var _PortalCompat2 = _interopRequireDefault(_PortalCompat);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var KEYCODES = {
	  ESCAPE: 27
	};

	var PortalWithState$1 = function (_React$Component) {
	  _inherits(PortalWithState, _React$Component);

	  function PortalWithState(props) {
	    _classCallCheck(this, PortalWithState);

	    var _this = _possibleConstructorReturn(this, (PortalWithState.__proto__ || Object.getPrototypeOf(PortalWithState)).call(this, props));

	    _this.portalNode = null;
	    _this.state = { active: !!props.defaultOpen };
	    _this.openPortal = _this.openPortal.bind(_this);
	    _this.closePortal = _this.closePortal.bind(_this);
	    _this.wrapWithPortal = _this.wrapWithPortal.bind(_this);
	    _this.handleOutsideMouseClick = _this.handleOutsideMouseClick.bind(_this);
	    _this.handleKeydown = _this.handleKeydown.bind(_this);
	    return _this;
	  }

	  _createClass(PortalWithState, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.closeOnEsc) {
	        document.addEventListener('keydown', this.handleKeydown);
	      }
	      if (this.props.closeOnOutsideClick) {
	        document.addEventListener('click', this.handleOutsideMouseClick);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.props.closeOnEsc) {
	        document.removeEventListener('keydown', this.handleKeydown);
	      }
	      if (this.props.closeOnOutsideClick) {
	        document.removeEventListener('click', this.handleOutsideMouseClick);
	      }
	    }
	  }, {
	    key: 'openPortal',
	    value: function openPortal(e) {
	      if (this.state.active) {
	        return;
	      }
	      if (e && e.nativeEvent) {
	        e.nativeEvent.stopImmediatePropagation();
	      }
	      this.setState({ active: true }, this.props.onOpen);
	    }
	  }, {
	    key: 'closePortal',
	    value: function closePortal() {
	      if (!this.state.active) {
	        return;
	      }
	      this.setState({ active: false }, this.props.onClose);
	    }
	  }, {
	    key: 'wrapWithPortal',
	    value: function wrapWithPortal(children) {
	      var _this2 = this;

	      if (!this.state.active) {
	        return null;
	      }
	      return _react2.default.createElement(
	        _PortalCompat2.default,
	        {
	          node: this.props.node,
	          key: 'react-portal',
	          ref: function ref(portalNode) {
	            return _this2.portalNode = portalNode;
	          }
	        },
	        children
	      );
	    }
	  }, {
	    key: 'handleOutsideMouseClick',
	    value: function handleOutsideMouseClick(e) {
	      if (!this.state.active) {
	        return;
	      }
	      var root = this.portalNode && (this.portalNode.props.node || this.portalNode.defaultNode);
	      if (!root || root.contains(e.target) || e.button && e.button !== 0) {
	        return;
	      }
	      this.closePortal();
	    }
	  }, {
	    key: 'handleKeydown',
	    value: function handleKeydown(e) {
	      if (e.keyCode === KEYCODES.ESCAPE && this.state.active) {
	        this.closePortal();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return this.props.children({
	        openPortal: this.openPortal,
	        closePortal: this.closePortal,
	        portal: this.wrapWithPortal,
	        isOpen: this.state.active
	      });
	    }
	  }]);

	  return PortalWithState;
	}(_react2.default.Component);

	PortalWithState$1.propTypes = {
	  children: _propTypes2.default.func.isRequired,
	  defaultOpen: _propTypes2.default.bool,
	  node: _propTypes2.default.any,
	  closeOnEsc: _propTypes2.default.bool,
	  closeOnOutsideClick: _propTypes2.default.bool,
	  onOpen: _propTypes2.default.func,
	  onClose: _propTypes2.default.func
	};

	PortalWithState$1.defaultProps = {
	  onOpen: function onOpen() {},
	  onClose: function onClose() {}
	};

	PortalWithState.default = PortalWithState$1;
	return PortalWithState;
}

var hasRequiredLib$1;

function requireLib$1 () {
	if (hasRequiredLib$1) return lib$1;
	hasRequiredLib$1 = 1;

	Object.defineProperty(lib$1, "__esModule", {
	  value: true
	});
	lib$1.PortalWithState = lib$1.Portal = undefined;

	var _PortalCompat = requirePortalCompat();

	var _PortalCompat2 = _interopRequireDefault(_PortalCompat);

	var _PortalWithState = requirePortalWithState();

	var _PortalWithState2 = _interopRequireDefault(_PortalWithState);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	lib$1.Portal = _PortalCompat2.default;
	lib$1.PortalWithState = _PortalWithState2.default;
	return lib$1;
}

var mocks;
var hasRequiredMocks;

function requireMocks () {
	if (hasRequiredMocks) return mocks;
	hasRequiredMocks = 1;

	function noop() {
	  return null;
	}

	noop.isRequired = noop;

	function noopThunk() {
	  return noop;
	}

	mocks = {
	  and: noopThunk,
	  between: noopThunk,
	  booleanSome: noopThunk,
	  childrenHavePropXorChildren: noopThunk,
	  childrenOf: noopThunk,
	  childrenOfType: noopThunk,
	  childrenSequenceOf: noopThunk,
	  componentWithName: noopThunk,
	  disallowedIf: noopThunk,
	  elementType: noopThunk,
	  empty: noopThunk,
	  explicitNull: noopThunk,
	  forbidExtraProps: Object,
	  integer: noopThunk,
	  keysOf: noopThunk,
	  mutuallyExclusiveProps: noopThunk,
	  mutuallyExclusiveTrueProps: noopThunk,
	  nChildren: noopThunk,
	  nonNegativeInteger: noop,
	  nonNegativeNumber: noopThunk,
	  numericString: noopThunk,
	  object: noopThunk,
	  or: noopThunk,
	  predicate: noopThunk,
	  range: noopThunk,
	  ref: noopThunk,
	  requiredBy: noopThunk,
	  restrictedProp: noopThunk,
	  sequenceOf: noopThunk,
	  shape: noopThunk,
	  stringEndsWith: noopThunk,
	  stringStartsWith: noopThunk,
	  uniqueArray: noopThunk,
	  uniqueArrayOf: noopThunk,
	  valuesOf: noopThunk,
	  withShape: noopThunk
	};
	
	return mocks;
}

var build$2 = {exports: {}};

build$2.exports;

var hasRequiredBuild$2;

function requireBuild$2 () {
	if (hasRequiredBuild$2) return build$2.exports;
	hasRequiredBuild$2 = 1;
	(function (module, exports) {
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports['default'] = forbidExtraProps;

		var _object = requireObject_assign();

		var _object2 = _interopRequireDefault(_object);

		var _has = requireSrc();

		var _has2 = _interopRequireDefault(_has);

		var _isPlainObject = requireIsPlainObject$1();

		var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		var zeroWidthSpace = '\u200B';
		var specialProperty = 'prop-types-exact: ' + zeroWidthSpace;
		var semaphore = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for'](specialProperty) : /* istanbul ignore next */specialProperty;

		function brand(fn) {
		  return (0, _object2['default'])(fn, _defineProperty({}, specialProperty, semaphore));
		}

		function isBranded(value) {
		  return value && value[specialProperty] === semaphore;
		}

		function forbidExtraProps(propTypes) {
		  if (!(0, _isPlainObject2['default'])(propTypes)) {
		    throw new TypeError('given propTypes must be an object');
		  }
		  if ((0, _has2['default'])(propTypes, specialProperty) && !isBranded(propTypes[specialProperty])) {
		    throw new TypeError('Against all odds, you created a propType for a prop that uses both the zero-width space and our custom string - which, sadly, conflicts with `prop-types-exact`');
		  }

		  return (0, _object2['default'])({}, propTypes, _defineProperty({}, specialProperty, brand(function () {
		    function forbidUnknownProps(props, _, componentName) {
		      var unknownProps = Object.keys(props).filter(function (prop) {
		        return !(0, _has2['default'])(propTypes, prop);
		      });
		      if (unknownProps.length > 0) {
		        return new TypeError(String(componentName) + ': unknown props found: ' + String(unknownProps.join(', ')));
		      }
		      return null;
		    }

		    return forbidUnknownProps;
		  }())));
		}
		module.exports = exports['default'];
		
	} (build$2, build$2.exports));
	return build$2.exports;
}

var and = {};

var hasRequiredAnd;

function requireAnd () {
	if (hasRequiredAnd) return and;
	hasRequiredAnd = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = andValidator;

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function andValidator(validators) {
		  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'and';

		  if (!Array.isArray(validators)) {
		    throw new TypeError('and: 2 or more validators are required');
		  }

		  if (validators.length <= 1) {
		    throw new RangeError('and: 2 or more validators are required');
		  }

		  var validator = function and() {
		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    var firstError = null;
		    validators.some(function (validatorFn) {
		      firstError = validatorFn.apply(void 0, args);
		      return firstError != null;
		    });
		    return firstError == null ? null : firstError;
		  };

		  validator.isRequired = function andIsRequired() {
		    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		      args[_key2] = arguments[_key2];
		    }

		    var firstError = null;
		    validators.some(function (validatorFn) {
		      firstError = validatorFn.isRequired.apply(validatorFn, args);
		      return firstError != null;
		    });
		    return firstError == null ? null : firstError;
		  };

		  return (0, _wrapValidator["default"])(validator, name, validators);
		}
		
	} (and));
	return and;
}

var between = {};

var implementation$2;
var hasRequiredImplementation$2;

function requireImplementation$2 () {
	if (hasRequiredImplementation$2) return implementation$2;
	hasRequiredImplementation$2 = 1;

	var RequireObjectCoercible = requireRequireObjectCoercible();
	var callBound = requireCallBound();
	var $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');
	var $push = callBound('Array.prototype.push');

	implementation$2 = function entries(O) {
		var obj = RequireObjectCoercible(O);
		var entrys = [];
		for (var key in obj) {
			if ($isEnumerable(obj, key)) { // checks own-ness as well
				$push(entrys, [key, obj[key]]);
			}
		}
		return entrys;
	};
	return implementation$2;
}

var polyfill$2;
var hasRequiredPolyfill$2;

function requirePolyfill$2 () {
	if (hasRequiredPolyfill$2) return polyfill$2;
	hasRequiredPolyfill$2 = 1;

	var implementation = requireImplementation$2();

	polyfill$2 = function getPolyfill() {
		return typeof Object.entries === 'function' ? Object.entries : implementation;
	};
	return polyfill$2;
}

var shim$2;
var hasRequiredShim$2;

function requireShim$2 () {
	if (hasRequiredShim$2) return shim$2;
	hasRequiredShim$2 = 1;

	var getPolyfill = requirePolyfill$2();
	var define = requireDefineProperties();

	shim$2 = function shimEntries() {
		var polyfill = getPolyfill();
		define(Object, { entries: polyfill }, {
			entries: function testEntries() {
				return Object.entries !== polyfill;
			}
		});
		return polyfill;
	};
	return shim$2;
}

var object_entries;
var hasRequiredObject_entries;

function requireObject_entries () {
	if (hasRequiredObject_entries) return object_entries;
	hasRequiredObject_entries = 1;

	var define = requireDefineProperties();
	var callBind = requireCallBind();

	var implementation = requireImplementation$2();
	var getPolyfill = requirePolyfill$2();
	var shim = requireShim$2();

	var polyfill = callBind(getPolyfill(), Object);

	define(polyfill, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});

	object_entries = polyfill;
	return object_entries;
}

var shape = {};

var hasRequiredShape;

function requireShape () {
	if (hasRequiredShape) return shape;
	hasRequiredShape = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = shapeValidator;

		var _isPlainObject = _interopRequireDefault(requireIsPlainObject());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function shapeValidator(shapeTypes) {
		  if (!(0, _isPlainObject["default"])(shapeTypes)) {
		    throw new TypeError('shape must be a normal object');
		  }

		  function shape(props, propName, componentName, location) {
		    var propValue = props[propName];

		    if (propValue == null) {
		      return null;
		    } // code adapted from PropTypes.shape: https://github.com/facebook/react/blob/14156e56b9cf18ac86963185c5af4abddf3ff811/src/isomorphic/classic/types/ReactPropTypes.js#L381
		    // eslint-disable-next-line guard-for-in, no-restricted-syntax


		    for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
		      rest[_key - 4] = arguments[_key];
		    }

		    for (var key in shapeTypes) {
		      var checker = shapeTypes[key];

		      if (checker) {
		        var error = checker.apply(void 0, [propValue, key, componentName, location].concat(rest));

		        if (error) {
		          return error;
		        }
		      }
		    }

		    return null;
		  }

		  shape.isRequired = function shapeRequired(props, propName, componentName) {
		    var propValue = props[propName];

		    if (propValue == null) {
		      return new TypeError("".concat(componentName, ": ").concat(propName, " is required."));
		    }

		    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
		      rest[_key2 - 3] = arguments[_key2];
		    }

		    return shape.apply(void 0, [props, propName, componentName].concat(rest));
		  };

		  return (0, _wrapValidator["default"])(shape, 'shape', shapeTypes);
		}
		
	} (shape));
	return shape;
}

var valuesOf = {};

var isPrimitive = {};

var hasRequiredIsPrimitive;

function requireIsPrimitive () {
	if (hasRequiredIsPrimitive) return isPrimitive;
	hasRequiredIsPrimitive = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = isPrimitive;

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		function isPrimitive(x) {
		  return !x || _typeof(x) !== 'object' && typeof x !== 'function';
		}
		
	} (isPrimitive));
	return isPrimitive;
}

var hasRequiredValuesOf;

function requireValuesOf () {
	if (hasRequiredValuesOf) return valuesOf;
	hasRequiredValuesOf = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = valuesOfValidator;

		var _isPrimitive = _interopRequireDefault(requireIsPrimitive());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		// code adapted from https://github.com/facebook/react/blob/14156e56b9cf18ac86963185c5af4abddf3ff811/src/isomorphic/classic/types/ReactPropTypes.js#L307-L340
		function valuesOfValidator(propType) {
		  if (typeof propType !== 'function') {
		    throw new TypeError('objectOf: propType must be a function');
		  }

		  var validator = function valuesOf(props, propName, componentName, location, propFullName) {
		    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
		      rest[_key - 5] = arguments[_key];
		    }

		    var propValue = props[propName];

		    if (propValue == null || (0, _isPrimitive["default"])(propValue)) {
		      return null;
		    }

		    var firstError;
		    Object.keys(propValue).some(function (key) {
		      firstError = propType.apply(void 0, [propValue, key, componentName, location, "".concat(propFullName, ".").concat(key)].concat(rest));
		      return firstError;
		    });
		    return firstError || null;
		  };

		  validator.isRequired = function valuesOfRequired(props, propName, componentName) {
		    var propValue = props[propName];

		    if (propValue == null) {
		      return new TypeError("".concat(componentName, ": ").concat(propName, " is required."));
		    }

		    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
		      rest[_key2 - 3] = arguments[_key2];
		    }

		    return validator.apply(void 0, [props, propName, componentName].concat(rest));
		  };

		  return (0, _wrapValidator["default"])(validator, 'valuesOf', propType);
		}
		
	} (valuesOf));
	return valuesOf;
}

var hasRequiredBetween;

function requireBetween () {
	if (hasRequiredBetween) return between;
	hasRequiredBetween = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = betweenValidator;

		var _object = _interopRequireDefault(requireObject_entries());

		var _shape = _interopRequireDefault(requireShape());

		var _valuesOf = _interopRequireDefault(requireValuesOf());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

		function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

		function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

		function number(props, propName, componentName) {
		  var value = props[propName];

		  if (typeof value === 'number' && !isNaN(value)) {
		    return null;
		  }

		  return new TypeError("".concat(componentName, ": ").concat(propName, " must be a non-NaN number."));
		}

		function numberOrPropsFunc(props, propName) {
		  var value = props[propName];

		  if (typeof value === 'function') {
		    return null;
		  }

		  if (typeof value === 'number' && !isNaN(value)) {
		    return null;
		  }

		  return new TypeError("".concat(propName, ": a function, or a non-NaN number is required"));
		}

		function lowerCompare(value, _ref) {
		  var gt = _ref.gt,
		      gte = _ref.gte;

		  if (typeof gt === 'number') {
		    return value > gt;
		  }

		  if (typeof gte === 'number') {
		    return value >= gte;
		  }

		  return true;
		}

		function upperCompare(value, _ref2) {
		  var lt = _ref2.lt,
		      lte = _ref2.lte;

		  if (typeof lt === 'number') {
		    return value < lt;
		  }

		  if (typeof lte === 'number') {
		    return value <= lte;
		  }

		  return true;
		}

		function greaterThanError(_ref3) {
		  var gt = _ref3.gt,
		      gte = _ref3.gte;

		  if (typeof gt === 'number') {
		    return "greater than ".concat(gt);
		  }

		  if (typeof gte === 'number') {
		    return "greater than or equal to ".concat(gte);
		  }

		  return '';
		}

		function lessThanError(_ref4) {
		  var lt = _ref4.lt,
		      lte = _ref4.lte;

		  if (typeof lt === 'number') {
		    return "less than ".concat(lt);
		  }

		  if (typeof lte === 'number') {
		    return "less than or equal to ".concat(lte);
		  }

		  return '';
		}

		function errorMessage(componentName, propName, opts) {
		  var errors = [greaterThanError(opts), lessThanError(opts)].filter(Boolean).join(' and ');
		  return "".concat(componentName, ": ").concat(propName, " must be ").concat(errors);
		}

		function propsThunkify(opts) {
		  return (0, _object["default"])(opts).reduce(function (acc, _ref5) {
		    var _ref6 = _slicedToArray(_ref5, 2),
		        key = _ref6[0],
		        value = _ref6[1];

		    var numberThunk = typeof value === 'number' ? function () {
		      return value;
		    } : value;
		    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, numberThunk));
		  }, {});
		}

		function invokeWithProps(optsThunks, props) {
		  return (0, _object["default"])(optsThunks).reduce(function (acc, _ref7) {
		    var _ref8 = _slicedToArray(_ref7, 2),
		        key = _ref8[0],
		        thunk = _ref8[1];

		    var value = thunk(props);
		    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, value));
		  }, {});
		}

		var argValidators = [(0, _shape["default"])({
		  lt: numberOrPropsFunc,
		  gt: numberOrPropsFunc
		}).isRequired, (0, _shape["default"])({
		  lte: numberOrPropsFunc,
		  gt: numberOrPropsFunc
		}).isRequired, (0, _shape["default"])({
		  lt: numberOrPropsFunc,
		  gte: numberOrPropsFunc
		}).isRequired, (0, _shape["default"])({
		  lte: numberOrPropsFunc,
		  gte: numberOrPropsFunc
		}).isRequired, (0, _shape["default"])({
		  lt: numberOrPropsFunc
		}).isRequired, (0, _shape["default"])({
		  lte: numberOrPropsFunc
		}).isRequired, (0, _shape["default"])({
		  gt: numberOrPropsFunc
		}).isRequired, (0, _shape["default"])({
		  gte: numberOrPropsFunc
		}).isRequired];

		function argValidator(props, propName) {
		  return argValidators.every(function (validator) {
		    return !!validator(props, propName);
		  });
		}

		var thunkValueValidator = (0, _valuesOf["default"])(number).isRequired;

		function betweenValidator(options) {
		  var argError = argValidator({
		    options: options
		  }, 'options');

		  if (argError) {
		    throw new TypeError('between: only one of the pairs of `lt`/`lte`, and `gt`/`gte`, may be supplied, and at least one pair must be provided.');
		  }

		  var optsThunks = propsThunkify(options);

		  var validator = function between(props, propName, componentName) {
		    var propValue = props[propName];

		    if (propValue == null) {
		      return null;
		    }

		    if (typeof propValue !== 'number') {
		      return new RangeError("".concat(componentName, ": ").concat(propName, " must be a number, got \"").concat(_typeof(propValue), "\""));
		    }

		    var opts = invokeWithProps(optsThunks, props);

		    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
		      rest[_key - 3] = arguments[_key];
		    }

		    var thunkValuesError = thunkValueValidator.apply(void 0, [_defineProperty({}, propName, opts), propName, componentName].concat(rest));

		    if (thunkValuesError) {
		      return thunkValuesError;
		    }

		    if (!lowerCompare(propValue, opts) || !upperCompare(propValue, opts)) {
		      return new RangeError(errorMessage(componentName, propName, opts));
		    }

		    return null;
		  };

		  validator.isRequired = function betweenRequired(props, propName, componentName) {
		    var propValue = props[propName];

		    if (typeof propValue !== 'number') {
		      return new RangeError("".concat(componentName, ": ").concat(propName, " must be a number, got \"").concat(_typeof(propValue), "\""));
		    }

		    var opts = invokeWithProps(optsThunks, props);

		    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
		      rest[_key2 - 3] = arguments[_key2];
		    }

		    var thunkValuesError = thunkValueValidator.apply(void 0, [_defineProperty({}, propName, opts), propName, componentName].concat(rest));

		    if (thunkValuesError) {
		      return thunkValuesError;
		    }

		    if (!lowerCompare(propValue, opts) || !upperCompare(propValue, opts)) {
		      return new RangeError(errorMessage(componentName, propName, opts));
		    }

		    return null;
		  };

		  return (0, _wrapValidator["default"])(validator, 'between', options);
		}
		
	} (between));
	return between;
}

var booleanSome = {};

var hasRequiredBooleanSome;

function requireBooleanSome () {
	if (hasRequiredBooleanSome) return booleanSome;
	hasRequiredBooleanSome = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = booleanSomeValidator;

		var _propTypes = PropTypes$1;

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function booleanSomeValidator() {
		  for (var _len = arguments.length, notAllPropsFalse = new Array(_len), _key = 0; _key < _len; _key++) {
		    notAllPropsFalse[_key] = arguments[_key];
		  }

		  if (notAllPropsFalse.length < 1) {
		    throw new TypeError('at least one prop (one of which must be `true`) is required');
		  }

		  if (!notAllPropsFalse.every(function (x) {
		    return typeof x === 'string';
		  })) {
		    throw new TypeError('all booleanSome props must be strings');
		  }

		  var propsList = notAllPropsFalse.join(', or ');

		  var validator = function booleanSome(props, propName, componentName) {
		    var countFalse = function countFalse(count, prop) {
		      return count + (props[prop] === false ? 1 : 0);
		    };

		    var falsePropCount = notAllPropsFalse.reduce(countFalse, 0);

		    if (falsePropCount === notAllPropsFalse.length) {
		      return new Error("A ".concat(componentName, " must have at least one of these boolean props be `true`: ").concat(propsList));
		    }

		    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
		      rest[_key2 - 3] = arguments[_key2];
		    }

		    return _propTypes.bool.apply(void 0, [props, propName, componentName].concat(rest));
		  };

		  validator.isRequired = function booleanSomeRequired(props, propName, componentName) {
		    var countFalse = function countFalse(count, prop) {
		      return count + (props[prop] === false ? 1 : 0);
		    };

		    var falsePropCount = notAllPropsFalse.reduce(countFalse, 0);

		    if (falsePropCount === notAllPropsFalse.length) {
		      return new Error("A ".concat(componentName, " must have at least one of these boolean props be `true`: ").concat(propsList));
		    }

		    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
		      rest[_key3 - 3] = arguments[_key3];
		    }

		    return _propTypes.bool.isRequired.apply(_propTypes.bool, [props, propName, componentName].concat(rest));
		  };

		  return (0, _wrapValidator["default"])(validator, "booleanSome: ".concat(propsList), notAllPropsFalse);
		}
		
	} (booleanSome));
	return booleanSome;
}

var childrenHavePropXorChildren = {};

var hasRequiredChildrenHavePropXorChildren;

function requireChildrenHavePropXorChildren () {
	if (hasRequiredChildrenHavePropXorChildren) return childrenHavePropXorChildren;
	hasRequiredChildrenHavePropXorChildren = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = childrenHavePropXorChildren;

		var _react = _interopRequireDefault(reactExports);

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		function childrenHavePropXorChildren(prop) {
		  if (typeof prop !== 'string' && _typeof(prop) !== 'symbol') {
		    throw new TypeError('invalid prop: must be string or symbol');
		  }

		  var validator = function childrenHavePropXorChildrenWithProp(_ref, _, componentName) {
		    var children = _ref.children;
		    var truthyChildrenCount = 0;
		    var propCount = 0;
		    var grandchildrenCount = 0;

		    _react["default"].Children.forEach(children, function (child) {
		      if (!child) {
		        return;
		      }

		      truthyChildrenCount += 1;

		      if (child.props[prop]) {
		        propCount += 1;
		      }

		      if (_react["default"].Children.count(child.props.children)) {
		        grandchildrenCount += 1;
		      }
		    });

		    if (propCount === truthyChildrenCount && grandchildrenCount === 0 || propCount === 0 && grandchildrenCount === truthyChildrenCount || propCount === 0 && grandchildrenCount === 0) {
		      return null;
		    }

		    return new TypeError("`".concat(componentName, "` requires children to all have prop \u201C").concat(prop, "\u201D, all have children, or all have neither."));
		  };

		  validator.isRequired = validator;
		  return (0, _wrapValidator["default"])(validator, "childrenHavePropXorChildrenWithProp:".concat(prop), prop);
		}
		
	} (childrenHavePropXorChildren));
	return childrenHavePropXorChildren;
}

var childrenOf = {};

var renderableChildren = {};

var hasRequiredRenderableChildren;

function requireRenderableChildren () {
	if (hasRequiredRenderableChildren) return renderableChildren;
	hasRequiredRenderableChildren = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = renderableChildren;

		var _react = _interopRequireDefault(reactExports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function renderableChildren(childrenProp) {
		  return _react["default"].Children.toArray(childrenProp).filter(function (child) {
		    return child === 0 || child;
		  });
		}
		
	} (renderableChildren));
	return renderableChildren;
}

var hasRequiredChildrenOf;

function requireChildrenOf () {
	if (hasRequiredChildrenOf) return childrenOf;
	hasRequiredChildrenOf = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = childrenOf;

		var _renderableChildren = _interopRequireDefault(requireRenderableChildren());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		function validateChildren(propType, children, props) {
		  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
		    rest[_key - 3] = arguments[_key];
		  }

		  var error;
		  children.some(function (child) {
		    error = propType.apply(void 0, [_objectSpread(_objectSpread({}, props), {}, {
		      children: child
		    }), 'children'].concat(rest));
		    return error;
		  });
		  return error || null;
		}

		function childrenOf(propType) {
		  function childrenOfPropType(props, propName, componentName) {
		    if (propName !== 'children') {
		      return new TypeError("".concat(componentName, " is using the childrenOf validator on non-children prop \"").concat(propName, "\""));
		    }

		    var propValue = props[propName];

		    if (propValue == null) {
		      return null;
		    }

		    var children = (0, _renderableChildren["default"])(propValue);

		    if (children.length === 0) {
		      return null;
		    }

		    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
		      rest[_key2 - 3] = arguments[_key2];
		    }

		    return validateChildren.apply(void 0, [propType, children, props, componentName].concat(rest));
		  }

		  childrenOfPropType.isRequired = function (props, propName, componentName) {
		    if (propName !== 'children') {
		      return new TypeError("".concat(componentName, " is using the childrenOf validator on non-children prop \"").concat(propName, "\""));
		    }

		    var children = (0, _renderableChildren["default"])(props[propName]);

		    if (children.length === 0) {
		      return new TypeError("`".concat(componentName, "` requires at least one node of type ").concat(propType.typeName || propType.name));
		    }

		    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
		      rest[_key3 - 3] = arguments[_key3];
		    }

		    return validateChildren.apply(void 0, [propType, children, props, componentName].concat(rest));
		  };

		  return (0, _wrapValidator["default"])(childrenOfPropType, 'childrenOf', propType);
		}
		
	} (childrenOf));
	return childrenOf;
}

var childrenOfType = {};

var implementation$1;
var hasRequiredImplementation$1;

function requireImplementation$1 () {
	if (hasRequiredImplementation$1) return implementation$1;
	hasRequiredImplementation$1 = 1;

	var ToObject = requireToObject();
	var ToLength = requireToLength();
	var IsCallable = requireIsCallable$1();

	implementation$1 = function find(predicate) {
		var list = ToObject(this);
		var length = ToLength(list.length);
		if (!IsCallable(predicate)) {
			throw new TypeError('Array#find: predicate must be a function');
		}
		if (length === 0) {
			return void 0;
		}
		var thisArg;
		if (arguments.length > 0) {
			thisArg = arguments[1];
		}

		for (var i = 0, value; i < length; i++) {
			value = list[i];
			// inlined for performance: if (Call(predicate, thisArg, [value, i, list])) {
			if (predicate.apply(thisArg, [value, i, list])) {
				return value;
			}
		}
		return void 0;
	};
	return implementation$1;
}

var polyfill$1;
var hasRequiredPolyfill$1;

function requirePolyfill$1 () {
	if (hasRequiredPolyfill$1) return polyfill$1;
	hasRequiredPolyfill$1 = 1;

	polyfill$1 = function getPolyfill() {
		// Detect if an implementation exists
		// Detect early implementations which skipped holes in sparse arrays
		// eslint-disable-next-line no-sparse-arrays
		var implemented = Array.prototype.find && [, 1].find(function () {
			return true;
		}) !== 1;

		// eslint-disable-next-line global-require
		return implemented ? Array.prototype.find : requireImplementation$1();
	};
	return polyfill$1;
}

var shim$1;
var hasRequiredShim$1;

function requireShim$1 () {
	if (hasRequiredShim$1) return shim$1;
	hasRequiredShim$1 = 1;

	var define = requireDefineProperties();
	var shimUnscopables = requireEsShimUnscopables();

	var getPolyfill = requirePolyfill$1();

	shim$1 = function shimArrayPrototypeFind() {
		var polyfill = getPolyfill();

		define(
			Array.prototype,
			{ find: polyfill },
			{
				find: function () { return Array.prototype.find !== polyfill; }
			}
		);

		shimUnscopables('find');

		return polyfill;
	};
	return shim$1;
}

var array_prototype_find;
var hasRequiredArray_prototype_find;

function requireArray_prototype_find () {
	if (hasRequiredArray_prototype_find) return array_prototype_find;
	hasRequiredArray_prototype_find = 1;

	var define = requireDefineProperties();
	var callBound = requireCallBound();
	var RequireObjectCoercible = requireRequireObjectCoercible();

	var implementation = requireImplementation$1();
	var getPolyfill = requirePolyfill$1();
	var shim = requireShim$1();

	var $slice = callBound('Array.prototype.slice');

	var polyfill = getPolyfill();

	var boundFindShim = function find(array, predicate) { // eslint-disable-line no-unused-vars
		RequireObjectCoercible(array);
		var args = $slice(arguments, 1);
		return polyfill.apply(array, args);
	};

	define(boundFindShim, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});

	array_prototype_find = boundFindShim;
	return array_prototype_find;
}

var hasRequiredChildrenOfType;

function requireChildrenOfType () {
	if (hasRequiredChildrenOfType) return childrenOfType;
	hasRequiredChildrenOfType = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _arrayPrototype = _interopRequireDefault(requireArray_prototype_find());

		var _getComponentName = _interopRequireDefault(requireGetComponentName());

		var _renderableChildren = _interopRequireDefault(requireRenderableChildren());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function onlyTypes(types, children, componentName) {
		  if (!children.every(function (child) {
		    return child && (0, _arrayPrototype["default"])(types, function (Type) {
		      return Type === '*' || child.type === Type;
		    });
		  })) {
		    var typeNames = types.map(_getComponentName["default"]).join(', or ');
		    return new TypeError("`".concat(componentName, "` only accepts children of type ").concat(typeNames));
		  }

		  return null;
		}

		function isRequired(types, children, componentName) {
		  if (children.length === 0) {
		    var typeNames = types.map(_getComponentName["default"]).join(', or ');
		    return new TypeError("`".concat(componentName, "` requires at least one node of type ").concat(typeNames));
		  }

		  return null;
		}

		function childrenOfType() {
		  for (var _len = arguments.length, types = new Array(_len), _key = 0; _key < _len; _key++) {
		    types[_key] = arguments[_key];
		  }

		  if (types.length < 1) {
		    throw new TypeError('childrenOfType: at least 1 type is required');
		  }

		  function validator(props, propName, componentName) {
		    return onlyTypes(types, (0, _renderableChildren["default"])(props[propName]), componentName);
		  }

		  validator.isRequired = function (props, propName, componentName) {
		    var children = (0, _renderableChildren["default"])(props[propName]);
		    return isRequired(types, children, componentName) || onlyTypes(types, children, componentName);
		  };

		  return (0, _wrapValidator["default"])(validator, 'childrenOfType', types);
		}

		var _default = childrenOfType;
		exports["default"] = _default;
		
	} (childrenOfType));
	return childrenOfType;
}

var childrenSequenceOf = {};

var sequenceOf = {};

var nonNegativeInteger = {};

var integer = {};

var isInteger = {};

var hasRequiredIsInteger;

function requireIsInteger () {
	if (hasRequiredIsInteger) return isInteger;
	hasRequiredIsInteger = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var floor = Math.floor;
		var finite = isFinite;

		var _default = Number.isInteger ||
		/* istanbul ignore next */
		function (x) {
		  return typeof x === 'number' && finite(x) && floor(x) === x;
		};

		exports["default"] = _default;
		
	} (isInteger));
	return isInteger;
}

var hasRequiredInteger;

function requireInteger () {
	if (hasRequiredInteger) return integer;
	hasRequiredInteger = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _isInteger = _interopRequireDefault(requireIsInteger());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function requiredInteger(props, propName, componentName) {
		  var propValue = props[propName];

		  if (propValue == null || !(0, _isInteger["default"])(propValue)) {
		    return new RangeError("".concat(propName, " in ").concat(componentName, " must be an integer"));
		  }

		  return null;
		}

		var validator = function integer(props, propName) {
		  var propValue = props[propName];

		  if (propValue == null) {
		    return null;
		  }

		  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
		    rest[_key - 2] = arguments[_key];
		  }

		  return requiredInteger.apply(void 0, [props, propName].concat(rest));
		};

		validator.isRequired = requiredInteger;

		var _default = function _default() {
		  return (0, _wrapValidator["default"])(validator, 'integer');
		};

		exports["default"] = _default;
		
	} (integer));
	return integer;
}

var nonNegativeNumber = {};

var hasRequiredNonNegativeNumber;

function requireNonNegativeNumber () {
	if (hasRequiredNonNegativeNumber) return nonNegativeNumber;
	hasRequiredNonNegativeNumber = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _objectIs = _interopRequireDefault(requireObjectIs());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function isNonNegative(x) {
		  return typeof x === 'number' && isFinite(x) && x >= 0 && !(0, _objectIs["default"])(x, -0);
		}

		function nonNegativeNumber(props, propName, componentName) {
		  var value = props[propName];

		  if (value == null || isNonNegative(value)) {
		    return null;
		  }

		  return new RangeError("".concat(propName, " in ").concat(componentName, " must be a non-negative number"));
		}

		function requiredNonNegativeNumber(props, propName, componentName) {
		  var value = props[propName];

		  if (isNonNegative(value)) {
		    return null;
		  }

		  return new RangeError("".concat(propName, " in ").concat(componentName, " must be a non-negative number"));
		}

		nonNegativeNumber.isRequired = requiredNonNegativeNumber;

		var _default = function _default() {
		  return (0, _wrapValidator["default"])(nonNegativeNumber, 'nonNegativeNumber');
		};

		exports["default"] = _default;
		
	} (nonNegativeNumber));
	return nonNegativeNumber;
}

var hasRequiredNonNegativeInteger;

function requireNonNegativeInteger () {
	if (hasRequiredNonNegativeInteger) return nonNegativeInteger;
	hasRequiredNonNegativeInteger = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _and = _interopRequireDefault(requireAnd());

		var _integer = _interopRequireDefault(requireInteger());

		var _nonNegativeNumber = _interopRequireDefault(requireNonNegativeNumber());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		var _default = (0, _and["default"])([(0, _integer["default"])(), (0, _nonNegativeNumber["default"])()], 'nonNegativeInteger');

		exports["default"] = _default;
		
	} (nonNegativeInteger));
	return nonNegativeInteger;
}

var object = {};

var typeOf = {};

var hasRequiredTypeOf;

function requireTypeOf () {
	if (hasRequiredTypeOf) return typeOf;
	hasRequiredTypeOf = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = typeOf;

		var _react = _interopRequireDefault(reactExports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		function typeOf(child) {
		  if (child === null) {
		    return 'null';
		  }

		  if (Array.isArray(child)) {
		    return 'array';
		  }

		  if (_typeof(child) !== 'object') {
		    return _typeof(child);
		  }

		  if ( /*#__PURE__*/_react["default"].isValidElement(child)) {
		    return child.type;
		  }

		  return child;
		}
		
	} (typeOf));
	return typeOf;
}

var hasRequiredObject;

function requireObject () {
	if (hasRequiredObject) return object;
	hasRequiredObject = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _isPlainObject = _interopRequireDefault(requireIsPlainObject());

		var _typeOf = _interopRequireDefault(requireTypeOf());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		/*
		  code adapted from https://github.com/facebook/react/blob/14156e56b9cf18ac86963185c5af4abddf3ff811/src/isomorphic/classic/types/ReactPropTypes.js#L202-L206
		  so that it can be called outside of React's normal PropType flow
		*/
		var ReactPropTypeLocationNames = {
		  prop: 'prop',
		  context: 'context',
		  childContext: 'child context'
		};

		function object(props, propName, componentName, location, propFullName) {
		  var propValue = props[propName];

		  if (propValue == null) {
		    return null;
		  }

		  if ((0, _isPlainObject["default"])(propValue)) {
		    return null;
		  }

		  var locationName = ReactPropTypeLocationNames[location] || location;
		  return new TypeError("Invalid ".concat(locationName, " `").concat(propFullName, "` of type `").concat((0, _typeOf["default"])(propValue), "` supplied to `").concat(componentName, "`, expected `object`."));
		}

		object.isRequired = function objectRequired(props, propName, componentName, location, propFullName) {
		  var propValue = props[propName];

		  if (propValue == null) {
		    var locationName = ReactPropTypeLocationNames[location] || location;
		    return new TypeError("The ".concat(locationName, " `").concat(propFullName, "` is marked as required in `").concat(componentName, "`, but its value is `").concat(propValue, "`."));
		  }

		  for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
		    rest[_key - 5] = arguments[_key];
		  }

		  return object.apply(void 0, [props, propName, componentName, location, propFullName].concat(rest));
		};

		var _default = function _default() {
		  return (0, _wrapValidator["default"])(object, 'object');
		};

		exports["default"] = _default;
		
	} (object));
	return object;
}

var withShape = {};

var hasRequiredWithShape;

function requireWithShape () {
	if (hasRequiredWithShape) return withShape;
	hasRequiredWithShape = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = withShape;

		var _and = _interopRequireDefault(requireAnd());

		var _shape = _interopRequireDefault(requireShape());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function withShape(type, shapeTypes) {
		  if (typeof type !== 'function') {
		    throw new TypeError('type must be a valid PropType');
		  }

		  var shapeValidator = (0, _shape["default"])(shapeTypes);
		  return (0, _and["default"])([type, shapeValidator], 'withShape');
		}
		
	} (withShape));
	return withShape;
}

var hasRequiredSequenceOf;

function requireSequenceOf () {
	if (hasRequiredSequenceOf) return sequenceOf;
	hasRequiredSequenceOf = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = sequenceOfValidator;

		var _propTypes = PropTypes$1;

		var _and = _interopRequireDefault(requireAnd());

		var _between = _interopRequireDefault(requireBetween());

		var _nonNegativeInteger = _interopRequireDefault(requireNonNegativeInteger());

		var _object = _interopRequireDefault(requireObject());

		var _withShape = _interopRequireDefault(requireWithShape());

		var _typeOf = _interopRequireDefault(requireTypeOf());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		var minValidator = _nonNegativeInteger["default"];
		var maxValidator = (0, _and["default"])([_nonNegativeInteger["default"], (0, _between["default"])({
		  gte: 1
		})]);

		function validateRange(min, max) {
		  if (typeof max !== 'number' || typeof min !== 'number') {
		    return null; // no additional checking needed unless both are present
		  }

		  if (min <= max) {
		    return null;
		  }

		  return new RangeError('min must be less than or equal to max');
		}

		var specifierShape = {
		  validator: function validator(props, propName) {
		    var propValue = props[propName];

		    if (typeof propValue !== 'function') {
		      return new TypeError('"validator" must be a propType validator function');
		    }

		    return null;
		  },
		  min: function min(props, propName) {
		    return minValidator(props, propName) || validateRange(props.min, props.max);
		  },
		  max: function max(props, propName) {
		    return maxValidator(props, propName) || validateRange(props.min, props.max);
		  }
		};

		function getMinMax(_ref) {
		  var min = _ref.min,
		      max = _ref.max;
		  var minimum;
		  var maximum;

		  if (typeof min !== 'number' && typeof max !== 'number') {
		    // neither provided, default to "1"
		    minimum = 1;
		    maximum = 1;
		  } else {
		    minimum = typeof min === 'number' ? min : 1;
		    maximum = typeof max === 'number' ? max : Infinity;
		  }

		  return {
		    minimum: minimum,
		    maximum: maximum
		  };
		}

		function chunkByType(items) {
		  var chunk = [];
		  var lastType;
		  return items.reduce(function (chunks, item) {
		    var itemType = (0, _typeOf["default"])(item);

		    if (!lastType || itemType === lastType) {
		      chunk.push(item);
		    } else {
		      chunks.push(chunk);
		      chunk = [item];
		    }

		    lastType = itemType;
		    return chunks;
		  }, []).concat(chunk.length > 0 ? [chunk] : []);
		}

		function validateChunks(specifiers, props, propName, componentName) {
		  var items = props[propName];
		  var chunks = chunkByType(items);

		  for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
		    rest[_key - 4] = arguments[_key];
		  }

		  for (var i = 0; i < specifiers.length; i += 1) {
		    var _specifiers$i = specifiers[i],
		        validator = _specifiers$i.validator,
		        min = _specifiers$i.min,
		        max = _specifiers$i.max;

		    var _getMinMax = getMinMax({
		      min: min,
		      max: max
		    }),
		        minimum = _getMinMax.minimum,
		        maximum = _getMinMax.maximum;

		    if (chunks.length === 0 && minimum === 0) {
		      // no chunks left, but this specifier does not require any items
		      continue; // eslint-disable-line no-continue
		    }

		    var arrayOfValidator = (0, _propTypes.arrayOf)(validator).isRequired;
		    var chunk = chunks.shift(); // extract the next chunk to test

		    var chunkError = arrayOfValidator.apply(void 0, [_objectSpread(_objectSpread({}, props), {}, _defineProperty({}, propName, chunk)), propName, componentName].concat(rest));

		    if (chunkError) {
		      // this chunk is invalid
		      if (minimum === 0) {
		        // but, specifier has a min of 0 and can be skipped
		        chunks.unshift(chunk); // put the chunk back, for the next iteration

		        continue; // eslint-disable-line no-continue
		      }

		      return chunkError;
		    } // chunk is valid!


		    if (chunk.length < minimum) {
		      return new RangeError("".concat(componentName, ": specifier index ").concat(i, " requires a minimum of ").concat(min, " items, but only has ").concat(chunk.length, "."));
		    }

		    if (chunk.length > maximum) {
		      return new RangeError("".concat(componentName, ": specifier index ").concat(i, " requires a maximum of ").concat(max, " items, but has ").concat(chunk.length, "."));
		    }
		  }

		  if (chunks.length > 0) {
		    return new TypeError("".concat(componentName, ": after all ").concat(specifiers.length, " specifiers matched, ").concat(chunks.length, " types of items were remaining."));
		  }

		  return null;
		}

		var specifierValidator = (0, _withShape["default"])((0, _object["default"])(), specifierShape).isRequired;

		function sequenceOfValidator() {
		  for (var _len2 = arguments.length, specifiers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		    specifiers[_key2] = arguments[_key2];
		  }

		  if (specifiers.length === 0) {
		    throw new RangeError('sequenceOf: at least one specifier is required');
		  }

		  var errors = specifiers.map(function (specifier, i) {
		    return specifierValidator({
		      specifier: specifier
		    }, 'specifier', 'sequenceOf specifier', "suequenceOf specifier, index ".concat(i), "specifier, index ".concat(i));
		  });

		  if (errors.some(Boolean)) {
		    throw new TypeError("\n      sequenceOf: all specifiers must match the appropriate shape.\n\n      Errors:\n        ".concat(errors.map(function (e, i) {
		      return " - Argument index ".concat(i, ": ").concat(e.message);
		    }).join(',\n        '), "\n    "));
		  }

		  var validator = function sequenceOf(props, propName) {
		    var propValue = props[propName];

		    if (propValue == null) {
		      return null;
		    }

		    for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
		      rest[_key3 - 2] = arguments[_key3];
		    }

		    var error = _propTypes.array.apply(void 0, [props, propName].concat(rest));

		    if (error) {
		      return error;
		    }

		    return validateChunks.apply(void 0, [specifiers, props, propName].concat(rest));
		  };

		  validator.isRequired = function sequenceOfRequired(props, propName, componentName) {
		    for (var _len4 = arguments.length, rest = new Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {
		      rest[_key4 - 3] = arguments[_key4];
		    }

		    var error = _propTypes.array.isRequired.apply(_propTypes.array, [props, propName, componentName].concat(rest));

		    if (error) {
		      return error;
		    }

		    return validateChunks.apply(void 0, [specifiers, props, propName, componentName].concat(rest));
		  };

		  return (0, _wrapValidator["default"])(validator, 'sequenceOf', specifiers);
		}
		
	} (sequenceOf));
	return sequenceOf;
}

var hasRequiredChildrenSequenceOf;

function requireChildrenSequenceOf () {
	if (hasRequiredChildrenSequenceOf) return childrenSequenceOf;
	hasRequiredChildrenSequenceOf = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = childrenSequenceOfValidator;

		var _sequenceOf = _interopRequireDefault(requireSequenceOf());

		var _renderableChildren = _interopRequireDefault(requireRenderableChildren());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		function childrenSequenceOfValidator() {
		  for (var _len = arguments.length, specifiers = new Array(_len), _key = 0; _key < _len; _key++) {
		    specifiers[_key] = arguments[_key];
		  }

		  var seq = _sequenceOf["default"].apply(void 0, specifiers);

		  var validator = function childrenSequenceOf(props, propName, componentName) {
		    if (propName !== 'children') {
		      return new TypeError("".concat(componentName, " is using the childrenSequenceOf validator on non-children prop \"").concat(propName, "\""));
		    }

		    var propValue = props[propName];
		    var children = (0, _renderableChildren["default"])(propValue);

		    if (children.length === 0) {
		      return null;
		    }

		    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
		      rest[_key2 - 3] = arguments[_key2];
		    }

		    return seq.apply(void 0, [_objectSpread(_objectSpread({}, props), {}, {
		      children: children
		    }), propName, componentName].concat(rest));
		  };

		  validator.isRequired = function childrenSequenceOfRequired(props, propName, componentName) {
		    if (propName !== 'children') {
		      return new TypeError("".concat(componentName, " is using the childrenSequenceOf validator on non-children prop \"").concat(propName, "\""));
		    }

		    var propValue = props[propName];
		    var children = (0, _renderableChildren["default"])(propValue);

		    if (children.length === 0) {
		      return new TypeError("".concat(componentName, ": renderable children are required."));
		    }

		    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
		      rest[_key3 - 3] = arguments[_key3];
		    }

		    return seq.isRequired.apply(seq, [_objectSpread(_objectSpread({}, props), {}, {
		      children: children
		    }), propName, componentName].concat(rest));
		  };

		  return (0, _wrapValidator["default"])(validator, 'childrenSequenceOf', specifiers);
		}
		
	} (childrenSequenceOf));
	return childrenSequenceOf;
}

var componentWithName = {};

var hasRequiredComponentWithName;

function requireComponentWithName () {
	if (hasRequiredComponentWithName) return componentWithName;
	hasRequiredComponentWithName = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = componentWithName;

		var _react = _interopRequireDefault(reactExports);

		var _isRegex = _interopRequireDefault(requireIsRegex());

		var _arrayPrototype = _interopRequireDefault(requireArray_prototype_find());

		var _getComponentName = _interopRequireDefault(requireGetComponentName());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function stripHOCs(fullName, namesOfHOCsToStrip) {
		  var innerName = fullName;

		  while (/\([^()]*\)/g.test(innerName)) {
		    var HOC = innerName;
		    var previousHOC = void 0;

		    do {
		      previousHOC = HOC;
		      HOC = previousHOC.replace(/\([^()]*\)/g, '');
		    } while (previousHOC !== HOC);

		    if (namesOfHOCsToStrip.indexOf(HOC) === -1) {
		      return innerName;
		    }

		    innerName = innerName.replace(RegExp("^".concat(HOC, "\\(|\\)$"), 'g'), '');
		  }

		  return innerName;
		}

		function hasName(name, namesOfHOCsToStrip, propValue, propName, componentName) {
		  for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
		    rest[_key - 5] = arguments[_key];
		  }

		  if (Array.isArray(propValue)) {
		    return (0, _arrayPrototype["default"])(propValue.map(function (item) {
		      return hasName.apply(void 0, [name, namesOfHOCsToStrip, item, propName, componentName].concat(rest));
		    }), Boolean) || null;
		  }

		  if (! /*#__PURE__*/_react["default"].isValidElement(propValue)) {
		    return new TypeError("".concat(componentName, ".").concat(propName, " is not a valid React element"));
		  }

		  var type = propValue.type;
		  var componentNameFromType = (0, _getComponentName["default"])(type);
		  var innerComponentName = namesOfHOCsToStrip.length > 0 ? stripHOCs(componentNameFromType, namesOfHOCsToStrip) : componentNameFromType;

		  if ((0, _isRegex["default"])(name) && !name.test(innerComponentName)) {
		    return new TypeError("`".concat(componentName, ".").concat(propName, "` only accepts components matching the regular expression ").concat(name));
		  }

		  if (!(0, _isRegex["default"])(name) && innerComponentName !== name) {
		    return new TypeError("`".concat(componentName, ".").concat(propName, "` only accepts components named ").concat(name, ", got ").concat(innerComponentName));
		  }

		  return null;
		}

		function componentWithName(name) {
		  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		  if (typeof name !== 'string' && !(0, _isRegex["default"])(name)) {
		    throw new TypeError('name must be a string or a regex');
		  }

		  var passedOptions = Object.keys(options);

		  if (passedOptions.length > 1 || passedOptions.length === 1 && passedOptions[0] !== 'stripHOCs') {
		    throw new TypeError("The only options supported are: \u201CstripHOCs\u201D, got: \u201C".concat(passedOptions.join('”, “'), "\u201D"));
		  }

		  var _options$stripHOCs = options.stripHOCs,
		      namesOfHOCsToStrip = _options$stripHOCs === void 0 ? [] : _options$stripHOCs;
		  var allHOCNamesAreValid = namesOfHOCsToStrip.every(function (x) {
		    if (typeof x !== 'string' || /[()]/g.test(x)) {
		      return false;
		    }

		    return /^(?:[a-z][a-zA-Z0-9]+|[A-Z][a-z][a-zA-Z0-9]+)$/.test(x);
		  });

		  if (!allHOCNamesAreValid) {
		    throw new TypeError('every provided HOC name must be a string with no parens, and in camelCase');
		  }

		  function componentWithNameValidator(props, propName, componentName) {
		    var propValue = props[propName];

		    if (props[propName] == null) {
		      return null;
		    }

		    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
		      rest[_key2 - 3] = arguments[_key2];
		    }

		    return hasName.apply(void 0, [name, namesOfHOCsToStrip, propValue, propName, componentName].concat(rest));
		  }

		  componentWithNameValidator.isRequired = function componentWithNameRequired(props, propName, componentName) {
		    var propValue = props[propName];

		    if (propValue == null) {
		      return new TypeError("`".concat(componentName, ".").concat(propName, "` requires at least one component named ").concat(name));
		    }

		    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
		      rest[_key3 - 3] = arguments[_key3];
		    }

		    return hasName.apply(void 0, [name, namesOfHOCsToStrip, propValue, propName, componentName].concat(rest));
		  };

		  return (0, _wrapValidator["default"])(componentWithNameValidator, "componentWithName:".concat(name), name);
		}
		
	} (componentWithName));
	return componentWithName;
}

var disallowedIf = {};

var hasRequiredDisallowedIf;

function requireDisallowedIf () {
	if (hasRequiredDisallowedIf) return disallowedIf;
	hasRequiredDisallowedIf = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = disallowedIf;

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function disallowedIf(propType, otherPropName, otherPropType) {
		  if (typeof propType !== 'function' || typeof propType.isRequired !== 'function') {
		    throw new TypeError('a propType validator is required; propType validators must also provide `.isRequired`');
		  }

		  if (typeof otherPropName !== 'string') {
		    throw new TypeError('other prop name must be a string');
		  }

		  if (typeof otherPropType !== 'function') {
		    throw new TypeError('other prop type validator is required');
		  }

		  function disallowedIfRequired(props, propName, componentName) {
		    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
		      rest[_key - 3] = arguments[_key];
		    }

		    var error = propType.isRequired.apply(propType, [props, propName, componentName].concat(rest));

		    if (error) {
		      return error;
		    }

		    if (props[otherPropName] == null) {
		      return null;
		    }

		    var otherError = otherPropType.apply(void 0, [props, otherPropName, componentName].concat(rest));

		    if (otherError) {
		      return null;
		    }

		    return new Error("prop \u201C".concat(propName, "\u201D is disallowed when \u201C").concat(otherPropName, "\u201D matches the provided validator"));
		  }

		  var validator = function disallowedIfPropType(props, propName) {
		    if (props[propName] == null) {
		      return null;
		    }

		    for (var _len2 = arguments.length, rest = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
		      rest[_key2 - 2] = arguments[_key2];
		    }

		    return disallowedIfRequired.apply(void 0, [props, propName].concat(rest));
		  };

		  validator.isRequired = disallowedIfRequired;
		  return (0, _wrapValidator["default"])(validator, 'disallowedIf', {
		    propType: propType,
		    otherPropName: otherPropName,
		    otherPropType: otherPropType
		  });
		}
		
	} (disallowedIf));
	return disallowedIf;
}

var elementType = {};

var hasRequiredElementType;

function requireElementType () {
	if (hasRequiredElementType) return elementType;
	hasRequiredElementType = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = elementTypeValidator;

		var _propTypes = PropTypes$1;

		var _reactIs = requireReactIs();

		var _and = _interopRequireDefault(requireAnd());

		var _getComponentName = _interopRequireDefault(requireGetComponentName());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		function getTypeName(Type) {
		  if (typeof Type === 'string') {
		    return Type;
		  }

		  var type = (0, _getComponentName["default"])(Type);
		  /* istanbul ignore next */
		  // in environments where functions do not have names

		  return type || 'Anonymous Component';
		}

		function validateElementType(Type, props, propName, componentName) {
		  var type = props[propName].type;

		  if (type === Type) {
		    return null;
		  }

		  return new TypeError("".concat(componentName, ".").concat(propName, " must be a React element of type ").concat(getTypeName(Type)));
		}

		function elementTypeValidator(Type) {
		  if (Type === '*') {
		    return (0, _wrapValidator["default"])(_propTypes.element, 'elementType(*)', Type);
		  }

		  if (!(0, _reactIs.isValidElementType)(Type)) {
		    throw new TypeError("Type must be a React Component, an HTML element tag name, or \"*\". Got an ".concat(_typeof(Type)));
		  }

		  function elementType(props, propName, componentName) {
		    if (props[propName] == null) {
		      return null;
		    }

		    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
		      rest[_key - 3] = arguments[_key];
		    }

		    return validateElementType.apply(void 0, [Type, props, propName, componentName].concat(rest));
		  }

		  elementType.isRequired = elementType; // covered by and + element

		  var typeName = getTypeName(Type);
		  var validatorName = "elementType(".concat(typeName, ")");
		  return (0, _wrapValidator["default"])((0, _and["default"])([_propTypes.element, elementType], validatorName), validatorName, Type);
		}
		
	} (elementType));
	return elementType;
}

var empty = {};

var or = {};

var hasRequiredOr;

function requireOr () {
	if (hasRequiredOr) return or;
	hasRequiredOr = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = or;

		var _propTypes = PropTypes$1;

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

		function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

		function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

		function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		function oneOfTypeValidator(validators) {
		  var validator = function oneOfType(props, propName, componentName) {
		    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
		      rest[_key - 3] = arguments[_key];
		    }

		    var propValue = props[propName];

		    if (typeof propValue === 'undefined') {
		      return null;
		    }

		    var errors = validators.map(function (v) {
		      return v.apply(void 0, [props, propName, componentName].concat(rest));
		    }).filter(Boolean);

		    if (errors.length < validators.length) {
		      return null;
		    }

		    return new TypeError("".concat(componentName, ": invalid value supplied to ").concat(propName, "."));
		  };

		  validator.isRequired = function oneOfTypeRequired(props, propName, componentName) {
		    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
		      rest[_key2 - 3] = arguments[_key2];
		    }

		    var propValue = props[propName];

		    if (typeof propValue === 'undefined') {
		      return new TypeError("".concat(componentName, ": missing value for required ").concat(propName, "."));
		    }

		    var errors = validators.map(function (v) {
		      return v.apply(void 0, [props, propName, componentName].concat(rest));
		    }).filter(Boolean);

		    if (errors.length === validators.length) {
		      return new TypeError("".concat(componentName, ": invalid value ").concat(errors, " supplied to required ").concat(propName, "."));
		    }

		    return null;
		  };

		  return (0, _wrapValidator["default"])(validator, 'oneOfType', validators);
		}

		function or(validators) {
		  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'or';

		  if (!Array.isArray(validators)) {
		    throw new TypeError('or: 2 or more validators are required');
		  }

		  if (validators.length <= 1) {
		    throw new RangeError('or: 2 or more validators are required');
		  }

		  var validator = oneOfTypeValidator([(0, _propTypes.arrayOf)(oneOfTypeValidator(validators))].concat(_toConsumableArray(validators)));
		  return (0, _wrapValidator["default"])(validator, name, validators);
		}
		
	} (or));
	return or;
}

var explicitNull = {};

var hasRequiredExplicitNull;

function requireExplicitNull () {
	if (hasRequiredExplicitNull) return explicitNull;
	hasRequiredExplicitNull = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		function explicitNull(props, propName, componentName) {
		  if (props[propName] == null) {
		    return null;
		  }

		  return new TypeError("".concat(componentName, ": prop \u201C").concat(propName, "\u201D must be null or undefined; received ").concat(_typeof(props[propName])));
		}

		explicitNull.isRequired = function explicitNullRequired(props, propName, componentName) {
		  if (props[propName] === null) {
		    return null;
		  }

		  return new TypeError("".concat(componentName, ": prop \u201C").concat(propName, "\u201D must be null; received ").concat(_typeof(props[propName])));
		};

		var _default = function _default() {
		  return (0, _wrapValidator["default"])(explicitNull, 'explicitNull');
		};

		exports["default"] = _default;
		
	} (explicitNull));
	return explicitNull;
}

var hasRequiredEmpty;

function requireEmpty () {
	if (hasRequiredEmpty) return empty;
	hasRequiredEmpty = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _propTypes = PropTypes$1;

		var _or = _interopRequireDefault(requireOr());

		var _explicitNull = _interopRequireDefault(requireExplicitNull());

		var _withShape = _interopRequireDefault(requireWithShape());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		var arrayOfValidator;
		var validator = (0, _or["default"])([_explicitNull["default"], // null/undefined
		(0, _propTypes.oneOf)([false, '', NaN]), (0, _withShape["default"])(_propTypes.array, {
		  length: (0, _propTypes.oneOf)([0]).isRequired
		}).isRequired, function () {
		  return arrayOfValidator.apply(void 0, arguments);
		}]);
		arrayOfValidator = (0, _propTypes.arrayOf)(validator).isRequired;

		var _default = function _default() {
		  return (0, _wrapValidator["default"])(validator, 'empty');
		};

		exports["default"] = _default;
		
	} (empty));
	return empty;
}

var keysOf = {};

var hasRequiredKeysOf;

function requireKeysOf () {
	if (hasRequiredKeysOf) return keysOf;
	hasRequiredKeysOf = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = keysOfValidator;

		var _isPrimitive = _interopRequireDefault(requireIsPrimitive());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		function keysOfValidator(propType) {
		  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'keysOf';

		  if (typeof propType !== 'function') {
		    throw new TypeError('argument to keysOf must be a valid PropType function');
		  }

		  var validator = function keysOf(props, propName, componentName, location, propFullName) {
		    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
		      rest[_key - 5] = arguments[_key];
		    }

		    var propValue = props[propName];

		    if (propValue == null || (0, _isPrimitive["default"])(propValue)) {
		      return null;
		    }

		    var firstError = null;
		    Object.keys(propValue).some(function (key) {
		      firstError = propType.apply(void 0, [_defineProperty({}, key, key), key, componentName, location, "(".concat(propFullName, ").").concat(key)].concat(rest));
		      return firstError != null;
		    });
		    return firstError || null;
		  };

		  validator.isRequired = function keyedByRequired(props, propName, componentName) {
		    var propValue = props[propName];

		    if (propValue == null) {
		      return new TypeError("".concat(componentName, ": ").concat(propName, " is required, but value is ").concat(propValue));
		    }

		    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
		      rest[_key2 - 3] = arguments[_key2];
		    }

		    return validator.apply(void 0, [props, propName, componentName].concat(rest));
		  };

		  return (0, _wrapValidator["default"])(validator, name, propType);
		}
		
	} (keysOf));
	return keysOf;
}

var mutuallyExclusiveProps = {};

var hasRequiredMutuallyExclusiveProps;

function requireMutuallyExclusiveProps () {
	if (hasRequiredMutuallyExclusiveProps) return mutuallyExclusiveProps;
	hasRequiredMutuallyExclusiveProps = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = mutuallyExclusiveOfType;

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		function mutuallyExclusiveOfType(propType) {
		  if (typeof propType !== 'function') {
		    throw new TypeError('a propType is required');
		  }

		  for (var _len = arguments.length, exclusiveProps = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		    exclusiveProps[_key - 1] = arguments[_key];
		  }

		  if (exclusiveProps.length < 1) {
		    throw new TypeError('at least one prop that is mutually exclusive with this propType is required');
		  }

		  var propList = exclusiveProps.join(', or ');
		  var map = exclusiveProps.reduce(function (acc, prop) {
		    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, prop, true));
		  }, {});

		  var countProps = function countProps(count, prop) {
		    return count + (map[prop] ? 1 : 0);
		  };

		  var validator = function mutuallyExclusiveProps(props, propName, componentName) {
		    var exclusivePropCount = Object.keys(props).filter(function (prop) {
		      return props[prop] != null;
		    }).reduce(countProps, 0);

		    if (exclusivePropCount > 1) {
		      return new Error("A ".concat(componentName, " cannot have more than one of these props: ").concat(propList));
		    }

		    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
		      rest[_key2 - 3] = arguments[_key2];
		    }

		    return propType.apply(void 0, [props, propName, componentName].concat(rest));
		  };

		  validator.isRequired = function mutuallyExclusivePropsRequired(props, propName, componentName) {
		    var exclusivePropCount = Object.keys(props).filter(function (prop) {
		      return prop === propName || props[prop] != null;
		    }).reduce(countProps, 0);

		    if (exclusivePropCount > 1) {
		      return new Error("A ".concat(componentName, " cannot have more than one of these props: ").concat(propList));
		    }

		    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
		      rest[_key3 - 3] = arguments[_key3];
		    }

		    return propType.apply(void 0, [props, propName, componentName].concat(rest));
		  };

		  return (0, _wrapValidator["default"])(validator, "mutuallyExclusiveProps:".concat(propList), exclusiveProps);
		}
		
	} (mutuallyExclusiveProps));
	return mutuallyExclusiveProps;
}

var mutuallyExclusiveTrueProps = {};

var hasRequiredMutuallyExclusiveTrueProps;

function requireMutuallyExclusiveTrueProps () {
	if (hasRequiredMutuallyExclusiveTrueProps) return mutuallyExclusiveTrueProps;
	hasRequiredMutuallyExclusiveTrueProps = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = mutuallyExclusiveTrue;

		var _propTypes = PropTypes$1;

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function mutuallyExclusiveTrue() {
		  for (var _len = arguments.length, exclusiveProps = new Array(_len), _key = 0; _key < _len; _key++) {
		    exclusiveProps[_key] = arguments[_key];
		  }

		  if (exclusiveProps.length < 1) {
		    throw new TypeError('at least one prop that is mutually exclusive is required');
		  }

		  if (!exclusiveProps.every(function (x) {
		    return typeof x === 'string';
		  })) {
		    throw new TypeError('all exclusive true props must be strings');
		  }

		  var propsList = exclusiveProps.join(', or ');

		  var validator = function mutuallyExclusiveTrueProps(props, propName, componentName) {
		    var countProps = function countProps(count, prop) {
		      return count + (props[prop] ? 1 : 0);
		    };

		    var exclusivePropCount = exclusiveProps.reduce(countProps, 0);

		    if (exclusivePropCount > 1) {
		      return new Error("A ".concat(componentName, " cannot have more than one of these boolean props be true: ").concat(propsList));
		    }

		    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
		      rest[_key2 - 3] = arguments[_key2];
		    }

		    return _propTypes.bool.apply(void 0, [props, propName, componentName].concat(rest));
		  };

		  validator.isRequired = function mutuallyExclusiveTruePropsRequired(props, propName, componentName) {
		    var countProps = function countProps(count, prop) {
		      return count + (props[prop] ? 1 : 0);
		    };

		    var exclusivePropCount = exclusiveProps.reduce(countProps, 0);

		    if (exclusivePropCount > 1) {
		      return new Error("A ".concat(componentName, " cannot have more than one of these boolean props be true: ").concat(propsList));
		    }

		    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
		      rest[_key3 - 3] = arguments[_key3];
		    }

		    return _propTypes.bool.isRequired.apply(_propTypes.bool, [props, propName, componentName].concat(rest));
		  };

		  return (0, _wrapValidator["default"])(validator, "mutuallyExclusiveTrueProps: ".concat(propsList), exclusiveProps);
		}
		
	} (mutuallyExclusiveTrueProps));
	return mutuallyExclusiveTrueProps;
}

var nChildren = {};

var hasRequiredNChildren;

function requireNChildren () {
	if (hasRequiredNChildren) return nChildren;
	hasRequiredNChildren = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = nChildren;

		var _react = _interopRequireDefault(reactExports);

		var _propTypes = PropTypes$1;

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function nChildren(n) {
		  var propType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _propTypes.node;

		  if (typeof n !== 'number' || isNaN(n) || n < 0) {
		    throw new TypeError('a non-negative number is required');
		  }

		  var validator = function nChildrenValidator(props, propName, componentName) {
		    if (propName !== 'children') {
		      return new TypeError("".concat(componentName, " is using the nChildren validator on a non-children prop"));
		    }

		    var children = props.children;

		    var childrenCount = _react["default"].Children.count(children);

		    if (childrenCount !== n) {
		      return new RangeError("".concat(componentName, " expects to receive ").concat(n, " children, but received ").concat(childrenCount, " children."));
		    }

		    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
		      rest[_key - 3] = arguments[_key];
		    }

		    return propType.apply(void 0, [props, propName, componentName].concat(rest));
		  };

		  validator.isRequired = validator;
		  return (0, _wrapValidator["default"])(validator, "nChildren:".concat(n), n);
		}
		
	} (nChildren));
	return nChildren;
}

var numericString = {};

var hasRequiredNumericString;

function requireNumericString () {
	if (hasRequiredNumericString) return numericString;
	hasRequiredNumericString = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _propTypes = PropTypes$1;

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		var validNumericChars = /^[-+]?(?:[1-9][0-9]*(?:\.[0-9]+)?|0|0\.[0-9]+)$/;

		var validator = function numericString(props, propName, componentName) {
		  if (props[propName] == null) {
		    return null;
		  }

		  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
		    rest[_key - 3] = arguments[_key];
		  }

		  var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));

		  if (stringError) {
		    return stringError;
		  }

		  var value = props[propName];
		  var passesRegex = validNumericChars.test(value);

		  if (passesRegex) {
		    return null;
		  }

		  return new TypeError("".concat(componentName, ": prop \"").concat(propName, "\" (value \"").concat(value, "\") must be a numeric string:\n    - starting with an optional + or -\n    - that does not have a leading zero\n    - with an optional decimal part (that contains only one decimal point, if present)\n    - that otherwise only contains digits (0-9)\n    - not +-NaN, or +-Infinity\n  "));
		};

		validator.isRequired = function numericStringRequired(props, propName, componentName) {
		  if (props[propName] == null) {
		    return new TypeError("".concat(componentName, ": ").concat(propName, " is required"));
		  }

		  for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
		    rest[_key2 - 3] = arguments[_key2];
		  }

		  return validator.apply(void 0, [props, propName, componentName].concat(rest));
		};

		var _default = function _default() {
		  return (0, _wrapValidator["default"])(validator, 'numericString');
		};

		exports["default"] = _default;
		
	} (numericString));
	return numericString;
}

var predicate = {};

var hasRequiredPredicate;

function requirePredicate () {
	if (hasRequiredPredicate) return predicate;
	hasRequiredPredicate = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = predicate;

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function predicate(fn) {
		  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

		  if (typeof fn !== 'function') {
		    throw new TypeError('`fn` must be a function');
		  }

		  if (typeof message !== 'string') {
		    throw new TypeError('`message`, if provided, must be a string');
		  }

		  function requiredValidator(props, propName, componentName) {
		    var result = fn(props[propName]);

		    if (result) {
		      return null;
		    }

		    return new TypeError("`".concat(componentName, "` requires that `").concat(propName, "` pass a predicate function").concat(message ? ": ".concat(message) : '', "."));
		  }

		  function validator(props, propName) {
		    if (props[propName] == null) {
		      return null;
		    }

		    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
		      rest[_key - 2] = arguments[_key];
		    }

		    return requiredValidator.apply(void 0, [props, propName].concat(rest));
		  }

		  validator.isRequired = requiredValidator;
		  return (0, _wrapValidator["default"])(validator, 'predicate', fn);
		}
		
	} (predicate));
	return predicate;
}

var range = {};

var hasRequiredRange;

function requireRange () {
	if (hasRequiredRange) return range;
	hasRequiredRange = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = range;

		var _and = _interopRequireDefault(requireAnd());

		var _between = _interopRequireDefault(requireBetween());

		var _integer = _interopRequireDefault(requireInteger());

		var _isInteger = _interopRequireDefault(requireIsInteger());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
		/* istanbul ignore next */
		Math.pow(2, 53) - 1;

		function isValidLength(x) {
		  return (0, _isInteger["default"])(x) && Math.abs(x) < MAX_SAFE_INTEGER;
		}

		function range(min, max) {
		  if (!isValidLength(min) || !isValidLength(max)) {
		    throw new RangeError("\"range\" requires two integers: ".concat(min, " and ").concat(max, " given"));
		  }

		  if (min === max) {
		    throw new RangeError('min and max must not be the same');
		  }

		  return (0, _wrapValidator["default"])((0, _and["default"])([(0, _integer["default"])(), (0, _between["default"])({
		    gte: min,
		    lt: max
		  })], 'range'), 'range', {
		    min: min,
		    max: max
		  });
		}
		
	} (range));
	return range;
}

var requiredBy = {};

var hasRequiredRequiredBy;

function requireRequiredBy () {
	if (hasRequiredRequiredBy) return requiredBy;
	hasRequiredRequiredBy = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getRequiredBy;

		var _objectIs = _interopRequireDefault(requireObjectIs());

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function getRequiredBy(requiredByPropName, propType) {
		  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

		  function requiredBy(props, propName, componentName) {
		    if (props[requiredByPropName]) {
		      var propValue = props[propName];

		      if ((0, _objectIs["default"])(propValue, defaultValue) || typeof propValue === 'undefined') {
		        return new TypeError("".concat(componentName, ": when ").concat(requiredByPropName, " is true, prop \u201C").concat(propName, "\u201D must be present."));
		      }
		    }

		    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
		      rest[_key - 3] = arguments[_key];
		    }

		    return propType.apply(void 0, [props, propName, componentName].concat(rest));
		  }

		  requiredBy.isRequired = function requiredByRequired(props, propName, componentName) {
		    var propValue = props[propName];

		    if ((0, _objectIs["default"])(propValue, defaultValue)) {
		      return new TypeError("".concat(componentName, ": prop \u201C").concat(propName, "\u201D must be present."));
		    }

		    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
		      rest[_key2 - 3] = arguments[_key2];
		    }

		    return propType.isRequired.apply(propType, [props, propName, componentName].concat(rest));
		  };

		  return (0, _wrapValidator["default"])(requiredBy, "requiredBy \u201C".concat(requiredByPropName, "\u201D"), [requiredByPropName, defaultValue]);
		}
		
	} (requiredBy));
	return requiredBy;
}

var restrictedProp = {};

var hasRequiredRestrictedProp;

function requireRestrictedProp () {
	if (hasRequiredRestrictedProp) return restrictedProp;
	hasRequiredRestrictedProp = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function customMessageWrapper(messsageFunction) {
		  function restrictedProp(props, propName, componentName, location) {
		    if (props[propName] == null) {
		      return null;
		    }

		    if (messsageFunction && typeof messsageFunction === 'function') {
		      for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
		        rest[_key - 4] = arguments[_key];
		      }

		      return new TypeError(messsageFunction.apply(void 0, [props, propName, componentName, location].concat(rest)));
		    }

		    return new TypeError("The ".concat(propName, " ").concat(location, " on ").concat(componentName, " is not allowed."));
		  }

		  restrictedProp.isRequired = restrictedProp;
		  return restrictedProp;
		}

		var _default = function _default() {
		  var messsageFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		  return (0, _wrapValidator["default"])(customMessageWrapper(messsageFunction), 'restrictedProp');
		};

		exports["default"] = _default;
		
	} (restrictedProp));
	return restrictedProp;
}

var stringEndsWith = {};

var hasRequiredStringEndsWith;

function requireStringEndsWith () {
	if (hasRequiredStringEndsWith) return stringEndsWith;
	hasRequiredStringEndsWith = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = stringEndsWithValidator;

		var _propTypes = PropTypes$1;

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function stringEndsWithValidator(end) {
		  if (typeof end !== 'string' || end.length === 0) {
		    throw new TypeError('a non-empty string is required');
		  }

		  var validator = function stringEndsWith(props, propName, componentName) {
		    var propValue = props[propName];

		    if (propValue == null) {
		      return null;
		    }

		    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
		      rest[_key - 3] = arguments[_key];
		    }

		    var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));

		    if (stringError) {
		      return stringError;
		    }

		    if (!propValue.endsWith(end) || propValue.length <= end.length) {
		      return new TypeError("".concat(componentName, ": ").concat(propName, " does not end with \"").concat(end, "\""));
		    }

		    return null;
		  };

		  validator.isRequired = function requiredStringEndsWith() {
		    var stringError = _propTypes.string.isRequired.apply(_propTypes.string, arguments);

		    if (stringError) {
		      return stringError;
		    }

		    return validator.apply(void 0, arguments);
		  };

		  return (0, _wrapValidator["default"])(validator, "stringEndsWith: ".concat(end));
		}
		
	} (stringEndsWith));
	return stringEndsWith;
}

var stringStartsWith = {};

var hasRequiredStringStartsWith;

function requireStringStartsWith () {
	if (hasRequiredStringStartsWith) return stringStartsWith;
	hasRequiredStringStartsWith = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = stringStartsWithValidator;

		var _propTypes = PropTypes$1;

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function stringStartsWithValidator(start) {
		  if (typeof start !== 'string' || start.length === 0) {
		    throw new TypeError('a non-empty string is required');
		  }

		  var validator = function stringStartsWith(props, propName, componentName) {
		    var propValue = props[propName];

		    if (propValue == null) {
		      return null;
		    }

		    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
		      rest[_key - 3] = arguments[_key];
		    }

		    var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));

		    if (stringError) {
		      return stringError;
		    }

		    if (!propValue.startsWith(start) || propValue.length <= start.length) {
		      return new TypeError("".concat(componentName, ": ").concat(propName, " does not start with \"").concat(start, "\""));
		    }

		    return null;
		  };

		  validator.isRequired = function requiredStringStartsWith() {
		    var stringError = _propTypes.string.isRequired.apply(_propTypes.string, arguments);

		    if (stringError) {
		      return stringError;
		    }

		    return validator.apply(void 0, arguments);
		  };

		  return (0, _wrapValidator["default"])(validator, "stringStartsWith: ".concat(start));
		}
		
	} (stringStartsWith));
	return stringStartsWith;
}

var uniqueArray = {};

var hasRequiredUniqueArray;

function requireUniqueArray () {
	if (hasRequiredUniqueArray) return uniqueArray;
	hasRequiredUniqueArray = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _propTypes = PropTypes$1;

		var _wrapValidator = _interopRequireDefault(requireWrapValidator());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function uniqueCountWithSet(arr) {
		  return new Set(arr).size;
		}
		/* istanbul ignore next */


		function uniqueCountLegacy(arr) {
		  var seen = [];
		  arr.forEach(function (item) {
		    if (seen.indexOf(item) === -1) {
		      seen.push(item);
		    }
		  });
		  return seen.length;
		}

		var getUniqueCount = typeof Set === 'function' ? uniqueCountWithSet :
		/* istanbul ignore next */
		uniqueCountLegacy;

		function requiredUniqueArray(props, propName, componentName) {
		  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
		    rest[_key - 3] = arguments[_key];
		  }

		  var result = _propTypes.array.isRequired.apply(_propTypes.array, [props, propName, componentName].concat(rest));

		  if (result != null) {
		    return result;
		  }

		  var propValue = props[propName];
		  var uniqueCount = getUniqueCount(propValue);

		  if (uniqueCount !== propValue.length) {
		    return new RangeError("".concat(componentName, ": values must be unique. ").concat(propValue.length - uniqueCount, " duplicate values found."));
		  }

		  return null;
		}

		function uniqueArray(props, propName) {
		  var propValue = props[propName];

		  if (propValue == null) {
		    return null;
		  }

		  for (var _len2 = arguments.length, rest = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
		    rest[_key2 - 2] = arguments[_key2];
		  }

		  return requiredUniqueArray.apply(void 0, [props, propName].concat(rest));
		}

		uniqueArray.isRequired = requiredUniqueArray;

		var _default = function _default() {
		  return (0, _wrapValidator["default"])(uniqueArray, 'uniqueArray');
		};

		exports["default"] = _default;
		
	} (uniqueArray));
	return uniqueArray;
}

var uniqueArrayOf = {};

var hasRequiredUniqueArrayOf;

function requireUniqueArrayOf () {
	if (hasRequiredUniqueArrayOf) return uniqueArrayOf;
	hasRequiredUniqueArrayOf = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = uniqueArrayOfTypeValidator;

		var _propTypes = PropTypes$1;

		var _and = _interopRequireDefault(requireAnd());

		var _uniqueArray = _interopRequireDefault(requireUniqueArray());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		var unique = (0, _uniqueArray["default"])();

		function uniqueArrayOfTypeValidator(type) {
		  if (typeof type !== 'function') {
		    throw new TypeError('type must be a validator function');
		  }

		  var mapper = null;
		  var name = 'uniqueArrayOfType';

		  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		    rest[_key - 1] = arguments[_key];
		  }

		  if (rest.length === 1) {
		    if (typeof rest[0] === 'function') {
		      mapper = rest[0];
		    } else if (typeof rest[0] === 'string') {
		      name = rest[0];
		    } else {
		      throw new TypeError('single input must either be string or function');
		    }
		  } else if (rest.length === 2) {
		    if (typeof rest[0] === 'function' && typeof rest[1] === 'string') {
		      mapper = rest[0];
		      name = rest[1];
		    } else {
		      throw new TypeError('multiple inputs must be in [function, string] order');
		    }
		  } else if (rest.length > 2) {
		    throw new TypeError('only [], [name], [mapper], and [mapper, name] are valid inputs');
		  }

		  function uniqueArrayOfMapped(props, propName) {
		    var propValue = props[propName];

		    if (propValue == null) {
		      return null;
		    }

		    var values = propValue.map(mapper);

		    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
		      args[_key2 - 2] = arguments[_key2];
		    }

		    return unique.apply(void 0, [_objectSpread(_objectSpread({}, props), {}, _defineProperty({}, propName, values)), propName].concat(args));
		  }

		  uniqueArrayOfMapped.isRequired = function isRequired(props, propName) {
		    var propValue = props[propName];

		    for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
		      args[_key3 - 2] = arguments[_key3];
		    }

		    if (propValue == null) {
		      return _propTypes.array.isRequired.apply(_propTypes.array, [props, propName].concat(args));
		    }

		    return uniqueArrayOfMapped.apply(void 0, [props, propName].concat(args));
		  };

		  var arrayValidator = (0, _propTypes.arrayOf)(type);
		  var uniqueValidator = mapper ? uniqueArrayOfMapped : unique;
		  var validator = (0, _and["default"])([arrayValidator, uniqueValidator], name);
		  validator.isRequired = (0, _and["default"])([uniqueValidator.isRequired, arrayValidator.isRequired], "".concat(name, ".isRequired"));
		  return validator;
		}
		
	} (uniqueArrayOf));
	return uniqueArrayOf;
}

var build$1;
var hasRequiredBuild$1;

function requireBuild$1 () {
	if (hasRequiredBuild$1) return build$1;
	hasRequiredBuild$1 = 1;

	var _propTypesExact = _interopRequireDefault(requireBuild$2());

	var _and = _interopRequireDefault(requireAnd());

	var _between = _interopRequireDefault(requireBetween());

	var _booleanSome = _interopRequireDefault(requireBooleanSome());

	var _childrenHavePropXorChildren = _interopRequireDefault(requireChildrenHavePropXorChildren());

	var _childrenOf = _interopRequireDefault(requireChildrenOf());

	var _childrenOfType = _interopRequireDefault(requireChildrenOfType());

	var _childrenSequenceOf = _interopRequireDefault(requireChildrenSequenceOf());

	var _componentWithName = _interopRequireDefault(requireComponentWithName());

	var _disallowedIf = _interopRequireDefault(requireDisallowedIf());

	var _elementType = _interopRequireDefault(requireElementType());

	var _empty = _interopRequireDefault(requireEmpty());

	var _explicitNull = _interopRequireDefault(requireExplicitNull());

	var _integer = _interopRequireDefault(requireInteger());

	var _keysOf = _interopRequireDefault(requireKeysOf());

	var _mutuallyExclusiveProps = _interopRequireDefault(requireMutuallyExclusiveProps());

	var _mutuallyExclusiveTrueProps = _interopRequireDefault(requireMutuallyExclusiveTrueProps());

	var _nChildren = _interopRequireDefault(requireNChildren());

	var _nonNegativeInteger = _interopRequireDefault(requireNonNegativeInteger());

	var _nonNegativeNumber = _interopRequireDefault(requireNonNegativeNumber());

	var _numericString = _interopRequireDefault(requireNumericString());

	var _object = _interopRequireDefault(requireObject());

	var _or = _interopRequireDefault(requireOr());

	var _predicate = _interopRequireDefault(requirePredicate());

	var _range = _interopRequireDefault(requireRange());

	var _ref = _interopRequireDefault(requireRef());

	var _requiredBy = _interopRequireDefault(requireRequiredBy());

	var _restrictedProp = _interopRequireDefault(requireRestrictedProp());

	var _sequenceOf = _interopRequireDefault(requireSequenceOf());

	var _shape = _interopRequireDefault(requireShape());

	var _stringEndsWith = _interopRequireDefault(requireStringEndsWith());

	var _stringStartsWith = _interopRequireDefault(requireStringStartsWith());

	var _uniqueArray = _interopRequireDefault(requireUniqueArray());

	var _uniqueArrayOf = _interopRequireDefault(requireUniqueArrayOf());

	var _valuesOf = _interopRequireDefault(requireValuesOf());

	var _withShape = _interopRequireDefault(requireWithShape());

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	build$1 = {
	  and: _and["default"],
	  between: _between["default"],
	  booleanSome: _booleanSome["default"],
	  childrenHavePropXorChildren: _childrenHavePropXorChildren["default"],
	  childrenOf: _childrenOf["default"],
	  childrenOfType: _childrenOfType["default"],
	  childrenSequenceOf: _childrenSequenceOf["default"],
	  componentWithName: _componentWithName["default"],
	  disallowedIf: _disallowedIf["default"],
	  elementType: _elementType["default"],
	  empty: _empty["default"],
	  explicitNull: _explicitNull["default"],
	  forbidExtraProps: _propTypesExact["default"],
	  integer: _integer["default"],
	  keysOf: _keysOf["default"],
	  mutuallyExclusiveProps: _mutuallyExclusiveProps["default"],
	  mutuallyExclusiveTrueProps: _mutuallyExclusiveTrueProps["default"],
	  nChildren: _nChildren["default"],
	  nonNegativeInteger: _nonNegativeInteger["default"],
	  nonNegativeNumber: _nonNegativeNumber["default"],
	  numericString: _numericString["default"],
	  object: _object["default"],
	  or: _or["default"],
	  predicate: _predicate["default"],
	  range: _range["default"],
	  ref: _ref["default"],
	  requiredBy: _requiredBy["default"],
	  restrictedProp: _restrictedProp["default"],
	  sequenceOf: _sequenceOf["default"],
	  shape: _shape["default"],
	  stringEndsWith: _stringEndsWith["default"],
	  stringStartsWith: _stringStartsWith["default"],
	  uniqueArray: _uniqueArray["default"],
	  uniqueArrayOf: _uniqueArrayOf["default"],
	  valuesOf: _valuesOf["default"],
	  withShape: _withShape["default"]
	};
	
	return build$1;
}

var airbnbPropTypes;
var hasRequiredAirbnbPropTypes;

function requireAirbnbPropTypes () {
	if (hasRequiredAirbnbPropTypes) return airbnbPropTypes;
	hasRequiredAirbnbPropTypes = 1;
	airbnbPropTypes = process.env.NODE_ENV === 'production' ? requireMocks() : requireBuild$1();

	
	return airbnbPropTypes;
}

var lib = {};

var hasRequiredLib;

function requireLib () {
	if (hasRequiredLib) return lib;
	hasRequiredLib = 1;

	Object.defineProperty(lib, '__esModule', { value: true });

	var CAN_USE_DOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	// Adapted from Modernizr
	// https://github.com/Modernizr/Modernizr/blob/acb3f0d9/feature-detects/dom/passiveeventlisteners.js#L26-L37
	function testPassiveEventListeners() {
	  if (!CAN_USE_DOM) {
	    return false;
	  }

	  if (!window.addEventListener || !window.removeEventListener || !Object.defineProperty) {
	    return false;
	  }

	  var supportsPassiveOption = false;
	  try {
	    var opts = Object.defineProperty({}, 'passive', {
	      // eslint-disable-next-line getter-return
	      get: function () {
	        function get() {
	          supportsPassiveOption = true;
	        }

	        return get;
	      }()
	    });
	    var noop = function noop() {};
	    window.addEventListener('testPassiveEventSupport', noop, opts);
	    window.removeEventListener('testPassiveEventSupport', noop, opts);
	  } catch (e) {
	    // do nothing
	  }

	  return supportsPassiveOption;
	}

	var memoized = void 0;

	function canUsePassiveEventListeners() {
	  if (memoized === undefined) {
	    memoized = testPassiveEventListeners();
	  }
	  return memoized;
	}

	function normalizeEventOptions(eventOptions) {
	  if (!eventOptions) {
	    return undefined;
	  }

	  if (!canUsePassiveEventListeners()) {
	    // If the browser does not support the passive option, then it is expecting
	    // a boolean for the options argument to specify whether it should use
	    // capture or not. In more modern browsers, this is passed via the `capture`
	    // option, so let's just hoist that value up.
	    return !!eventOptions.capture;
	  }

	  return eventOptions;
	}

	/* eslint-disable no-bitwise */

	/**
	 * Generate a unique key for any set of event options
	 */
	function eventOptionsKey(normalizedEventOptions) {
	  if (!normalizedEventOptions) {
	    return 0;
	  }

	  // If the browser does not support passive event listeners, the normalized
	  // event options will be a boolean.
	  if (normalizedEventOptions === true) {
	    return 100;
	  }

	  // At this point, the browser supports passive event listeners, so we expect
	  // the event options to be an object with possible properties of capture,
	  // passive, and once.
	  //
	  // We want to consistently return the same value, regardless of the order of
	  // these properties, so let's use binary maths to assign each property to a
	  // bit, and then add those together (with an offset to account for the
	  // booleans at the beginning of this function).
	  var capture = normalizedEventOptions.capture << 0;
	  var passive = normalizedEventOptions.passive << 1;
	  var once = normalizedEventOptions.once << 2;
	  return capture + passive + once;
	}

	function ensureCanMutateNextEventHandlers(eventHandlers) {
	  if (eventHandlers.handlers === eventHandlers.nextHandlers) {
	    // eslint-disable-next-line no-param-reassign
	    eventHandlers.nextHandlers = eventHandlers.handlers.slice();
	  }
	}

	function TargetEventHandlers(target) {
	  this.target = target;
	  this.events = {};
	}

	TargetEventHandlers.prototype.getEventHandlers = function () {
	  function getEventHandlers(eventName, options) {
	    var key = String(eventName) + ' ' + String(eventOptionsKey(options));

	    if (!this.events[key]) {
	      this.events[key] = {
	        handlers: [],
	        handleEvent: undefined
	      };
	      this.events[key].nextHandlers = this.events[key].handlers;
	    }

	    return this.events[key];
	  }

	  return getEventHandlers;
	}();

	TargetEventHandlers.prototype.handleEvent = function () {
	  function handleEvent(eventName, options, event) {
	    var eventHandlers = this.getEventHandlers(eventName, options);
	    eventHandlers.handlers = eventHandlers.nextHandlers;
	    eventHandlers.handlers.forEach(function (handler) {
	      if (handler) {
	        // We need to check for presence here because a handler function may
	        // cause later handlers to get removed. This can happen if you for
	        // instance have a waypoint that unmounts another waypoint as part of an
	        // onEnter/onLeave handler.
	        handler(event);
	      }
	    });
	  }

	  return handleEvent;
	}();

	TargetEventHandlers.prototype.add = function () {
	  function add(eventName, listener, options) {
	    var _this = this;

	    // options has already been normalized at this point.
	    var eventHandlers = this.getEventHandlers(eventName, options);

	    ensureCanMutateNextEventHandlers(eventHandlers);

	    if (eventHandlers.nextHandlers.length === 0) {
	      eventHandlers.handleEvent = this.handleEvent.bind(this, eventName, options);

	      this.target.addEventListener(eventName, eventHandlers.handleEvent, options);
	    }

	    eventHandlers.nextHandlers.push(listener);

	    var isSubscribed = true;
	    var unsubscribe = function () {
	      function unsubscribe() {
	        if (!isSubscribed) {
	          return;
	        }

	        isSubscribed = false;

	        ensureCanMutateNextEventHandlers(eventHandlers);
	        var index = eventHandlers.nextHandlers.indexOf(listener);
	        eventHandlers.nextHandlers.splice(index, 1);

	        if (eventHandlers.nextHandlers.length === 0) {
	          // All event handlers have been removed, so we want to remove the event
	          // listener from the target node.

	          if (_this.target) {
	            // There can be a race condition where the target may no longer exist
	            // when this function is called, e.g. when a React component is
	            // unmounting. Guarding against this prevents the following error:
	            //
	            //   Cannot read property 'removeEventListener' of undefined
	            _this.target.removeEventListener(eventName, eventHandlers.handleEvent, options);
	          }

	          eventHandlers.handleEvent = undefined;
	        }
	      }

	      return unsubscribe;
	    }();
	    return unsubscribe;
	  }

	  return add;
	}();

	var EVENT_HANDLERS_KEY = '__consolidated_events_handlers__';

	// eslint-disable-next-line import/prefer-default-export
	function addEventListener(target, eventName, listener, options) {
	  if (!target[EVENT_HANDLERS_KEY]) {
	    // eslint-disable-next-line no-param-reassign
	    target[EVENT_HANDLERS_KEY] = new TargetEventHandlers(target);
	  }
	  var normalizedEventOptions = normalizeEventOptions(options);
	  return target[EVENT_HANDLERS_KEY].add(eventName, listener, normalizedEventOptions);
	}

	lib.addEventListener = addEventListener;
	return lib;
}

var build = {exports: {}};

build.exports;

var hasRequiredBuild;

function requireBuild () {
	if (hasRequiredBuild) return build.exports;
	hasRequiredBuild = 1;
	(function (module, exports) {
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports['default'] = isTouchDevice;
		function isTouchDevice() {
		  return !!(typeof window !== 'undefined' && ('ontouchstart' in window || window.DocumentTouch && typeof document !== 'undefined' && document instanceof window.DocumentTouch)) || !!(typeof navigator !== 'undefined' && (navigator.maxTouchPoints || navigator.msMaxTouchPoints));
		}
		module.exports = exports['default']; 
	} (build, build.exports));
	return build.exports;
}

var OutsideClickHandler = {};

var implementation;
var hasRequiredImplementation;

function requireImplementation () {
	if (hasRequiredImplementation) return implementation;
	hasRequiredImplementation = 1;

	implementation = function contains(other) {
		if (arguments.length < 1) {
			throw new TypeError('1 argument is required');
		}
		if (typeof other !== 'object') {
			throw new TypeError('Argument 1 (”other“) to Node.contains must be an instance of Node');
		}

		var node = other;
		do {
			if (this === node) {
				return true;
			}
			if (node) {
				node = node.parentNode;
			}
		} while (node);

		return false;
	};
	return implementation;
}

var polyfill;
var hasRequiredPolyfill;

function requirePolyfill () {
	if (hasRequiredPolyfill) return polyfill;
	hasRequiredPolyfill = 1;

	var implementation = requireImplementation();

	polyfill = function getPolyfill() {
		if (typeof document !== 'undefined') {
			if (document.contains) {
				return document.contains;
			}
			if (document.body && document.body.contains) {
				try {
					if (typeof document.body.contains.call(document, '') === 'boolean') {
						return document.body.contains;
					}
				} catch (e) { /**/ }
			}
		}
		return implementation;
	};
	return polyfill;
}

var shim;
var hasRequiredShim;

function requireShim () {
	if (hasRequiredShim) return shim;
	hasRequiredShim = 1;

	var define = requireDefineProperties();
	var getPolyfill = requirePolyfill();

	shim = function shimContains() {
		var polyfill = getPolyfill();
		if (typeof document !== 'undefined') {
			define(
				document,
				{ contains: polyfill },
				{ contains: function () { return document.contains !== polyfill; } }
			);
			if (typeof Element !== 'undefined') {
				define(
					Element.prototype,
					{ contains: polyfill },
					{ contains: function () { return Element.prototype.contains !== polyfill; } }
				);
			}
		}
		return polyfill;
	};
	return shim;
}

var document_contains;
var hasRequiredDocument_contains;

function requireDocument_contains () {
	if (hasRequiredDocument_contains) return document_contains;
	hasRequiredDocument_contains = 1;

	var define = requireDefineProperties();

	var implementation = requireImplementation();
	var getPolyfill = requirePolyfill();
	var polyfill = getPolyfill();
	var shim = requireShim();

	var boundContains = function contains(node, other) {
		return polyfill.apply(node, [other]);
	};

	define(boundContains, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});

	document_contains = boundContains;
	return document_contains;
}

var hasRequiredOutsideClickHandler;

function requireOutsideClickHandler () {
	if (hasRequiredOutsideClickHandler) return OutsideClickHandler;
	hasRequiredOutsideClickHandler = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = reactExports;

		var _react2 = _interopRequireDefault(_react);

		var _propTypes = PropTypes$1;

		var _propTypes2 = _interopRequireDefault(_propTypes);

		var _airbnbPropTypes = requireAirbnbPropTypes();

		var _consolidatedEvents = requireLib();

		var _object = requireObject_values();

		var _object2 = _interopRequireDefault(_object);

		var _document = requireDocument_contains();

		var _document2 = _interopRequireDefault(_document);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var DISPLAY = {
		  BLOCK: 'block',
		  FLEX: 'flex',
		  INLINE: 'inline',
		  INLINE_BLOCK: 'inline-block',
		  CONTENTS: 'contents'
		};

		var propTypes = (0, _airbnbPropTypes.forbidExtraProps)({
		  children: _propTypes2['default'].node.isRequired,
		  onOutsideClick: _propTypes2['default'].func.isRequired,
		  disabled: _propTypes2['default'].bool,
		  useCapture: _propTypes2['default'].bool,
		  display: _propTypes2['default'].oneOf((0, _object2['default'])(DISPLAY))
		});

		var defaultProps = {
		  disabled: false,

		  // `useCapture` is set to true by default so that a `stopPropagation` in the
		  // children will not prevent all outside click handlers from firing - maja
		  useCapture: true,
		  display: DISPLAY.BLOCK
		};

		var OutsideClickHandler = function (_React$Component) {
		  _inherits(OutsideClickHandler, _React$Component);

		  function OutsideClickHandler() {
		    var _ref;

		    _classCallCheck(this, OutsideClickHandler);

		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    var _this = _possibleConstructorReturn(this, (_ref = OutsideClickHandler.__proto__ || Object.getPrototypeOf(OutsideClickHandler)).call.apply(_ref, [this].concat(args)));

		    _this.onMouseDown = _this.onMouseDown.bind(_this);
		    _this.onMouseUp = _this.onMouseUp.bind(_this);
		    _this.setChildNodeRef = _this.setChildNodeRef.bind(_this);
		    return _this;
		  }

		  _createClass(OutsideClickHandler, [{
		    key: 'componentDidMount',
		    value: function () {
		      function componentDidMount() {
		        var _props = this.props,
		            disabled = _props.disabled,
		            useCapture = _props.useCapture;


		        if (!disabled) this.addMouseDownEventListener(useCapture);
		      }

		      return componentDidMount;
		    }()
		  }, {
		    key: 'componentDidUpdate',
		    value: function () {
		      function componentDidUpdate(_ref2) {
		        var prevDisabled = _ref2.disabled;
		        var _props2 = this.props,
		            disabled = _props2.disabled,
		            useCapture = _props2.useCapture;

		        if (prevDisabled !== disabled) {
		          if (disabled) {
		            this.removeEventListeners();
		          } else {
		            this.addMouseDownEventListener(useCapture);
		          }
		        }
		      }

		      return componentDidUpdate;
		    }()
		  }, {
		    key: 'componentWillUnmount',
		    value: function () {
		      function componentWillUnmount() {
		        this.removeEventListeners();
		      }

		      return componentWillUnmount;
		    }()

		    // Use mousedown/mouseup to enforce that clicks remain outside the root's
		    // descendant tree, even when dragged. This should also get triggered on
		    // touch devices.

		  }, {
		    key: 'onMouseDown',
		    value: function () {
		      function onMouseDown(e) {
		        var useCapture = this.props.useCapture;


		        var isDescendantOfRoot = this.childNode && (0, _document2['default'])(this.childNode, e.target);
		        if (!isDescendantOfRoot) {
		          if (this.removeMouseUp) {
		            this.removeMouseUp();
		            this.removeMouseUp = null;
		          }
		          this.removeMouseUp = (0, _consolidatedEvents.addEventListener)(document, 'mouseup', this.onMouseUp, { capture: useCapture });
		        }
		      }

		      return onMouseDown;
		    }()

		    // Use mousedown/mouseup to enforce that clicks remain outside the root's
		    // descendant tree, even when dragged. This should also get triggered on
		    // touch devices.

		  }, {
		    key: 'onMouseUp',
		    value: function () {
		      function onMouseUp(e) {
		        var onOutsideClick = this.props.onOutsideClick;


		        var isDescendantOfRoot = this.childNode && (0, _document2['default'])(this.childNode, e.target);
		        if (this.removeMouseUp) {
		          this.removeMouseUp();
		          this.removeMouseUp = null;
		        }

		        if (!isDescendantOfRoot) {
		          onOutsideClick(e);
		        }
		      }

		      return onMouseUp;
		    }()
		  }, {
		    key: 'setChildNodeRef',
		    value: function () {
		      function setChildNodeRef(ref) {
		        this.childNode = ref;
		      }

		      return setChildNodeRef;
		    }()
		  }, {
		    key: 'addMouseDownEventListener',
		    value: function () {
		      function addMouseDownEventListener(useCapture) {
		        this.removeMouseDown = (0, _consolidatedEvents.addEventListener)(document, 'mousedown', this.onMouseDown, { capture: useCapture });
		      }

		      return addMouseDownEventListener;
		    }()
		  }, {
		    key: 'removeEventListeners',
		    value: function () {
		      function removeEventListeners() {
		        if (this.removeMouseDown) this.removeMouseDown();
		        if (this.removeMouseUp) this.removeMouseUp();
		      }

		      return removeEventListeners;
		    }()
		  }, {
		    key: 'render',
		    value: function () {
		      function render() {
		        var _props3 = this.props,
		            children = _props3.children,
		            display = _props3.display;


		        return _react2['default'].createElement(
		          'div',
		          {
		            ref: this.setChildNodeRef,
		            style: display !== DISPLAY.BLOCK && (0, _object2['default'])(DISPLAY).includes(display) ? { display: display } : undefined
		          },
		          children
		        );
		      }

		      return render;
		    }()
		  }]);

		  return OutsideClickHandler;
		}(_react2['default'].Component);

		exports['default'] = OutsideClickHandler;


		OutsideClickHandler.propTypes = propTypes;
		OutsideClickHandler.defaultProps = defaultProps; 
	} (OutsideClickHandler));
	return OutsideClickHandler;
}

var reactOutsideClickHandler;
var hasRequiredReactOutsideClickHandler;

function requireReactOutsideClickHandler () {
	if (hasRequiredReactOutsideClickHandler) return reactOutsideClickHandler;
	hasRequiredReactOutsideClickHandler = 1;
	// eslint-disable-next-line import/no-unresolved
	reactOutsideClickHandler = requireOutsideClickHandler();
	return reactOutsideClickHandler;
}

var SingleDatePickerShape = {};

var defaultPhrases = {};

var hasRequiredDefaultPhrases;

function requireDefaultPhrases () {
	if (hasRequiredDefaultPhrases) return defaultPhrases;
	hasRequiredDefaultPhrases = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.CalendarDayPhrases = exports.DayPickerNavigationPhrases = exports.DayPickerKeyboardShortcutsPhrases = exports.DayPickerPhrases = exports.SingleDatePickerInputPhrases = exports.SingleDatePickerPhrases = exports.DateRangePickerInputPhrases = exports.DateRangePickerPhrases = exports["default"] = void 0;
		var calendarLabel = 'Calendar';
		var roleDescription = 'datepicker';
		var closeDatePicker = 'Close';
		var focusStartDate = 'Interact with the calendar and add the check-in date for your trip.';
		var clearDate = 'Clear Date';
		var clearDates = 'Clear Dates';
		var jumpToPrevMonth = 'Move backward to switch to the previous month.';
		var jumpToNextMonth = 'Move forward to switch to the next month.';
		var keyboardShortcuts = 'Keyboard Shortcuts';
		var showKeyboardShortcutsPanel = 'Open the keyboard shortcuts panel.';
		var hideKeyboardShortcutsPanel = 'Close the shortcuts panel.';
		var openThisPanel = 'Open this panel.';
		var enterKey = 'Enter key';
		var leftArrowRightArrow = 'Right and left arrow keys';
		var upArrowDownArrow = 'up and down arrow keys';
		var pageUpPageDown = 'page up and page down keys';
		var homeEnd = 'Home and end keys';
		var escape = 'Escape key';
		var questionMark = 'Question mark';
		var selectFocusedDate = 'Select the date in focus.';
		var moveFocusByOneDay = 'Move backward (left) and forward (right) by one day.';
		var moveFocusByOneWeek = 'Move backward (up) and forward (down) by one week.';
		var moveFocusByOneMonth = 'Switch months.';
		var moveFocustoStartAndEndOfWeek = 'Go to the first or last day of a week.';
		var returnFocusToInput = 'Return to the date input field.';
		var keyboardForwardNavigationInstructions = 'Navigate forward to interact with the calendar and select a date. Press the question mark key to get the keyboard shortcuts for changing dates.';
		var keyboardBackwardNavigationInstructions = 'Navigate backward to interact with the calendar and select a date. Press the question mark key to get the keyboard shortcuts for changing dates.';

		var chooseAvailableStartDate = function chooseAvailableStartDate(_ref) {
		  var date = _ref.date;
		  return "Choose ".concat(date, " as your check-in date. It\u2019s available.");
		};

		var chooseAvailableEndDate = function chooseAvailableEndDate(_ref2) {
		  var date = _ref2.date;
		  return "Choose ".concat(date, " as your check-out date. It\u2019s available.");
		};

		var chooseAvailableDate = function chooseAvailableDate(_ref3) {
		  var date = _ref3.date;
		  return date;
		};

		var dateIsUnavailable = function dateIsUnavailable(_ref4) {
		  var date = _ref4.date;
		  return "Not available. ".concat(date);
		};

		var dateIsSelected = function dateIsSelected(_ref5) {
		  var date = _ref5.date;
		  return "Selected. ".concat(date);
		};

		var dateIsSelectedAsStartDate = function dateIsSelectedAsStartDate(_ref6) {
		  var date = _ref6.date;
		  return "Selected as start date. ".concat(date);
		};

		var dateIsSelectedAsEndDate = function dateIsSelectedAsEndDate(_ref7) {
		  var date = _ref7.date;
		  return "Selected as end date. ".concat(date);
		};

		var _default = {
		  calendarLabel: calendarLabel,
		  roleDescription: roleDescription,
		  closeDatePicker: closeDatePicker,
		  focusStartDate: focusStartDate,
		  clearDate: clearDate,
		  clearDates: clearDates,
		  jumpToPrevMonth: jumpToPrevMonth,
		  jumpToNextMonth: jumpToNextMonth,
		  keyboardShortcuts: keyboardShortcuts,
		  showKeyboardShortcutsPanel: showKeyboardShortcutsPanel,
		  hideKeyboardShortcutsPanel: hideKeyboardShortcutsPanel,
		  openThisPanel: openThisPanel,
		  enterKey: enterKey,
		  leftArrowRightArrow: leftArrowRightArrow,
		  upArrowDownArrow: upArrowDownArrow,
		  pageUpPageDown: pageUpPageDown,
		  homeEnd: homeEnd,
		  escape: escape,
		  questionMark: questionMark,
		  selectFocusedDate: selectFocusedDate,
		  moveFocusByOneDay: moveFocusByOneDay,
		  moveFocusByOneWeek: moveFocusByOneWeek,
		  moveFocusByOneMonth: moveFocusByOneMonth,
		  moveFocustoStartAndEndOfWeek: moveFocustoStartAndEndOfWeek,
		  returnFocusToInput: returnFocusToInput,
		  keyboardForwardNavigationInstructions: keyboardForwardNavigationInstructions,
		  keyboardBackwardNavigationInstructions: keyboardBackwardNavigationInstructions,
		  chooseAvailableStartDate: chooseAvailableStartDate,
		  chooseAvailableEndDate: chooseAvailableEndDate,
		  dateIsUnavailable: dateIsUnavailable,
		  dateIsSelected: dateIsSelected,
		  dateIsSelectedAsStartDate: dateIsSelectedAsStartDate,
		  dateIsSelectedAsEndDate: dateIsSelectedAsEndDate
		};
		exports["default"] = _default;
		var DateRangePickerPhrases = {
		  calendarLabel: calendarLabel,
		  roleDescription: roleDescription,
		  closeDatePicker: closeDatePicker,
		  clearDates: clearDates,
		  focusStartDate: focusStartDate,
		  jumpToPrevMonth: jumpToPrevMonth,
		  jumpToNextMonth: jumpToNextMonth,
		  keyboardShortcuts: keyboardShortcuts,
		  showKeyboardShortcutsPanel: showKeyboardShortcutsPanel,
		  hideKeyboardShortcutsPanel: hideKeyboardShortcutsPanel,
		  openThisPanel: openThisPanel,
		  enterKey: enterKey,
		  leftArrowRightArrow: leftArrowRightArrow,
		  upArrowDownArrow: upArrowDownArrow,
		  pageUpPageDown: pageUpPageDown,
		  homeEnd: homeEnd,
		  escape: escape,
		  questionMark: questionMark,
		  selectFocusedDate: selectFocusedDate,
		  moveFocusByOneDay: moveFocusByOneDay,
		  moveFocusByOneWeek: moveFocusByOneWeek,
		  moveFocusByOneMonth: moveFocusByOneMonth,
		  moveFocustoStartAndEndOfWeek: moveFocustoStartAndEndOfWeek,
		  returnFocusToInput: returnFocusToInput,
		  keyboardForwardNavigationInstructions: keyboardForwardNavigationInstructions,
		  keyboardBackwardNavigationInstructions: keyboardBackwardNavigationInstructions,
		  chooseAvailableStartDate: chooseAvailableStartDate,
		  chooseAvailableEndDate: chooseAvailableEndDate,
		  dateIsUnavailable: dateIsUnavailable,
		  dateIsSelected: dateIsSelected,
		  dateIsSelectedAsStartDate: dateIsSelectedAsStartDate,
		  dateIsSelectedAsEndDate: dateIsSelectedAsEndDate
		};
		exports.DateRangePickerPhrases = DateRangePickerPhrases;
		var DateRangePickerInputPhrases = {
		  focusStartDate: focusStartDate,
		  clearDates: clearDates,
		  keyboardForwardNavigationInstructions: keyboardForwardNavigationInstructions,
		  keyboardBackwardNavigationInstructions: keyboardBackwardNavigationInstructions
		};
		exports.DateRangePickerInputPhrases = DateRangePickerInputPhrases;
		var SingleDatePickerPhrases = {
		  calendarLabel: calendarLabel,
		  roleDescription: roleDescription,
		  closeDatePicker: closeDatePicker,
		  clearDate: clearDate,
		  jumpToPrevMonth: jumpToPrevMonth,
		  jumpToNextMonth: jumpToNextMonth,
		  keyboardShortcuts: keyboardShortcuts,
		  showKeyboardShortcutsPanel: showKeyboardShortcutsPanel,
		  hideKeyboardShortcutsPanel: hideKeyboardShortcutsPanel,
		  openThisPanel: openThisPanel,
		  enterKey: enterKey,
		  leftArrowRightArrow: leftArrowRightArrow,
		  upArrowDownArrow: upArrowDownArrow,
		  pageUpPageDown: pageUpPageDown,
		  homeEnd: homeEnd,
		  escape: escape,
		  questionMark: questionMark,
		  selectFocusedDate: selectFocusedDate,
		  moveFocusByOneDay: moveFocusByOneDay,
		  moveFocusByOneWeek: moveFocusByOneWeek,
		  moveFocusByOneMonth: moveFocusByOneMonth,
		  moveFocustoStartAndEndOfWeek: moveFocustoStartAndEndOfWeek,
		  returnFocusToInput: returnFocusToInput,
		  keyboardForwardNavigationInstructions: keyboardForwardNavigationInstructions,
		  keyboardBackwardNavigationInstructions: keyboardBackwardNavigationInstructions,
		  chooseAvailableDate: chooseAvailableDate,
		  dateIsUnavailable: dateIsUnavailable,
		  dateIsSelected: dateIsSelected
		};
		exports.SingleDatePickerPhrases = SingleDatePickerPhrases;
		var SingleDatePickerInputPhrases = {
		  clearDate: clearDate,
		  keyboardForwardNavigationInstructions: keyboardForwardNavigationInstructions,
		  keyboardBackwardNavigationInstructions: keyboardBackwardNavigationInstructions
		};
		exports.SingleDatePickerInputPhrases = SingleDatePickerInputPhrases;
		var DayPickerPhrases = {
		  calendarLabel: calendarLabel,
		  roleDescription: roleDescription,
		  jumpToPrevMonth: jumpToPrevMonth,
		  jumpToNextMonth: jumpToNextMonth,
		  keyboardShortcuts: keyboardShortcuts,
		  showKeyboardShortcutsPanel: showKeyboardShortcutsPanel,
		  hideKeyboardShortcutsPanel: hideKeyboardShortcutsPanel,
		  openThisPanel: openThisPanel,
		  enterKey: enterKey,
		  leftArrowRightArrow: leftArrowRightArrow,
		  upArrowDownArrow: upArrowDownArrow,
		  pageUpPageDown: pageUpPageDown,
		  homeEnd: homeEnd,
		  escape: escape,
		  questionMark: questionMark,
		  selectFocusedDate: selectFocusedDate,
		  moveFocusByOneDay: moveFocusByOneDay,
		  moveFocusByOneWeek: moveFocusByOneWeek,
		  moveFocusByOneMonth: moveFocusByOneMonth,
		  moveFocustoStartAndEndOfWeek: moveFocustoStartAndEndOfWeek,
		  returnFocusToInput: returnFocusToInput,
		  chooseAvailableStartDate: chooseAvailableStartDate,
		  chooseAvailableEndDate: chooseAvailableEndDate,
		  chooseAvailableDate: chooseAvailableDate,
		  dateIsUnavailable: dateIsUnavailable,
		  dateIsSelected: dateIsSelected,
		  dateIsSelectedAsStartDate: dateIsSelectedAsStartDate,
		  dateIsSelectedAsEndDate: dateIsSelectedAsEndDate
		};
		exports.DayPickerPhrases = DayPickerPhrases;
		var DayPickerKeyboardShortcutsPhrases = {
		  keyboardShortcuts: keyboardShortcuts,
		  showKeyboardShortcutsPanel: showKeyboardShortcutsPanel,
		  hideKeyboardShortcutsPanel: hideKeyboardShortcutsPanel,
		  openThisPanel: openThisPanel,
		  enterKey: enterKey,
		  leftArrowRightArrow: leftArrowRightArrow,
		  upArrowDownArrow: upArrowDownArrow,
		  pageUpPageDown: pageUpPageDown,
		  homeEnd: homeEnd,
		  escape: escape,
		  questionMark: questionMark,
		  selectFocusedDate: selectFocusedDate,
		  moveFocusByOneDay: moveFocusByOneDay,
		  moveFocusByOneWeek: moveFocusByOneWeek,
		  moveFocusByOneMonth: moveFocusByOneMonth,
		  moveFocustoStartAndEndOfWeek: moveFocustoStartAndEndOfWeek,
		  returnFocusToInput: returnFocusToInput
		};
		exports.DayPickerKeyboardShortcutsPhrases = DayPickerKeyboardShortcutsPhrases;
		var DayPickerNavigationPhrases = {
		  jumpToPrevMonth: jumpToPrevMonth,
		  jumpToNextMonth: jumpToNextMonth
		};
		exports.DayPickerNavigationPhrases = DayPickerNavigationPhrases;
		var CalendarDayPhrases = {
		  chooseAvailableDate: chooseAvailableDate,
		  dateIsUnavailable: dateIsUnavailable,
		  dateIsSelected: dateIsSelected,
		  dateIsSelectedAsStartDate: dateIsSelectedAsStartDate,
		  dateIsSelectedAsEndDate: dateIsSelectedAsEndDate
		};
		exports.CalendarDayPhrases = CalendarDayPhrases; 
	} (defaultPhrases));
	return defaultPhrases;
}

var getPhrasePropTypes = {};

var hasRequiredGetPhrasePropTypes;

function requireGetPhrasePropTypes () {
	if (hasRequiredGetPhrasePropTypes) return getPhrasePropTypes;
	hasRequiredGetPhrasePropTypes = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getPhrasePropTypes;

		var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

		var _propTypes = _interopRequireDefault(PropTypes$1);

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		function getPhrasePropTypes(defaultPhrases) {
		  return Object.keys(defaultPhrases).reduce(function (phrases, key) {
		    return _objectSpread({}, phrases, (0, _defineProperty2["default"])({}, key, _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func, _propTypes["default"].node])));
		  }, {});
		} 
	} (getPhrasePropTypes));
	return getPhrasePropTypes;
}

var IconPositionShape = {};

var constants = {};

var hasRequiredConstants;

function requireConstants () {
	if (hasRequiredConstants) return constants;
	hasRequiredConstants = 1;

	Object.defineProperty(constants, "__esModule", {
	  value: true
	});
	constants.MODIFIER_KEY_NAMES = constants.DEFAULT_VERTICAL_SPACING = constants.FANG_HEIGHT_PX = constants.FANG_WIDTH_PX = constants.WEEKDAYS = constants.BLOCKED_MODIFIER = constants.DAY_SIZE = constants.OPEN_UP = constants.OPEN_DOWN = constants.ANCHOR_RIGHT = constants.ANCHOR_LEFT = constants.INFO_POSITION_AFTER = constants.INFO_POSITION_BEFORE = constants.INFO_POSITION_BOTTOM = constants.INFO_POSITION_TOP = constants.ICON_AFTER_POSITION = constants.ICON_BEFORE_POSITION = constants.NAV_POSITION_TOP = constants.NAV_POSITION_BOTTOM = constants.VERTICAL_SCROLLABLE = constants.VERTICAL_ORIENTATION = constants.HORIZONTAL_ORIENTATION = constants.END_DATE = constants.START_DATE = constants.ISO_MONTH_FORMAT = constants.ISO_FORMAT = constants.DISPLAY_FORMAT = void 0;
	var DISPLAY_FORMAT = 'L';
	constants.DISPLAY_FORMAT = DISPLAY_FORMAT;
	var ISO_FORMAT = 'YYYY-MM-DD';
	constants.ISO_FORMAT = ISO_FORMAT;
	var ISO_MONTH_FORMAT = 'YYYY-MM'; // TODO delete this line of dead code on next breaking change

	constants.ISO_MONTH_FORMAT = ISO_MONTH_FORMAT;
	var START_DATE = 'startDate';
	constants.START_DATE = START_DATE;
	var END_DATE = 'endDate';
	constants.END_DATE = END_DATE;
	var HORIZONTAL_ORIENTATION = 'horizontal';
	constants.HORIZONTAL_ORIENTATION = HORIZONTAL_ORIENTATION;
	var VERTICAL_ORIENTATION = 'vertical';
	constants.VERTICAL_ORIENTATION = VERTICAL_ORIENTATION;
	var VERTICAL_SCROLLABLE = 'verticalScrollable';
	constants.VERTICAL_SCROLLABLE = VERTICAL_SCROLLABLE;
	var NAV_POSITION_BOTTOM = 'navPositionBottom';
	constants.NAV_POSITION_BOTTOM = NAV_POSITION_BOTTOM;
	var NAV_POSITION_TOP = 'navPositionTop';
	constants.NAV_POSITION_TOP = NAV_POSITION_TOP;
	var ICON_BEFORE_POSITION = 'before';
	constants.ICON_BEFORE_POSITION = ICON_BEFORE_POSITION;
	var ICON_AFTER_POSITION = 'after';
	constants.ICON_AFTER_POSITION = ICON_AFTER_POSITION;
	var INFO_POSITION_TOP = 'top';
	constants.INFO_POSITION_TOP = INFO_POSITION_TOP;
	var INFO_POSITION_BOTTOM = 'bottom';
	constants.INFO_POSITION_BOTTOM = INFO_POSITION_BOTTOM;
	var INFO_POSITION_BEFORE = 'before';
	constants.INFO_POSITION_BEFORE = INFO_POSITION_BEFORE;
	var INFO_POSITION_AFTER = 'after';
	constants.INFO_POSITION_AFTER = INFO_POSITION_AFTER;
	var ANCHOR_LEFT = 'left';
	constants.ANCHOR_LEFT = ANCHOR_LEFT;
	var ANCHOR_RIGHT = 'right';
	constants.ANCHOR_RIGHT = ANCHOR_RIGHT;
	var OPEN_DOWN = 'down';
	constants.OPEN_DOWN = OPEN_DOWN;
	var OPEN_UP = 'up';
	constants.OPEN_UP = OPEN_UP;
	var DAY_SIZE = 39;
	constants.DAY_SIZE = DAY_SIZE;
	var BLOCKED_MODIFIER = 'blocked';
	constants.BLOCKED_MODIFIER = BLOCKED_MODIFIER;
	var WEEKDAYS = [0, 1, 2, 3, 4, 5, 6];
	constants.WEEKDAYS = WEEKDAYS;
	var FANG_WIDTH_PX = 20;
	constants.FANG_WIDTH_PX = FANG_WIDTH_PX;
	var FANG_HEIGHT_PX = 10;
	constants.FANG_HEIGHT_PX = FANG_HEIGHT_PX;
	var DEFAULT_VERTICAL_SPACING = 22;
	constants.DEFAULT_VERTICAL_SPACING = DEFAULT_VERTICAL_SPACING;
	var MODIFIER_KEY_NAMES = new Set(['Shift', 'Control', 'Alt', 'Meta']);
	constants.MODIFIER_KEY_NAMES = MODIFIER_KEY_NAMES;
	return constants;
}

var hasRequiredIconPositionShape;

function requireIconPositionShape () {
	if (hasRequiredIconPositionShape) return IconPositionShape;
	hasRequiredIconPositionShape = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _constants = requireConstants();

		var _default = _propTypes["default"].oneOf([_constants.ICON_BEFORE_POSITION, _constants.ICON_AFTER_POSITION]);

		exports["default"] = _default; 
	} (IconPositionShape));
	return IconPositionShape;
}

var OrientationShape = {};

var hasRequiredOrientationShape;

function requireOrientationShape () {
	if (hasRequiredOrientationShape) return OrientationShape;
	hasRequiredOrientationShape = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _constants = requireConstants();

		var _default = _propTypes["default"].oneOf([_constants.HORIZONTAL_ORIENTATION, _constants.VERTICAL_ORIENTATION]);

		exports["default"] = _default; 
	} (OrientationShape));
	return OrientationShape;
}

var AnchorDirectionShape = {};

var hasRequiredAnchorDirectionShape;

function requireAnchorDirectionShape () {
	if (hasRequiredAnchorDirectionShape) return AnchorDirectionShape;
	hasRequiredAnchorDirectionShape = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _constants = requireConstants();

		var _default = _propTypes["default"].oneOf([_constants.ANCHOR_LEFT, _constants.ANCHOR_RIGHT]);

		exports["default"] = _default; 
	} (AnchorDirectionShape));
	return AnchorDirectionShape;
}

var OpenDirectionShape = {};

var hasRequiredOpenDirectionShape;

function requireOpenDirectionShape () {
	if (hasRequiredOpenDirectionShape) return OpenDirectionShape;
	hasRequiredOpenDirectionShape = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _constants = requireConstants();

		var _default = _propTypes["default"].oneOf([_constants.OPEN_DOWN, _constants.OPEN_UP]);

		exports["default"] = _default; 
	} (OpenDirectionShape));
	return OpenDirectionShape;
}

var DayOfWeekShape = {};

var hasRequiredDayOfWeekShape;

function requireDayOfWeekShape () {
	if (hasRequiredDayOfWeekShape) return DayOfWeekShape;
	hasRequiredDayOfWeekShape = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _constants = requireConstants();

		var _default = _propTypes["default"].oneOf(_constants.WEEKDAYS);

		exports["default"] = _default; 
	} (DayOfWeekShape));
	return DayOfWeekShape;
}

var CalendarInfoPositionShape = {};

var hasRequiredCalendarInfoPositionShape;

function requireCalendarInfoPositionShape () {
	if (hasRequiredCalendarInfoPositionShape) return CalendarInfoPositionShape;
	hasRequiredCalendarInfoPositionShape = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _constants = requireConstants();

		var _default = _propTypes["default"].oneOf([_constants.INFO_POSITION_TOP, _constants.INFO_POSITION_BOTTOM, _constants.INFO_POSITION_BEFORE, _constants.INFO_POSITION_AFTER]);

		exports["default"] = _default; 
	} (CalendarInfoPositionShape));
	return CalendarInfoPositionShape;
}

var NavPositionShape = {};

var hasRequiredNavPositionShape;

function requireNavPositionShape () {
	if (hasRequiredNavPositionShape) return NavPositionShape;
	hasRequiredNavPositionShape = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _constants = requireConstants();

		var _default = _propTypes["default"].oneOf([_constants.NAV_POSITION_BOTTOM, _constants.NAV_POSITION_TOP]);

		exports["default"] = _default; 
	} (NavPositionShape));
	return NavPositionShape;
}

var hasRequiredSingleDatePickerShape;

function requireSingleDatePickerShape () {
	if (hasRequiredSingleDatePickerShape) return SingleDatePickerShape;
	hasRequiredSingleDatePickerShape = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _reactMomentProptypes = _interopRequireDefault(src$1);

		var _airbnbPropTypes = requireAirbnbPropTypes();

		var _defaultPhrases = requireDefaultPhrases();

		var _getPhrasePropTypes = _interopRequireDefault(requireGetPhrasePropTypes());

		var _IconPositionShape = _interopRequireDefault(requireIconPositionShape());

		var _OrientationShape = _interopRequireDefault(requireOrientationShape());

		var _AnchorDirectionShape = _interopRequireDefault(requireAnchorDirectionShape());

		var _OpenDirectionShape = _interopRequireDefault(requireOpenDirectionShape());

		var _DayOfWeekShape = _interopRequireDefault(requireDayOfWeekShape());

		var _CalendarInfoPositionShape = _interopRequireDefault(requireCalendarInfoPositionShape());

		var _NavPositionShape = _interopRequireDefault(requireNavPositionShape());

		var _default = {
		  // required props for a functional interactive SingleDatePicker
		  date: _reactMomentProptypes["default"].momentObj,
		  onDateChange: _propTypes["default"].func.isRequired,
		  focused: _propTypes["default"].bool,
		  onFocusChange: _propTypes["default"].func.isRequired,
		  // input related props
		  id: _propTypes["default"].string.isRequired,
		  placeholder: _propTypes["default"].string,
		  ariaLabel: _propTypes["default"].string,
		  disabled: _propTypes["default"].bool,
		  required: _propTypes["default"].bool,
		  readOnly: _propTypes["default"].bool,
		  screenReaderInputMessage: _propTypes["default"].string,
		  showClearDate: _propTypes["default"].bool,
		  customCloseIcon: _propTypes["default"].node,
		  showDefaultInputIcon: _propTypes["default"].bool,
		  inputIconPosition: _IconPositionShape["default"],
		  customInputIcon: _propTypes["default"].node,
		  noBorder: _propTypes["default"].bool,
		  block: _propTypes["default"].bool,
		  small: _propTypes["default"].bool,
		  regular: _propTypes["default"].bool,
		  verticalSpacing: _airbnbPropTypes.nonNegativeInteger,
		  keepFocusOnInput: _propTypes["default"].bool,
		  // calendar presentation and interaction related props
		  renderMonthText: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes["default"].func, 'renderMonthText', 'renderMonthElement'),
		  renderMonthElement: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes["default"].func, 'renderMonthText', 'renderMonthElement'),
		  renderWeekHeaderElement: _propTypes["default"].func,
		  orientation: _OrientationShape["default"],
		  anchorDirection: _AnchorDirectionShape["default"],
		  openDirection: _OpenDirectionShape["default"],
		  horizontalMargin: _propTypes["default"].number,
		  withPortal: _propTypes["default"].bool,
		  withFullScreenPortal: _propTypes["default"].bool,
		  appendToBody: _propTypes["default"].bool,
		  disableScroll: _propTypes["default"].bool,
		  initialVisibleMonth: _propTypes["default"].func,
		  firstDayOfWeek: _DayOfWeekShape["default"],
		  numberOfMonths: _propTypes["default"].number,
		  keepOpenOnDateSelect: _propTypes["default"].bool,
		  reopenPickerOnClearDate: _propTypes["default"].bool,
		  renderCalendarInfo: _propTypes["default"].func,
		  calendarInfoPosition: _CalendarInfoPositionShape["default"],
		  hideKeyboardShortcutsPanel: _propTypes["default"].bool,
		  daySize: _airbnbPropTypes.nonNegativeInteger,
		  isRTL: _propTypes["default"].bool,
		  verticalHeight: _airbnbPropTypes.nonNegativeInteger,
		  transitionDuration: _airbnbPropTypes.nonNegativeInteger,
		  horizontalMonthPadding: _airbnbPropTypes.nonNegativeInteger,
		  // navigation related props
		  dayPickerNavigationInlineStyles: _propTypes["default"].object,
		  navPosition: _NavPositionShape["default"],
		  navPrev: _propTypes["default"].node,
		  navNext: _propTypes["default"].node,
		  renderNavPrevButton: _propTypes["default"].func,
		  renderNavNextButton: _propTypes["default"].func,
		  onPrevMonthClick: _propTypes["default"].func,
		  onNextMonthClick: _propTypes["default"].func,
		  onClose: _propTypes["default"].func,
		  // day presentation and interaction related props
		  renderCalendarDay: _propTypes["default"].func,
		  renderDayContents: _propTypes["default"].func,
		  enableOutsideDays: _propTypes["default"].bool,
		  isDayBlocked: _propTypes["default"].func,
		  isOutsideRange: _propTypes["default"].func,
		  isDayHighlighted: _propTypes["default"].func,
		  // internationalization props
		  displayFormat: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),
		  monthFormat: _propTypes["default"].string,
		  weekDayFormat: _propTypes["default"].string,
		  phrases: _propTypes["default"].shape((0, _getPhrasePropTypes["default"])(_defaultPhrases.SingleDatePickerPhrases)),
		  dayAriaLabelFormat: _propTypes["default"].string
		};
		exports["default"] = _default; 
	} (SingleDatePickerShape));
	return SingleDatePickerShape;
}

var getResponsiveContainerStyles = {};

var hasRequiredGetResponsiveContainerStyles;

function requireGetResponsiveContainerStyles () {
	if (hasRequiredGetResponsiveContainerStyles) return getResponsiveContainerStyles;
	hasRequiredGetResponsiveContainerStyles = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getResponsiveContainerStyles;

		var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

		var _constants = requireConstants();

		function getResponsiveContainerStyles(anchorDirection, currentOffset, containerEdge, margin) {
		  var windowWidth = typeof window !== 'undefined' ? window.innerWidth : 0;
		  var calculatedOffset = anchorDirection === _constants.ANCHOR_LEFT ? windowWidth - containerEdge : containerEdge;
		  var calculatedMargin = margin || 0;
		  return (0, _defineProperty2["default"])({}, anchorDirection, Math.min(currentOffset + calculatedOffset - calculatedMargin, 0));
		} 
	} (getResponsiveContainerStyles));
	return getResponsiveContainerStyles;
}

var getDetachedContainerStyles = {};

var hasRequiredGetDetachedContainerStyles;

function requireGetDetachedContainerStyles () {
	if (hasRequiredGetDetachedContainerStyles) return getDetachedContainerStyles;
	hasRequiredGetDetachedContainerStyles = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getDetachedContainerStyles;

		var _constants = requireConstants();

		/**
		 * Calculate and return a CSS transform style to position a detached element
		 * next to a reference element. The open and anchor direction indicate wether
		 * it should be positioned above/below and/or to the left/right of the
		 * reference element.
		 *
		 * Assuming r(0,0), r(1,1), d(0,0), d(1,1) for the bottom-left and top-right
		 * corners of the reference and detached elements, respectively:
		 *  - openDirection = DOWN, anchorDirection = LEFT => d(0,1) == r(0,1)
		 *  - openDirection = UP, anchorDirection = LEFT => d(0,0) == r(0,0)
		 *  - openDirection = DOWN, anchorDirection = RIGHT => d(1,1) == r(1,1)
		 *  - openDirection = UP, anchorDirection = RIGHT => d(1,0) == r(1,0)
		 *
		 * By using a CSS transform, we allow to further position it using
		 * top/bottom CSS properties for the anchor gutter.
		 *
		 * @param {string} openDirection The vertical positioning of the popup
		 * @param {string} anchorDirection The horizontal position of the popup
		 * @param {HTMLElement} referenceEl The reference element
		 */
		function getDetachedContainerStyles(openDirection, anchorDirection, referenceEl) {
		  var referenceRect = referenceEl.getBoundingClientRect();
		  var offsetX = referenceRect.left;
		  var offsetY = referenceRect.top;

		  if (openDirection === _constants.OPEN_UP) {
		    offsetY = -(window.innerHeight - referenceRect.bottom);
		  }

		  if (anchorDirection === _constants.ANCHOR_RIGHT) {
		    offsetX = -(window.innerWidth - referenceRect.right);
		  }

		  return {
		    transform: "translate3d(".concat(Math.round(offsetX), "px, ").concat(Math.round(offsetY), "px, 0)")
		  };
		} 
	} (getDetachedContainerStyles));
	return getDetachedContainerStyles;
}

var getInputHeight = {};

var hasRequiredGetInputHeight;

function requireGetInputHeight () {
	if (hasRequiredGetInputHeight) return getInputHeight;
	hasRequiredGetInputHeight = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getInputHeight;

		/* eslint-disable camelcase */
		function getPadding(vertical, top, bottom) {
		  var isTopDefined = typeof top === 'number';
		  var isBottomDefined = typeof bottom === 'number';
		  var isVerticalDefined = typeof vertical === 'number';

		  if (isTopDefined && isBottomDefined) {
		    return top + bottom;
		  }

		  if (isTopDefined && isVerticalDefined) {
		    return top + vertical;
		  }

		  if (isTopDefined) {
		    return top;
		  }

		  if (isBottomDefined && isVerticalDefined) {
		    return bottom + vertical;
		  }

		  if (isBottomDefined) {
		    return bottom;
		  }

		  if (isVerticalDefined) {
		    return 2 * vertical;
		  }

		  return 0;
		}

		function getInputHeight(_ref, small) {
		  var _ref$font$input = _ref.font.input,
		      lineHeight = _ref$font$input.lineHeight,
		      lineHeight_small = _ref$font$input.lineHeight_small,
		      _ref$spacing = _ref.spacing,
		      inputPadding = _ref$spacing.inputPadding,
		      displayTextPaddingVertical = _ref$spacing.displayTextPaddingVertical,
		      displayTextPaddingTop = _ref$spacing.displayTextPaddingTop,
		      displayTextPaddingBottom = _ref$spacing.displayTextPaddingBottom,
		      displayTextPaddingVertical_small = _ref$spacing.displayTextPaddingVertical_small,
		      displayTextPaddingTop_small = _ref$spacing.displayTextPaddingTop_small,
		      displayTextPaddingBottom_small = _ref$spacing.displayTextPaddingBottom_small;
		  var calcLineHeight = small ? lineHeight_small : lineHeight;
		  var padding = small ? getPadding(displayTextPaddingVertical_small, displayTextPaddingTop_small, displayTextPaddingBottom_small) : getPadding(displayTextPaddingVertical, displayTextPaddingTop, displayTextPaddingBottom);
		  return parseInt(calcLineHeight, 10) + 2 * inputPadding + padding;
		} 
	} (getInputHeight));
	return getInputHeight;
}

var isInclusivelyAfterDay = {};

var isBeforeDay = {};

var hasRequiredIsBeforeDay;

function requireIsBeforeDay () {
	if (hasRequiredIsBeforeDay) return isBeforeDay;
	hasRequiredIsBeforeDay = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = isBeforeDay;

		var _moment = _interopRequireDefault(momentExports);

		function isBeforeDay(a, b) {
		  if (!_moment["default"].isMoment(a) || !_moment["default"].isMoment(b)) return false;
		  var aYear = a.year();
		  var aMonth = a.month();
		  var bYear = b.year();
		  var bMonth = b.month();
		  var isSameYear = aYear === bYear;
		  var isSameMonth = aMonth === bMonth;
		  if (isSameYear && isSameMonth) return a.date() < b.date();
		  if (isSameYear) return aMonth < bMonth;
		  return aYear < bYear;
		} 
	} (isBeforeDay));
	return isBeforeDay;
}

var hasRequiredIsInclusivelyAfterDay;

function requireIsInclusivelyAfterDay () {
	if (hasRequiredIsInclusivelyAfterDay) return isInclusivelyAfterDay;
	hasRequiredIsInclusivelyAfterDay = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = isInclusivelyAfterDay;

		var _moment = _interopRequireDefault(momentExports);

		var _isBeforeDay = _interopRequireDefault(requireIsBeforeDay());

		function isInclusivelyAfterDay(a, b) {
		  if (!_moment["default"].isMoment(a) || !_moment["default"].isMoment(b)) return false;
		  return !(0, _isBeforeDay["default"])(a, b);
		} 
	} (isInclusivelyAfterDay));
	return isInclusivelyAfterDay;
}

var disableScroll = {};

var hasRequiredDisableScroll;

function requireDisableScroll () {
	if (hasRequiredDisableScroll) return disableScroll;
	hasRequiredDisableScroll = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.getScrollParent = getScrollParent;
		exports.getScrollAncestorsOverflowY = getScrollAncestorsOverflowY;
		exports["default"] = disableScroll;

		var getScrollingRoot = function getScrollingRoot() {
		  return document.scrollingElement || document.documentElement;
		};
		/**
		 * Recursively finds the scroll parent of a node. The scroll parrent of a node
		 * is the closest node that is scrollable. A node is scrollable if:
		 *  - it is allowed to scroll via CSS ('overflow-y' not visible or hidden);
		 *  - and its children/content are "bigger" than the node's box height.
		 *
		 * The root of the document always scrolls by default.
		 *
		 * @param {HTMLElement} node Any DOM element.
		 * @return {HTMLElement} The scroll parent element.
		 */


		function getScrollParent(node) {
		  var parent = node.parentElement;
		  if (parent == null) return getScrollingRoot();

		  var _window$getComputedSt = window.getComputedStyle(parent),
		      overflowY = _window$getComputedSt.overflowY;

		  var canScroll = overflowY !== 'visible' && overflowY !== 'hidden';

		  if (canScroll && parent.scrollHeight > parent.clientHeight) {
		    return parent;
		  }

		  return getScrollParent(parent);
		}
		/**
		 * Recursively traverses the tree upwards from the given node, capturing all
		 * ancestor nodes that scroll along with their current 'overflow-y' CSS
		 * property.
		 *
		 * @param {HTMLElement} node Any DOM element.
		 * @param {Map<HTMLElement,string>} [acc] Accumulator map.
		 * @return {Map<HTMLElement,string>} Map of ancestors with their 'overflow-y' value.
		 */


		function getScrollAncestorsOverflowY(node) {
		  var acc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();
		  var scrollingRoot = getScrollingRoot();
		  var scrollParent = getScrollParent(node);
		  acc.set(scrollParent, scrollParent.style.overflowY);
		  if (scrollParent === scrollingRoot) return acc;
		  return getScrollAncestorsOverflowY(scrollParent, acc);
		}
		/**
		 * Disabling the scroll on a node involves finding all the scrollable ancestors
		 * and set their 'overflow-y' CSS property to 'hidden'. When all ancestors have
		 * 'overflow-y: hidden' (up to the document element) there is no scroll
		 * container, thus all the scroll outside of the node is disabled. In order to
		 * enable scroll again, we store the previous value of the 'overflow-y' for
		 * every ancestor in a closure and reset it back.
		 *
		 * @param {HTMLElement} node Any DOM element.
		 */


		function disableScroll(node) {
		  var scrollAncestorsOverflowY = getScrollAncestorsOverflowY(node);

		  var toggle = function toggle(on) {
		    return scrollAncestorsOverflowY.forEach(function (overflowY, ancestor) {
		      ancestor.style.setProperty('overflow-y', on ? 'hidden' : overflowY);
		    });
		  };

		  toggle(true);
		  return function () {
		    return toggle(false);
		  };
		} 
	} (disableScroll));
	return disableScroll;
}

var noflip = {};

var hasRequiredNoflip;

function requireNoflip () {
	if (hasRequiredNoflip) return noflip;
	hasRequiredNoflip = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = noflip;
		var NOFLIP = '/* @noflip */'; // Appends a noflip comment to a style rule in order to prevent it from being automatically
		// flipped in RTL contexts. This should be used only in situations where the style must remain
		// unflipped regardless of direction context. See: https://github.com/kentcdodds/rtl-css-js#usage

		function noflip(value) {
		  if (typeof value === 'number') return "".concat(value, "px ").concat(NOFLIP);
		  if (typeof value === 'string') return "".concat(value, " ").concat(NOFLIP);
		  throw new TypeError('noflip expects a string or a number');
		} 
	} (noflip));
	return noflip;
}

var SingleDatePickerInputController = {};

var SingleDatePickerInput = {};

var DateInput = {};

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

var isObject_1;
var hasRequiredIsObject;

function requireIsObject () {
	if (hasRequiredIsObject) return isObject_1;
	hasRequiredIsObject = 1;
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	isObject_1 = isObject;
	return isObject_1;
}

/** Detect free variable `global` from Node.js. */

var _freeGlobal;
var hasRequired_freeGlobal;

function require_freeGlobal () {
	if (hasRequired_freeGlobal) return _freeGlobal;
	hasRequired_freeGlobal = 1;
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	_freeGlobal = freeGlobal;
	return _freeGlobal;
}

var _root;
var hasRequired_root;

function require_root () {
	if (hasRequired_root) return _root;
	hasRequired_root = 1;
	var freeGlobal = require_freeGlobal();

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	_root = root;
	return _root;
}

var now_1;
var hasRequiredNow;

function requireNow () {
	if (hasRequiredNow) return now_1;
	hasRequiredNow = 1;
	var root = require_root();

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function() {
	  return root.Date.now();
	};

	now_1 = now;
	return now_1;
}

/** Used to match a single whitespace character. */

var _trimmedEndIndex;
var hasRequired_trimmedEndIndex;

function require_trimmedEndIndex () {
	if (hasRequired_trimmedEndIndex) return _trimmedEndIndex;
	hasRequired_trimmedEndIndex = 1;
	var reWhitespace = /\s/;

	/**
	 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
	 * character of `string`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {number} Returns the index of the last non-whitespace character.
	 */
	function trimmedEndIndex(string) {
	  var index = string.length;

	  while (index-- && reWhitespace.test(string.charAt(index))) {}
	  return index;
	}

	_trimmedEndIndex = trimmedEndIndex;
	return _trimmedEndIndex;
}

var _baseTrim;
var hasRequired_baseTrim;

function require_baseTrim () {
	if (hasRequired_baseTrim) return _baseTrim;
	hasRequired_baseTrim = 1;
	var trimmedEndIndex = require_trimmedEndIndex();

	/** Used to match leading whitespace. */
	var reTrimStart = /^\s+/;

	/**
	 * The base implementation of `_.trim`.
	 *
	 * @private
	 * @param {string} string The string to trim.
	 * @returns {string} Returns the trimmed string.
	 */
	function baseTrim(string) {
	  return string
	    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
	    : string;
	}

	_baseTrim = baseTrim;
	return _baseTrim;
}

var _Symbol;
var hasRequired_Symbol;

function require_Symbol () {
	if (hasRequired_Symbol) return _Symbol;
	hasRequired_Symbol = 1;
	var root = require_root();

	/** Built-in value references. */
	var Symbol = root.Symbol;

	_Symbol = Symbol;
	return _Symbol;
}

var _getRawTag;
var hasRequired_getRawTag;

function require_getRawTag () {
	if (hasRequired_getRawTag) return _getRawTag;
	hasRequired_getRawTag = 1;
	var Symbol = require_Symbol();

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	_getRawTag = getRawTag;
	return _getRawTag;
}

/** Used for built-in method references. */

var _objectToString;
var hasRequired_objectToString;

function require_objectToString () {
	if (hasRequired_objectToString) return _objectToString;
	hasRequired_objectToString = 1;
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	_objectToString = objectToString;
	return _objectToString;
}

var _baseGetTag;
var hasRequired_baseGetTag;

function require_baseGetTag () {
	if (hasRequired_baseGetTag) return _baseGetTag;
	hasRequired_baseGetTag = 1;
	var Symbol = require_Symbol(),
	    getRawTag = require_getRawTag(),
	    objectToString = require_objectToString();

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	_baseGetTag = baseGetTag;
	return _baseGetTag;
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

var isObjectLike_1;
var hasRequiredIsObjectLike;

function requireIsObjectLike () {
	if (hasRequiredIsObjectLike) return isObjectLike_1;
	hasRequiredIsObjectLike = 1;
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	isObjectLike_1 = isObjectLike;
	return isObjectLike_1;
}

var isSymbol_1;
var hasRequiredIsSymbol;

function requireIsSymbol () {
	if (hasRequiredIsSymbol) return isSymbol_1;
	hasRequiredIsSymbol = 1;
	var baseGetTag = require_baseGetTag(),
	    isObjectLike = requireIsObjectLike();

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && baseGetTag(value) == symbolTag);
	}

	isSymbol_1 = isSymbol;
	return isSymbol_1;
}

var toNumber_1;
var hasRequiredToNumber;

function requireToNumber () {
	if (hasRequiredToNumber) return toNumber_1;
	hasRequiredToNumber = 1;
	var baseTrim = require_baseTrim(),
	    isObject = requireIsObject(),
	    isSymbol = requireIsSymbol();

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = baseTrim(value);
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	toNumber_1 = toNumber;
	return toNumber_1;
}

var debounce_1;
var hasRequiredDebounce;

function requireDebounce () {
	if (hasRequiredDebounce) return debounce_1;
	hasRequiredDebounce = 1;
	var isObject = requireIsObject(),
	    now = requireNow(),
	    toNumber = requireToNumber();

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = toNumber(wait) || 0;
	  if (isObject(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        timeWaiting = wait - timeSinceLastCall;

	    return maxing
	      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	      : timeWaiting;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }

	  function timerExpired() {
	    var time = now();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now());
	  }

	  function debounced() {
	    var time = now(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        clearTimeout(timerId);
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	debounce_1 = debounce;
	return debounce_1;
}

var throttle_1;
var hasRequiredThrottle;

function requireThrottle () {
	if (hasRequiredThrottle) return throttle_1;
	hasRequiredThrottle = 1;
	var debounce = requireDebounce(),
	    isObject = requireIsObject();

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a throttled function that only invokes `func` at most once per
	 * every `wait` milliseconds. The throttled function comes with a `cancel`
	 * method to cancel delayed `func` invocations and a `flush` method to
	 * immediately invoke them. Provide `options` to indicate whether `func`
	 * should be invoked on the leading and/or trailing edge of the `wait`
	 * timeout. The `func` is invoked with the last arguments provided to the
	 * throttled function. Subsequent calls to the throttled function return the
	 * result of the last `func` invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the throttled function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.throttle` and `_.debounce`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to throttle.
	 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=true]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new throttled function.
	 * @example
	 *
	 * // Avoid excessively updating the position while scrolling.
	 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	 *
	 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	 * jQuery(element).on('click', throttled);
	 *
	 * // Cancel the trailing throttled invocation.
	 * jQuery(window).on('popstate', throttled.cancel);
	 */
	function throttle(func, wait, options) {
	  var leading = true,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  if (isObject(options)) {
	    leading = 'leading' in options ? !!options.leading : leading;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	  return debounce(func, wait, {
	    'leading': leading,
	    'maxWait': wait,
	    'trailing': trailing
	  });
	}

	throttle_1 = throttle;
	return throttle_1;
}

var hasRequiredDateInput;

function requireDateInput () {
	if (hasRequiredDateInput) return DateInput;
	hasRequiredDateInput = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _enzymeShallowEqual = _interopRequireDefault(requireBuild$3());

		var _extends2 = _interopRequireDefault(require_extends());

		var _assertThisInitialized2 = _interopRequireDefault(requireAssertThisInitialized());

		var _inheritsLoose2 = _interopRequireDefault(requireInheritsLoose());

		var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

		var _react = _interopRequireDefault(reactExports);

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _airbnbPropTypes = requireAirbnbPropTypes();

		var _reactWithStyles = requireWithStyles();

		var _throttle = _interopRequireDefault(requireThrottle());

		var _isTouchDevice = _interopRequireDefault(requireBuild());

		var _noflip = _interopRequireDefault(requireNoflip());

		var _getInputHeight = _interopRequireDefault(requireGetInputHeight());

		var _OpenDirectionShape = _interopRequireDefault(requireOpenDirectionShape());

		var _constants = requireConstants();

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		var FANG_PATH_TOP = "M0,".concat(_constants.FANG_HEIGHT_PX, " ").concat(_constants.FANG_WIDTH_PX, ",").concat(_constants.FANG_HEIGHT_PX, " ").concat(_constants.FANG_WIDTH_PX / 2, ",0z");
		var FANG_STROKE_TOP = "M0,".concat(_constants.FANG_HEIGHT_PX, " ").concat(_constants.FANG_WIDTH_PX / 2, ",0 ").concat(_constants.FANG_WIDTH_PX, ",").concat(_constants.FANG_HEIGHT_PX);
		var FANG_PATH_BOTTOM = "M0,0 ".concat(_constants.FANG_WIDTH_PX, ",0 ").concat(_constants.FANG_WIDTH_PX / 2, ",").concat(_constants.FANG_HEIGHT_PX, "z");
		var FANG_STROKE_BOTTOM = "M0,0 ".concat(_constants.FANG_WIDTH_PX / 2, ",").concat(_constants.FANG_HEIGHT_PX, " ").concat(_constants.FANG_WIDTH_PX, ",0");
		var propTypes = process.env.NODE_ENV !== "production" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, {
		  id: _propTypes["default"].string.isRequired,
		  placeholder: _propTypes["default"].string,
		  displayValue: _propTypes["default"].string,
		  ariaLabel: _propTypes["default"].string,
		  screenReaderMessage: _propTypes["default"].string,
		  focused: _propTypes["default"].bool,
		  disabled: _propTypes["default"].bool,
		  required: _propTypes["default"].bool,
		  readOnly: _propTypes["default"].bool,
		  openDirection: _OpenDirectionShape["default"],
		  showCaret: _propTypes["default"].bool,
		  verticalSpacing: _airbnbPropTypes.nonNegativeInteger,
		  small: _propTypes["default"].bool,
		  block: _propTypes["default"].bool,
		  regular: _propTypes["default"].bool,
		  onChange: _propTypes["default"].func,
		  onFocus: _propTypes["default"].func,
		  onKeyDownShiftTab: _propTypes["default"].func,
		  onKeyDownTab: _propTypes["default"].func,
		  onKeyDownArrowDown: _propTypes["default"].func,
		  onKeyDownQuestionMark: _propTypes["default"].func,
		  // accessibility
		  isFocused: _propTypes["default"].bool // describes actual DOM focus

		})) : {};
		var defaultProps = {
		  placeholder: 'Select Date',
		  displayValue: '',
		  ariaLabel: undefined,
		  screenReaderMessage: '',
		  focused: false,
		  disabled: false,
		  required: false,
		  readOnly: null,
		  openDirection: _constants.OPEN_DOWN,
		  showCaret: false,
		  verticalSpacing: _constants.DEFAULT_VERTICAL_SPACING,
		  small: false,
		  block: false,
		  regular: false,
		  onChange: function onChange() {},
		  onFocus: function onFocus() {},
		  onKeyDownShiftTab: function onKeyDownShiftTab() {},
		  onKeyDownTab: function onKeyDownTab() {},
		  onKeyDownArrowDown: function onKeyDownArrowDown() {},
		  onKeyDownQuestionMark: function onKeyDownQuestionMark() {},
		  // accessibility
		  isFocused: false
		};

		var DateInput =
		/*#__PURE__*/
		function (_ref) {
		  (0, _inheritsLoose2["default"])(DateInput, _ref);
		  var _proto = DateInput.prototype;

		  _proto[!_react["default"].PureComponent && "shouldComponentUpdate"] = function (nextProps, nextState) {
		    return !(0, _enzymeShallowEqual["default"])(this.props, nextProps) || !(0, _enzymeShallowEqual["default"])(this.state, nextState);
		  };

		  function DateInput(props) {
		    var _this;

		    _this = _ref.call(this, props) || this;
		    _this.state = {
		      dateString: '',
		      isTouchDevice: false
		    };
		    _this.onChange = _this.onChange.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.onKeyDown = _this.onKeyDown.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.setInputRef = _this.setInputRef.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.throttledKeyDown = (0, _throttle["default"])(_this.onFinalKeyDown, 300, {
		      trailing: false
		    });
		    return _this;
		  }

		  _proto.componentDidMount = function componentDidMount() {
		    this.setState({
		      isTouchDevice: (0, _isTouchDevice["default"])()
		    });
		  };

		  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		    var dateString = this.state.dateString;

		    if (dateString && nextProps.displayValue) {
		      this.setState({
		        dateString: ''
		      });
		    }
		  };

		  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
		    var _this$props = this.props,
		        focused = _this$props.focused,
		        isFocused = _this$props.isFocused;
		    if (prevProps.focused === focused && prevProps.isFocused === isFocused) return;

		    if (focused && isFocused) {
		      this.inputRef.focus();
		    }
		  };

		  _proto.onChange = function onChange(e) {
		    var _this$props2 = this.props,
		        onChange = _this$props2.onChange,
		        onKeyDownQuestionMark = _this$props2.onKeyDownQuestionMark;
		    var dateString = e.target.value; // In Safari, onKeyDown does not consistently fire ahead of onChange. As a result, we need to
		    // special case the `?` key so that it always triggers the appropriate callback, instead of
		    // modifying the input value

		    if (dateString[dateString.length - 1] === '?') {
		      onKeyDownQuestionMark(e);
		    } else {
		      this.setState({
		        dateString: dateString
		      }, function () {
		        return onChange(dateString);
		      });
		    }
		  };

		  _proto.onKeyDown = function onKeyDown(e) {
		    e.stopPropagation();

		    if (!_constants.MODIFIER_KEY_NAMES.has(e.key)) {
		      this.throttledKeyDown(e);
		    }
		  };

		  _proto.onFinalKeyDown = function onFinalKeyDown(e) {
		    var _this$props3 = this.props,
		        onKeyDownShiftTab = _this$props3.onKeyDownShiftTab,
		        onKeyDownTab = _this$props3.onKeyDownTab,
		        onKeyDownArrowDown = _this$props3.onKeyDownArrowDown,
		        onKeyDownQuestionMark = _this$props3.onKeyDownQuestionMark;
		    var key = e.key;

		    if (key === 'Tab') {
		      if (e.shiftKey) {
		        onKeyDownShiftTab(e);
		      } else {
		        onKeyDownTab(e);
		      }
		    } else if (key === 'ArrowDown') {
		      onKeyDownArrowDown(e);
		    } else if (key === '?') {
		      e.preventDefault();
		      onKeyDownQuestionMark(e);
		    }
		  };

		  _proto.setInputRef = function setInputRef(ref) {
		    this.inputRef = ref;
		  };

		  _proto.render = function render() {
		    var _this$state = this.state,
		        dateString = _this$state.dateString,
		        isTouch = _this$state.isTouchDevice;
		    var _this$props4 = this.props,
		        id = _this$props4.id,
		        placeholder = _this$props4.placeholder,
		        ariaLabel = _this$props4.ariaLabel,
		        displayValue = _this$props4.displayValue,
		        screenReaderMessage = _this$props4.screenReaderMessage,
		        focused = _this$props4.focused,
		        showCaret = _this$props4.showCaret,
		        onFocus = _this$props4.onFocus,
		        disabled = _this$props4.disabled,
		        required = _this$props4.required,
		        readOnly = _this$props4.readOnly,
		        openDirection = _this$props4.openDirection,
		        verticalSpacing = _this$props4.verticalSpacing,
		        small = _this$props4.small,
		        regular = _this$props4.regular,
		        block = _this$props4.block,
		        styles = _this$props4.styles,
		        reactDates = _this$props4.theme.reactDates;
		    var value = dateString || displayValue || '';
		    var screenReaderMessageId = "DateInput__screen-reader-message-".concat(id);
		    var withFang = showCaret && focused;
		    var inputHeight = (0, _getInputHeight["default"])(reactDates, small);
		    return _react["default"].createElement("div", (0, _reactWithStyles.css)(styles.DateInput, small && styles.DateInput__small, block && styles.DateInput__block, withFang && styles.DateInput__withFang, disabled && styles.DateInput__disabled, withFang && openDirection === _constants.OPEN_DOWN && styles.DateInput__openDown, withFang && openDirection === _constants.OPEN_UP && styles.DateInput__openUp), _react["default"].createElement("input", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.DateInput_input, small && styles.DateInput_input__small, regular && styles.DateInput_input__regular, readOnly && styles.DateInput_input__readOnly, focused && styles.DateInput_input__focused, disabled && styles.DateInput_input__disabled), {
		      "aria-label": ariaLabel === undefined ? placeholder : ariaLabel,
		      type: "text",
		      id: id,
		      name: id,
		      ref: this.setInputRef,
		      value: value,
		      onChange: this.onChange,
		      onKeyDown: this.onKeyDown,
		      onFocus: onFocus,
		      placeholder: placeholder,
		      autoComplete: "off",
		      disabled: disabled,
		      readOnly: typeof readOnly === 'boolean' ? readOnly : isTouch,
		      required: required,
		      "aria-describedby": screenReaderMessage && screenReaderMessageId
		    })), withFang && _react["default"].createElement("svg", (0, _extends2["default"])({
		      role: "presentation",
		      focusable: "false"
		    }, (0, _reactWithStyles.css)(styles.DateInput_fang, openDirection === _constants.OPEN_DOWN && {
		      top: inputHeight + verticalSpacing - _constants.FANG_HEIGHT_PX - 1
		    }, openDirection === _constants.OPEN_UP && {
		      bottom: inputHeight + verticalSpacing - _constants.FANG_HEIGHT_PX - 1
		    })), _react["default"].createElement("path", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.DateInput_fangShape), {
		      d: openDirection === _constants.OPEN_DOWN ? FANG_PATH_TOP : FANG_PATH_BOTTOM
		    })), _react["default"].createElement("path", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.DateInput_fangStroke), {
		      d: openDirection === _constants.OPEN_DOWN ? FANG_STROKE_TOP : FANG_STROKE_BOTTOM
		    }))), screenReaderMessage && _react["default"].createElement("p", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.DateInput_screenReaderMessage), {
		      id: screenReaderMessageId
		    }), screenReaderMessage));
		  };

		  return DateInput;
		}(_react["default"].PureComponent || _react["default"].Component);

		DateInput.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
		DateInput.defaultProps = defaultProps;

		var _default = (0, _reactWithStyles.withStyles)(function (_ref2) {
		  var _ref2$reactDates = _ref2.reactDates,
		      border = _ref2$reactDates.border,
		      color = _ref2$reactDates.color,
		      sizing = _ref2$reactDates.sizing,
		      spacing = _ref2$reactDates.spacing,
		      font = _ref2$reactDates.font,
		      zIndex = _ref2$reactDates.zIndex;
		  return {
		    DateInput: {
		      margin: 0,
		      padding: spacing.inputPadding,
		      background: color.background,
		      position: 'relative',
		      display: 'inline-block',
		      width: sizing.inputWidth,
		      verticalAlign: 'middle'
		    },
		    DateInput__small: {
		      width: sizing.inputWidth_small
		    },
		    DateInput__block: {
		      width: '100%'
		    },
		    DateInput__disabled: {
		      background: color.disabled,
		      color: color.textDisabled
		    },
		    DateInput_input: {
		      fontWeight: font.input.weight,
		      fontSize: font.input.size,
		      lineHeight: font.input.lineHeight,
		      color: color.text,
		      backgroundColor: color.background,
		      width: '100%',
		      padding: "".concat(spacing.displayTextPaddingVertical, "px ").concat(spacing.displayTextPaddingHorizontal, "px"),
		      paddingTop: spacing.displayTextPaddingTop,
		      paddingBottom: spacing.displayTextPaddingBottom,
		      paddingLeft: (0, _noflip["default"])(spacing.displayTextPaddingLeft),
		      paddingRight: (0, _noflip["default"])(spacing.displayTextPaddingRight),
		      border: border.input.border,
		      borderTop: border.input.borderTop,
		      borderRight: (0, _noflip["default"])(border.input.borderRight),
		      borderBottom: border.input.borderBottom,
		      borderLeft: (0, _noflip["default"])(border.input.borderLeft),
		      borderRadius: border.input.borderRadius
		    },
		    DateInput_input__small: {
		      fontSize: font.input.size_small,
		      lineHeight: font.input.lineHeight_small,
		      letterSpacing: font.input.letterSpacing_small,
		      padding: "".concat(spacing.displayTextPaddingVertical_small, "px ").concat(spacing.displayTextPaddingHorizontal_small, "px"),
		      paddingTop: spacing.displayTextPaddingTop_small,
		      paddingBottom: spacing.displayTextPaddingBottom_small,
		      paddingLeft: (0, _noflip["default"])(spacing.displayTextPaddingLeft_small),
		      paddingRight: (0, _noflip["default"])(spacing.displayTextPaddingRight_small)
		    },
		    DateInput_input__regular: {
		      fontWeight: 'auto'
		    },
		    DateInput_input__readOnly: {
		      userSelect: 'none'
		    },
		    DateInput_input__focused: {
		      outline: border.input.outlineFocused,
		      background: color.backgroundFocused,
		      border: border.input.borderFocused,
		      borderTop: border.input.borderTopFocused,
		      borderRight: (0, _noflip["default"])(border.input.borderRightFocused),
		      borderBottom: border.input.borderBottomFocused,
		      borderLeft: (0, _noflip["default"])(border.input.borderLeftFocused)
		    },
		    DateInput_input__disabled: {
		      background: color.disabled,
		      fontStyle: font.input.styleDisabled
		    },
		    DateInput_screenReaderMessage: {
		      border: 0,
		      clip: 'rect(0, 0, 0, 0)',
		      height: 1,
		      margin: -1,
		      overflow: 'hidden',
		      padding: 0,
		      position: 'absolute',
		      width: 1
		    },
		    DateInput_fang: {
		      position: 'absolute',
		      width: _constants.FANG_WIDTH_PX,
		      height: _constants.FANG_HEIGHT_PX,
		      left: 22,
		      // TODO: should be noflip wrapped and handled by an isRTL prop
		      zIndex: zIndex + 2
		    },
		    DateInput_fangShape: {
		      fill: color.background
		    },
		    DateInput_fangStroke: {
		      stroke: color.core.border,
		      fill: 'transparent'
		    }
		  };
		}, {
		  pureComponent: typeof _react["default"].PureComponent !== 'undefined'
		})(DateInput);

		exports["default"] = _default; 
	} (DateInput));
	return DateInput;
}

var CloseButton = {};

var hasRequiredCloseButton;

function requireCloseButton () {
	if (hasRequiredCloseButton) return CloseButton;
	hasRequiredCloseButton = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _react = _interopRequireDefault(reactExports);

		var CloseButton = function CloseButton(props) {
		  return _react["default"].createElement("svg", props, _react["default"].createElement("path", {
		    fillRule: "evenodd",
		    d: "M11.53.47a.75.75 0 0 0-1.061 0l-4.47 4.47L1.529.47A.75.75 0 1 0 .468 1.531l4.47 4.47-4.47 4.47a.75.75 0 1 0 1.061 1.061l4.47-4.47 4.47 4.47a.75.75 0 1 0 1.061-1.061l-4.47-4.47 4.47-4.47a.75.75 0 0 0 0-1.061z"
		  }));
		};

		CloseButton.defaultProps = {
		  focusable: "false",
		  viewBox: "0 0 12 12"
		};
		var _default = CloseButton;
		exports["default"] = _default; 
	} (CloseButton));
	return CloseButton;
}

var CalendarIcon = {};

var hasRequiredCalendarIcon;

function requireCalendarIcon () {
	if (hasRequiredCalendarIcon) return CalendarIcon;
	hasRequiredCalendarIcon = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _react = _interopRequireDefault(reactExports);

		var CalendarIcon = function CalendarIcon(props) {
		  return _react["default"].createElement("svg", props, _react["default"].createElement("path", {
		    d: "m107 1393h241v-241h-241zm295 0h268v-241h-268zm-295-295h241v-268h-241zm295 0h268v-268h-268zm-295-321h241v-241h-241zm616 616h268v-241h-268zm-321-616h268v-241h-268zm643 616h241v-241h-241zm-322-295h268v-268h-268zm-294-723v-241c0-7-3-14-8-19-6-5-12-8-19-8h-54c-7 0-13 3-19 8-5 5-8 12-8 19v241c0 7 3 14 8 19 6 5 12 8 19 8h54c7 0 13-3 19-8 5-5 8-12 8-19zm616 723h241v-268h-241zm-322-321h268v-241h-268zm322 0h241v-241h-241zm27-402v-241c0-7-3-14-8-19-6-5-12-8-19-8h-54c-7 0-13 3-19 8-5 5-8 12-8 19v241c0 7 3 14 8 19 6 5 12 8 19 8h54c7 0 13-3 19-8 5-5 8-12 8-19zm321-54v1072c0 29-11 54-32 75s-46 32-75 32h-1179c-29 0-54-11-75-32s-32-46-32-75v-1072c0-29 11-54 32-75s46-32 75-32h107v-80c0-37 13-68 40-95s57-39 94-39h54c37 0 68 13 95 39 26 26 39 58 39 95v80h321v-80c0-37 13-69 40-95 26-26 57-39 94-39h54c37 0 68 13 94 39s40 58 40 95v80h107c29 0 54 11 75 32s32 46 32 75z"
		  }));
		};

		CalendarIcon.defaultProps = {
		  focusable: "false",
		  viewBox: "0 0 1393.1 1500"
		};
		var _default = CalendarIcon;
		exports["default"] = _default; 
	} (CalendarIcon));
	return CalendarIcon;
}

var hasRequiredSingleDatePickerInput;

function requireSingleDatePickerInput () {
	if (hasRequiredSingleDatePickerInput) return SingleDatePickerInput;
	hasRequiredSingleDatePickerInput = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _extends2 = _interopRequireDefault(require_extends());

		var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

		var _react = _interopRequireDefault(reactExports);

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _airbnbPropTypes = requireAirbnbPropTypes();

		var _reactWithStyles = requireWithStyles();

		var _defaultPhrases = requireDefaultPhrases();

		var _getPhrasePropTypes = _interopRequireDefault(requireGetPhrasePropTypes());

		var _noflip = _interopRequireDefault(requireNoflip());

		var _DateInput = _interopRequireDefault(requireDateInput());

		var _IconPositionShape = _interopRequireDefault(requireIconPositionShape());

		var _CloseButton = _interopRequireDefault(requireCloseButton());

		var _CalendarIcon = _interopRequireDefault(requireCalendarIcon());

		var _OpenDirectionShape = _interopRequireDefault(requireOpenDirectionShape());

		var _constants = requireConstants();

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		var propTypes = process.env.NODE_ENV !== "production" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, {
		  id: _propTypes["default"].string.isRequired,
		  children: _propTypes["default"].node,
		  placeholder: _propTypes["default"].string,
		  ariaLabel: _propTypes["default"].string,
		  displayValue: _propTypes["default"].string,
		  screenReaderMessage: _propTypes["default"].string,
		  focused: _propTypes["default"].bool,
		  isFocused: _propTypes["default"].bool,
		  // describes actual DOM focus
		  disabled: _propTypes["default"].bool,
		  required: _propTypes["default"].bool,
		  readOnly: _propTypes["default"].bool,
		  openDirection: _OpenDirectionShape["default"],
		  showCaret: _propTypes["default"].bool,
		  showClearDate: _propTypes["default"].bool,
		  customCloseIcon: _propTypes["default"].node,
		  showDefaultInputIcon: _propTypes["default"].bool,
		  inputIconPosition: _IconPositionShape["default"],
		  customInputIcon: _propTypes["default"].node,
		  isRTL: _propTypes["default"].bool,
		  noBorder: _propTypes["default"].bool,
		  block: _propTypes["default"].bool,
		  small: _propTypes["default"].bool,
		  regular: _propTypes["default"].bool,
		  verticalSpacing: _airbnbPropTypes.nonNegativeInteger,
		  onChange: _propTypes["default"].func,
		  onClearDate: _propTypes["default"].func,
		  onFocus: _propTypes["default"].func,
		  onKeyDownShiftTab: _propTypes["default"].func,
		  onKeyDownTab: _propTypes["default"].func,
		  onKeyDownArrowDown: _propTypes["default"].func,
		  onKeyDownQuestionMark: _propTypes["default"].func,
		  // i18n
		  phrases: _propTypes["default"].shape((0, _getPhrasePropTypes["default"])(_defaultPhrases.SingleDatePickerInputPhrases))
		})) : {};
		var defaultProps = {
		  children: null,
		  placeholder: 'Select Date',
		  ariaLabel: undefined,
		  displayValue: '',
		  screenReaderMessage: '',
		  focused: false,
		  isFocused: false,
		  disabled: false,
		  required: false,
		  readOnly: false,
		  openDirection: _constants.OPEN_DOWN,
		  showCaret: false,
		  showClearDate: false,
		  showDefaultInputIcon: false,
		  inputIconPosition: _constants.ICON_BEFORE_POSITION,
		  customCloseIcon: null,
		  customInputIcon: null,
		  isRTL: false,
		  noBorder: false,
		  block: false,
		  small: false,
		  regular: false,
		  verticalSpacing: undefined,
		  onChange: function onChange() {},
		  onClearDate: function onClearDate() {},
		  onFocus: function onFocus() {},
		  onKeyDownShiftTab: function onKeyDownShiftTab() {},
		  onKeyDownTab: function onKeyDownTab() {},
		  onKeyDownArrowDown: function onKeyDownArrowDown() {},
		  onKeyDownQuestionMark: function onKeyDownQuestionMark() {},
		  // i18n
		  phrases: _defaultPhrases.SingleDatePickerInputPhrases
		};

		function SingleDatePickerInput(_ref) {
		  var id = _ref.id,
		      children = _ref.children,
		      placeholder = _ref.placeholder,
		      ariaLabel = _ref.ariaLabel,
		      displayValue = _ref.displayValue,
		      focused = _ref.focused,
		      isFocused = _ref.isFocused,
		      disabled = _ref.disabled,
		      required = _ref.required,
		      readOnly = _ref.readOnly,
		      showCaret = _ref.showCaret,
		      showClearDate = _ref.showClearDate,
		      showDefaultInputIcon = _ref.showDefaultInputIcon,
		      inputIconPosition = _ref.inputIconPosition,
		      phrases = _ref.phrases,
		      onClearDate = _ref.onClearDate,
		      onChange = _ref.onChange,
		      onFocus = _ref.onFocus,
		      onKeyDownShiftTab = _ref.onKeyDownShiftTab,
		      onKeyDownTab = _ref.onKeyDownTab,
		      onKeyDownArrowDown = _ref.onKeyDownArrowDown,
		      onKeyDownQuestionMark = _ref.onKeyDownQuestionMark,
		      screenReaderMessage = _ref.screenReaderMessage,
		      customCloseIcon = _ref.customCloseIcon,
		      customInputIcon = _ref.customInputIcon,
		      openDirection = _ref.openDirection,
		      isRTL = _ref.isRTL,
		      noBorder = _ref.noBorder,
		      block = _ref.block,
		      small = _ref.small,
		      regular = _ref.regular,
		      verticalSpacing = _ref.verticalSpacing,
		      styles = _ref.styles;

		  var calendarIcon = customInputIcon || _react["default"].createElement(_CalendarIcon["default"], (0, _reactWithStyles.css)(styles.SingleDatePickerInput_calendarIcon_svg));

		  var closeIcon = customCloseIcon || _react["default"].createElement(_CloseButton["default"], (0, _reactWithStyles.css)(styles.SingleDatePickerInput_clearDate_svg, small && styles.SingleDatePickerInput_clearDate_svg__small));

		  var screenReaderText = screenReaderMessage || phrases.keyboardForwardNavigationInstructions;

		  var inputIcon = (showDefaultInputIcon || customInputIcon !== null) && _react["default"].createElement("button", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.SingleDatePickerInput_calendarIcon), {
		    type: "button",
		    disabled: disabled,
		    "aria-label": phrases.focusStartDate,
		    onClick: onFocus
		  }), calendarIcon);

		  return _react["default"].createElement("div", (0, _reactWithStyles.css)(styles.SingleDatePickerInput, disabled && styles.SingleDatePickerInput__disabled, isRTL && styles.SingleDatePickerInput__rtl, !noBorder && styles.SingleDatePickerInput__withBorder, block && styles.SingleDatePickerInput__block, showClearDate && styles.SingleDatePickerInput__showClearDate), inputIconPosition === _constants.ICON_BEFORE_POSITION && inputIcon, _react["default"].createElement(_DateInput["default"], {
		    id: id,
		    placeholder: placeholder,
		    ariaLabel: ariaLabel,
		    displayValue: displayValue,
		    screenReaderMessage: screenReaderText,
		    focused: focused,
		    isFocused: isFocused,
		    disabled: disabled,
		    required: required,
		    readOnly: readOnly,
		    showCaret: showCaret,
		    onChange: onChange,
		    onFocus: onFocus,
		    onKeyDownShiftTab: onKeyDownShiftTab,
		    onKeyDownTab: onKeyDownTab,
		    onKeyDownArrowDown: onKeyDownArrowDown,
		    onKeyDownQuestionMark: onKeyDownQuestionMark,
		    openDirection: openDirection,
		    verticalSpacing: verticalSpacing,
		    small: small,
		    regular: regular,
		    block: block
		  }), children, showClearDate && _react["default"].createElement("button", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.SingleDatePickerInput_clearDate, small && styles.SingleDatePickerInput_clearDate__small, !customCloseIcon && styles.SingleDatePickerInput_clearDate__default, !displayValue && styles.SingleDatePickerInput_clearDate__hide), {
		    type: "button",
		    "aria-label": phrases.clearDate,
		    disabled: disabled,
		    onClick: onClearDate
		  }), closeIcon), inputIconPosition === _constants.ICON_AFTER_POSITION && inputIcon);
		}

		SingleDatePickerInput.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
		SingleDatePickerInput.defaultProps = defaultProps;

		var _default = (0, _reactWithStyles.withStyles)(function (_ref2) {
		  var _ref2$reactDates = _ref2.reactDates,
		      border = _ref2$reactDates.border,
		      color = _ref2$reactDates.color;
		  return {
		    SingleDatePickerInput: {
		      display: 'inline-block',
		      backgroundColor: color.background
		    },
		    SingleDatePickerInput__withBorder: {
		      borderColor: color.border,
		      borderWidth: border.pickerInput.borderWidth,
		      borderStyle: border.pickerInput.borderStyle,
		      borderRadius: border.pickerInput.borderRadius
		    },
		    SingleDatePickerInput__rtl: {
		      direction: (0, _noflip["default"])('rtl')
		    },
		    SingleDatePickerInput__disabled: {
		      backgroundColor: color.disabled
		    },
		    SingleDatePickerInput__block: {
		      display: 'block'
		    },
		    SingleDatePickerInput__showClearDate: {
		      paddingRight: 30 // TODO: should be noflip wrapped and handled by an isRTL prop

		    },
		    SingleDatePickerInput_clearDate: {
		      background: 'none',
		      border: 0,
		      color: 'inherit',
		      font: 'inherit',
		      lineHeight: 'normal',
		      overflow: 'visible',
		      cursor: 'pointer',
		      padding: 10,
		      margin: '0 10px 0 5px',
		      // TODO: should be noflip wrapped and handled by an isRTL prop
		      position: 'absolute',
		      right: 0,
		      // TODO: should be noflip wrapped and handled by an isRTL prop
		      top: '50%',
		      transform: 'translateY(-50%)'
		    },
		    SingleDatePickerInput_clearDate__default: {
		      ':focus': {
		        background: color.core.border,
		        borderRadius: '50%'
		      },
		      ':hover': {
		        background: color.core.border,
		        borderRadius: '50%'
		      }
		    },
		    SingleDatePickerInput_clearDate__small: {
		      padding: 6
		    },
		    SingleDatePickerInput_clearDate__hide: {
		      visibility: 'hidden'
		    },
		    SingleDatePickerInput_clearDate_svg: {
		      fill: color.core.grayLight,
		      height: 12,
		      width: 15,
		      verticalAlign: 'middle'
		    },
		    SingleDatePickerInput_clearDate_svg__small: {
		      height: 9
		    },
		    SingleDatePickerInput_calendarIcon: {
		      background: 'none',
		      border: 0,
		      color: 'inherit',
		      font: 'inherit',
		      lineHeight: 'normal',
		      overflow: 'visible',
		      cursor: 'pointer',
		      display: 'inline-block',
		      verticalAlign: 'middle',
		      padding: 10,
		      margin: '0 5px 0 10px' // TODO: should be noflip wrapped and handled by an isRTL prop

		    },
		    SingleDatePickerInput_calendarIcon_svg: {
		      fill: color.core.grayLight,
		      height: 15,
		      width: 14,
		      verticalAlign: 'middle'
		    }
		  };
		}, {
		  pureComponent: typeof _react["default"].PureComponent !== 'undefined'
		})(SingleDatePickerInput);

		exports["default"] = _default; 
	} (SingleDatePickerInput));
	return SingleDatePickerInput;
}

var DisabledShape = {};

var hasRequiredDisabledShape;

function requireDisabledShape () {
	if (hasRequiredDisabledShape) return DisabledShape;
	hasRequiredDisabledShape = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _constants = requireConstants();

		var _default = _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].oneOf([_constants.START_DATE, _constants.END_DATE])]);

		exports["default"] = _default; 
	} (DisabledShape));
	return DisabledShape;
}

var toMomentObject = {};

var hasRequiredToMomentObject;

function requireToMomentObject () {
	if (hasRequiredToMomentObject) return toMomentObject;
	hasRequiredToMomentObject = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = toMomentObject;

		var _moment = _interopRequireDefault(momentExports);

		var _constants = requireConstants();

		function toMomentObject(dateString, customFormat) {
		  var dateFormats = customFormat ? [customFormat, _constants.DISPLAY_FORMAT, _constants.ISO_FORMAT] : [_constants.DISPLAY_FORMAT, _constants.ISO_FORMAT];
		  var date = (0, _moment["default"])(dateString, dateFormats, true);
		  return date.isValid() ? date.hour(12) : null;
		} 
	} (toMomentObject));
	return toMomentObject;
}

var toLocalizedDateString = {};

var hasRequiredToLocalizedDateString;

function requireToLocalizedDateString () {
	if (hasRequiredToLocalizedDateString) return toLocalizedDateString;
	hasRequiredToLocalizedDateString = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = toLocalizedDateString;

		var _moment = _interopRequireDefault(momentExports);

		var _toMomentObject = _interopRequireDefault(requireToMomentObject());

		var _constants = requireConstants();

		function toLocalizedDateString(date, currentFormat) {
		  var dateObj = _moment["default"].isMoment(date) ? date : (0, _toMomentObject["default"])(date, currentFormat);
		  if (!dateObj) return null;
		  return dateObj.format(_constants.DISPLAY_FORMAT);
		} 
	} (toLocalizedDateString));
	return toLocalizedDateString;
}

var hasRequiredSingleDatePickerInputController;

function requireSingleDatePickerInputController () {
	if (hasRequiredSingleDatePickerInputController) return SingleDatePickerInputController;
	hasRequiredSingleDatePickerInputController = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _enzymeShallowEqual = _interopRequireDefault(requireBuild$3());

		var _assertThisInitialized2 = _interopRequireDefault(requireAssertThisInitialized());

		var _inheritsLoose2 = _interopRequireDefault(requireInheritsLoose());

		var _react = _interopRequireDefault(reactExports);

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _moment = _interopRequireDefault(momentExports);

		var _reactMomentProptypes = _interopRequireDefault(src$1);

		var _airbnbPropTypes = requireAirbnbPropTypes();

		var _OpenDirectionShape = _interopRequireDefault(requireOpenDirectionShape());

		var _defaultPhrases = requireDefaultPhrases();

		var _getPhrasePropTypes = _interopRequireDefault(requireGetPhrasePropTypes());

		var _SingleDatePickerInput = _interopRequireDefault(requireSingleDatePickerInput());

		var _IconPositionShape = _interopRequireDefault(requireIconPositionShape());

		var _DisabledShape = _interopRequireDefault(requireDisabledShape());

		var _toMomentObject = _interopRequireDefault(requireToMomentObject());

		var _toLocalizedDateString = _interopRequireDefault(requireToLocalizedDateString());

		var _isInclusivelyAfterDay = _interopRequireDefault(requireIsInclusivelyAfterDay());

		var _constants = requireConstants();

		var propTypes = process.env.NODE_ENV !== "production" ? (0, _airbnbPropTypes.forbidExtraProps)({
		  children: _propTypes["default"].node,
		  date: _reactMomentProptypes["default"].momentObj,
		  onDateChange: _propTypes["default"].func.isRequired,
		  focused: _propTypes["default"].bool,
		  onFocusChange: _propTypes["default"].func.isRequired,
		  id: _propTypes["default"].string.isRequired,
		  placeholder: _propTypes["default"].string,
		  ariaLabel: _propTypes["default"].string,
		  screenReaderMessage: _propTypes["default"].string,
		  showClearDate: _propTypes["default"].bool,
		  showCaret: _propTypes["default"].bool,
		  showDefaultInputIcon: _propTypes["default"].bool,
		  inputIconPosition: _IconPositionShape["default"],
		  disabled: _DisabledShape["default"],
		  required: _propTypes["default"].bool,
		  readOnly: _propTypes["default"].bool,
		  openDirection: _OpenDirectionShape["default"],
		  noBorder: _propTypes["default"].bool,
		  block: _propTypes["default"].bool,
		  small: _propTypes["default"].bool,
		  regular: _propTypes["default"].bool,
		  verticalSpacing: _airbnbPropTypes.nonNegativeInteger,
		  keepOpenOnDateSelect: _propTypes["default"].bool,
		  reopenPickerOnClearDate: _propTypes["default"].bool,
		  isOutsideRange: _propTypes["default"].func,
		  displayFormat: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),
		  onClose: _propTypes["default"].func,
		  onKeyDownArrowDown: _propTypes["default"].func,
		  onKeyDownQuestionMark: _propTypes["default"].func,
		  customInputIcon: _propTypes["default"].node,
		  customCloseIcon: _propTypes["default"].node,
		  // accessibility
		  isFocused: _propTypes["default"].bool,
		  // i18n
		  phrases: _propTypes["default"].shape((0, _getPhrasePropTypes["default"])(_defaultPhrases.SingleDatePickerInputPhrases)),
		  isRTL: _propTypes["default"].bool
		}) : {};
		var defaultProps = {
		  children: null,
		  date: null,
		  focused: false,
		  placeholder: '',
		  ariaLabel: undefined,
		  screenReaderMessage: 'Date',
		  showClearDate: false,
		  showCaret: false,
		  showDefaultInputIcon: false,
		  inputIconPosition: _constants.ICON_BEFORE_POSITION,
		  disabled: false,
		  required: false,
		  readOnly: false,
		  openDirection: _constants.OPEN_DOWN,
		  noBorder: false,
		  block: false,
		  small: false,
		  regular: false,
		  verticalSpacing: undefined,
		  keepOpenOnDateSelect: false,
		  reopenPickerOnClearDate: false,
		  isOutsideRange: function isOutsideRange(day) {
		    return !(0, _isInclusivelyAfterDay["default"])(day, (0, _moment["default"])());
		  },
		  displayFormat: function displayFormat() {
		    return _moment["default"].localeData().longDateFormat('L');
		  },
		  onClose: function onClose() {},
		  onKeyDownArrowDown: function onKeyDownArrowDown() {},
		  onKeyDownQuestionMark: function onKeyDownQuestionMark() {},
		  customInputIcon: null,
		  customCloseIcon: null,
		  // accessibility
		  isFocused: false,
		  // i18n
		  phrases: _defaultPhrases.SingleDatePickerInputPhrases,
		  isRTL: false
		};

		var SingleDatePickerInputController =
		/*#__PURE__*/
		function (_ref) {
		  (0, _inheritsLoose2["default"])(SingleDatePickerInputController, _ref);
		  var _proto = SingleDatePickerInputController.prototype;

		  _proto[!_react["default"].PureComponent && "shouldComponentUpdate"] = function (nextProps, nextState) {
		    return !(0, _enzymeShallowEqual["default"])(this.props, nextProps) || !(0, _enzymeShallowEqual["default"])(this.state, nextState);
		  };

		  function SingleDatePickerInputController(props) {
		    var _this;

		    _this = _ref.call(this, props) || this;
		    _this.onChange = _this.onChange.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.onFocus = _this.onFocus.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.onClearFocus = _this.onClearFocus.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.clearDate = _this.clearDate.bind((0, _assertThisInitialized2["default"])(_this));
		    return _this;
		  }

		  _proto.onChange = function onChange(dateString) {
		    var _this$props = this.props,
		        isOutsideRange = _this$props.isOutsideRange,
		        keepOpenOnDateSelect = _this$props.keepOpenOnDateSelect,
		        onDateChange = _this$props.onDateChange,
		        onFocusChange = _this$props.onFocusChange,
		        onClose = _this$props.onClose;
		    var newDate = (0, _toMomentObject["default"])(dateString, this.getDisplayFormat());
		    var isValid = newDate && !isOutsideRange(newDate);

		    if (isValid) {
		      onDateChange(newDate);

		      if (!keepOpenOnDateSelect) {
		        onFocusChange({
		          focused: false
		        });
		        onClose({
		          date: newDate
		        });
		      }
		    } else {
		      onDateChange(null);
		    }
		  };

		  _proto.onFocus = function onFocus() {
		    var _this$props2 = this.props,
		        onFocusChange = _this$props2.onFocusChange,
		        disabled = _this$props2.disabled;

		    if (!disabled) {
		      onFocusChange({
		        focused: true
		      });
		    }
		  };

		  _proto.onClearFocus = function onClearFocus() {
		    var _this$props3 = this.props,
		        focused = _this$props3.focused,
		        onFocusChange = _this$props3.onFocusChange,
		        onClose = _this$props3.onClose,
		        date = _this$props3.date;
		    if (!focused) return;
		    onFocusChange({
		      focused: false
		    });
		    onClose({
		      date: date
		    });
		  };

		  _proto.getDisplayFormat = function getDisplayFormat() {
		    var displayFormat = this.props.displayFormat;
		    return typeof displayFormat === 'string' ? displayFormat : displayFormat();
		  };

		  _proto.getDateString = function getDateString(date) {
		    var displayFormat = this.getDisplayFormat();

		    if (date && displayFormat) {
		      return date && date.format(displayFormat);
		    }

		    return (0, _toLocalizedDateString["default"])(date);
		  };

		  _proto.clearDate = function clearDate() {
		    var _this$props4 = this.props,
		        onDateChange = _this$props4.onDateChange,
		        reopenPickerOnClearDate = _this$props4.reopenPickerOnClearDate,
		        onFocusChange = _this$props4.onFocusChange;
		    onDateChange(null);

		    if (reopenPickerOnClearDate) {
		      onFocusChange({
		        focused: true
		      });
		    }
		  };

		  _proto.render = function render() {
		    var _this$props5 = this.props,
		        children = _this$props5.children,
		        id = _this$props5.id,
		        placeholder = _this$props5.placeholder,
		        ariaLabel = _this$props5.ariaLabel,
		        disabled = _this$props5.disabled,
		        focused = _this$props5.focused,
		        isFocused = _this$props5.isFocused,
		        required = _this$props5.required,
		        readOnly = _this$props5.readOnly,
		        openDirection = _this$props5.openDirection,
		        showClearDate = _this$props5.showClearDate,
		        showCaret = _this$props5.showCaret,
		        showDefaultInputIcon = _this$props5.showDefaultInputIcon,
		        inputIconPosition = _this$props5.inputIconPosition,
		        customCloseIcon = _this$props5.customCloseIcon,
		        customInputIcon = _this$props5.customInputIcon,
		        date = _this$props5.date,
		        phrases = _this$props5.phrases,
		        onKeyDownArrowDown = _this$props5.onKeyDownArrowDown,
		        onKeyDownQuestionMark = _this$props5.onKeyDownQuestionMark,
		        screenReaderMessage = _this$props5.screenReaderMessage,
		        isRTL = _this$props5.isRTL,
		        noBorder = _this$props5.noBorder,
		        block = _this$props5.block,
		        small = _this$props5.small,
		        regular = _this$props5.regular,
		        verticalSpacing = _this$props5.verticalSpacing;
		    var displayValue = this.getDateString(date);
		    return _react["default"].createElement(_SingleDatePickerInput["default"], {
		      id: id,
		      placeholder: placeholder,
		      ariaLabel: ariaLabel,
		      focused: focused,
		      isFocused: isFocused,
		      disabled: disabled,
		      required: required,
		      readOnly: readOnly,
		      openDirection: openDirection,
		      showCaret: showCaret,
		      onClearDate: this.clearDate,
		      showClearDate: showClearDate,
		      showDefaultInputIcon: showDefaultInputIcon,
		      inputIconPosition: inputIconPosition,
		      customCloseIcon: customCloseIcon,
		      customInputIcon: customInputIcon,
		      displayValue: displayValue,
		      onChange: this.onChange,
		      onFocus: this.onFocus,
		      onKeyDownShiftTab: this.onClearFocus,
		      onKeyDownArrowDown: onKeyDownArrowDown,
		      onKeyDownQuestionMark: onKeyDownQuestionMark,
		      screenReaderMessage: screenReaderMessage,
		      phrases: phrases,
		      isRTL: isRTL,
		      noBorder: noBorder,
		      block: block,
		      small: small,
		      regular: regular,
		      verticalSpacing: verticalSpacing
		    }, children);
		  };

		  return SingleDatePickerInputController;
		}(_react["default"].PureComponent || _react["default"].Component);

		exports["default"] = SingleDatePickerInputController;
		SingleDatePickerInputController.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
		SingleDatePickerInputController.defaultProps = defaultProps; 
	} (SingleDatePickerInputController));
	return SingleDatePickerInputController;
}

var DayPickerSingleDateController$1 = {};

var slicedToArray = {exports: {}};

var arrayWithHoles = {exports: {}};

arrayWithHoles.exports;

var hasRequiredArrayWithHoles;

function requireArrayWithHoles () {
	if (hasRequiredArrayWithHoles) return arrayWithHoles.exports;
	hasRequiredArrayWithHoles = 1;
	(function (module) {
		function _arrayWithHoles(arr) {
		  if (Array.isArray(arr)) return arr;
		}
		module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (arrayWithHoles));
	return arrayWithHoles.exports;
}

var iterableToArrayLimit = {exports: {}};

iterableToArrayLimit.exports;

var hasRequiredIterableToArrayLimit;

function requireIterableToArrayLimit () {
	if (hasRequiredIterableToArrayLimit) return iterableToArrayLimit.exports;
	hasRequiredIterableToArrayLimit = 1;
	(function (module) {
		function _iterableToArrayLimit(arr, i) {
		  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
		  if (null != _i) {
		    var _s,
		      _e,
		      _x,
		      _r,
		      _arr = [],
		      _n = !0,
		      _d = !1;
		    try {
		      if (_x = (_i = _i.call(arr)).next, 0 === i) {
		        if (Object(_i) !== _i) return;
		        _n = !1;
		      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
		    } catch (err) {
		      _d = !0, _e = err;
		    } finally {
		      try {
		        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
		      } finally {
		        if (_d) throw _e;
		      }
		    }
		    return _arr;
		  }
		}
		module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (iterableToArrayLimit));
	return iterableToArrayLimit.exports;
}

var unsupportedIterableToArray = {exports: {}};

var arrayLikeToArray = {exports: {}};

arrayLikeToArray.exports;

var hasRequiredArrayLikeToArray;

function requireArrayLikeToArray () {
	if (hasRequiredArrayLikeToArray) return arrayLikeToArray.exports;
	hasRequiredArrayLikeToArray = 1;
	(function (module) {
		function _arrayLikeToArray(arr, len) {
		  if (len == null || len > arr.length) len = arr.length;
		  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
		  return arr2;
		}
		module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (arrayLikeToArray));
	return arrayLikeToArray.exports;
}

unsupportedIterableToArray.exports;

var hasRequiredUnsupportedIterableToArray;

function requireUnsupportedIterableToArray () {
	if (hasRequiredUnsupportedIterableToArray) return unsupportedIterableToArray.exports;
	hasRequiredUnsupportedIterableToArray = 1;
	(function (module) {
		var arrayLikeToArray = requireArrayLikeToArray();
		function _unsupportedIterableToArray(o, minLen) {
		  if (!o) return;
		  if (typeof o === "string") return arrayLikeToArray(o, minLen);
		  var n = Object.prototype.toString.call(o).slice(8, -1);
		  if (n === "Object" && o.constructor) n = o.constructor.name;
		  if (n === "Map" || n === "Set") return Array.from(o);
		  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
		}
		module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (unsupportedIterableToArray));
	return unsupportedIterableToArray.exports;
}

var nonIterableRest = {exports: {}};

nonIterableRest.exports;

var hasRequiredNonIterableRest;

function requireNonIterableRest () {
	if (hasRequiredNonIterableRest) return nonIterableRest.exports;
	hasRequiredNonIterableRest = 1;
	(function (module) {
		function _nonIterableRest() {
		  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
		}
		module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (nonIterableRest));
	return nonIterableRest.exports;
}

slicedToArray.exports;

var hasRequiredSlicedToArray;

function requireSlicedToArray () {
	if (hasRequiredSlicedToArray) return slicedToArray.exports;
	hasRequiredSlicedToArray = 1;
	(function (module) {
		var arrayWithHoles = requireArrayWithHoles();
		var iterableToArrayLimit = requireIterableToArrayLimit();
		var unsupportedIterableToArray = requireUnsupportedIterableToArray();
		var nonIterableRest = requireNonIterableRest();
		function _slicedToArray(arr, i) {
		  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
		}
		module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (slicedToArray));
	return slicedToArray.exports;
}

var isSameDay = {};

var hasRequiredIsSameDay;

function requireIsSameDay () {
	if (hasRequiredIsSameDay) return isSameDay;
	hasRequiredIsSameDay = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = isSameDay;

		var _moment = _interopRequireDefault(momentExports);

		function isSameDay(a, b) {
		  if (!_moment["default"].isMoment(a) || !_moment["default"].isMoment(b)) return false; // Compare least significant, most likely to change units first
		  // Moment's isSame clones moment inputs and is a tad slow

		  return a.date() === b.date() && a.month() === b.month() && a.year() === b.year();
		} 
	} (isSameDay));
	return isSameDay;
}

var isAfterDay = {};

var hasRequiredIsAfterDay;

function requireIsAfterDay () {
	if (hasRequiredIsAfterDay) return isAfterDay;
	hasRequiredIsAfterDay = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = isAfterDay;

		var _moment = _interopRequireDefault(momentExports);

		var _isBeforeDay = _interopRequireDefault(requireIsBeforeDay());

		var _isSameDay = _interopRequireDefault(requireIsSameDay());

		function isAfterDay(a, b) {
		  if (!_moment["default"].isMoment(a) || !_moment["default"].isMoment(b)) return false;
		  return !(0, _isBeforeDay["default"])(a, b) && !(0, _isSameDay["default"])(a, b);
		} 
	} (isAfterDay));
	return isAfterDay;
}

var getVisibleDays = {};

var toISOMonthString = {};

var hasRequiredToISOMonthString;

function requireToISOMonthString () {
	if (hasRequiredToISOMonthString) return toISOMonthString;
	hasRequiredToISOMonthString = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = toISOMonthString;

		var _moment = _interopRequireDefault(momentExports);

		var _toMomentObject = _interopRequireDefault(requireToMomentObject());

		function toISOMonthString(date, currentFormat) {
		  var dateObj = _moment["default"].isMoment(date) ? date : (0, _toMomentObject["default"])(date, currentFormat);
		  if (!dateObj) return null; // Template strings compiled in strict mode uses concat, which is slow. Since
		  // this code is in a hot path and we want it to be as fast as possible, we
		  // want to use old-fashioned +.
		  // eslint-disable-next-line prefer-template

		  return dateObj.year() + '-' + String(dateObj.month() + 1).padStart(2, '0');
		} 
	} (toISOMonthString));
	return toISOMonthString;
}

var hasRequiredGetVisibleDays;

function requireGetVisibleDays () {
	if (hasRequiredGetVisibleDays) return getVisibleDays;
	hasRequiredGetVisibleDays = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getVisibleDays;

		var _moment = _interopRequireDefault(momentExports);

		var _toISOMonthString = _interopRequireDefault(requireToISOMonthString());

		function getVisibleDays(month, numberOfMonths, enableOutsideDays, withoutTransitionMonths) {
		  if (!_moment["default"].isMoment(month)) return {};
		  var visibleDaysByMonth = {};
		  var currentMonth = withoutTransitionMonths ? month.clone() : month.clone().subtract(1, 'month');

		  for (var i = 0; i < (withoutTransitionMonths ? numberOfMonths : numberOfMonths + 2); i += 1) {
		    var visibleDays = []; // set utc offset to get correct dates in future (when timezone changes)

		    var baseDate = currentMonth.clone();
		    var firstOfMonth = baseDate.clone().startOf('month').hour(12);
		    var lastOfMonth = baseDate.clone().endOf('month').hour(12);
		    var currentDay = firstOfMonth.clone(); // days belonging to the previous month

		    if (enableOutsideDays) {
		      for (var j = 0; j < currentDay.weekday(); j += 1) {
		        var prevDay = currentDay.clone().subtract(j + 1, 'day');
		        visibleDays.unshift(prevDay);
		      }
		    }

		    while (currentDay < lastOfMonth) {
		      visibleDays.push(currentDay.clone());
		      currentDay.add(1, 'day');
		    }

		    if (enableOutsideDays) {
		      // weekday() returns the index of the day of the week according to the locale
		      // this means if the week starts on Monday, weekday() will return 0 for a Monday date, not 1
		      if (currentDay.weekday() !== 0) {
		        // days belonging to the next month
		        for (var k = currentDay.weekday(), count = 0; k < 7; k += 1, count += 1) {
		          var nextDay = currentDay.clone().add(count, 'day');
		          visibleDays.push(nextDay);
		        }
		      }
		    }

		    visibleDaysByMonth[(0, _toISOMonthString["default"])(currentMonth)] = visibleDays;
		    currentMonth = currentMonth.clone().add(1, 'month');
		  }

		  return visibleDaysByMonth;
		} 
	} (getVisibleDays));
	return getVisibleDays;
}

var toISODateString = {};

var hasRequiredToISODateString;

function requireToISODateString () {
	if (hasRequiredToISODateString) return toISODateString;
	hasRequiredToISODateString = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = toISODateString;

		var _moment = _interopRequireDefault(momentExports);

		var _toMomentObject = _interopRequireDefault(requireToMomentObject());

		function toISODateString(date, currentFormat) {
		  var dateObj = _moment["default"].isMoment(date) ? date : (0, _toMomentObject["default"])(date, currentFormat);
		  if (!dateObj) return null; // Template strings compiled in strict mode uses concat, which is slow. Since
		  // this code is in a hot path and we want it to be as fast as possible, we
		  // want to use old-fashioned +.
		  // eslint-disable-next-line prefer-template

		  return dateObj.year() + '-' + String(dateObj.month() + 1).padStart(2, '0') + '-' + String(dateObj.date()).padStart(2, '0');
		} 
	} (toISODateString));
	return toISODateString;
}

var modifiers = {};

var isDayVisible = {};

var hasRequiredIsDayVisible;

function requireIsDayVisible () {
	if (hasRequiredIsDayVisible) return isDayVisible;
	hasRequiredIsDayVisible = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = isDayVisible;

		var _moment = _interopRequireDefault(momentExports);

		var _isBeforeDay = _interopRequireDefault(requireIsBeforeDay());

		var _isAfterDay = _interopRequireDefault(requireIsAfterDay());

		var _toISOMonthString = _interopRequireDefault(requireToISOMonthString());

		var startCacheOutsideDays = new Map();
		var endCacheOutsideDays = new Map();
		var startCacheInsideDays = new Map();
		var endCacheInsideDays = new Map();

		function isDayVisible(day, month, numberOfMonths, enableOutsideDays) {
		  if (!_moment["default"].isMoment(day)) return false; // Cloning is a little expensive, so we want to do it as little as possible.

		  var startKey = (0, _toISOMonthString["default"])(month); // eslint-disable-next-line prefer-template

		  var endKey = startKey + '+' + numberOfMonths;

		  if (enableOutsideDays) {
		    if (!startCacheOutsideDays.has(startKey)) {
		      startCacheOutsideDays.set(startKey, month.clone().startOf('month').startOf('week'));
		    }

		    if ((0, _isBeforeDay["default"])(day, startCacheOutsideDays.get(startKey))) return false;

		    if (!endCacheOutsideDays.has(endKey)) {
		      endCacheOutsideDays.set(endKey, month.clone().endOf('week').add(numberOfMonths - 1, 'months').endOf('month').endOf('week'));
		    }

		    return !(0, _isAfterDay["default"])(day, endCacheOutsideDays.get(endKey));
		  } // !enableOutsideDays


		  if (!startCacheInsideDays.has(startKey)) {
		    startCacheInsideDays.set(startKey, month.clone().startOf('month'));
		  }

		  if ((0, _isBeforeDay["default"])(day, startCacheInsideDays.get(startKey))) return false;

		  if (!endCacheInsideDays.has(endKey)) {
		    endCacheInsideDays.set(endKey, month.clone().add(numberOfMonths - 1, 'months').endOf('month'));
		  }

		  return !(0, _isAfterDay["default"])(day, endCacheInsideDays.get(endKey));
		} 
	} (isDayVisible));
	return isDayVisible;
}

var getPreviousMonthMemoLast = {};

var hasRequiredGetPreviousMonthMemoLast;

function requireGetPreviousMonthMemoLast () {
	if (hasRequiredGetPreviousMonthMemoLast) return getPreviousMonthMemoLast;
	hasRequiredGetPreviousMonthMemoLast = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getPreviousMonthMemoLast;
		var getPreviousMonthMemoKey;
		var getPreviousMonthMemoValue;

		function getPreviousMonthMemoLast(month) {
		  if (month !== getPreviousMonthMemoKey) {
		    getPreviousMonthMemoKey = month;
		    getPreviousMonthMemoValue = month.clone().subtract(1, 'month');
		  }

		  return getPreviousMonthMemoValue;
		} 
	} (getPreviousMonthMemoLast));
	return getPreviousMonthMemoLast;
}

var hasRequiredModifiers;

function requireModifiers () {
	if (hasRequiredModifiers) return modifiers;
	hasRequiredModifiers = 1;

	var _interopRequireDefault = interopRequireDefaultExports;

	Object.defineProperty(modifiers, "__esModule", {
	  value: true
	});
	modifiers.addModifier = addModifier;
	modifiers.deleteModifier = deleteModifier;

	var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

	var _isDayVisible = _interopRequireDefault(requireIsDayVisible());

	var _toISODateString = _interopRequireDefault(requireToISODateString());

	var _toISOMonthString = _interopRequireDefault(requireToISOMonthString());

	var _getPreviousMonthMemoLast = _interopRequireDefault(requireGetPreviousMonthMemoLast());

	var _constants = requireConstants();

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function addModifier(updatedDays, day, modifier, props, state) {
	  var numberOfVisibleMonths = props.numberOfMonths,
	      enableOutsideDays = props.enableOutsideDays,
	      orientation = props.orientation;
	  var firstVisibleMonth = state.currentMonth,
	      visibleDays = state.visibleDays;
	  var currentMonth = firstVisibleMonth;
	  var numberOfMonths = numberOfVisibleMonths;

	  if (orientation === _constants.VERTICAL_SCROLLABLE) {
	    numberOfMonths = Object.keys(visibleDays).length;
	  } else {
	    currentMonth = (0, _getPreviousMonthMemoLast["default"])(currentMonth);
	    numberOfMonths += 2;
	  }

	  if (!day || !(0, _isDayVisible["default"])(day, currentMonth, numberOfMonths, enableOutsideDays)) {
	    return updatedDays;
	  }

	  var iso = (0, _toISODateString["default"])(day);

	  var updatedDaysAfterAddition = _objectSpread({}, updatedDays);

	  if (enableOutsideDays) {
	    var monthsToUpdate = Object.keys(visibleDays).filter(function (monthKey) {
	      return Object.keys(visibleDays[monthKey]).indexOf(iso) > -1;
	    });
	    updatedDaysAfterAddition = monthsToUpdate.reduce(function (acc, monthIso) {
	      var month = updatedDays[monthIso] || visibleDays[monthIso];

	      if (!month[iso] || !month[iso].has(modifier)) {
	        var modifiers = new Set(month[iso]);
	        modifiers.add(modifier);
	        acc[monthIso] = _objectSpread({}, month, (0, _defineProperty2["default"])({}, iso, modifiers));
	      }

	      return acc;
	    }, updatedDaysAfterAddition);
	  } else {
	    var monthIso = (0, _toISOMonthString["default"])(day);
	    var month = updatedDays[monthIso] || visibleDays[monthIso] || {};

	    if (!month[iso] || !month[iso].has(modifier)) {
	      var modifiers = new Set(month[iso]);
	      modifiers.add(modifier);
	      updatedDaysAfterAddition[monthIso] = _objectSpread({}, month, (0, _defineProperty2["default"])({}, iso, modifiers));
	    }
	  }

	  return updatedDaysAfterAddition;
	}

	function deleteModifier(updatedDays, day, modifier, props, state) {
	  var numberOfVisibleMonths = props.numberOfMonths,
	      enableOutsideDays = props.enableOutsideDays,
	      orientation = props.orientation;
	  var firstVisibleMonth = state.currentMonth,
	      visibleDays = state.visibleDays;
	  var currentMonth = firstVisibleMonth;
	  var numberOfMonths = numberOfVisibleMonths;

	  if (orientation === _constants.VERTICAL_SCROLLABLE) {
	    numberOfMonths = Object.keys(visibleDays).length;
	  } else {
	    currentMonth = (0, _getPreviousMonthMemoLast["default"])(currentMonth);
	    numberOfMonths += 2;
	  }

	  if (!day || !(0, _isDayVisible["default"])(day, currentMonth, numberOfMonths, enableOutsideDays)) {
	    return updatedDays;
	  }

	  var iso = (0, _toISODateString["default"])(day);

	  var updatedDaysAfterDeletion = _objectSpread({}, updatedDays);

	  if (enableOutsideDays) {
	    var monthsToUpdate = Object.keys(visibleDays).filter(function (monthKey) {
	      return Object.keys(visibleDays[monthKey]).indexOf(iso) > -1;
	    });
	    updatedDaysAfterDeletion = monthsToUpdate.reduce(function (acc, monthIso) {
	      var month = updatedDays[monthIso] || visibleDays[monthIso];

	      if (month[iso] && month[iso].has(modifier)) {
	        var modifiers = new Set(month[iso]);
	        modifiers["delete"](modifier);
	        acc[monthIso] = _objectSpread({}, month, (0, _defineProperty2["default"])({}, iso, modifiers));
	      }

	      return acc;
	    }, updatedDaysAfterDeletion);
	  } else {
	    var monthIso = (0, _toISOMonthString["default"])(day);
	    var month = updatedDays[monthIso] || visibleDays[monthIso] || {};

	    if (month[iso] && month[iso].has(modifier)) {
	      var modifiers = new Set(month[iso]);
	      modifiers["delete"](modifier);
	      updatedDaysAfterDeletion[monthIso] = _objectSpread({}, month, (0, _defineProperty2["default"])({}, iso, modifiers));
	    }
	  }

	  return updatedDaysAfterDeletion;
	}
	return modifiers;
}

var ScrollableOrientationShape = {};

var hasRequiredScrollableOrientationShape;

function requireScrollableOrientationShape () {
	if (hasRequiredScrollableOrientationShape) return ScrollableOrientationShape;
	hasRequiredScrollableOrientationShape = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _constants = requireConstants();

		var _default = _propTypes["default"].oneOf([_constants.HORIZONTAL_ORIENTATION, _constants.VERTICAL_ORIENTATION, _constants.VERTICAL_SCROLLABLE]);

		exports["default"] = _default; 
	} (ScrollableOrientationShape));
	return ScrollableOrientationShape;
}

var DayPicker = {};

var toConsumableArray = {exports: {}};

var arrayWithoutHoles = {exports: {}};

arrayWithoutHoles.exports;

var hasRequiredArrayWithoutHoles;

function requireArrayWithoutHoles () {
	if (hasRequiredArrayWithoutHoles) return arrayWithoutHoles.exports;
	hasRequiredArrayWithoutHoles = 1;
	(function (module) {
		var arrayLikeToArray = requireArrayLikeToArray();
		function _arrayWithoutHoles(arr) {
		  if (Array.isArray(arr)) return arrayLikeToArray(arr);
		}
		module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (arrayWithoutHoles));
	return arrayWithoutHoles.exports;
}

var iterableToArray = {exports: {}};

iterableToArray.exports;

var hasRequiredIterableToArray;

function requireIterableToArray () {
	if (hasRequiredIterableToArray) return iterableToArray.exports;
	hasRequiredIterableToArray = 1;
	(function (module) {
		function _iterableToArray(iter) {
		  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
		}
		module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (iterableToArray));
	return iterableToArray.exports;
}

var nonIterableSpread = {exports: {}};

nonIterableSpread.exports;

var hasRequiredNonIterableSpread;

function requireNonIterableSpread () {
	if (hasRequiredNonIterableSpread) return nonIterableSpread.exports;
	hasRequiredNonIterableSpread = 1;
	(function (module) {
		function _nonIterableSpread() {
		  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
		}
		module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (nonIterableSpread));
	return nonIterableSpread.exports;
}

toConsumableArray.exports;

var hasRequiredToConsumableArray;

function requireToConsumableArray () {
	if (hasRequiredToConsumableArray) return toConsumableArray.exports;
	hasRequiredToConsumableArray = 1;
	(function (module) {
		var arrayWithoutHoles = requireArrayWithoutHoles();
		var iterableToArray = requireIterableToArray();
		var unsupportedIterableToArray = requireUnsupportedIterableToArray();
		var nonIterableSpread = requireNonIterableSpread();
		function _toConsumableArray(arr) {
		  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
		}
		module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (toConsumableArray));
	return toConsumableArray.exports;
}

var CalendarMonthGrid = {};

var CalendarMonth = {};

var CalendarWeek = {};

var hasRequiredCalendarWeek;

function requireCalendarWeek () {
	if (hasRequiredCalendarWeek) return CalendarWeek;
	hasRequiredCalendarWeek = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = CalendarWeek;

		var _react = _interopRequireDefault(reactExports);

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _airbnbPropTypes = requireAirbnbPropTypes();

		var propTypes = process.env.NODE_ENV !== "production" ? (0, _airbnbPropTypes.forbidExtraProps)({
		  children: _propTypes["default"].node.isRequired
		}) : {};

		function CalendarWeek(_ref) {
		  var children = _ref.children;
		  return _react["default"].createElement("tr", null, children);
		}

		CalendarWeek.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {}; 
	} (CalendarWeek));
	return CalendarWeek;
}

var CalendarDay = {};

var raf = {exports: {}};

var performanceNow = {exports: {}};

var hasRequiredPerformanceNow;

function requirePerformanceNow () {
	if (hasRequiredPerformanceNow) return performanceNow.exports;
	hasRequiredPerformanceNow = 1;
	// Generated by CoffeeScript 1.12.2
	(function() {
	  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    performanceNow.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    performanceNow.exports = function() {
	      return (getNanoSeconds() - nodeLoadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    moduleLoadTime = getNanoSeconds();
	    upTime = process.uptime() * 1e9;
	    nodeLoadTime = moduleLoadTime - upTime;
	  } else if (Date.now) {
	    performanceNow.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    performanceNow.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }

	}).call(commonjsGlobal);

	
	return performanceNow.exports;
}

var hasRequiredRaf;

function requireRaf () {
	if (hasRequiredRaf) return raf.exports;
	hasRequiredRaf = 1;
	var now = requirePerformanceNow()
	  , root = typeof window === 'undefined' ? commonjsGlobal : window
	  , vendors = ['moz', 'webkit']
	  , suffix = 'AnimationFrame'
	  , raf$1 = root['request' + suffix]
	  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix];

	for(var i = 0; !raf$1 && i < vendors.length; i++) {
	  raf$1 = root[vendors[i] + 'Request' + suffix];
	  caf = root[vendors[i] + 'Cancel' + suffix]
	      || root[vendors[i] + 'CancelRequest' + suffix];
	}

	// Some versions of FF have rAF but not cAF
	if(!raf$1 || !caf) {
	  var last = 0
	    , id = 0
	    , queue = []
	    , frameDuration = 1000 / 60;

	  raf$1 = function(callback) {
	    if(queue.length === 0) {
	      var _now = now()
	        , next = Math.max(0, frameDuration - (_now - last));
	      last = next + _now;
	      setTimeout(function() {
	        var cp = queue.slice(0);
	        // Clear queue here to prevent
	        // callbacks from appending listeners
	        // to the current frame's queue
	        queue.length = 0;
	        for(var i = 0; i < cp.length; i++) {
	          if(!cp[i].cancelled) {
	            try{
	              cp[i].callback(last);
	            } catch(e) {
	              setTimeout(function() { throw e }, 0);
	            }
	          }
	        }
	      }, Math.round(next));
	    }
	    queue.push({
	      handle: ++id,
	      callback: callback,
	      cancelled: false
	    });
	    return id
	  };

	  caf = function(handle) {
	    for(var i = 0; i < queue.length; i++) {
	      if(queue[i].handle === handle) {
	        queue[i].cancelled = true;
	      }
	    }
	  };
	}

	raf.exports = function(fn) {
	  // Wrap in a new function to prevent
	  // `cancel` potentially being assigned
	  // to the native rAF function
	  return raf$1.call(root, fn)
	};
	raf.exports.cancel = function() {
	  caf.apply(root, arguments);
	};
	raf.exports.polyfill = function(object) {
	  if (!object) {
	    object = root;
	  }
	  object.requestAnimationFrame = raf$1;
	  object.cancelAnimationFrame = caf;
	};
	return raf.exports;
}

var getCalendarDaySettings = {};

var getPhrase = {};

var hasRequiredGetPhrase;

function requireGetPhrase () {
	if (hasRequiredGetPhrase) return getPhrase;
	hasRequiredGetPhrase = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getPhrase;

		function getPhrase(phrase, args) {
		  if (typeof phrase === 'string') return phrase;

		  if (typeof phrase === 'function') {
		    return phrase(args);
		  }

		  return '';
		} 
	} (getPhrase));
	return getPhrase;
}

var hasRequiredGetCalendarDaySettings;

function requireGetCalendarDaySettings () {
	if (hasRequiredGetCalendarDaySettings) return getCalendarDaySettings;
	hasRequiredGetCalendarDaySettings = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getCalendarDaySettings;

		var _getPhrase = _interopRequireDefault(requireGetPhrase());

		var _constants = requireConstants();

		function isSelected(modifiers) {
		  return modifiers.has('selected') || modifiers.has('selected-span') || modifiers.has('selected-start') || modifiers.has('selected-end');
		}

		function shouldUseDefaultCursor(modifiers) {
		  return modifiers.has('blocked-minimum-nights') || modifiers.has('blocked-calendar') || modifiers.has('blocked-out-of-range');
		}

		function isHoveredSpan(modifiers) {
		  if (isSelected(modifiers)) return false;
		  return modifiers.has('hovered-span') || modifiers.has('after-hovered-start') || modifiers.has('before-hovered-end');
		}

		function getAriaLabel(phrases, modifiers, day, ariaLabelFormat) {
		  var chooseAvailableDate = phrases.chooseAvailableDate,
		      dateIsUnavailable = phrases.dateIsUnavailable,
		      dateIsSelected = phrases.dateIsSelected,
		      dateIsSelectedAsStartDate = phrases.dateIsSelectedAsStartDate,
		      dateIsSelectedAsEndDate = phrases.dateIsSelectedAsEndDate;
		  var formattedDate = {
		    date: day.format(ariaLabelFormat)
		  };

		  if (modifiers.has('selected-start') && dateIsSelectedAsStartDate) {
		    return (0, _getPhrase["default"])(dateIsSelectedAsStartDate, formattedDate);
		  }

		  if (modifiers.has('selected-end') && dateIsSelectedAsEndDate) {
		    return (0, _getPhrase["default"])(dateIsSelectedAsEndDate, formattedDate);
		  }

		  if (isSelected(modifiers) && dateIsSelected) {
		    return (0, _getPhrase["default"])(dateIsSelected, formattedDate);
		  }

		  if (modifiers.has(_constants.BLOCKED_MODIFIER)) {
		    return (0, _getPhrase["default"])(dateIsUnavailable, formattedDate);
		  }

		  return (0, _getPhrase["default"])(chooseAvailableDate, formattedDate);
		}

		function getCalendarDaySettings(day, ariaLabelFormat, daySize, modifiers, phrases) {
		  return {
		    ariaLabel: getAriaLabel(phrases, modifiers, day, ariaLabelFormat),
		    hoveredSpan: isHoveredSpan(modifiers),
		    isOutsideRange: modifiers.has('blocked-out-of-range'),
		    selected: isSelected(modifiers),
		    useDefaultCursor: shouldUseDefaultCursor(modifiers),
		    daySizeStyles: {
		      width: daySize,
		      height: daySize - 1
		    }
		  };
		} 
	} (getCalendarDaySettings));
	return getCalendarDaySettings;
}

var ModifiersShape = {};

var hasRequiredModifiersShape;

function requireModifiersShape () {
	if (hasRequiredModifiersShape) return ModifiersShape;
	hasRequiredModifiersShape = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

		var _toConsumableArray2 = _interopRequireDefault(requireToConsumableArray());

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _airbnbPropTypes = requireAirbnbPropTypes();

		var _default = (0, _airbnbPropTypes.and)([_propTypes["default"].instanceOf(Set), function modifiers(props, propName) {
		  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
		    rest[_key - 2] = arguments[_key];
		  }

		  var propValue = props[propName];
		  var firstError;
		  (0, _toConsumableArray2["default"])(propValue).some(function (v, i) {
		    var _PropTypes$string;

		    var fakePropName = "".concat(propName, ": index ").concat(i);
		    firstError = (_PropTypes$string = _propTypes["default"].string).isRequired.apply(_PropTypes$string, [(0, _defineProperty2["default"])({}, fakePropName, v), fakePropName].concat(rest));
		    return firstError != null;
		  });
		  return firstError == null ? null : firstError;
		}], 'Modifiers (Set of Strings)');

		exports["default"] = _default; 
	} (ModifiersShape));
	return ModifiersShape;
}

var hasRequiredCalendarDay;

function requireCalendarDay () {
	if (hasRequiredCalendarDay) return CalendarDay;
	hasRequiredCalendarDay = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = exports.PureCalendarDay = void 0;

		var _enzymeShallowEqual = _interopRequireDefault(requireBuild$3());

		var _extends2 = _interopRequireDefault(require_extends());

		var _assertThisInitialized2 = _interopRequireDefault(requireAssertThisInitialized());

		var _inheritsLoose2 = _interopRequireDefault(requireInheritsLoose());

		var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

		var _react = _interopRequireDefault(reactExports);

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _reactMomentProptypes = _interopRequireDefault(src$1);

		var _airbnbPropTypes = requireAirbnbPropTypes();

		var _reactWithStyles = requireWithStyles();

		var _moment = _interopRequireDefault(momentExports);

		var _raf = _interopRequireDefault(requireRaf());

		var _defaultPhrases = requireDefaultPhrases();

		var _getPhrasePropTypes = _interopRequireDefault(requireGetPhrasePropTypes());

		var _getCalendarDaySettings = _interopRequireDefault(requireGetCalendarDaySettings());

		var _ModifiersShape = _interopRequireDefault(requireModifiersShape());

		var _constants = requireConstants();

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		var propTypes = process.env.NODE_ENV !== "production" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, {
		  day: _reactMomentProptypes["default"].momentObj,
		  daySize: _airbnbPropTypes.nonNegativeInteger,
		  isOutsideDay: _propTypes["default"].bool,
		  modifiers: _ModifiersShape["default"],
		  isFocused: _propTypes["default"].bool,
		  tabIndex: _propTypes["default"].oneOf([0, -1]),
		  onDayClick: _propTypes["default"].func,
		  onDayMouseEnter: _propTypes["default"].func,
		  onDayMouseLeave: _propTypes["default"].func,
		  renderDayContents: _propTypes["default"].func,
		  ariaLabelFormat: _propTypes["default"].string,
		  // internationalization
		  phrases: _propTypes["default"].shape((0, _getPhrasePropTypes["default"])(_defaultPhrases.CalendarDayPhrases))
		})) : {};
		var defaultProps = {
		  day: (0, _moment["default"])(),
		  daySize: _constants.DAY_SIZE,
		  isOutsideDay: false,
		  modifiers: new Set(),
		  isFocused: false,
		  tabIndex: -1,
		  onDayClick: function onDayClick() {},
		  onDayMouseEnter: function onDayMouseEnter() {},
		  onDayMouseLeave: function onDayMouseLeave() {},
		  renderDayContents: null,
		  ariaLabelFormat: 'dddd, LL',
		  // internationalization
		  phrases: _defaultPhrases.CalendarDayPhrases
		};

		var CalendarDay =
		/*#__PURE__*/
		function (_ref) {
		  (0, _inheritsLoose2["default"])(CalendarDay, _ref);
		  var _proto = CalendarDay.prototype;

		  _proto[!_react["default"].PureComponent && "shouldComponentUpdate"] = function (nextProps, nextState) {
		    return !(0, _enzymeShallowEqual["default"])(this.props, nextProps) || !(0, _enzymeShallowEqual["default"])(this.state, nextState);
		  };

		  function CalendarDay() {
		    var _this;

		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    _this = _ref.call.apply(_ref, [this].concat(args)) || this;
		    _this.setButtonRef = _this.setButtonRef.bind((0, _assertThisInitialized2["default"])(_this));
		    return _this;
		  }

		  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
		    var _this2 = this;

		    var _this$props = this.props,
		        isFocused = _this$props.isFocused,
		        tabIndex = _this$props.tabIndex;

		    if (tabIndex === 0) {
		      if (isFocused || tabIndex !== prevProps.tabIndex) {
		        (0, _raf["default"])(function () {
		          if (_this2.buttonRef) {
		            _this2.buttonRef.focus();
		          }
		        });
		      }
		    }
		  };

		  _proto.onDayClick = function onDayClick(day, e) {
		    var onDayClick = this.props.onDayClick;
		    onDayClick(day, e);
		  };

		  _proto.onDayMouseEnter = function onDayMouseEnter(day, e) {
		    var onDayMouseEnter = this.props.onDayMouseEnter;
		    onDayMouseEnter(day, e);
		  };

		  _proto.onDayMouseLeave = function onDayMouseLeave(day, e) {
		    var onDayMouseLeave = this.props.onDayMouseLeave;
		    onDayMouseLeave(day, e);
		  };

		  _proto.onKeyDown = function onKeyDown(day, e) {
		    var onDayClick = this.props.onDayClick;
		    var key = e.key;

		    if (key === 'Enter' || key === ' ') {
		      onDayClick(day, e);
		    }
		  };

		  _proto.setButtonRef = function setButtonRef(ref) {
		    this.buttonRef = ref;
		  };

		  _proto.render = function render() {
		    var _this3 = this;

		    var _this$props2 = this.props,
		        day = _this$props2.day,
		        ariaLabelFormat = _this$props2.ariaLabelFormat,
		        daySize = _this$props2.daySize,
		        isOutsideDay = _this$props2.isOutsideDay,
		        modifiers = _this$props2.modifiers,
		        renderDayContents = _this$props2.renderDayContents,
		        tabIndex = _this$props2.tabIndex,
		        styles = _this$props2.styles,
		        phrases = _this$props2.phrases;
		    if (!day) return _react["default"].createElement("td", null);

		    var _getCalendarDaySettin = (0, _getCalendarDaySettings["default"])(day, ariaLabelFormat, daySize, modifiers, phrases),
		        daySizeStyles = _getCalendarDaySettin.daySizeStyles,
		        useDefaultCursor = _getCalendarDaySettin.useDefaultCursor,
		        selected = _getCalendarDaySettin.selected,
		        hoveredSpan = _getCalendarDaySettin.hoveredSpan,
		        isOutsideRange = _getCalendarDaySettin.isOutsideRange,
		        ariaLabel = _getCalendarDaySettin.ariaLabel;

		    return _react["default"].createElement("td", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.CalendarDay, useDefaultCursor && styles.CalendarDay__defaultCursor, styles.CalendarDay__default, isOutsideDay && styles.CalendarDay__outside, modifiers.has('today') && styles.CalendarDay__today, modifiers.has('first-day-of-week') && styles.CalendarDay__firstDayOfWeek, modifiers.has('last-day-of-week') && styles.CalendarDay__lastDayOfWeek, modifiers.has('hovered-offset') && styles.CalendarDay__hovered_offset, modifiers.has('hovered-start-first-possible-end') && styles.CalendarDay__hovered_start_first_possible_end, modifiers.has('hovered-start-blocked-minimum-nights') && styles.CalendarDay__hovered_start_blocked_min_nights, modifiers.has('highlighted-calendar') && styles.CalendarDay__highlighted_calendar, modifiers.has('blocked-minimum-nights') && styles.CalendarDay__blocked_minimum_nights, modifiers.has('blocked-calendar') && styles.CalendarDay__blocked_calendar, hoveredSpan && styles.CalendarDay__hovered_span, modifiers.has('after-hovered-start') && styles.CalendarDay__after_hovered_start, modifiers.has('selected-span') && styles.CalendarDay__selected_span, modifiers.has('selected-start') && styles.CalendarDay__selected_start, modifiers.has('selected-end') && styles.CalendarDay__selected_end, selected && !modifiers.has('selected-span') && styles.CalendarDay__selected, modifiers.has('before-hovered-end') && styles.CalendarDay__before_hovered_end, modifiers.has('no-selected-start-before-selected-end') && styles.CalendarDay__no_selected_start_before_selected_end, modifiers.has('selected-start-in-hovered-span') && styles.CalendarDay__selected_start_in_hovered_span, modifiers.has('selected-end-in-hovered-span') && styles.CalendarDay__selected_end_in_hovered_span, modifiers.has('selected-start-no-selected-end') && styles.CalendarDay__selected_start_no_selected_end, modifiers.has('selected-end-no-selected-start') && styles.CalendarDay__selected_end_no_selected_start, isOutsideRange && styles.CalendarDay__blocked_out_of_range, daySizeStyles), {
		      role: "button" // eslint-disable-line jsx-a11y/no-noninteractive-element-to-interactive-role
		      ,
		      ref: this.setButtonRef,
		      "aria-disabled": modifiers.has('blocked'),
		      "aria-label": ariaLabel,
		      onMouseEnter: function onMouseEnter(e) {
		        _this3.onDayMouseEnter(day, e);
		      },
		      onMouseLeave: function onMouseLeave(e) {
		        _this3.onDayMouseLeave(day, e);
		      },
		      onMouseUp: function onMouseUp(e) {
		        e.currentTarget.blur();
		      },
		      onClick: function onClick(e) {
		        _this3.onDayClick(day, e);
		      },
		      onKeyDown: function onKeyDown(e) {
		        _this3.onKeyDown(day, e);
		      },
		      tabIndex: tabIndex
		    }), renderDayContents ? renderDayContents(day, modifiers) : day.format('D'));
		  };

		  return CalendarDay;
		}(_react["default"].PureComponent || _react["default"].Component);

		exports.PureCalendarDay = CalendarDay;
		CalendarDay.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
		CalendarDay.defaultProps = defaultProps;

		var _default = (0, _reactWithStyles.withStyles)(function (_ref2) {
		  var _ref2$reactDates = _ref2.reactDates,
		      color = _ref2$reactDates.color,
		      font = _ref2$reactDates.font;
		  return {
		    CalendarDay: {
		      boxSizing: 'border-box',
		      cursor: 'pointer',
		      fontSize: font.size,
		      textAlign: 'center',
		      ':active': {
		        outline: 0
		      }
		    },
		    CalendarDay__defaultCursor: {
		      cursor: 'default'
		    },
		    CalendarDay__default: {
		      border: "1px solid ".concat(color.core.borderLight),
		      color: color.text,
		      background: color.background,
		      ':hover': {
		        background: color.core.borderLight,
		        border: "1px solid ".concat(color.core.borderLight),
		        color: 'inherit'
		      }
		    },
		    CalendarDay__hovered_offset: {
		      background: color.core.borderBright,
		      border: "1px double ".concat(color.core.borderLight),
		      color: 'inherit'
		    },
		    CalendarDay__outside: {
		      border: 0,
		      background: color.outside.backgroundColor,
		      color: color.outside.color,
		      ':hover': {
		        border: 0
		      }
		    },
		    CalendarDay__blocked_minimum_nights: {
		      background: color.minimumNights.backgroundColor,
		      border: "1px solid ".concat(color.minimumNights.borderColor),
		      color: color.minimumNights.color,
		      ':hover': {
		        background: color.minimumNights.backgroundColor_hover,
		        color: color.minimumNights.color_active
		      },
		      ':active': {
		        background: color.minimumNights.backgroundColor_active,
		        color: color.minimumNights.color_active
		      }
		    },
		    CalendarDay__highlighted_calendar: {
		      background: color.highlighted.backgroundColor,
		      color: color.highlighted.color,
		      ':hover': {
		        background: color.highlighted.backgroundColor_hover,
		        color: color.highlighted.color_active
		      },
		      ':active': {
		        background: color.highlighted.backgroundColor_active,
		        color: color.highlighted.color_active
		      }
		    },
		    CalendarDay__selected_span: {
		      background: color.selectedSpan.backgroundColor,
		      border: "1px double ".concat(color.selectedSpan.borderColor),
		      color: color.selectedSpan.color,
		      ':hover': {
		        background: color.selectedSpan.backgroundColor_hover,
		        border: "1px double ".concat(color.selectedSpan.borderColor),
		        color: color.selectedSpan.color_active
		      },
		      ':active': {
		        background: color.selectedSpan.backgroundColor_active,
		        border: "1px double ".concat(color.selectedSpan.borderColor),
		        color: color.selectedSpan.color_active
		      }
		    },
		    CalendarDay__selected: {
		      background: color.selected.backgroundColor,
		      border: "1px double ".concat(color.selected.borderColor),
		      color: color.selected.color,
		      ':hover': {
		        background: color.selected.backgroundColor_hover,
		        border: "1px double ".concat(color.selected.borderColor),
		        color: color.selected.color_active
		      },
		      ':active': {
		        background: color.selected.backgroundColor_active,
		        border: "1px double ".concat(color.selected.borderColor),
		        color: color.selected.color_active
		      }
		    },
		    CalendarDay__hovered_span: {
		      background: color.hoveredSpan.backgroundColor,
		      border: "1px double ".concat(color.hoveredSpan.borderColor),
		      color: color.hoveredSpan.color,
		      ':hover': {
		        background: color.hoveredSpan.backgroundColor_hover,
		        border: "1px double ".concat(color.hoveredSpan.borderColor),
		        color: color.hoveredSpan.color_active
		      },
		      ':active': {
		        background: color.hoveredSpan.backgroundColor_active,
		        border: "1px double ".concat(color.hoveredSpan.borderColor),
		        color: color.hoveredSpan.color_active
		      }
		    },
		    CalendarDay__blocked_calendar: {
		      background: color.blocked_calendar.backgroundColor,
		      border: "1px solid ".concat(color.blocked_calendar.borderColor),
		      color: color.blocked_calendar.color,
		      ':hover': {
		        background: color.blocked_calendar.backgroundColor_hover,
		        border: "1px solid ".concat(color.blocked_calendar.borderColor),
		        color: color.blocked_calendar.color_active
		      },
		      ':active': {
		        background: color.blocked_calendar.backgroundColor_active,
		        border: "1px solid ".concat(color.blocked_calendar.borderColor),
		        color: color.blocked_calendar.color_active
		      }
		    },
		    CalendarDay__blocked_out_of_range: {
		      background: color.blocked_out_of_range.backgroundColor,
		      border: "1px solid ".concat(color.blocked_out_of_range.borderColor),
		      color: color.blocked_out_of_range.color,
		      ':hover': {
		        background: color.blocked_out_of_range.backgroundColor_hover,
		        border: "1px solid ".concat(color.blocked_out_of_range.borderColor),
		        color: color.blocked_out_of_range.color_active
		      },
		      ':active': {
		        background: color.blocked_out_of_range.backgroundColor_active,
		        border: "1px solid ".concat(color.blocked_out_of_range.borderColor),
		        color: color.blocked_out_of_range.color_active
		      }
		    },
		    CalendarDay__hovered_start_first_possible_end: {
		      background: color.core.borderLighter,
		      border: "1px double ".concat(color.core.borderLighter)
		    },
		    CalendarDay__hovered_start_blocked_min_nights: {
		      background: color.core.borderLighter,
		      border: "1px double ".concat(color.core.borderLight)
		    },
		    CalendarDay__selected_start: {},
		    CalendarDay__selected_end: {},
		    CalendarDay__today: {},
		    CalendarDay__firstDayOfWeek: {},
		    CalendarDay__lastDayOfWeek: {},
		    CalendarDay__after_hovered_start: {},
		    CalendarDay__before_hovered_end: {},
		    CalendarDay__no_selected_start_before_selected_end: {},
		    CalendarDay__selected_start_in_hovered_span: {},
		    CalendarDay__selected_end_in_hovered_span: {},
		    CalendarDay__selected_start_no_selected_end: {},
		    CalendarDay__selected_end_no_selected_start: {}
		  };
		}, {
		  pureComponent: typeof _react["default"].PureComponent !== 'undefined'
		})(CalendarDay);

		exports["default"] = _default; 
	} (CalendarDay));
	return CalendarDay;
}

var calculateDimension = {};

var hasRequiredCalculateDimension;

function requireCalculateDimension () {
	if (hasRequiredCalculateDimension) return calculateDimension;
	hasRequiredCalculateDimension = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = calculateDimension;

		function calculateDimension(el, axis) {
		  var borderBox = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
		  var withMargin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

		  if (!el) {
		    return 0;
		  }

		  var axisStart = axis === 'width' ? 'Left' : 'Top';
		  var axisEnd = axis === 'width' ? 'Right' : 'Bottom'; // Only read styles if we need to

		  var style = !borderBox || withMargin ? window.getComputedStyle(el) : null; // Offset includes border and padding

		  var offsetWidth = el.offsetWidth,
		      offsetHeight = el.offsetHeight;
		  var size = axis === 'width' ? offsetWidth : offsetHeight; // Get the inner size

		  if (!borderBox) {
		    size -= parseFloat(style["padding".concat(axisStart)]) + parseFloat(style["padding".concat(axisEnd)]) + parseFloat(style["border".concat(axisStart, "Width")]) + parseFloat(style["border".concat(axisEnd, "Width")]);
		  } // Apply margin


		  if (withMargin) {
		    size += parseFloat(style["margin".concat(axisStart)]) + parseFloat(style["margin".concat(axisEnd)]);
		  }

		  return size;
		} 
	} (calculateDimension));
	return calculateDimension;
}

var getCalendarMonthWeeks = {};

var hasRequiredGetCalendarMonthWeeks;

function requireGetCalendarMonthWeeks () {
	if (hasRequiredGetCalendarMonthWeeks) return getCalendarMonthWeeks;
	hasRequiredGetCalendarMonthWeeks = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getCalendarMonthWeeks;

		var _moment = _interopRequireDefault(momentExports);

		var _constants = requireConstants();

		function getCalendarMonthWeeks(month, enableOutsideDays) {
		  var firstDayOfWeek = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _moment["default"].localeData().firstDayOfWeek();

		  if (!_moment["default"].isMoment(month) || !month.isValid()) {
		    throw new TypeError('`month` must be a valid moment object');
		  }

		  if (_constants.WEEKDAYS.indexOf(firstDayOfWeek) === -1) {
		    throw new TypeError('`firstDayOfWeek` must be an integer between 0 and 6');
		  } // set utc offset to get correct dates in future (when timezone changes)


		  var firstOfMonth = month.clone().startOf('month').hour(12);
		  var lastOfMonth = month.clone().endOf('month').hour(12); // calculate the exact first and last days to fill the entire matrix
		  // (considering days outside month)

		  var prevDays = (firstOfMonth.day() + 7 - firstDayOfWeek) % 7;
		  var nextDays = (firstDayOfWeek + 6 - lastOfMonth.day()) % 7;
		  var firstDay = firstOfMonth.clone().subtract(prevDays, 'day');
		  var lastDay = lastOfMonth.clone().add(nextDays, 'day');
		  var totalDays = lastDay.diff(firstDay, 'days') + 1;
		  var currentDay = firstDay.clone();
		  var weeksInMonth = [];

		  for (var i = 0; i < totalDays; i += 1) {
		    if (i % 7 === 0) {
		      weeksInMonth.push([]);
		    }

		    var day = null;

		    if (i >= prevDays && i < totalDays - nextDays || enableOutsideDays) {
		      day = currentDay.clone();
		    }

		    weeksInMonth[weeksInMonth.length - 1].push(day);
		    currentDay.add(1, 'day');
		  }

		  return weeksInMonth;
		} 
	} (getCalendarMonthWeeks));
	return getCalendarMonthWeeks;
}

var hasRequiredCalendarMonth;

function requireCalendarMonth () {
	if (hasRequiredCalendarMonth) return CalendarMonth;
	hasRequiredCalendarMonth = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _enzymeShallowEqual = _interopRequireDefault(requireBuild$3());

		var _extends2 = _interopRequireDefault(require_extends());

		var _assertThisInitialized2 = _interopRequireDefault(requireAssertThisInitialized());

		var _inheritsLoose2 = _interopRequireDefault(requireInheritsLoose());

		var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

		var _react = _interopRequireDefault(reactExports);

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _reactMomentProptypes = _interopRequireDefault(src$1);

		var _airbnbPropTypes = requireAirbnbPropTypes();

		var _reactWithStyles = requireWithStyles();

		var _moment = _interopRequireDefault(momentExports);

		var _defaultPhrases = requireDefaultPhrases();

		var _getPhrasePropTypes = _interopRequireDefault(requireGetPhrasePropTypes());

		var _CalendarWeek = _interopRequireDefault(requireCalendarWeek());

		var _CalendarDay = _interopRequireDefault(requireCalendarDay());

		var _calculateDimension = _interopRequireDefault(requireCalculateDimension());

		var _getCalendarMonthWeeks = _interopRequireDefault(requireGetCalendarMonthWeeks());

		var _isSameDay = _interopRequireDefault(requireIsSameDay());

		var _toISODateString = _interopRequireDefault(requireToISODateString());

		var _ModifiersShape = _interopRequireDefault(requireModifiersShape());

		var _ScrollableOrientationShape = _interopRequireDefault(requireScrollableOrientationShape());

		var _DayOfWeekShape = _interopRequireDefault(requireDayOfWeekShape());

		var _constants = requireConstants();

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		var propTypes = process.env.NODE_ENV !== "production" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, {
		  month: _reactMomentProptypes["default"].momentObj,
		  horizontalMonthPadding: _airbnbPropTypes.nonNegativeInteger,
		  isVisible: _propTypes["default"].bool,
		  enableOutsideDays: _propTypes["default"].bool,
		  modifiers: _propTypes["default"].objectOf(_ModifiersShape["default"]),
		  orientation: _ScrollableOrientationShape["default"],
		  daySize: _airbnbPropTypes.nonNegativeInteger,
		  onDayClick: _propTypes["default"].func,
		  onDayMouseEnter: _propTypes["default"].func,
		  onDayMouseLeave: _propTypes["default"].func,
		  onMonthSelect: _propTypes["default"].func,
		  onYearSelect: _propTypes["default"].func,
		  renderMonthText: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes["default"].func, 'renderMonthText', 'renderMonthElement'),
		  renderCalendarDay: _propTypes["default"].func,
		  renderDayContents: _propTypes["default"].func,
		  renderMonthElement: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes["default"].func, 'renderMonthText', 'renderMonthElement'),
		  firstDayOfWeek: _DayOfWeekShape["default"],
		  setMonthTitleHeight: _propTypes["default"].func,
		  verticalBorderSpacing: _airbnbPropTypes.nonNegativeInteger,
		  focusedDate: _reactMomentProptypes["default"].momentObj,
		  // indicates focusable day
		  isFocused: _propTypes["default"].bool,
		  // indicates whether or not to move focus to focusable day
		  // i18n
		  monthFormat: _propTypes["default"].string,
		  phrases: _propTypes["default"].shape((0, _getPhrasePropTypes["default"])(_defaultPhrases.CalendarDayPhrases)),
		  dayAriaLabelFormat: _propTypes["default"].string
		})) : {};
		var defaultProps = {
		  month: (0, _moment["default"])(),
		  horizontalMonthPadding: 13,
		  isVisible: true,
		  enableOutsideDays: false,
		  modifiers: {},
		  orientation: _constants.HORIZONTAL_ORIENTATION,
		  daySize: _constants.DAY_SIZE,
		  onDayClick: function onDayClick() {},
		  onDayMouseEnter: function onDayMouseEnter() {},
		  onDayMouseLeave: function onDayMouseLeave() {},
		  onMonthSelect: function onMonthSelect() {},
		  onYearSelect: function onYearSelect() {},
		  renderMonthText: null,
		  renderCalendarDay: function renderCalendarDay(props) {
		    return _react["default"].createElement(_CalendarDay["default"], props);
		  },
		  renderDayContents: null,
		  renderMonthElement: null,
		  firstDayOfWeek: null,
		  setMonthTitleHeight: null,
		  focusedDate: null,
		  isFocused: false,
		  // i18n
		  monthFormat: 'MMMM YYYY',
		  // english locale
		  phrases: _defaultPhrases.CalendarDayPhrases,
		  dayAriaLabelFormat: undefined,
		  verticalBorderSpacing: undefined
		};

		var CalendarMonth =
		/*#__PURE__*/
		function (_ref) {
		  (0, _inheritsLoose2["default"])(CalendarMonth, _ref);
		  var _proto = CalendarMonth.prototype;

		  _proto[!_react["default"].PureComponent && "shouldComponentUpdate"] = function (nextProps, nextState) {
		    return !(0, _enzymeShallowEqual["default"])(this.props, nextProps) || !(0, _enzymeShallowEqual["default"])(this.state, nextState);
		  };

		  function CalendarMonth(props) {
		    var _this;

		    _this = _ref.call(this, props) || this;
		    _this.state = {
		      weeks: (0, _getCalendarMonthWeeks["default"])(props.month, props.enableOutsideDays, props.firstDayOfWeek == null ? _moment["default"].localeData().firstDayOfWeek() : props.firstDayOfWeek)
		    };
		    _this.setCaptionRef = _this.setCaptionRef.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.setMonthTitleHeight = _this.setMonthTitleHeight.bind((0, _assertThisInitialized2["default"])(_this));
		    return _this;
		  }

		  _proto.componentDidMount = function componentDidMount() {
		    this.setMonthTitleHeightTimeout = setTimeout(this.setMonthTitleHeight, 0);
		  };

		  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		    var month = nextProps.month,
		        enableOutsideDays = nextProps.enableOutsideDays,
		        firstDayOfWeek = nextProps.firstDayOfWeek;
		    var _this$props = this.props,
		        prevMonth = _this$props.month,
		        prevEnableOutsideDays = _this$props.enableOutsideDays,
		        prevFirstDayOfWeek = _this$props.firstDayOfWeek;

		    if (!month.isSame(prevMonth) || enableOutsideDays !== prevEnableOutsideDays || firstDayOfWeek !== prevFirstDayOfWeek) {
		      this.setState({
		        weeks: (0, _getCalendarMonthWeeks["default"])(month, enableOutsideDays, firstDayOfWeek == null ? _moment["default"].localeData().firstDayOfWeek() : firstDayOfWeek)
		      });
		    }
		  };

		  _proto.componentWillUnmount = function componentWillUnmount() {
		    if (this.setMonthTitleHeightTimeout) {
		      clearTimeout(this.setMonthTitleHeightTimeout);
		    }
		  };

		  _proto.setMonthTitleHeight = function setMonthTitleHeight() {
		    var setMonthTitleHeight = this.props.setMonthTitleHeight;

		    if (setMonthTitleHeight) {
		      var captionHeight = (0, _calculateDimension["default"])(this.captionRef, 'height', true, true);
		      setMonthTitleHeight(captionHeight);
		    }
		  };

		  _proto.setCaptionRef = function setCaptionRef(ref) {
		    this.captionRef = ref;
		  };

		  _proto.render = function render() {
		    var _this$props2 = this.props,
		        dayAriaLabelFormat = _this$props2.dayAriaLabelFormat,
		        daySize = _this$props2.daySize,
		        focusedDate = _this$props2.focusedDate,
		        horizontalMonthPadding = _this$props2.horizontalMonthPadding,
		        isFocused = _this$props2.isFocused,
		        isVisible = _this$props2.isVisible,
		        modifiers = _this$props2.modifiers,
		        month = _this$props2.month,
		        monthFormat = _this$props2.monthFormat,
		        onDayClick = _this$props2.onDayClick,
		        onDayMouseEnter = _this$props2.onDayMouseEnter,
		        onDayMouseLeave = _this$props2.onDayMouseLeave,
		        onMonthSelect = _this$props2.onMonthSelect,
		        onYearSelect = _this$props2.onYearSelect,
		        orientation = _this$props2.orientation,
		        phrases = _this$props2.phrases,
		        renderCalendarDay = _this$props2.renderCalendarDay,
		        renderDayContents = _this$props2.renderDayContents,
		        renderMonthElement = _this$props2.renderMonthElement,
		        renderMonthText = _this$props2.renderMonthText,
		        styles = _this$props2.styles,
		        verticalBorderSpacing = _this$props2.verticalBorderSpacing;
		    var weeks = this.state.weeks;
		    var monthTitle = renderMonthText ? renderMonthText(month) : month.format(monthFormat);
		    var verticalScrollable = orientation === _constants.VERTICAL_SCROLLABLE;
		    return _react["default"].createElement("div", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.CalendarMonth, {
		      padding: "0 ".concat(horizontalMonthPadding, "px")
		    }), {
		      "data-visible": isVisible
		    }), _react["default"].createElement("div", (0, _extends2["default"])({
		      ref: this.setCaptionRef
		    }, (0, _reactWithStyles.css)(styles.CalendarMonth_caption, verticalScrollable && styles.CalendarMonth_caption__verticalScrollable)), renderMonthElement ? renderMonthElement({
		      month: month,
		      onMonthSelect: onMonthSelect,
		      onYearSelect: onYearSelect,
		      isVisible: isVisible
		    }) : _react["default"].createElement("strong", null, monthTitle)), _react["default"].createElement("table", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(!verticalBorderSpacing && styles.CalendarMonth_table, verticalBorderSpacing && styles.CalendarMonth_verticalSpacing, verticalBorderSpacing && {
		      borderSpacing: "0px ".concat(verticalBorderSpacing, "px")
		    }), {
		      role: "presentation"
		    }), _react["default"].createElement("tbody", null, weeks.map(function (week, i) {
		      return _react["default"].createElement(_CalendarWeek["default"], {
		        key: i
		      }, week.map(function (day, dayOfWeek) {
		        return renderCalendarDay({
		          key: dayOfWeek,
		          day: day,
		          daySize: daySize,
		          isOutsideDay: !day || day.month() !== month.month(),
		          tabIndex: isVisible && (0, _isSameDay["default"])(day, focusedDate) ? 0 : -1,
		          isFocused: isFocused,
		          onDayMouseEnter: onDayMouseEnter,
		          onDayMouseLeave: onDayMouseLeave,
		          onDayClick: onDayClick,
		          renderDayContents: renderDayContents,
		          phrases: phrases,
		          modifiers: modifiers[(0, _toISODateString["default"])(day)],
		          ariaLabelFormat: dayAriaLabelFormat
		        });
		      }));
		    }))));
		  };

		  return CalendarMonth;
		}(_react["default"].PureComponent || _react["default"].Component);

		CalendarMonth.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
		CalendarMonth.defaultProps = defaultProps;

		var _default = (0, _reactWithStyles.withStyles)(function (_ref2) {
		  var _ref2$reactDates = _ref2.reactDates,
		      color = _ref2$reactDates.color,
		      font = _ref2$reactDates.font,
		      spacing = _ref2$reactDates.spacing;
		  return {
		    CalendarMonth: {
		      background: color.background,
		      textAlign: 'center',
		      verticalAlign: 'top',
		      userSelect: 'none'
		    },
		    CalendarMonth_table: {
		      borderCollapse: 'collapse',
		      borderSpacing: 0
		    },
		    CalendarMonth_verticalSpacing: {
		      borderCollapse: 'separate'
		    },
		    CalendarMonth_caption: {
		      color: color.text,
		      fontSize: font.captionSize,
		      textAlign: 'center',
		      paddingTop: spacing.captionPaddingTop,
		      paddingBottom: spacing.captionPaddingBottom,
		      captionSide: 'initial'
		    },
		    CalendarMonth_caption__verticalScrollable: {
		      paddingTop: 12,
		      paddingBottom: 7
		    }
		  };
		}, {
		  pureComponent: typeof _react["default"].PureComponent !== 'undefined'
		})(CalendarMonth);

		exports["default"] = _default; 
	} (CalendarMonth));
	return CalendarMonth;
}

var isTransitionEndSupported = {};

var hasRequiredIsTransitionEndSupported;

function requireIsTransitionEndSupported () {
	if (hasRequiredIsTransitionEndSupported) return isTransitionEndSupported;
	hasRequiredIsTransitionEndSupported = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = isTransitionEndSupported;

		function isTransitionEndSupported() {
		  return !!(typeof window !== 'undefined' && 'TransitionEvent' in window);
		} 
	} (isTransitionEndSupported));
	return isTransitionEndSupported;
}

var getTransformStyles = {};

var hasRequiredGetTransformStyles;

function requireGetTransformStyles () {
	if (hasRequiredGetTransformStyles) return getTransformStyles;
	hasRequiredGetTransformStyles = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getTransformStyles;

		function getTransformStyles(transformValue) {
		  return {
		    transform: transformValue,
		    msTransform: transformValue,
		    MozTransform: transformValue,
		    WebkitTransform: transformValue
		  };
		} 
	} (getTransformStyles));
	return getTransformStyles;
}

var getCalendarMonthWidth = {};

var hasRequiredGetCalendarMonthWidth;

function requireGetCalendarMonthWidth () {
	if (hasRequiredGetCalendarMonthWidth) return getCalendarMonthWidth;
	hasRequiredGetCalendarMonthWidth = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getCalendarMonthWidth;

		function getCalendarMonthWidth(daySize) {
		  var calendarMonthPadding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
		  return 7 * daySize + 2 * calendarMonthPadding + 1;
		} 
	} (getCalendarMonthWidth));
	return getCalendarMonthWidth;
}

var isPrevMonth = {};

var isSameMonth = {};

var hasRequiredIsSameMonth;

function requireIsSameMonth () {
	if (hasRequiredIsSameMonth) return isSameMonth;
	hasRequiredIsSameMonth = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = isSameMonth;

		var _moment = _interopRequireDefault(momentExports);

		function isSameMonth(a, b) {
		  if (!_moment["default"].isMoment(a) || !_moment["default"].isMoment(b)) return false; // Compare least significant, most likely to change units first
		  // Moment's isSame clones moment inputs and is a tad slow

		  return a.month() === b.month() && a.year() === b.year();
		} 
	} (isSameMonth));
	return isSameMonth;
}

var hasRequiredIsPrevMonth;

function requireIsPrevMonth () {
	if (hasRequiredIsPrevMonth) return isPrevMonth;
	hasRequiredIsPrevMonth = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = isPrevMonth;

		var _moment = _interopRequireDefault(momentExports);

		var _isSameMonth = _interopRequireDefault(requireIsSameMonth());

		function isPrevMonth(a, b) {
		  if (!_moment["default"].isMoment(a) || !_moment["default"].isMoment(b)) return false;
		  return (0, _isSameMonth["default"])(a.clone().subtract(1, 'month'), b);
		} 
	} (isPrevMonth));
	return isPrevMonth;
}

var isNextMonth = {};

var hasRequiredIsNextMonth;

function requireIsNextMonth () {
	if (hasRequiredIsNextMonth) return isNextMonth;
	hasRequiredIsNextMonth = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = isNextMonth;

		var _moment = _interopRequireDefault(momentExports);

		var _isSameMonth = _interopRequireDefault(requireIsSameMonth());

		function isNextMonth(a, b) {
		  if (!_moment["default"].isMoment(a) || !_moment["default"].isMoment(b)) return false;
		  return (0, _isSameMonth["default"])(a.clone().add(1, 'month'), b);
		} 
	} (isNextMonth));
	return isNextMonth;
}

var hasRequiredCalendarMonthGrid;

function requireCalendarMonthGrid () {
	if (hasRequiredCalendarMonthGrid) return CalendarMonthGrid;
	hasRequiredCalendarMonthGrid = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _enzymeShallowEqual = _interopRequireDefault(requireBuild$3());

		var _extends2 = _interopRequireDefault(require_extends());

		var _assertThisInitialized2 = _interopRequireDefault(requireAssertThisInitialized());

		var _inheritsLoose2 = _interopRequireDefault(requireInheritsLoose());

		var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

		var _react = _interopRequireDefault(reactExports);

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _reactMomentProptypes = _interopRequireDefault(src$1);

		var _airbnbPropTypes = requireAirbnbPropTypes();

		var _reactWithStyles = requireWithStyles();

		var _moment = _interopRequireDefault(momentExports);

		var _consolidatedEvents = requireLib();

		var _defaultPhrases = requireDefaultPhrases();

		var _getPhrasePropTypes = _interopRequireDefault(requireGetPhrasePropTypes());

		var _noflip = _interopRequireDefault(requireNoflip());

		var _CalendarMonth = _interopRequireDefault(requireCalendarMonth());

		var _isTransitionEndSupported = _interopRequireDefault(requireIsTransitionEndSupported());

		var _getTransformStyles = _interopRequireDefault(requireGetTransformStyles());

		var _getCalendarMonthWidth = _interopRequireDefault(requireGetCalendarMonthWidth());

		var _toISOMonthString = _interopRequireDefault(requireToISOMonthString());

		var _isPrevMonth = _interopRequireDefault(requireIsPrevMonth());

		var _isNextMonth = _interopRequireDefault(requireIsNextMonth());

		var _ModifiersShape = _interopRequireDefault(requireModifiersShape());

		var _ScrollableOrientationShape = _interopRequireDefault(requireScrollableOrientationShape());

		var _DayOfWeekShape = _interopRequireDefault(requireDayOfWeekShape());

		var _constants = requireConstants();

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		var propTypes = process.env.NODE_ENV !== "production" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, {
		  enableOutsideDays: _propTypes["default"].bool,
		  firstVisibleMonthIndex: _propTypes["default"].number,
		  horizontalMonthPadding: _airbnbPropTypes.nonNegativeInteger,
		  initialMonth: _reactMomentProptypes["default"].momentObj,
		  isAnimating: _propTypes["default"].bool,
		  numberOfMonths: _propTypes["default"].number,
		  modifiers: _propTypes["default"].objectOf(_propTypes["default"].objectOf(_ModifiersShape["default"])),
		  orientation: _ScrollableOrientationShape["default"],
		  onDayClick: _propTypes["default"].func,
		  onDayMouseEnter: _propTypes["default"].func,
		  onDayMouseLeave: _propTypes["default"].func,
		  onMonthTransitionEnd: _propTypes["default"].func,
		  onMonthChange: _propTypes["default"].func,
		  onYearChange: _propTypes["default"].func,
		  renderMonthText: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes["default"].func, 'renderMonthText', 'renderMonthElement'),
		  renderCalendarDay: _propTypes["default"].func,
		  renderDayContents: _propTypes["default"].func,
		  translationValue: _propTypes["default"].number,
		  renderMonthElement: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes["default"].func, 'renderMonthText', 'renderMonthElement'),
		  daySize: _airbnbPropTypes.nonNegativeInteger,
		  focusedDate: _reactMomentProptypes["default"].momentObj,
		  // indicates focusable day
		  isFocused: _propTypes["default"].bool,
		  // indicates whether or not to move focus to focusable day
		  firstDayOfWeek: _DayOfWeekShape["default"],
		  setMonthTitleHeight: _propTypes["default"].func,
		  isRTL: _propTypes["default"].bool,
		  transitionDuration: _airbnbPropTypes.nonNegativeInteger,
		  verticalBorderSpacing: _airbnbPropTypes.nonNegativeInteger,
		  // i18n
		  monthFormat: _propTypes["default"].string,
		  phrases: _propTypes["default"].shape((0, _getPhrasePropTypes["default"])(_defaultPhrases.CalendarDayPhrases)),
		  dayAriaLabelFormat: _propTypes["default"].string
		})) : {};
		var defaultProps = {
		  enableOutsideDays: false,
		  firstVisibleMonthIndex: 0,
		  horizontalMonthPadding: 13,
		  initialMonth: (0, _moment["default"])(),
		  isAnimating: false,
		  numberOfMonths: 1,
		  modifiers: {},
		  orientation: _constants.HORIZONTAL_ORIENTATION,
		  onDayClick: function onDayClick() {},
		  onDayMouseEnter: function onDayMouseEnter() {},
		  onDayMouseLeave: function onDayMouseLeave() {},
		  onMonthChange: function onMonthChange() {},
		  onYearChange: function onYearChange() {},
		  onMonthTransitionEnd: function onMonthTransitionEnd() {},
		  renderMonthText: null,
		  renderCalendarDay: undefined,
		  renderDayContents: null,
		  translationValue: null,
		  renderMonthElement: null,
		  daySize: _constants.DAY_SIZE,
		  focusedDate: null,
		  isFocused: false,
		  firstDayOfWeek: null,
		  setMonthTitleHeight: null,
		  isRTL: false,
		  transitionDuration: 200,
		  verticalBorderSpacing: undefined,
		  // i18n
		  monthFormat: 'MMMM YYYY',
		  // english locale
		  phrases: _defaultPhrases.CalendarDayPhrases,
		  dayAriaLabelFormat: undefined
		};

		function getMonths(initialMonth, numberOfMonths, withoutTransitionMonths) {
		  var month = initialMonth.clone();
		  if (!withoutTransitionMonths) month = month.subtract(1, 'month');
		  var months = [];

		  for (var i = 0; i < (withoutTransitionMonths ? numberOfMonths : numberOfMonths + 2); i += 1) {
		    months.push(month);
		    month = month.clone().add(1, 'month');
		  }

		  return months;
		}

		var CalendarMonthGrid =
		/*#__PURE__*/
		function (_ref) {
		  (0, _inheritsLoose2["default"])(CalendarMonthGrid, _ref);
		  var _proto = CalendarMonthGrid.prototype;

		  _proto[!_react["default"].PureComponent && "shouldComponentUpdate"] = function (nextProps, nextState) {
		    return !(0, _enzymeShallowEqual["default"])(this.props, nextProps) || !(0, _enzymeShallowEqual["default"])(this.state, nextState);
		  };

		  function CalendarMonthGrid(props) {
		    var _this;

		    _this = _ref.call(this, props) || this;
		    var withoutTransitionMonths = props.orientation === _constants.VERTICAL_SCROLLABLE;
		    _this.state = {
		      months: getMonths(props.initialMonth, props.numberOfMonths, withoutTransitionMonths)
		    };
		    _this.isTransitionEndSupported = (0, _isTransitionEndSupported["default"])();
		    _this.onTransitionEnd = _this.onTransitionEnd.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.setContainerRef = _this.setContainerRef.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.locale = _moment["default"].locale();
		    _this.onMonthSelect = _this.onMonthSelect.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.onYearSelect = _this.onYearSelect.bind((0, _assertThisInitialized2["default"])(_this));
		    return _this;
		  }

		  _proto.componentDidMount = function componentDidMount() {
		    this.removeEventListener = (0, _consolidatedEvents.addEventListener)(this.container, 'transitionend', this.onTransitionEnd);
		  };

		  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		    var _this2 = this;

		    var initialMonth = nextProps.initialMonth,
		        numberOfMonths = nextProps.numberOfMonths,
		        orientation = nextProps.orientation;
		    var months = this.state.months;
		    var _this$props = this.props,
		        prevInitialMonth = _this$props.initialMonth,
		        prevNumberOfMonths = _this$props.numberOfMonths;
		    var hasMonthChanged = !prevInitialMonth.isSame(initialMonth, 'month');
		    var hasNumberOfMonthsChanged = prevNumberOfMonths !== numberOfMonths;
		    var newMonths = months;

		    if (hasMonthChanged && !hasNumberOfMonthsChanged) {
		      if ((0, _isNextMonth["default"])(prevInitialMonth, initialMonth)) {
		        newMonths = months.slice(1);
		        newMonths.push(months[months.length - 1].clone().add(1, 'month'));
		      } else if ((0, _isPrevMonth["default"])(prevInitialMonth, initialMonth)) {
		        newMonths = months.slice(0, months.length - 1);
		        newMonths.unshift(months[0].clone().subtract(1, 'month'));
		      } else {
		        var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;
		        newMonths = getMonths(initialMonth, numberOfMonths, withoutTransitionMonths);
		      }
		    }

		    if (hasNumberOfMonthsChanged) {
		      var _withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;

		      newMonths = getMonths(initialMonth, numberOfMonths, _withoutTransitionMonths);
		    }

		    var momentLocale = _moment["default"].locale();

		    if (this.locale !== momentLocale) {
		      this.locale = momentLocale;
		      newMonths = newMonths.map(function (m) {
		        return m.locale(_this2.locale);
		      });
		    }

		    this.setState({
		      months: newMonths
		    });
		  };

		  _proto.componentDidUpdate = function componentDidUpdate() {
		    var _this$props2 = this.props,
		        isAnimating = _this$props2.isAnimating,
		        transitionDuration = _this$props2.transitionDuration,
		        onMonthTransitionEnd = _this$props2.onMonthTransitionEnd; // For IE9, immediately call onMonthTransitionEnd instead of
		    // waiting for the animation to complete. Similarly, if transitionDuration
		    // is set to 0, also immediately invoke the onMonthTransitionEnd callback

		    if ((!this.isTransitionEndSupported || !transitionDuration) && isAnimating) {
		      onMonthTransitionEnd();
		    }
		  };

		  _proto.componentWillUnmount = function componentWillUnmount() {
		    if (this.removeEventListener) this.removeEventListener();
		  };

		  _proto.onTransitionEnd = function onTransitionEnd() {
		    var onMonthTransitionEnd = this.props.onMonthTransitionEnd;
		    onMonthTransitionEnd();
		  };

		  _proto.onMonthSelect = function onMonthSelect(currentMonth, newMonthVal) {
		    var newMonth = currentMonth.clone();
		    var _this$props3 = this.props,
		        onMonthChange = _this$props3.onMonthChange,
		        orientation = _this$props3.orientation;
		    var months = this.state.months;
		    var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;
		    var initialMonthSubtraction = months.indexOf(currentMonth);

		    if (!withoutTransitionMonths) {
		      initialMonthSubtraction -= 1;
		    }

		    newMonth.set('month', newMonthVal).subtract(initialMonthSubtraction, 'months');
		    onMonthChange(newMonth);
		  };

		  _proto.onYearSelect = function onYearSelect(currentMonth, newYearVal) {
		    var newMonth = currentMonth.clone();
		    var _this$props4 = this.props,
		        onYearChange = _this$props4.onYearChange,
		        orientation = _this$props4.orientation;
		    var months = this.state.months;
		    var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;
		    var initialMonthSubtraction = months.indexOf(currentMonth);

		    if (!withoutTransitionMonths) {
		      initialMonthSubtraction -= 1;
		    }

		    newMonth.set('year', newYearVal).subtract(initialMonthSubtraction, 'months');
		    onYearChange(newMonth);
		  };

		  _proto.setContainerRef = function setContainerRef(ref) {
		    this.container = ref;
		  };

		  _proto.render = function render() {
		    var _this3 = this;

		    var _this$props5 = this.props,
		        enableOutsideDays = _this$props5.enableOutsideDays,
		        firstVisibleMonthIndex = _this$props5.firstVisibleMonthIndex,
		        horizontalMonthPadding = _this$props5.horizontalMonthPadding,
		        isAnimating = _this$props5.isAnimating,
		        modifiers = _this$props5.modifiers,
		        numberOfMonths = _this$props5.numberOfMonths,
		        monthFormat = _this$props5.monthFormat,
		        orientation = _this$props5.orientation,
		        translationValue = _this$props5.translationValue,
		        daySize = _this$props5.daySize,
		        onDayMouseEnter = _this$props5.onDayMouseEnter,
		        onDayMouseLeave = _this$props5.onDayMouseLeave,
		        onDayClick = _this$props5.onDayClick,
		        renderMonthText = _this$props5.renderMonthText,
		        renderCalendarDay = _this$props5.renderCalendarDay,
		        renderDayContents = _this$props5.renderDayContents,
		        renderMonthElement = _this$props5.renderMonthElement,
		        onMonthTransitionEnd = _this$props5.onMonthTransitionEnd,
		        firstDayOfWeek = _this$props5.firstDayOfWeek,
		        focusedDate = _this$props5.focusedDate,
		        isFocused = _this$props5.isFocused,
		        isRTL = _this$props5.isRTL,
		        styles = _this$props5.styles,
		        phrases = _this$props5.phrases,
		        dayAriaLabelFormat = _this$props5.dayAriaLabelFormat,
		        transitionDuration = _this$props5.transitionDuration,
		        verticalBorderSpacing = _this$props5.verticalBorderSpacing,
		        setMonthTitleHeight = _this$props5.setMonthTitleHeight;
		    var months = this.state.months;
		    var isVertical = orientation === _constants.VERTICAL_ORIENTATION;
		    var isVerticalScrollable = orientation === _constants.VERTICAL_SCROLLABLE;
		    var isHorizontal = orientation === _constants.HORIZONTAL_ORIENTATION;
		    var calendarMonthWidth = (0, _getCalendarMonthWidth["default"])(daySize, horizontalMonthPadding);
		    var width = isVertical || isVerticalScrollable ? calendarMonthWidth : (numberOfMonths + 2) * calendarMonthWidth;
		    var transformType = isVertical || isVerticalScrollable ? 'translateY' : 'translateX';
		    var transformValue = "".concat(transformType, "(").concat(translationValue, "px)");
		    return _react["default"].createElement("div", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.CalendarMonthGrid, isHorizontal && styles.CalendarMonthGrid__horizontal, isVertical && styles.CalendarMonthGrid__vertical, isVerticalScrollable && styles.CalendarMonthGrid__vertical_scrollable, isAnimating && styles.CalendarMonthGrid__animating, isAnimating && transitionDuration && {
		      transition: "transform ".concat(transitionDuration, "ms ease-in-out")
		    }, _objectSpread({}, (0, _getTransformStyles["default"])(transformValue), {
		      width: width
		    })), {
		      ref: this.setContainerRef,
		      onTransitionEnd: onMonthTransitionEnd
		    }), months.map(function (month, i) {
		      var isVisible = i >= firstVisibleMonthIndex && i < firstVisibleMonthIndex + numberOfMonths;
		      var hideForAnimation = i === 0 && !isVisible;
		      var showForAnimation = i === 0 && isAnimating && isVisible;
		      var monthString = (0, _toISOMonthString["default"])(month);
		      return _react["default"].createElement("div", (0, _extends2["default"])({
		        key: monthString
		      }, (0, _reactWithStyles.css)(isHorizontal && styles.CalendarMonthGrid_month__horizontal, hideForAnimation && styles.CalendarMonthGrid_month__hideForAnimation, showForAnimation && !isVertical && !isRTL && {
		        position: 'absolute',
		        left: -calendarMonthWidth
		      }, showForAnimation && !isVertical && isRTL && {
		        position: 'absolute',
		        right: 0
		      }, showForAnimation && isVertical && {
		        position: 'absolute',
		        top: -translationValue
		      }, !isVisible && !isAnimating && styles.CalendarMonthGrid_month__hidden)), _react["default"].createElement(_CalendarMonth["default"], {
		        month: month,
		        isVisible: isVisible,
		        enableOutsideDays: enableOutsideDays,
		        modifiers: modifiers[monthString],
		        monthFormat: monthFormat,
		        orientation: orientation,
		        onDayMouseEnter: onDayMouseEnter,
		        onDayMouseLeave: onDayMouseLeave,
		        onDayClick: onDayClick,
		        onMonthSelect: _this3.onMonthSelect,
		        onYearSelect: _this3.onYearSelect,
		        renderMonthText: renderMonthText,
		        renderCalendarDay: renderCalendarDay,
		        renderDayContents: renderDayContents,
		        renderMonthElement: renderMonthElement,
		        firstDayOfWeek: firstDayOfWeek,
		        daySize: daySize,
		        focusedDate: isVisible ? focusedDate : null,
		        isFocused: isFocused,
		        phrases: phrases,
		        setMonthTitleHeight: setMonthTitleHeight,
		        dayAriaLabelFormat: dayAriaLabelFormat,
		        verticalBorderSpacing: verticalBorderSpacing,
		        horizontalMonthPadding: horizontalMonthPadding
		      }));
		    }));
		  };

		  return CalendarMonthGrid;
		}(_react["default"].PureComponent || _react["default"].Component);

		CalendarMonthGrid.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
		CalendarMonthGrid.defaultProps = defaultProps;

		var _default = (0, _reactWithStyles.withStyles)(function (_ref2) {
		  var _ref2$reactDates = _ref2.reactDates,
		      color = _ref2$reactDates.color,
		      spacing = _ref2$reactDates.spacing,
		      zIndex = _ref2$reactDates.zIndex;
		  return {
		    CalendarMonthGrid: {
		      background: color.background,
		      textAlign: (0, _noflip["default"])('left'),
		      zIndex: zIndex
		    },
		    CalendarMonthGrid__animating: {
		      zIndex: zIndex + 1
		    },
		    CalendarMonthGrid__horizontal: {
		      position: 'absolute',
		      left: (0, _noflip["default"])(spacing.dayPickerHorizontalPadding)
		    },
		    CalendarMonthGrid__vertical: {
		      margin: '0 auto'
		    },
		    CalendarMonthGrid__vertical_scrollable: {
		      margin: '0 auto'
		    },
		    CalendarMonthGrid_month__horizontal: {
		      display: 'inline-block',
		      verticalAlign: 'top',
		      minHeight: '100%'
		    },
		    CalendarMonthGrid_month__hideForAnimation: {
		      position: 'absolute',
		      zIndex: zIndex - 1,
		      opacity: 0,
		      pointerEvents: 'none'
		    },
		    CalendarMonthGrid_month__hidden: {
		      visibility: 'hidden'
		    }
		  };
		}, {
		  pureComponent: typeof _react["default"].PureComponent !== 'undefined'
		})(CalendarMonthGrid);

		exports["default"] = _default; 
	} (CalendarMonthGrid));
	return CalendarMonthGrid;
}

var DayPickerNavigation = {};

var LeftArrow = {};

var hasRequiredLeftArrow;

function requireLeftArrow () {
	if (hasRequiredLeftArrow) return LeftArrow;
	hasRequiredLeftArrow = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _react = _interopRequireDefault(reactExports);

		var LeftArrow = function LeftArrow(props) {
		  return _react["default"].createElement("svg", props, _react["default"].createElement("path", {
		    d: "M336 275L126 485h806c13 0 23 10 23 23s-10 23-23 23H126l210 210c11 11 11 21 0 32-5 5-10 7-16 7s-11-2-16-7L55 524c-11-11-11-21 0-32l249-249c21-22 53 10 32 32z"
		  }));
		};

		LeftArrow.defaultProps = {
		  focusable: "false",
		  viewBox: "0 0 1000 1000"
		};
		var _default = LeftArrow;
		exports["default"] = _default; 
	} (LeftArrow));
	return LeftArrow;
}

var RightArrow = {};

var hasRequiredRightArrow;

function requireRightArrow () {
	if (hasRequiredRightArrow) return RightArrow;
	hasRequiredRightArrow = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _react = _interopRequireDefault(reactExports);

		var RightArrow = function RightArrow(props) {
		  return _react["default"].createElement("svg", props, _react["default"].createElement("path", {
		    d: "M694 242l249 250c12 11 12 21 1 32L694 773c-5 5-10 7-16 7s-11-2-16-7c-11-11-11-21 0-32l210-210H68c-13 0-23-10-23-23s10-23 23-23h806L662 275c-21-22 11-54 32-33z"
		  }));
		};

		RightArrow.defaultProps = {
		  focusable: "false",
		  viewBox: "0 0 1000 1000"
		};
		var _default = RightArrow;
		exports["default"] = _default; 
	} (RightArrow));
	return RightArrow;
}

var ChevronUp = {};

var hasRequiredChevronUp;

function requireChevronUp () {
	if (hasRequiredChevronUp) return ChevronUp;
	hasRequiredChevronUp = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _react = _interopRequireDefault(reactExports);

		var ChevronUp = function ChevronUp(props) {
		  return _react["default"].createElement("svg", props, _react["default"].createElement("path", {
		    d: "M32 713l453-453c11-11 21-11 32 0l453 453c5 5 7 10 7 16 0 13-10 23-22 23-7 0-12-2-16-7L501 309 64 745c-4 5-9 7-15 7-7 0-12-2-17-7-9-11-9-21 0-32z"
		  }));
		};

		ChevronUp.defaultProps = {
		  focusable: "false",
		  viewBox: "0 0 1000 1000"
		};
		var _default = ChevronUp;
		exports["default"] = _default; 
	} (ChevronUp));
	return ChevronUp;
}

var ChevronDown = {};

var hasRequiredChevronDown;

function requireChevronDown () {
	if (hasRequiredChevronDown) return ChevronDown;
	hasRequiredChevronDown = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _react = _interopRequireDefault(reactExports);

		var ChevronDown = function ChevronDown(props) {
		  return _react["default"].createElement("svg", props, _react["default"].createElement("path", {
		    d: "M968 289L514 741c-11 11-21 11-32 0L29 289c-4-5-6-11-6-16 0-13 10-23 23-23 6 0 11 2 15 7l437 436 438-436c4-5 9-7 16-7 6 0 11 2 16 7 9 10 9 21 0 32z"
		  }));
		};

		ChevronDown.defaultProps = {
		  focusable: "false",
		  viewBox: "0 0 1000 1000"
		};
		var _default = ChevronDown;
		exports["default"] = _default; 
	} (ChevronDown));
	return ChevronDown;
}

var hasRequiredDayPickerNavigation;

function requireDayPickerNavigation () {
	if (hasRequiredDayPickerNavigation) return DayPickerNavigation;
	hasRequiredDayPickerNavigation = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _enzymeShallowEqual = _interopRequireDefault(requireBuild$3());

		var _extends2 = _interopRequireDefault(require_extends());

		var _toConsumableArray2 = _interopRequireDefault(requireToConsumableArray());

		var _inheritsLoose2 = _interopRequireDefault(requireInheritsLoose());

		var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

		var _react = _interopRequireDefault(reactExports);

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _airbnbPropTypes = requireAirbnbPropTypes();

		var _reactWithStyles = requireWithStyles();

		var _defaultPhrases = requireDefaultPhrases();

		var _getPhrasePropTypes = _interopRequireDefault(requireGetPhrasePropTypes());

		var _noflip = _interopRequireDefault(requireNoflip());

		var _LeftArrow = _interopRequireDefault(requireLeftArrow());

		var _RightArrow = _interopRequireDefault(requireRightArrow());

		var _ChevronUp = _interopRequireDefault(requireChevronUp());

		var _ChevronDown = _interopRequireDefault(requireChevronDown());

		var _NavPositionShape = _interopRequireDefault(requireNavPositionShape());

		var _ScrollableOrientationShape = _interopRequireDefault(requireScrollableOrientationShape());

		var _constants = requireConstants();

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		var propTypes = process.env.NODE_ENV !== "production" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, {
		  disablePrev: _propTypes["default"].bool,
		  disableNext: _propTypes["default"].bool,
		  inlineStyles: _propTypes["default"].object,
		  isRTL: _propTypes["default"].bool,
		  navPosition: _NavPositionShape["default"],
		  navPrev: _propTypes["default"].node,
		  navNext: _propTypes["default"].node,
		  orientation: _ScrollableOrientationShape["default"],
		  onPrevMonthClick: _propTypes["default"].func,
		  onNextMonthClick: _propTypes["default"].func,
		  // internationalization
		  phrases: _propTypes["default"].shape((0, _getPhrasePropTypes["default"])(_defaultPhrases.DayPickerNavigationPhrases)),
		  renderNavPrevButton: _propTypes["default"].func,
		  renderNavNextButton: _propTypes["default"].func,
		  showNavPrevButton: _propTypes["default"].bool,
		  showNavNextButton: _propTypes["default"].bool
		})) : {};
		var defaultProps = {
		  disablePrev: false,
		  disableNext: false,
		  inlineStyles: null,
		  isRTL: false,
		  navPosition: _constants.NAV_POSITION_TOP,
		  navPrev: null,
		  navNext: null,
		  orientation: _constants.HORIZONTAL_ORIENTATION,
		  onPrevMonthClick: function onPrevMonthClick() {},
		  onNextMonthClick: function onNextMonthClick() {},
		  // internationalization
		  phrases: _defaultPhrases.DayPickerNavigationPhrases,
		  renderNavPrevButton: null,
		  renderNavNextButton: null,
		  showNavPrevButton: true,
		  showNavNextButton: true
		};

		var DayPickerNavigation =
		/*#__PURE__*/
		function (_ref) {
		  (0, _inheritsLoose2["default"])(DayPickerNavigation, _ref);

		  function DayPickerNavigation() {
		    return _ref.apply(this, arguments) || this;
		  }

		  var _proto = DayPickerNavigation.prototype;

		  _proto[!_react["default"].PureComponent && "shouldComponentUpdate"] = function (nextProps, nextState) {
		    return !(0, _enzymeShallowEqual["default"])(this.props, nextProps) || !(0, _enzymeShallowEqual["default"])(this.state, nextState);
		  };

		  _proto.render = function render() {
		    var _this$props = this.props,
		        inlineStyles = _this$props.inlineStyles,
		        isRTL = _this$props.isRTL,
		        disablePrev = _this$props.disablePrev,
		        disableNext = _this$props.disableNext,
		        navPosition = _this$props.navPosition,
		        navPrev = _this$props.navPrev,
		        navNext = _this$props.navNext,
		        onPrevMonthClick = _this$props.onPrevMonthClick,
		        onNextMonthClick = _this$props.onNextMonthClick,
		        orientation = _this$props.orientation,
		        phrases = _this$props.phrases,
		        renderNavPrevButton = _this$props.renderNavPrevButton,
		        renderNavNextButton = _this$props.renderNavNextButton,
		        showNavPrevButton = _this$props.showNavPrevButton,
		        showNavNextButton = _this$props.showNavNextButton,
		        styles = _this$props.styles;

		    if (!showNavNextButton && !showNavPrevButton) {
		      return null;
		    }

		    var isHorizontal = orientation === _constants.HORIZONTAL_ORIENTATION;
		    var isVertical = orientation !== _constants.HORIZONTAL_ORIENTATION;
		    var isVerticalScrollable = orientation === _constants.VERTICAL_SCROLLABLE;
		    var isBottomNavPosition = navPosition === _constants.NAV_POSITION_BOTTOM;
		    var hasInlineStyles = !!inlineStyles;
		    var navPrevIcon = navPrev;
		    var navNextIcon = navNext;
		    var isDefaultNavPrev = false;
		    var isDefaultNavNext = false;
		    var navPrevTabIndex = {};
		    var navNextTabIndex = {};

		    if (!navPrevIcon && !renderNavPrevButton && showNavPrevButton) {
		      navPrevTabIndex = {
		        tabIndex: '0'
		      };
		      isDefaultNavPrev = true;
		      var Icon = isVertical ? _ChevronUp["default"] : _LeftArrow["default"];

		      if (isRTL && !isVertical) {
		        Icon = _RightArrow["default"];
		      }

		      navPrevIcon = _react["default"].createElement(Icon, (0, _reactWithStyles.css)(isHorizontal && styles.DayPickerNavigation_svg__horizontal, isVertical && styles.DayPickerNavigation_svg__vertical, disablePrev && styles.DayPickerNavigation_svg__disabled));
		    }

		    if (!navNextIcon && !renderNavNextButton && showNavNextButton) {
		      navNextTabIndex = {
		        tabIndex: '0'
		      };
		      isDefaultNavNext = true;

		      var _Icon = isVertical ? _ChevronDown["default"] : _RightArrow["default"];

		      if (isRTL && !isVertical) {
		        _Icon = _LeftArrow["default"];
		      }

		      navNextIcon = _react["default"].createElement(_Icon, (0, _reactWithStyles.css)(isHorizontal && styles.DayPickerNavigation_svg__horizontal, isVertical && styles.DayPickerNavigation_svg__vertical, disableNext && styles.DayPickerNavigation_svg__disabled));
		    }

		    var isDefaultNav = isDefaultNavNext || isDefaultNavPrev;
		    return _react["default"].createElement("div", _reactWithStyles.css.apply(void 0, [styles.DayPickerNavigation, isHorizontal && styles.DayPickerNavigation__horizontal].concat((0, _toConsumableArray2["default"])(isVertical ? [styles.DayPickerNavigation__vertical, isDefaultNav && styles.DayPickerNavigation__verticalDefault] : []), (0, _toConsumableArray2["default"])(isVerticalScrollable ? [styles.DayPickerNavigation__verticalScrollable, isDefaultNav && styles.DayPickerNavigation__verticalScrollableDefault, showNavPrevButton && styles.DayPickerNavigation__verticalScrollable_prevNav] : []), (0, _toConsumableArray2["default"])(isBottomNavPosition ? [styles.DayPickerNavigation__bottom, isDefaultNav && styles.DayPickerNavigation__bottomDefault] : []), [hasInlineStyles && inlineStyles])), showNavPrevButton && (renderNavPrevButton ? renderNavPrevButton({
		      ariaLabel: phrases.jumpToPrevMonth,
		      disabled: disablePrev,
		      onClick: disablePrev ? undefined : onPrevMonthClick,
		      onKeyUp: disablePrev ? undefined : function (e) {
		        var key = e.key;

		        if (key === 'Enter' || key === ' ') {
		          onPrevMonthClick(e);
		        }
		      },
		      onMouseUp: disablePrev ? undefined : function (e) {
		        e.currentTarget.blur();
		      }
		    }) : _react["default"].createElement("div", (0, _extends2["default"])({
		      // eslint-disable-line jsx-a11y/interactive-supports-focus
		      role: "button"
		    }, navPrevTabIndex, _reactWithStyles.css.apply(void 0, [styles.DayPickerNavigation_button, isDefaultNavPrev && styles.DayPickerNavigation_button__default, disablePrev && styles.DayPickerNavigation_button__disabled].concat((0, _toConsumableArray2["default"])(isHorizontal ? [styles.DayPickerNavigation_button__horizontal].concat((0, _toConsumableArray2["default"])(isDefaultNavPrev ? [styles.DayPickerNavigation_button__horizontalDefault, isBottomNavPosition && styles.DayPickerNavigation_bottomButton__horizontalDefault, !isRTL && styles.DayPickerNavigation_leftButton__horizontalDefault, isRTL && styles.DayPickerNavigation_rightButton__horizontalDefault] : [])) : []), (0, _toConsumableArray2["default"])(isVertical ? [styles.DayPickerNavigation_button__vertical].concat((0, _toConsumableArray2["default"])(isDefaultNavPrev ? [styles.DayPickerNavigation_button__verticalDefault, styles.DayPickerNavigation_prevButton__verticalDefault, isVerticalScrollable && styles.DayPickerNavigation_prevButton__verticalScrollableDefault] : [])) : []))), {
		      "aria-disabled": disablePrev ? true : undefined,
		      "aria-label": phrases.jumpToPrevMonth,
		      onClick: disablePrev ? undefined : onPrevMonthClick,
		      onKeyUp: disablePrev ? undefined : function (e) {
		        var key = e.key;

		        if (key === 'Enter' || key === ' ') {
		          onPrevMonthClick(e);
		        }
		      },
		      onMouseUp: disablePrev ? undefined : function (e) {
		        e.currentTarget.blur();
		      }
		    }), navPrevIcon)), showNavNextButton && (renderNavNextButton ? renderNavNextButton({
		      ariaLabel: phrases.jumpToNextMonth,
		      disabled: disableNext,
		      onClick: disableNext ? undefined : onNextMonthClick,
		      onKeyUp: disableNext ? undefined : function (e) {
		        var key = e.key;

		        if (key === 'Enter' || key === ' ') {
		          onNextMonthClick(e);
		        }
		      },
		      onMouseUp: disableNext ? undefined : function (e) {
		        e.currentTarget.blur();
		      }
		    }) : _react["default"].createElement("div", (0, _extends2["default"])({
		      // eslint-disable-line jsx-a11y/interactive-supports-focus
		      role: "button"
		    }, navNextTabIndex, _reactWithStyles.css.apply(void 0, [styles.DayPickerNavigation_button, isDefaultNavNext && styles.DayPickerNavigation_button__default, disableNext && styles.DayPickerNavigation_button__disabled].concat((0, _toConsumableArray2["default"])(isHorizontal ? [styles.DayPickerNavigation_button__horizontal].concat((0, _toConsumableArray2["default"])(isDefaultNavNext ? [styles.DayPickerNavigation_button__horizontalDefault, isBottomNavPosition && styles.DayPickerNavigation_bottomButton__horizontalDefault, isRTL && styles.DayPickerNavigation_leftButton__horizontalDefault, !isRTL && styles.DayPickerNavigation_rightButton__horizontalDefault] : [])) : []), (0, _toConsumableArray2["default"])(isVertical ? [styles.DayPickerNavigation_button__vertical].concat((0, _toConsumableArray2["default"])(isDefaultNavNext ? [styles.DayPickerNavigation_button__verticalDefault, styles.DayPickerNavigation_nextButton__verticalDefault, isVerticalScrollable && styles.DayPickerNavigation_nextButton__verticalScrollableDefault] : [])) : []))), {
		      "aria-disabled": disableNext ? true : undefined,
		      "aria-label": phrases.jumpToNextMonth,
		      onClick: disableNext ? undefined : onNextMonthClick,
		      onKeyUp: disableNext ? undefined : function (e) {
		        var key = e.key;

		        if (key === 'Enter' || key === ' ') {
		          onNextMonthClick(e);
		        }
		      },
		      onMouseUp: disableNext ? undefined : function (e) {
		        e.currentTarget.blur();
		      }
		    }), navNextIcon)));
		  };

		  return DayPickerNavigation;
		}(_react["default"].PureComponent || _react["default"].Component);

		DayPickerNavigation.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
		DayPickerNavigation.defaultProps = defaultProps;

		var _default = (0, _reactWithStyles.withStyles)(function (_ref2) {
		  var _ref2$reactDates = _ref2.reactDates,
		      color = _ref2$reactDates.color,
		      zIndex = _ref2$reactDates.zIndex;
		  return {
		    DayPickerNavigation: {
		      position: 'relative',
		      zIndex: zIndex + 2
		    },
		    DayPickerNavigation__horizontal: {
		      height: 0
		    },
		    DayPickerNavigation__vertical: {},
		    DayPickerNavigation__verticalScrollable: {},
		    DayPickerNavigation__verticalScrollable_prevNav: {
		      zIndex: zIndex + 1 // zIndex + 2 causes the button to show on top of the day of week headers

		    },
		    DayPickerNavigation__verticalDefault: {
		      position: 'absolute',
		      width: '100%',
		      height: 52,
		      bottom: 0,
		      left: (0, _noflip["default"])(0)
		    },
		    DayPickerNavigation__verticalScrollableDefault: {
		      position: 'relative'
		    },
		    DayPickerNavigation__bottom: {
		      height: 'auto'
		    },
		    DayPickerNavigation__bottomDefault: {
		      display: 'flex',
		      justifyContent: 'space-between'
		    },
		    DayPickerNavigation_button: {
		      cursor: 'pointer',
		      userSelect: 'none',
		      border: 0,
		      padding: 0,
		      margin: 0
		    },
		    DayPickerNavigation_button__default: {
		      border: "1px solid ".concat(color.core.borderLight),
		      backgroundColor: color.background,
		      color: color.placeholderText,
		      ':focus': {
		        border: "1px solid ".concat(color.core.borderMedium)
		      },
		      ':hover': {
		        border: "1px solid ".concat(color.core.borderMedium)
		      },
		      ':active': {
		        background: color.backgroundDark
		      }
		    },
		    DayPickerNavigation_button__disabled: {
		      cursor: 'default',
		      border: "1px solid ".concat(color.disabled),
		      ':focus': {
		        border: "1px solid ".concat(color.disabled)
		      },
		      ':hover': {
		        border: "1px solid ".concat(color.disabled)
		      },
		      ':active': {
		        background: 'none'
		      }
		    },
		    DayPickerNavigation_button__horizontal: {},
		    DayPickerNavigation_button__horizontalDefault: {
		      position: 'absolute',
		      top: 18,
		      lineHeight: 0.78,
		      borderRadius: 3,
		      padding: '6px 9px'
		    },
		    DayPickerNavigation_bottomButton__horizontalDefault: {
		      position: 'static',
		      marginLeft: 22,
		      marginRight: 22,
		      marginBottom: 30,
		      marginTop: -10
		    },
		    DayPickerNavigation_leftButton__horizontalDefault: {
		      left: (0, _noflip["default"])(22)
		    },
		    DayPickerNavigation_rightButton__horizontalDefault: {
		      right: (0, _noflip["default"])(22)
		    },
		    DayPickerNavigation_button__vertical: {},
		    DayPickerNavigation_button__verticalDefault: {
		      padding: 5,
		      background: color.background,
		      boxShadow: (0, _noflip["default"])('0 0 5px 2px rgba(0, 0, 0, 0.1)'),
		      position: 'relative',
		      display: 'inline-block',
		      textAlign: 'center',
		      height: '100%',
		      width: '50%'
		    },
		    DayPickerNavigation_prevButton__verticalDefault: {},
		    DayPickerNavigation_nextButton__verticalDefault: {
		      borderLeft: (0, _noflip["default"])(0)
		    },
		    DayPickerNavigation_nextButton__verticalScrollableDefault: {
		      width: '100%'
		    },
		    DayPickerNavigation_prevButton__verticalScrollableDefault: {
		      width: '100%'
		    },
		    DayPickerNavigation_svg__horizontal: {
		      height: 19,
		      width: 19,
		      fill: color.core.grayLight,
		      display: 'block'
		    },
		    DayPickerNavigation_svg__vertical: {
		      height: 42,
		      width: 42,
		      fill: color.text
		    },
		    DayPickerNavigation_svg__disabled: {
		      fill: color.disabled
		    }
		  };
		}, {
		  pureComponent: typeof _react["default"].PureComponent !== 'undefined'
		})(DayPickerNavigation);

		exports["default"] = _default; 
	} (DayPickerNavigation));
	return DayPickerNavigation;
}

var DayPickerKeyboardShortcuts = {};

var KeyboardShortcutRow = {};

var hasRequiredKeyboardShortcutRow;

function requireKeyboardShortcutRow () {
	if (hasRequiredKeyboardShortcutRow) return KeyboardShortcutRow;
	hasRequiredKeyboardShortcutRow = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var _extends2 = _interopRequireDefault(require_extends());

		var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

		var _react = _interopRequireDefault(reactExports);

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _airbnbPropTypes = requireAirbnbPropTypes();

		var _reactWithStyles = requireWithStyles();

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		var propTypes = process.env.NODE_ENV !== "production" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, {
		  unicode: _propTypes["default"].string.isRequired,
		  label: _propTypes["default"].string.isRequired,
		  action: _propTypes["default"].string.isRequired,
		  block: _propTypes["default"].bool
		})) : {};
		var defaultProps = {
		  block: false
		};

		function KeyboardShortcutRow(_ref) {
		  var unicode = _ref.unicode,
		      label = _ref.label,
		      action = _ref.action,
		      block = _ref.block,
		      styles = _ref.styles;
		  return _react["default"].createElement("li", (0, _reactWithStyles.css)(styles.KeyboardShortcutRow, block && styles.KeyboardShortcutRow__block), _react["default"].createElement("div", (0, _reactWithStyles.css)(styles.KeyboardShortcutRow_keyContainer, block && styles.KeyboardShortcutRow_keyContainer__block), _react["default"].createElement("span", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.KeyboardShortcutRow_key), {
		    role: "img",
		    "aria-label": "".concat(label, ",") // add comma so screen readers will pause before reading action

		  }), unicode)), _react["default"].createElement("div", (0, _reactWithStyles.css)(styles.KeyboardShortcutRow_action), action));
		}

		KeyboardShortcutRow.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
		KeyboardShortcutRow.defaultProps = defaultProps;

		var _default = (0, _reactWithStyles.withStyles)(function (_ref2) {
		  var color = _ref2.reactDates.color;
		  return {
		    KeyboardShortcutRow: {
		      listStyle: 'none',
		      margin: '6px 0'
		    },
		    KeyboardShortcutRow__block: {
		      marginBottom: 16
		    },
		    KeyboardShortcutRow_keyContainer: {
		      display: 'inline-block',
		      whiteSpace: 'nowrap',
		      textAlign: 'right',
		      // is not handled by isRTL
		      marginRight: 6 // is not handled by isRTL

		    },
		    KeyboardShortcutRow_keyContainer__block: {
		      textAlign: 'left',
		      // is not handled by isRTL
		      display: 'inline'
		    },
		    KeyboardShortcutRow_key: {
		      fontFamily: 'monospace',
		      fontSize: 12,
		      textTransform: 'uppercase',
		      background: color.core.grayLightest,
		      padding: '2px 6px'
		    },
		    KeyboardShortcutRow_action: {
		      display: 'inline',
		      wordBreak: 'break-word',
		      marginLeft: 8 // is not handled by isRTL

		    }
		  };
		}, {
		  pureComponent: typeof _react["default"].PureComponent !== 'undefined'
		})(KeyboardShortcutRow);

		exports["default"] = _default; 
	} (KeyboardShortcutRow));
	return KeyboardShortcutRow;
}

var hasRequiredDayPickerKeyboardShortcuts;

function requireDayPickerKeyboardShortcuts () {
	if (hasRequiredDayPickerKeyboardShortcuts) return DayPickerKeyboardShortcuts;
	hasRequiredDayPickerKeyboardShortcuts = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = exports.BOTTOM_RIGHT = exports.TOP_RIGHT = exports.TOP_LEFT = void 0;

		var _enzymeShallowEqual = _interopRequireDefault(requireBuild$3());

		var _extends2 = _interopRequireDefault(require_extends());

		var _assertThisInitialized2 = _interopRequireDefault(requireAssertThisInitialized());

		var _inheritsLoose2 = _interopRequireDefault(requireInheritsLoose());

		var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

		var _react = _interopRequireDefault(reactExports);

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _airbnbPropTypes = requireAirbnbPropTypes();

		var _reactWithStyles = requireWithStyles();

		var _defaultPhrases = requireDefaultPhrases();

		var _getPhrasePropTypes = _interopRequireDefault(requireGetPhrasePropTypes());

		var _KeyboardShortcutRow = _interopRequireDefault(requireKeyboardShortcutRow());

		var _CloseButton = _interopRequireDefault(requireCloseButton());

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		var TOP_LEFT = 'top-left';
		exports.TOP_LEFT = TOP_LEFT;
		var TOP_RIGHT = 'top-right';
		exports.TOP_RIGHT = TOP_RIGHT;
		var BOTTOM_RIGHT = 'bottom-right';
		exports.BOTTOM_RIGHT = BOTTOM_RIGHT;
		var propTypes = process.env.NODE_ENV !== "production" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, {
		  block: _propTypes["default"].bool,
		  // TODO: rename button location to be direction-agnostic
		  buttonLocation: _propTypes["default"].oneOf([TOP_LEFT, TOP_RIGHT, BOTTOM_RIGHT]),
		  showKeyboardShortcutsPanel: _propTypes["default"].bool,
		  openKeyboardShortcutsPanel: _propTypes["default"].func,
		  closeKeyboardShortcutsPanel: _propTypes["default"].func,
		  phrases: _propTypes["default"].shape((0, _getPhrasePropTypes["default"])(_defaultPhrases.DayPickerKeyboardShortcutsPhrases)),
		  renderKeyboardShortcutsButton: _propTypes["default"].func,
		  renderKeyboardShortcutsPanel: _propTypes["default"].func
		})) : {};
		var defaultProps = {
		  block: false,
		  buttonLocation: BOTTOM_RIGHT,
		  showKeyboardShortcutsPanel: false,
		  openKeyboardShortcutsPanel: function openKeyboardShortcutsPanel() {},
		  closeKeyboardShortcutsPanel: function closeKeyboardShortcutsPanel() {},
		  phrases: _defaultPhrases.DayPickerKeyboardShortcutsPhrases,
		  renderKeyboardShortcutsButton: undefined,
		  renderKeyboardShortcutsPanel: undefined
		};

		function getKeyboardShortcuts(phrases) {
		  return [{
		    unicode: '↵',
		    label: phrases.enterKey,
		    action: phrases.selectFocusedDate
		  }, {
		    unicode: '←/→',
		    label: phrases.leftArrowRightArrow,
		    action: phrases.moveFocusByOneDay
		  }, {
		    unicode: '↑/↓',
		    label: phrases.upArrowDownArrow,
		    action: phrases.moveFocusByOneWeek
		  }, {
		    unicode: 'PgUp/PgDn',
		    label: phrases.pageUpPageDown,
		    action: phrases.moveFocusByOneMonth
		  }, {
		    unicode: 'Home/End',
		    label: phrases.homeEnd,
		    action: phrases.moveFocustoStartAndEndOfWeek
		  }, {
		    unicode: 'Esc',
		    label: phrases.escape,
		    action: phrases.returnFocusToInput
		  }, {
		    unicode: '?',
		    label: phrases.questionMark,
		    action: phrases.openThisPanel
		  }];
		}

		var DayPickerKeyboardShortcuts =
		/*#__PURE__*/
		function (_ref) {
		  (0, _inheritsLoose2["default"])(DayPickerKeyboardShortcuts, _ref);
		  var _proto = DayPickerKeyboardShortcuts.prototype;

		  _proto[!_react["default"].PureComponent && "shouldComponentUpdate"] = function (nextProps, nextState) {
		    return !(0, _enzymeShallowEqual["default"])(this.props, nextProps) || !(0, _enzymeShallowEqual["default"])(this.state, nextState);
		  };

		  function DayPickerKeyboardShortcuts() {
		    var _this;

		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    _this = _ref.call.apply(_ref, [this].concat(args)) || this;
		    var phrases = _this.props.phrases;
		    _this.keyboardShortcuts = getKeyboardShortcuts(phrases);
		    _this.onShowKeyboardShortcutsButtonClick = _this.onShowKeyboardShortcutsButtonClick.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.setShowKeyboardShortcutsButtonRef = _this.setShowKeyboardShortcutsButtonRef.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.setHideKeyboardShortcutsButtonRef = _this.setHideKeyboardShortcutsButtonRef.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.onKeyDown = _this.onKeyDown.bind((0, _assertThisInitialized2["default"])(_this));
		    return _this;
		  }

		  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		    var phrases = this.props.phrases;

		    if (nextProps.phrases !== phrases) {
		      this.keyboardShortcuts = getKeyboardShortcuts(nextProps.phrases);
		    }
		  };

		  _proto.componentDidUpdate = function componentDidUpdate() {
		    this.handleFocus();
		  };

		  _proto.onKeyDown = function onKeyDown(e) {
		    e.stopPropagation();
		    var closeKeyboardShortcutsPanel = this.props.closeKeyboardShortcutsPanel; // Because the close button is the only focusable element inside of the panel, this
		    // amounts to a very basic focus trap. The user can exit the panel by "pressing" the
		    // close button or hitting escape

		    switch (e.key) {
		      case 'Escape':
		        closeKeyboardShortcutsPanel();
		        break;
		      // do nothing - this allows the up and down arrows continue their
		      // default behavior of scrolling the content of the Keyboard Shortcuts Panel
		      // which is needed when only a single month is shown for instance.

		      case 'ArrowUp':
		      case 'ArrowDown':
		        break;
		      // completely block the rest of the keys that have functionality outside of this panel

		      case 'Tab':
		      case 'Home':
		      case 'End':
		      case 'PageUp':
		      case 'PageDown':
		      case 'ArrowLeft':
		      case 'ArrowRight':
		        e.preventDefault();
		        break;
		    }
		  };

		  _proto.onShowKeyboardShortcutsButtonClick = function onShowKeyboardShortcutsButtonClick() {
		    var _this2 = this;

		    var openKeyboardShortcutsPanel = this.props.openKeyboardShortcutsPanel; // we want to return focus to this button after closing the keyboard shortcuts panel

		    openKeyboardShortcutsPanel(function () {
		      _this2.showKeyboardShortcutsButton.focus();
		    });
		  };

		  _proto.setShowKeyboardShortcutsButtonRef = function setShowKeyboardShortcutsButtonRef(ref) {
		    this.showKeyboardShortcutsButton = ref;
		  };

		  _proto.setHideKeyboardShortcutsButtonRef = function setHideKeyboardShortcutsButtonRef(ref) {
		    this.hideKeyboardShortcutsButton = ref;
		  };

		  _proto.handleFocus = function handleFocus() {
		    if (this.hideKeyboardShortcutsButton) {
		      // automatically move focus into the dialog by moving
		      // to the only interactive element, the hide button
		      this.hideKeyboardShortcutsButton.focus();
		    }
		  };

		  _proto.render = function render() {
		    var _this$props = this.props,
		        block = _this$props.block,
		        buttonLocation = _this$props.buttonLocation,
		        showKeyboardShortcutsPanel = _this$props.showKeyboardShortcutsPanel,
		        closeKeyboardShortcutsPanel = _this$props.closeKeyboardShortcutsPanel,
		        styles = _this$props.styles,
		        phrases = _this$props.phrases,
		        renderKeyboardShortcutsButton = _this$props.renderKeyboardShortcutsButton,
		        renderKeyboardShortcutsPanel = _this$props.renderKeyboardShortcutsPanel;
		    var toggleButtonText = showKeyboardShortcutsPanel ? phrases.hideKeyboardShortcutsPanel : phrases.showKeyboardShortcutsPanel;
		    var bottomRight = buttonLocation === BOTTOM_RIGHT;
		    var topRight = buttonLocation === TOP_RIGHT;
		    var topLeft = buttonLocation === TOP_LEFT;
		    return _react["default"].createElement("div", null, renderKeyboardShortcutsButton && renderKeyboardShortcutsButton({
		      // passing in context-specific props
		      ref: this.setShowKeyboardShortcutsButtonRef,
		      onClick: this.onShowKeyboardShortcutsButtonClick,
		      ariaLabel: toggleButtonText
		    }), !renderKeyboardShortcutsButton && _react["default"].createElement("button", (0, _extends2["default"])({
		      ref: this.setShowKeyboardShortcutsButtonRef
		    }, (0, _reactWithStyles.css)(styles.DayPickerKeyboardShortcuts_buttonReset, styles.DayPickerKeyboardShortcuts_show, bottomRight && styles.DayPickerKeyboardShortcuts_show__bottomRight, topRight && styles.DayPickerKeyboardShortcuts_show__topRight, topLeft && styles.DayPickerKeyboardShortcuts_show__topLeft), {
		      type: "button",
		      "aria-label": toggleButtonText,
		      onClick: this.onShowKeyboardShortcutsButtonClick,
		      onMouseUp: function onMouseUp(e) {
		        e.currentTarget.blur();
		      }
		    }), _react["default"].createElement("span", (0, _reactWithStyles.css)(styles.DayPickerKeyboardShortcuts_showSpan, bottomRight && styles.DayPickerKeyboardShortcuts_showSpan__bottomRight, topRight && styles.DayPickerKeyboardShortcuts_showSpan__topRight, topLeft && styles.DayPickerKeyboardShortcuts_showSpan__topLeft), "?")), showKeyboardShortcutsPanel && (renderKeyboardShortcutsPanel ? renderKeyboardShortcutsPanel({
		      closeButtonAriaLabel: phrases.hideKeyboardShortcutsPanel,
		      keyboardShortcuts: this.keyboardShortcuts,
		      onCloseButtonClick: closeKeyboardShortcutsPanel,
		      onKeyDown: this.onKeyDown,
		      title: phrases.keyboardShortcuts
		    }) : _react["default"].createElement("div", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.DayPickerKeyboardShortcuts_panel), {
		      role: "dialog",
		      "aria-labelledby": "DayPickerKeyboardShortcuts_title",
		      "aria-describedby": "DayPickerKeyboardShortcuts_description"
		    }), _react["default"].createElement("div", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.DayPickerKeyboardShortcuts_title), {
		      id: "DayPickerKeyboardShortcuts_title"
		    }), phrases.keyboardShortcuts), _react["default"].createElement("button", (0, _extends2["default"])({
		      ref: this.setHideKeyboardShortcutsButtonRef
		    }, (0, _reactWithStyles.css)(styles.DayPickerKeyboardShortcuts_buttonReset, styles.DayPickerKeyboardShortcuts_close), {
		      type: "button",
		      tabIndex: "0",
		      "aria-label": phrases.hideKeyboardShortcutsPanel,
		      onClick: closeKeyboardShortcutsPanel,
		      onKeyDown: this.onKeyDown
		    }), _react["default"].createElement(_CloseButton["default"], (0, _reactWithStyles.css)(styles.DayPickerKeyboardShortcuts_closeSvg))), _react["default"].createElement("ul", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.DayPickerKeyboardShortcuts_list), {
		      id: "DayPickerKeyboardShortcuts_description"
		    }), this.keyboardShortcuts.map(function (_ref2) {
		      var unicode = _ref2.unicode,
		          label = _ref2.label,
		          action = _ref2.action;
		      return _react["default"].createElement(_KeyboardShortcutRow["default"], {
		        key: label,
		        unicode: unicode,
		        label: label,
		        action: action,
		        block: block
		      });
		    })))));
		  };

		  return DayPickerKeyboardShortcuts;
		}(_react["default"].PureComponent || _react["default"].Component);

		DayPickerKeyboardShortcuts.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
		DayPickerKeyboardShortcuts.defaultProps = defaultProps;

		var _default = (0, _reactWithStyles.withStyles)(function (_ref3) {
		  var _ref3$reactDates = _ref3.reactDates,
		      color = _ref3$reactDates.color,
		      font = _ref3$reactDates.font,
		      zIndex = _ref3$reactDates.zIndex;
		  return {
		    DayPickerKeyboardShortcuts_buttonReset: {
		      background: 'none',
		      border: 0,
		      borderRadius: 0,
		      color: 'inherit',
		      font: 'inherit',
		      lineHeight: 'normal',
		      overflow: 'visible',
		      padding: 0,
		      cursor: 'pointer',
		      fontSize: font.size,
		      ':active': {
		        outline: 'none'
		      }
		    },
		    DayPickerKeyboardShortcuts_show: {
		      width: 33,
		      height: 26,
		      position: 'absolute',
		      zIndex: zIndex + 2,
		      '::before': {
		        content: '""',
		        display: 'block',
		        position: 'absolute'
		      }
		    },
		    DayPickerKeyboardShortcuts_show__bottomRight: {
		      bottom: 0,
		      right: 0,
		      '::before': {
		        borderTop: '26px solid transparent',
		        borderRight: "33px solid ".concat(color.core.primary),
		        bottom: 0,
		        right: 0
		      },
		      ':hover::before': {
		        borderRight: "33px solid ".concat(color.core.primary_dark)
		      }
		    },
		    DayPickerKeyboardShortcuts_show__topRight: {
		      top: 0,
		      right: 0,
		      '::before': {
		        borderBottom: '26px solid transparent',
		        borderRight: "33px solid ".concat(color.core.primary),
		        top: 0,
		        right: 0
		      },
		      ':hover::before': {
		        borderRight: "33px solid ".concat(color.core.primary_dark)
		      }
		    },
		    DayPickerKeyboardShortcuts_show__topLeft: {
		      top: 0,
		      left: 0,
		      '::before': {
		        borderBottom: '26px solid transparent',
		        borderLeft: "33px solid ".concat(color.core.primary),
		        top: 0,
		        left: 0
		      },
		      ':hover::before': {
		        borderLeft: "33px solid ".concat(color.core.primary_dark)
		      }
		    },
		    DayPickerKeyboardShortcuts_showSpan: {
		      color: color.core.white,
		      position: 'absolute'
		    },
		    DayPickerKeyboardShortcuts_showSpan__bottomRight: {
		      bottom: 0,
		      right: 5
		    },
		    DayPickerKeyboardShortcuts_showSpan__topRight: {
		      top: 1,
		      right: 5
		    },
		    DayPickerKeyboardShortcuts_showSpan__topLeft: {
		      top: 1,
		      left: 5
		    },
		    DayPickerKeyboardShortcuts_panel: {
		      overflow: 'auto',
		      background: color.background,
		      border: "1px solid ".concat(color.core.border),
		      borderRadius: 2,
		      position: 'absolute',
		      top: 0,
		      bottom: 0,
		      right: 0,
		      left: 0,
		      zIndex: zIndex + 2,
		      padding: 22,
		      margin: 33,
		      textAlign: 'left' // TODO: investigate use of text-align throughout the library

		    },
		    DayPickerKeyboardShortcuts_title: {
		      fontSize: 16,
		      fontWeight: 'bold',
		      margin: 0
		    },
		    DayPickerKeyboardShortcuts_list: {
		      listStyle: 'none',
		      padding: 0,
		      fontSize: font.size
		    },
		    DayPickerKeyboardShortcuts_close: {
		      position: 'absolute',
		      right: 22,
		      top: 22,
		      zIndex: zIndex + 2,
		      ':active': {
		        outline: 'none'
		      }
		    },
		    DayPickerKeyboardShortcuts_closeSvg: {
		      height: 15,
		      width: 15,
		      fill: color.core.grayLighter,
		      ':hover': {
		        fill: color.core.grayLight
		      },
		      ':focus': {
		        fill: color.core.grayLight
		      }
		    }
		  };
		}, {
		  pureComponent: typeof _react["default"].PureComponent !== 'undefined'
		})(DayPickerKeyboardShortcuts);

		exports["default"] = _default; 
	} (DayPickerKeyboardShortcuts));
	return DayPickerKeyboardShortcuts;
}

var getNumberOfCalendarMonthWeeks = {};

var hasRequiredGetNumberOfCalendarMonthWeeks;

function requireGetNumberOfCalendarMonthWeeks () {
	if (hasRequiredGetNumberOfCalendarMonthWeeks) return getNumberOfCalendarMonthWeeks;
	hasRequiredGetNumberOfCalendarMonthWeeks = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getNumberOfCalendarMonthWeeks;

		var _moment = _interopRequireDefault(momentExports);

		function getBlankDaysBeforeFirstDay(firstDayOfMonth, firstDayOfWeek) {
		  var weekDayDiff = firstDayOfMonth.day() - firstDayOfWeek;
		  return (weekDayDiff + 7) % 7;
		}

		function getNumberOfCalendarMonthWeeks(month) {
		  var firstDayOfWeek = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _moment["default"].localeData().firstDayOfWeek();
		  var firstDayOfMonth = month.clone().startOf('month');
		  var numBlankDays = getBlankDaysBeforeFirstDay(firstDayOfMonth, firstDayOfWeek);
		  return Math.ceil((numBlankDays + month.daysInMonth()) / 7);
		} 
	} (getNumberOfCalendarMonthWeeks));
	return getNumberOfCalendarMonthWeeks;
}

var getActiveElement = {};

var hasRequiredGetActiveElement;

function requireGetActiveElement () {
	if (hasRequiredGetActiveElement) return getActiveElement;
	hasRequiredGetActiveElement = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getActiveElement;

		function getActiveElement() {
		  return typeof document !== 'undefined' && document.activeElement;
		} 
	} (getActiveElement));
	return getActiveElement;
}

var hasRequiredDayPicker;

function requireDayPicker () {
	if (hasRequiredDayPicker) return DayPicker;
	hasRequiredDayPicker = 1;
	(function (exports) {

		var _interopRequireWildcard = requireInteropRequireWildcard();

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = exports.PureDayPicker = exports.defaultProps = void 0;

		var _enzymeShallowEqual = _interopRequireDefault(requireBuild$3());

		var _extends2 = _interopRequireDefault(require_extends());

		var _toConsumableArray2 = _interopRequireDefault(requireToConsumableArray());

		var _assertThisInitialized2 = _interopRequireDefault(requireAssertThisInitialized());

		var _inheritsLoose2 = _interopRequireDefault(requireInheritsLoose());

		var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

		var _react = _interopRequireDefault(reactExports);

		var _propTypes = _interopRequireDefault(PropTypes$1);

		var _airbnbPropTypes = requireAirbnbPropTypes();

		var _reactWithStyles = requireWithStyles();

		var _moment = _interopRequireDefault(momentExports);

		var _throttle = _interopRequireDefault(requireThrottle());

		var _isTouchDevice = _interopRequireDefault(requireBuild());

		var _reactOutsideClickHandler = _interopRequireDefault(requireReactOutsideClickHandler());

		var _defaultPhrases = requireDefaultPhrases();

		var _getPhrasePropTypes = _interopRequireDefault(requireGetPhrasePropTypes());

		var _noflip = _interopRequireDefault(requireNoflip());

		var _CalendarMonthGrid = _interopRequireDefault(requireCalendarMonthGrid());

		var _DayPickerNavigation = _interopRequireDefault(requireDayPickerNavigation());

		var _DayPickerKeyboardShortcuts = _interopRequireWildcard(requireDayPickerKeyboardShortcuts());

		var _getNumberOfCalendarMonthWeeks = _interopRequireDefault(requireGetNumberOfCalendarMonthWeeks());

		var _getCalendarMonthWidth = _interopRequireDefault(requireGetCalendarMonthWidth());

		var _calculateDimension = _interopRequireDefault(requireCalculateDimension());

		var _getActiveElement = _interopRequireDefault(requireGetActiveElement());

		var _isDayVisible = _interopRequireDefault(requireIsDayVisible());

		var _isSameMonth = _interopRequireDefault(requireIsSameMonth());

		var _ModifiersShape = _interopRequireDefault(requireModifiersShape());

		var _NavPositionShape = _interopRequireDefault(requireNavPositionShape());

		var _ScrollableOrientationShape = _interopRequireDefault(requireScrollableOrientationShape());

		var _DayOfWeekShape = _interopRequireDefault(requireDayOfWeekShape());

		var _CalendarInfoPositionShape = _interopRequireDefault(requireCalendarInfoPositionShape());

		var _constants = requireConstants();

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		var MONTH_PADDING = 23;
		var PREV_TRANSITION = 'prev';
		var NEXT_TRANSITION = 'next';
		var MONTH_SELECTION_TRANSITION = 'month_selection';
		var YEAR_SELECTION_TRANSITION = 'year_selection';
		var PREV_NAV = 'prev_nav';
		var NEXT_NAV = 'next_nav';
		var propTypes = process.env.NODE_ENV !== "production" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, {
		  // calendar presentation props
		  enableOutsideDays: _propTypes["default"].bool,
		  numberOfMonths: _propTypes["default"].number,
		  orientation: _ScrollableOrientationShape["default"],
		  withPortal: _propTypes["default"].bool,
		  onOutsideClick: _propTypes["default"].func,
		  hidden: _propTypes["default"].bool,
		  initialVisibleMonth: _propTypes["default"].func,
		  firstDayOfWeek: _DayOfWeekShape["default"],
		  renderCalendarInfo: _propTypes["default"].func,
		  calendarInfoPosition: _CalendarInfoPositionShape["default"],
		  hideKeyboardShortcutsPanel: _propTypes["default"].bool,
		  daySize: _airbnbPropTypes.nonNegativeInteger,
		  isRTL: _propTypes["default"].bool,
		  verticalHeight: _airbnbPropTypes.nonNegativeInteger,
		  noBorder: _propTypes["default"].bool,
		  transitionDuration: _airbnbPropTypes.nonNegativeInteger,
		  verticalBorderSpacing: _airbnbPropTypes.nonNegativeInteger,
		  horizontalMonthPadding: _airbnbPropTypes.nonNegativeInteger,
		  renderKeyboardShortcutsButton: _propTypes["default"].func,
		  renderKeyboardShortcutsPanel: _propTypes["default"].func,
		  // navigation props
		  dayPickerNavigationInlineStyles: _propTypes["default"].object,
		  disablePrev: _propTypes["default"].bool,
		  disableNext: _propTypes["default"].bool,
		  navPosition: _NavPositionShape["default"],
		  navPrev: _propTypes["default"].node,
		  navNext: _propTypes["default"].node,
		  renderNavPrevButton: _propTypes["default"].func,
		  renderNavNextButton: _propTypes["default"].func,
		  noNavButtons: _propTypes["default"].bool,
		  noNavNextButton: _propTypes["default"].bool,
		  noNavPrevButton: _propTypes["default"].bool,
		  onPrevMonthClick: _propTypes["default"].func,
		  onNextMonthClick: _propTypes["default"].func,
		  onMonthChange: _propTypes["default"].func,
		  onYearChange: _propTypes["default"].func,
		  onGetNextScrollableMonths: _propTypes["default"].func,
		  // VERTICAL_SCROLLABLE daypickers only
		  onGetPrevScrollableMonths: _propTypes["default"].func,
		  // VERTICAL_SCROLLABLE daypickers only
		  // month props
		  renderMonthText: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes["default"].func, 'renderMonthText', 'renderMonthElement'),
		  renderMonthElement: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes["default"].func, 'renderMonthText', 'renderMonthElement'),
		  renderWeekHeaderElement: _propTypes["default"].func,
		  // day props
		  modifiers: _propTypes["default"].objectOf(_propTypes["default"].objectOf(_ModifiersShape["default"])),
		  renderCalendarDay: _propTypes["default"].func,
		  renderDayContents: _propTypes["default"].func,
		  onDayClick: _propTypes["default"].func,
		  onDayMouseEnter: _propTypes["default"].func,
		  onDayMouseLeave: _propTypes["default"].func,
		  // accessibility props
		  isFocused: _propTypes["default"].bool,
		  getFirstFocusableDay: _propTypes["default"].func,
		  onBlur: _propTypes["default"].func,
		  showKeyboardShortcuts: _propTypes["default"].bool,
		  onTab: _propTypes["default"].func,
		  onShiftTab: _propTypes["default"].func,
		  // internationalization
		  monthFormat: _propTypes["default"].string,
		  weekDayFormat: _propTypes["default"].string,
		  phrases: _propTypes["default"].shape((0, _getPhrasePropTypes["default"])(_defaultPhrases.DayPickerPhrases)),
		  dayAriaLabelFormat: _propTypes["default"].string
		})) : {};
		var defaultProps = {
		  // calendar presentation props
		  enableOutsideDays: false,
		  numberOfMonths: 2,
		  orientation: _constants.HORIZONTAL_ORIENTATION,
		  withPortal: false,
		  onOutsideClick: function onOutsideClick() {},
		  hidden: false,
		  initialVisibleMonth: function initialVisibleMonth() {
		    return (0, _moment["default"])();
		  },
		  firstDayOfWeek: null,
		  renderCalendarInfo: null,
		  calendarInfoPosition: _constants.INFO_POSITION_BOTTOM,
		  hideKeyboardShortcutsPanel: false,
		  daySize: _constants.DAY_SIZE,
		  isRTL: false,
		  verticalHeight: null,
		  noBorder: false,
		  transitionDuration: undefined,
		  verticalBorderSpacing: undefined,
		  horizontalMonthPadding: 13,
		  renderKeyboardShortcutsButton: undefined,
		  renderKeyboardShortcutsPanel: undefined,
		  // navigation props
		  dayPickerNavigationInlineStyles: null,
		  disablePrev: false,
		  disableNext: false,
		  navPosition: _constants.NAV_POSITION_TOP,
		  navPrev: null,
		  navNext: null,
		  renderNavPrevButton: null,
		  renderNavNextButton: null,
		  noNavButtons: false,
		  noNavNextButton: false,
		  noNavPrevButton: false,
		  onPrevMonthClick: function onPrevMonthClick() {},
		  onNextMonthClick: function onNextMonthClick() {},
		  onMonthChange: function onMonthChange() {},
		  onYearChange: function onYearChange() {},
		  onGetNextScrollableMonths: function onGetNextScrollableMonths() {},
		  onGetPrevScrollableMonths: function onGetPrevScrollableMonths() {},
		  // month props
		  renderMonthText: null,
		  renderMonthElement: null,
		  renderWeekHeaderElement: null,
		  // day props
		  modifiers: {},
		  renderCalendarDay: undefined,
		  renderDayContents: null,
		  onDayClick: function onDayClick() {},
		  onDayMouseEnter: function onDayMouseEnter() {},
		  onDayMouseLeave: function onDayMouseLeave() {},
		  // accessibility props
		  isFocused: false,
		  getFirstFocusableDay: null,
		  onBlur: function onBlur() {},
		  showKeyboardShortcuts: false,
		  onTab: function onTab() {},
		  onShiftTab: function onShiftTab() {},
		  // internationalization
		  monthFormat: 'MMMM YYYY',
		  weekDayFormat: 'dd',
		  phrases: _defaultPhrases.DayPickerPhrases,
		  dayAriaLabelFormat: undefined
		};
		exports.defaultProps = defaultProps;

		var DayPicker =
		/*#__PURE__*/
		function (_ref) {
		  (0, _inheritsLoose2["default"])(DayPicker, _ref);
		  var _proto = DayPicker.prototype;

		  _proto[!_react["default"].PureComponent && "shouldComponentUpdate"] = function (nextProps, nextState) {
		    return !(0, _enzymeShallowEqual["default"])(this.props, nextProps) || !(0, _enzymeShallowEqual["default"])(this.state, nextState);
		  };

		  function DayPicker(props) {
		    var _this;

		    _this = _ref.call(this, props) || this;
		    var currentMonth = props.hidden ? (0, _moment["default"])() : props.initialVisibleMonth();
		    var focusedDate = currentMonth.clone().startOf('month');

		    if (props.getFirstFocusableDay) {
		      focusedDate = props.getFirstFocusableDay(currentMonth);
		    }

		    var horizontalMonthPadding = props.horizontalMonthPadding;
		    var translationValue = props.isRTL && _this.isHorizontal() ? -(0, _getCalendarMonthWidth["default"])(props.daySize, horizontalMonthPadding) : 0;
		    _this.hasSetInitialVisibleMonth = !props.hidden;
		    _this.state = {
		      currentMonthScrollTop: null,
		      currentMonth: currentMonth,
		      monthTransition: null,
		      translationValue: translationValue,
		      scrollableMonthMultiple: 1,
		      calendarMonthWidth: (0, _getCalendarMonthWidth["default"])(props.daySize, horizontalMonthPadding),
		      focusedDate: !props.hidden || props.isFocused ? focusedDate : null,
		      nextFocusedDate: null,
		      showKeyboardShortcuts: props.showKeyboardShortcuts,
		      onKeyboardShortcutsPanelClose: function onKeyboardShortcutsPanelClose() {},
		      isTouchDevice: (0, _isTouchDevice["default"])(),
		      withMouseInteractions: true,
		      calendarInfoWidth: 0,
		      monthTitleHeight: null,
		      hasSetHeight: false
		    };

		    _this.setCalendarMonthWeeks(currentMonth);

		    _this.calendarMonthGridHeight = 0;
		    _this.setCalendarInfoWidthTimeout = null;
		    _this.setCalendarMonthGridHeightTimeout = null;
		    _this.onKeyDown = _this.onKeyDown.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.throttledKeyDown = (0, _throttle["default"])(_this.onFinalKeyDown, 200, {
		      trailing: false
		    });
		    _this.onPrevMonthClick = _this.onPrevMonthClick.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.onPrevMonthTransition = _this.onPrevMonthTransition.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.onNextMonthClick = _this.onNextMonthClick.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.onNextMonthTransition = _this.onNextMonthTransition.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.onMonthChange = _this.onMonthChange.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.onYearChange = _this.onYearChange.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.getNextScrollableMonths = _this.getNextScrollableMonths.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.getPrevScrollableMonths = _this.getPrevScrollableMonths.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.updateStateAfterMonthTransition = _this.updateStateAfterMonthTransition.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.openKeyboardShortcutsPanel = _this.openKeyboardShortcutsPanel.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.closeKeyboardShortcutsPanel = _this.closeKeyboardShortcutsPanel.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.setCalendarInfoRef = _this.setCalendarInfoRef.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.setContainerRef = _this.setContainerRef.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.setTransitionContainerRef = _this.setTransitionContainerRef.bind((0, _assertThisInitialized2["default"])(_this));
		    _this.setMonthTitleHeight = _this.setMonthTitleHeight.bind((0, _assertThisInitialized2["default"])(_this));
		    return _this;
		  }

		  _proto.componentDidMount = function componentDidMount() {
		    var orientation = this.props.orientation;
		    var currentMonth = this.state.currentMonth;
		    var calendarInfoWidth = this.calendarInfo ? (0, _calculateDimension["default"])(this.calendarInfo, 'width', true, true) : 0;
		    var currentMonthScrollTop = this.transitionContainer && orientation === _constants.VERTICAL_SCROLLABLE ? this.transitionContainer.scrollHeight - this.transitionContainer.scrollTop : null;
		    this.setState({
		      isTouchDevice: (0, _isTouchDevice["default"])(),
		      calendarInfoWidth: calendarInfoWidth,
		      currentMonthScrollTop: currentMonthScrollTop
		    });
		    this.setCalendarMonthWeeks(currentMonth);
		  };

		  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextState) {
		    var hidden = nextProps.hidden,
		        isFocused = nextProps.isFocused,
		        showKeyboardShortcuts = nextProps.showKeyboardShortcuts,
		        onBlur = nextProps.onBlur,
		        orientation = nextProps.orientation,
		        renderMonthText = nextProps.renderMonthText,
		        horizontalMonthPadding = nextProps.horizontalMonthPadding;
		    var currentMonth = this.state.currentMonth;
		    var nextCurrentMonth = nextState.currentMonth;

		    if (!hidden) {
		      if (!this.hasSetInitialVisibleMonth) {
		        this.hasSetInitialVisibleMonth = true;
		        this.setState({
		          currentMonth: nextProps.initialVisibleMonth()
		        });
		      }
		    }

		    var _this$props = this.props,
		        daySize = _this$props.daySize,
		        prevIsFocused = _this$props.isFocused,
		        prevRenderMonthText = _this$props.renderMonthText;

		    if (nextProps.daySize !== daySize) {
		      this.setState({
		        calendarMonthWidth: (0, _getCalendarMonthWidth["default"])(nextProps.daySize, horizontalMonthPadding)
		      });
		    }

		    if (isFocused !== prevIsFocused) {
		      if (isFocused) {
		        var focusedDate = this.getFocusedDay(currentMonth);
		        var onKeyboardShortcutsPanelClose = this.state.onKeyboardShortcutsPanelClose;

		        if (nextProps.showKeyboardShortcuts) {
		          // the ? shortcut came from the input and we should return input there once it is close
		          onKeyboardShortcutsPanelClose = onBlur;
		        }

		        this.setState({
		          showKeyboardShortcuts: showKeyboardShortcuts,
		          onKeyboardShortcutsPanelClose: onKeyboardShortcutsPanelClose,
		          focusedDate: focusedDate,
		          withMouseInteractions: false
		        });
		      } else {
		        this.setState({
		          focusedDate: null
		        });
		      }
		    }

		    if (renderMonthText !== prevRenderMonthText) {
		      this.setState({
		        monthTitleHeight: null
		      });
		    } // Capture the scroll position so when previous months are rendered above the current month
		    // we can adjust scroll after the component has updated and the previous current month
		    // stays in view.


		    if (orientation === _constants.VERTICAL_SCROLLABLE && this.transitionContainer && !(0, _isSameMonth["default"])(currentMonth, nextCurrentMonth)) {
		      this.setState({
		        currentMonthScrollTop: this.transitionContainer.scrollHeight - this.transitionContainer.scrollTop
		      });
		    }
		  };

		  _proto.componentWillUpdate = function componentWillUpdate() {
		    var _this2 = this;

		    var transitionDuration = this.props.transitionDuration; // Calculating the dimensions trigger a DOM repaint which
		    // breaks the CSS transition.
		    // The setTimeout will wait until the transition ends.

		    if (this.calendarInfo) {
		      this.setCalendarInfoWidthTimeout = setTimeout(function () {
		        var calendarInfoWidth = _this2.state.calendarInfoWidth;
		        var calendarInfoPanelWidth = (0, _calculateDimension["default"])(_this2.calendarInfo, 'width', true, true);

		        if (calendarInfoWidth !== calendarInfoPanelWidth) {
		          _this2.setState({
		            calendarInfoWidth: calendarInfoPanelWidth
		          });
		        }
		      }, transitionDuration);
		    }
		  };

		  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
		    var _this$props2 = this.props,
		        orientation = _this$props2.orientation,
		        daySize = _this$props2.daySize,
		        isFocused = _this$props2.isFocused,
		        numberOfMonths = _this$props2.numberOfMonths;
		    var _this$state = this.state,
		        currentMonth = _this$state.currentMonth,
		        currentMonthScrollTop = _this$state.currentMonthScrollTop,
		        focusedDate = _this$state.focusedDate,
		        monthTitleHeight = _this$state.monthTitleHeight;

		    if (this.isHorizontal() && (orientation !== prevProps.orientation || daySize !== prevProps.daySize)) {
		      var visibleCalendarWeeks = this.calendarMonthWeeks.slice(1, numberOfMonths + 1);
		      var calendarMonthWeeksHeight = Math.max.apply(Math, [0].concat((0, _toConsumableArray2["default"])(visibleCalendarWeeks))) * (daySize - 1);
		      var newMonthHeight = monthTitleHeight + calendarMonthWeeksHeight + 1;
		      this.adjustDayPickerHeight(newMonthHeight);
		    }

		    if (!prevProps.isFocused && isFocused && !focusedDate) {
		      this.container.focus();
		    } // If orientation is VERTICAL_SCROLLABLE and currentMonth has changed adjust scrollTop so the
		    // new months rendered above the current month don't push the current month out of view.


		    if (orientation === _constants.VERTICAL_SCROLLABLE && !(0, _isSameMonth["default"])(prevState.currentMonth, currentMonth) && currentMonthScrollTop && this.transitionContainer) {
		      this.transitionContainer.scrollTop = this.transitionContainer.scrollHeight - currentMonthScrollTop;
		    }
		  };

		  _proto.componentWillUnmount = function componentWillUnmount() {
		    clearTimeout(this.setCalendarInfoWidthTimeout);
		    clearTimeout(this.setCalendarMonthGridHeightTimeout);
		  };

		  _proto.onKeyDown = function onKeyDown(e) {
		    e.stopPropagation();

		    if (!_constants.MODIFIER_KEY_NAMES.has(e.key)) {
		      this.throttledKeyDown(e);
		    }
		  };

		  _proto.onFinalKeyDown = function onFinalKeyDown(e) {
		    this.setState({
		      withMouseInteractions: false
		    });
		    var _this$props3 = this.props,
		        onBlur = _this$props3.onBlur,
		        onTab = _this$props3.onTab,
		        onShiftTab = _this$props3.onShiftTab,
		        isRTL = _this$props3.isRTL;
		    var _this$state2 = this.state,
		        focusedDate = _this$state2.focusedDate,
		        showKeyboardShortcuts = _this$state2.showKeyboardShortcuts;
		    if (!focusedDate) return;
		    var newFocusedDate = focusedDate.clone();
		    var didTransitionMonth = false; // focus might be anywhere when the keyboard shortcuts panel is opened so we want to
		    // return it to wherever it was before when the panel was opened

		    var activeElement = (0, _getActiveElement["default"])();

		    var onKeyboardShortcutsPanelClose = function onKeyboardShortcutsPanelClose() {
		      if (activeElement) activeElement.focus();
		    };

		    switch (e.key) {
		      case 'ArrowUp':
		        e.preventDefault();
		        newFocusedDate.subtract(1, 'week');
		        didTransitionMonth = this.maybeTransitionPrevMonth(newFocusedDate);
		        break;

		      case 'ArrowLeft':
		        e.preventDefault();

		        if (isRTL) {
		          newFocusedDate.add(1, 'day');
		        } else {
		          newFocusedDate.subtract(1, 'day');
		        }

		        didTransitionMonth = this.maybeTransitionPrevMonth(newFocusedDate);
		        break;

		      case 'Home':
		        e.preventDefault();
		        newFocusedDate.startOf('week');
		        didTransitionMonth = this.maybeTransitionPrevMonth(newFocusedDate);
		        break;

		      case 'PageUp':
		        e.preventDefault();
		        newFocusedDate.subtract(1, 'month');
		        didTransitionMonth = this.maybeTransitionPrevMonth(newFocusedDate);
		        break;

		      case 'ArrowDown':
		        e.preventDefault();
		        newFocusedDate.add(1, 'week');
		        didTransitionMonth = this.maybeTransitionNextMonth(newFocusedDate);
		        break;

		      case 'ArrowRight':
		        e.preventDefault();

		        if (isRTL) {
		          newFocusedDate.subtract(1, 'day');
		        } else {
		          newFocusedDate.add(1, 'day');
		        }

		        didTransitionMonth = this.maybeTransitionNextMonth(newFocusedDate);
		        break;

		      case 'End':
		        e.preventDefault();
		        newFocusedDate.endOf('week');
		        didTransitionMonth = this.maybeTransitionNextMonth(newFocusedDate);
		        break;

		      case 'PageDown':
		        e.preventDefault();
		        newFocusedDate.add(1, 'month');
		        didTransitionMonth = this.maybeTransitionNextMonth(newFocusedDate);
		        break;

		      case '?':
		        this.openKeyboardShortcutsPanel(onKeyboardShortcutsPanelClose);
		        break;

		      case 'Escape':
		        if (showKeyboardShortcuts) {
		          this.closeKeyboardShortcutsPanel();
		        } else {
		          onBlur(e);
		        }

		        break;

		      case 'Tab':
		        if (e.shiftKey) {
		          onShiftTab();
		        } else {
		          onTab(e);
		        }

		        break;
		    } // If there was a month transition, do not update the focused date until the transition has
		    // completed. Otherwise, attempting to focus on a DOM node may interrupt the CSS animation. If
		    // didTransitionMonth is true, the focusedDate gets updated in #updateStateAfterMonthTransition


		    if (!didTransitionMonth) {
		      this.setState({
		        focusedDate: newFocusedDate
		      });
		    }
		  };

		  _proto.onPrevMonthClick = function onPrevMonthClick(e) {
		    if (e) e.preventDefault();
		    this.onPrevMonthTransition();
		  };

		  _proto.onPrevMonthTransition = function onPrevMonthTransition(nextFocusedDate) {
		    var _this$props4 = this.props,
		        daySize = _this$props4.daySize,
		        isRTL = _this$props4.isRTL,
		        numberOfMonths = _this$props4.numberOfMonths;
		    var _this$state3 = this.state,
		        calendarMonthWidth = _this$state3.calendarMonthWidth,
		        monthTitleHeight = _this$state3.monthTitleHeight;
		    var translationValue;

		    if (this.isVertical()) {
		      var calendarMonthWeeksHeight = this.calendarMonthWeeks[0] * (daySize - 1);
		      translationValue = monthTitleHeight + calendarMonthWeeksHeight + 1;
		    } else if (this.isHorizontal()) {
		      translationValue = calendarMonthWidth;

		      if (isRTL) {
		        translationValue = -2 * calendarMonthWidth;
		      }

		      var visibleCalendarWeeks = this.calendarMonthWeeks.slice(0, numberOfMonths);

		      var _calendarMonthWeeksHeight = Math.max.apply(Math, [0].concat((0, _toConsumableArray2["default"])(visibleCalendarWeeks))) * (daySize - 1);

		      var newMonthHeight = monthTitleHeight + _calendarMonthWeeksHeight + 1;
		      this.adjustDayPickerHeight(newMonthHeight);
		    }

		    this.setState({
		      monthTransition: PREV_TRANSITION,
		      translationValue: translationValue,
		      focusedDate: null,
		      nextFocusedDate: nextFocusedDate
		    });
		  };

		  _proto.onMonthChange = function onMonthChange(currentMonth) {
		    this.setCalendarMonthWeeks(currentMonth);
		    this.calculateAndSetDayPickerHeight(); // Translation value is a hack to force an invisible transition that
		    // properly rerenders the CalendarMonthGrid

		    this.setState({
		      monthTransition: MONTH_SELECTION_TRANSITION,
		      translationValue: 0.00001,
		      focusedDate: null,
		      nextFocusedDate: currentMonth,
		      currentMonth: currentMonth
		    });
		  };

		  _proto.onYearChange = function onYearChange(currentMonth) {
		    this.setCalendarMonthWeeks(currentMonth);
		    this.calculateAndSetDayPickerHeight(); // Translation value is a hack to force an invisible transition that
		    // properly rerenders the CalendarMonthGrid

		    this.setState({
		      monthTransition: YEAR_SELECTION_TRANSITION,
		      translationValue: 0.0001,
		      focusedDate: null,
		      nextFocusedDate: currentMonth,
		      currentMonth: currentMonth
		    });
		  };

		  _proto.onNextMonthClick = function onNextMonthClick(e) {
		    if (e) e.preventDefault();
		    this.onNextMonthTransition();
		  };

		  _proto.onNextMonthTransition = function onNextMonthTransition(nextFocusedDate) {
		    var _this$props5 = this.props,
		        isRTL = _this$props5.isRTL,
		        numberOfMonths = _this$props5.numberOfMonths,
		        daySize = _this$props5.daySize;
		    var _this$state4 = this.state,
		        calendarMonthWidth = _this$state4.calendarMonthWidth,
		        monthTitleHeight = _this$state4.monthTitleHeight;
		    var translationValue;

		    if (this.isVertical()) {
		      var firstVisibleMonthWeeks = this.calendarMonthWeeks[1];
		      var calendarMonthWeeksHeight = firstVisibleMonthWeeks * (daySize - 1);
		      translationValue = -(monthTitleHeight + calendarMonthWeeksHeight + 1);
		    }

		    if (this.isHorizontal()) {
		      translationValue = -calendarMonthWidth;

		      if (isRTL) {
		        translationValue = 0;
		      }

		      var visibleCalendarWeeks = this.calendarMonthWeeks.slice(2, numberOfMonths + 2);

		      var _calendarMonthWeeksHeight2 = Math.max.apply(Math, [0].concat((0, _toConsumableArray2["default"])(visibleCalendarWeeks))) * (daySize - 1);

		      var newMonthHeight = monthTitleHeight + _calendarMonthWeeksHeight2 + 1;
		      this.adjustDayPickerHeight(newMonthHeight);
		    }

		    this.setState({
		      monthTransition: NEXT_TRANSITION,
		      translationValue: translationValue,
		      focusedDate: null,
		      nextFocusedDate: nextFocusedDate
		    });
		  };

		  _proto.getFirstDayOfWeek = function getFirstDayOfWeek() {
		    var firstDayOfWeek = this.props.firstDayOfWeek;

		    if (firstDayOfWeek == null) {
		      return _moment["default"].localeData().firstDayOfWeek();
		    }

		    return firstDayOfWeek;
		  };

		  _proto.getWeekHeaders = function getWeekHeaders() {
		    var weekDayFormat = this.props.weekDayFormat;
		    var currentMonth = this.state.currentMonth;
		    var firstDayOfWeek = this.getFirstDayOfWeek();
		    var weekHeaders = [];

		    for (var i = 0; i < 7; i += 1) {
		      weekHeaders.push(currentMonth.clone().day((i + firstDayOfWeek) % 7).format(weekDayFormat));
		    }

		    return weekHeaders;
		  };

		  _proto.getFirstVisibleIndex = function getFirstVisibleIndex() {
		    var orientation = this.props.orientation;
		    var monthTransition = this.state.monthTransition;
		    if (orientation === _constants.VERTICAL_SCROLLABLE) return 0;
		    var firstVisibleMonthIndex = 1;

		    if (monthTransition === PREV_TRANSITION) {
		      firstVisibleMonthIndex -= 1;
		    } else if (monthTransition === NEXT_TRANSITION) {
		      firstVisibleMonthIndex += 1;
		    }

		    return firstVisibleMonthIndex;
		  };

		  _proto.getFocusedDay = function getFocusedDay(newMonth) {
		    var _this$props6 = this.props,
		        getFirstFocusableDay = _this$props6.getFirstFocusableDay,
		        numberOfMonths = _this$props6.numberOfMonths;
		    var focusedDate;

		    if (getFirstFocusableDay) {
		      focusedDate = getFirstFocusableDay(newMonth);
		    }

		    if (newMonth && (!focusedDate || !(0, _isDayVisible["default"])(focusedDate, newMonth, numberOfMonths))) {
		      focusedDate = newMonth.clone().startOf('month');
		    }

		    return focusedDate;
		  };

		  _proto.setMonthTitleHeight = function setMonthTitleHeight(monthTitleHeight) {
		    var _this3 = this;

		    this.setState({
		      monthTitleHeight: monthTitleHeight
		    }, function () {
		      _this3.calculateAndSetDayPickerHeight();
		    });
		  };

		  _proto.setCalendarMonthWeeks = function setCalendarMonthWeeks(currentMonth) {
		    var numberOfMonths = this.props.numberOfMonths;
		    this.calendarMonthWeeks = [];
		    var month = currentMonth.clone().subtract(1, 'months');
		    var firstDayOfWeek = this.getFirstDayOfWeek();

		    for (var i = 0; i < numberOfMonths + 2; i += 1) {
		      var numberOfWeeks = (0, _getNumberOfCalendarMonthWeeks["default"])(month, firstDayOfWeek);
		      this.calendarMonthWeeks.push(numberOfWeeks);
		      month = month.add(1, 'months');
		    }
		  };

		  _proto.setContainerRef = function setContainerRef(ref) {
		    this.container = ref;
		  };

		  _proto.setCalendarInfoRef = function setCalendarInfoRef(ref) {
		    this.calendarInfo = ref;
		  };

		  _proto.setTransitionContainerRef = function setTransitionContainerRef(ref) {
		    this.transitionContainer = ref;
		  };

		  _proto.getNextScrollableMonths = function getNextScrollableMonths(e) {
		    var onGetNextScrollableMonths = this.props.onGetNextScrollableMonths;
		    if (e) e.preventDefault();
		    if (onGetNextScrollableMonths) onGetNextScrollableMonths(e);
		    this.setState(function (_ref2) {
		      var scrollableMonthMultiple = _ref2.scrollableMonthMultiple;
		      return {
		        scrollableMonthMultiple: scrollableMonthMultiple + 1
		      };
		    });
		  };

		  _proto.getPrevScrollableMonths = function getPrevScrollableMonths(e) {
		    var _this$props7 = this.props,
		        numberOfMonths = _this$props7.numberOfMonths,
		        onGetPrevScrollableMonths = _this$props7.onGetPrevScrollableMonths;
		    if (e) e.preventDefault();
		    if (onGetPrevScrollableMonths) onGetPrevScrollableMonths(e);
		    this.setState(function (_ref3) {
		      var currentMonth = _ref3.currentMonth,
		          scrollableMonthMultiple = _ref3.scrollableMonthMultiple;
		      return {
		        currentMonth: currentMonth.clone().subtract(numberOfMonths, 'month'),
		        scrollableMonthMultiple: scrollableMonthMultiple + 1
		      };
		    });
		  };

		  _proto.maybeTransitionNextMonth = function maybeTransitionNextMonth(newFocusedDate) {
		    var numberOfMonths = this.props.numberOfMonths;
		    var _this$state5 = this.state,
		        currentMonth = _this$state5.currentMonth,
		        focusedDate = _this$state5.focusedDate;
		    var newFocusedDateMonth = newFocusedDate.month();
		    var focusedDateMonth = focusedDate.month();
		    var isNewFocusedDateVisible = (0, _isDayVisible["default"])(newFocusedDate, currentMonth, numberOfMonths);

		    if (newFocusedDateMonth !== focusedDateMonth && !isNewFocusedDateVisible) {
		      this.onNextMonthTransition(newFocusedDate);
		      return true;
		    }

		    return false;
		  };

		  _proto.maybeTransitionPrevMonth = function maybeTransitionPrevMonth(newFocusedDate) {
		    var numberOfMonths = this.props.numberOfMonths;
		    var _this$state6 = this.state,
		        currentMonth = _this$state6.currentMonth,
		        focusedDate = _this$state6.focusedDate;
		    var newFocusedDateMonth = newFocusedDate.month();
		    var focusedDateMonth = focusedDate.month();
		    var isNewFocusedDateVisible = (0, _isDayVisible["default"])(newFocusedDate, currentMonth, numberOfMonths);

		    if (newFocusedDateMonth !== focusedDateMonth && !isNewFocusedDateVisible) {
		      this.onPrevMonthTransition(newFocusedDate);
		      return true;
		    }

		    return false;
		  };

		  _proto.isHorizontal = function isHorizontal() {
		    var orientation = this.props.orientation;
		    return orientation === _constants.HORIZONTAL_ORIENTATION;
		  };

		  _proto.isVertical = function isVertical() {
		    var orientation = this.props.orientation;
		    return orientation === _constants.VERTICAL_ORIENTATION || orientation === _constants.VERTICAL_SCROLLABLE;
		  };

		  _proto.updateStateAfterMonthTransition = function updateStateAfterMonthTransition() {
		    var _this4 = this;

		    var _this$props8 = this.props,
		        onPrevMonthClick = _this$props8.onPrevMonthClick,
		        onNextMonthClick = _this$props8.onNextMonthClick,
		        numberOfMonths = _this$props8.numberOfMonths,
		        onMonthChange = _this$props8.onMonthChange,
		        onYearChange = _this$props8.onYearChange,
		        isRTL = _this$props8.isRTL;
		    var _this$state7 = this.state,
		        currentMonth = _this$state7.currentMonth,
		        monthTransition = _this$state7.monthTransition,
		        focusedDate = _this$state7.focusedDate,
		        nextFocusedDate = _this$state7.nextFocusedDate,
		        withMouseInteractions = _this$state7.withMouseInteractions,
		        calendarMonthWidth = _this$state7.calendarMonthWidth;
		    if (!monthTransition) return;
		    var newMonth = currentMonth.clone();
		    var firstDayOfWeek = this.getFirstDayOfWeek();

		    if (monthTransition === PREV_TRANSITION) {
		      newMonth.subtract(1, 'month');
		      if (onPrevMonthClick) onPrevMonthClick(newMonth);
		      var newInvisibleMonth = newMonth.clone().subtract(1, 'month');
		      var numberOfWeeks = (0, _getNumberOfCalendarMonthWeeks["default"])(newInvisibleMonth, firstDayOfWeek);
		      this.calendarMonthWeeks = [numberOfWeeks].concat((0, _toConsumableArray2["default"])(this.calendarMonthWeeks.slice(0, -1)));
		    } else if (monthTransition === NEXT_TRANSITION) {
		      newMonth.add(1, 'month');
		      if (onNextMonthClick) onNextMonthClick(newMonth);

		      var _newInvisibleMonth = newMonth.clone().add(numberOfMonths, 'month');

		      var _numberOfWeeks = (0, _getNumberOfCalendarMonthWeeks["default"])(_newInvisibleMonth, firstDayOfWeek);

		      this.calendarMonthWeeks = [].concat((0, _toConsumableArray2["default"])(this.calendarMonthWeeks.slice(1)), [_numberOfWeeks]);
		    } else if (monthTransition === MONTH_SELECTION_TRANSITION) {
		      if (onMonthChange) onMonthChange(newMonth);
		    } else if (monthTransition === YEAR_SELECTION_TRANSITION) {
		      if (onYearChange) onYearChange(newMonth);
		    }

		    var newFocusedDate = null;

		    if (nextFocusedDate) {
		      newFocusedDate = nextFocusedDate;
		    } else if (!focusedDate && !withMouseInteractions) {
		      newFocusedDate = this.getFocusedDay(newMonth);
		    }

		    this.setState({
		      currentMonth: newMonth,
		      monthTransition: null,
		      translationValue: isRTL && this.isHorizontal() ? -calendarMonthWidth : 0,
		      nextFocusedDate: null,
		      focusedDate: newFocusedDate
		    }, function () {
		      // we don't want to focus on the relevant calendar day after a month transition
		      // if the user is navigating around using a mouse
		      if (withMouseInteractions) {
		        var activeElement = (0, _getActiveElement["default"])();

		        if (activeElement && activeElement !== document.body && _this4.container.contains(activeElement) && activeElement.blur) {
		          activeElement.blur();
		        }
		      }
		    });
		  };

		  _proto.adjustDayPickerHeight = function adjustDayPickerHeight(newMonthHeight) {
		    var _this5 = this;

		    var monthHeight = newMonthHeight + MONTH_PADDING;

		    if (monthHeight !== this.calendarMonthGridHeight) {
		      this.transitionContainer.style.height = "".concat(monthHeight, "px");

		      if (!this.calendarMonthGridHeight) {
		        this.setCalendarMonthGridHeightTimeout = setTimeout(function () {
		          _this5.setState({
		            hasSetHeight: true
		          });
		        }, 0);
		      }

		      this.calendarMonthGridHeight = monthHeight;
		    }
		  };

		  _proto.calculateAndSetDayPickerHeight = function calculateAndSetDayPickerHeight() {
		    var _this$props9 = this.props,
		        daySize = _this$props9.daySize,
		        numberOfMonths = _this$props9.numberOfMonths;
		    var monthTitleHeight = this.state.monthTitleHeight;
		    var visibleCalendarWeeks = this.calendarMonthWeeks.slice(1, numberOfMonths + 1);
		    var calendarMonthWeeksHeight = Math.max.apply(Math, [0].concat((0, _toConsumableArray2["default"])(visibleCalendarWeeks))) * (daySize - 1);
		    var newMonthHeight = monthTitleHeight + calendarMonthWeeksHeight + 1;

		    if (this.isHorizontal()) {
		      this.adjustDayPickerHeight(newMonthHeight);
		    }
		  };

		  _proto.openKeyboardShortcutsPanel = function openKeyboardShortcutsPanel(onCloseCallBack) {
		    this.setState({
		      showKeyboardShortcuts: true,
		      onKeyboardShortcutsPanelClose: onCloseCallBack
		    });
		  };

		  _proto.closeKeyboardShortcutsPanel = function closeKeyboardShortcutsPanel() {
		    var onKeyboardShortcutsPanelClose = this.state.onKeyboardShortcutsPanelClose;

		    if (onKeyboardShortcutsPanelClose) {
		      onKeyboardShortcutsPanelClose();
		    }

		    this.setState({
		      onKeyboardShortcutsPanelClose: null,
		      showKeyboardShortcuts: false
		    });
		  };

		  _proto.renderNavigation = function renderNavigation(navDirection) {
		    var _this$props10 = this.props,
		        dayPickerNavigationInlineStyles = _this$props10.dayPickerNavigationInlineStyles,
		        disablePrev = _this$props10.disablePrev,
		        disableNext = _this$props10.disableNext,
		        navPosition = _this$props10.navPosition,
		        navPrev = _this$props10.navPrev,
		        navNext = _this$props10.navNext,
		        noNavButtons = _this$props10.noNavButtons,
		        noNavNextButton = _this$props10.noNavNextButton,
		        noNavPrevButton = _this$props10.noNavPrevButton,
		        orientation = _this$props10.orientation,
		        phrases = _this$props10.phrases,
		        renderNavPrevButton = _this$props10.renderNavPrevButton,
		        renderNavNextButton = _this$props10.renderNavNextButton,
		        isRTL = _this$props10.isRTL;

		    if (noNavButtons) {
		      return null;
		    }

		    var onPrevMonthClick = orientation === _constants.VERTICAL_SCROLLABLE ? this.getPrevScrollableMonths : this.onPrevMonthClick;
		    var onNextMonthClick = orientation === _constants.VERTICAL_SCROLLABLE ? this.getNextScrollableMonths : this.onNextMonthClick;
		    return _react["default"].createElement(_DayPickerNavigation["default"], {
		      disablePrev: disablePrev,
		      disableNext: disableNext,
		      inlineStyles: dayPickerNavigationInlineStyles,
		      onPrevMonthClick: onPrevMonthClick,
		      onNextMonthClick: onNextMonthClick,
		      navPosition: navPosition,
		      navPrev: navPrev,
		      navNext: navNext,
		      renderNavPrevButton: renderNavPrevButton,
		      renderNavNextButton: renderNavNextButton,
		      orientation: orientation,
		      phrases: phrases,
		      isRTL: isRTL,
		      showNavNextButton: !(noNavNextButton || orientation === _constants.VERTICAL_SCROLLABLE && navDirection === PREV_NAV),
		      showNavPrevButton: !(noNavPrevButton || orientation === _constants.VERTICAL_SCROLLABLE && navDirection === NEXT_NAV)
		    });
		  };

		  _proto.renderWeekHeader = function renderWeekHeader(index) {
		    var _this$props11 = this.props,
		        daySize = _this$props11.daySize,
		        horizontalMonthPadding = _this$props11.horizontalMonthPadding,
		        orientation = _this$props11.orientation,
		        renderWeekHeaderElement = _this$props11.renderWeekHeaderElement,
		        styles = _this$props11.styles;
		    var calendarMonthWidth = this.state.calendarMonthWidth;
		    var verticalScrollable = orientation === _constants.VERTICAL_SCROLLABLE;
		    var horizontalStyle = {
		      left: index * calendarMonthWidth
		    };
		    var verticalStyle = {
		      marginLeft: -calendarMonthWidth / 2
		    };
		    var weekHeaderStyle = {}; // no styles applied to the vertical-scrollable orientation

		    if (this.isHorizontal()) {
		      weekHeaderStyle = horizontalStyle;
		    } else if (this.isVertical() && !verticalScrollable) {
		      weekHeaderStyle = verticalStyle;
		    }

		    var weekHeaders = this.getWeekHeaders();
		    var header = weekHeaders.map(function (day) {
		      return _react["default"].createElement("li", (0, _extends2["default"])({
		        key: day
		      }, (0, _reactWithStyles.css)(styles.DayPicker_weekHeader_li, {
		        width: daySize
		      })), renderWeekHeaderElement ? renderWeekHeaderElement(day) : _react["default"].createElement("small", null, day));
		    });
		    return _react["default"].createElement("div", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.DayPicker_weekHeader, this.isVertical() && styles.DayPicker_weekHeader__vertical, verticalScrollable && styles.DayPicker_weekHeader__verticalScrollable, weekHeaderStyle, {
		      padding: "0 ".concat(horizontalMonthPadding, "px")
		    }), {
		      key: "week-".concat(index)
		    }), _react["default"].createElement("ul", (0, _reactWithStyles.css)(styles.DayPicker_weekHeader_ul), header));
		  };

		  _proto.render = function render() {
		    var _this6 = this;

		    var _this$state8 = this.state,
		        calendarMonthWidth = _this$state8.calendarMonthWidth,
		        currentMonth = _this$state8.currentMonth,
		        monthTransition = _this$state8.monthTransition,
		        translationValue = _this$state8.translationValue,
		        scrollableMonthMultiple = _this$state8.scrollableMonthMultiple,
		        focusedDate = _this$state8.focusedDate,
		        showKeyboardShortcuts = _this$state8.showKeyboardShortcuts,
		        isTouch = _this$state8.isTouchDevice,
		        hasSetHeight = _this$state8.hasSetHeight,
		        calendarInfoWidth = _this$state8.calendarInfoWidth,
		        monthTitleHeight = _this$state8.monthTitleHeight;
		    var _this$props12 = this.props,
		        enableOutsideDays = _this$props12.enableOutsideDays,
		        numberOfMonths = _this$props12.numberOfMonths,
		        orientation = _this$props12.orientation,
		        modifiers = _this$props12.modifiers,
		        withPortal = _this$props12.withPortal,
		        onDayClick = _this$props12.onDayClick,
		        onDayMouseEnter = _this$props12.onDayMouseEnter,
		        onDayMouseLeave = _this$props12.onDayMouseLeave,
		        firstDayOfWeek = _this$props12.firstDayOfWeek,
		        renderMonthText = _this$props12.renderMonthText,
		        renderCalendarDay = _this$props12.renderCalendarDay,
		        renderDayContents = _this$props12.renderDayContents,
		        renderCalendarInfo = _this$props12.renderCalendarInfo,
		        renderMonthElement = _this$props12.renderMonthElement,
		        renderKeyboardShortcutsButton = _this$props12.renderKeyboardShortcutsButton,
		        renderKeyboardShortcutsPanel = _this$props12.renderKeyboardShortcutsPanel,
		        calendarInfoPosition = _this$props12.calendarInfoPosition,
		        hideKeyboardShortcutsPanel = _this$props12.hideKeyboardShortcutsPanel,
		        onOutsideClick = _this$props12.onOutsideClick,
		        monthFormat = _this$props12.monthFormat,
		        daySize = _this$props12.daySize,
		        isFocused = _this$props12.isFocused,
		        isRTL = _this$props12.isRTL,
		        styles = _this$props12.styles,
		        theme = _this$props12.theme,
		        phrases = _this$props12.phrases,
		        verticalHeight = _this$props12.verticalHeight,
		        dayAriaLabelFormat = _this$props12.dayAriaLabelFormat,
		        noBorder = _this$props12.noBorder,
		        transitionDuration = _this$props12.transitionDuration,
		        verticalBorderSpacing = _this$props12.verticalBorderSpacing,
		        horizontalMonthPadding = _this$props12.horizontalMonthPadding,
		        navPosition = _this$props12.navPosition;
		    var dayPickerHorizontalPadding = theme.reactDates.spacing.dayPickerHorizontalPadding;
		    var isHorizontal = this.isHorizontal();
		    var numOfWeekHeaders = this.isVertical() ? 1 : numberOfMonths;
		    var weekHeaders = [];

		    for (var i = 0; i < numOfWeekHeaders; i += 1) {
		      weekHeaders.push(this.renderWeekHeader(i));
		    }

		    var verticalScrollable = orientation === _constants.VERTICAL_SCROLLABLE;
		    var height;

		    if (isHorizontal) {
		      height = this.calendarMonthGridHeight;
		    } else if (this.isVertical() && !verticalScrollable && !withPortal) {
		      // If the user doesn't set a desired height,
		      // we default back to this kind of made-up value that generally looks good
		      height = verticalHeight || 1.75 * calendarMonthWidth;
		    }

		    var isCalendarMonthGridAnimating = monthTransition !== null;
		    var shouldFocusDate = !isCalendarMonthGridAnimating && isFocused;
		    var keyboardShortcutButtonLocation = _DayPickerKeyboardShortcuts.BOTTOM_RIGHT;

		    if (this.isVertical()) {
		      keyboardShortcutButtonLocation = withPortal ? _DayPickerKeyboardShortcuts.TOP_LEFT : _DayPickerKeyboardShortcuts.TOP_RIGHT;
		    }

		    var shouldAnimateHeight = isHorizontal && hasSetHeight;
		    var calendarInfoPositionTop = calendarInfoPosition === _constants.INFO_POSITION_TOP;
		    var calendarInfoPositionBottom = calendarInfoPosition === _constants.INFO_POSITION_BOTTOM;
		    var calendarInfoPositionBefore = calendarInfoPosition === _constants.INFO_POSITION_BEFORE;
		    var calendarInfoPositionAfter = calendarInfoPosition === _constants.INFO_POSITION_AFTER;
		    var calendarInfoIsInline = calendarInfoPositionBefore || calendarInfoPositionAfter;

		    var calendarInfo = renderCalendarInfo && _react["default"].createElement("div", (0, _extends2["default"])({
		      ref: this.setCalendarInfoRef
		    }, (0, _reactWithStyles.css)(calendarInfoIsInline && styles.DayPicker_calendarInfo__horizontal)), renderCalendarInfo());

		    var calendarInfoPanelWidth = renderCalendarInfo && calendarInfoIsInline ? calendarInfoWidth : 0;
		    var firstVisibleMonthIndex = this.getFirstVisibleIndex();
		    var wrapperHorizontalWidth = calendarMonthWidth * numberOfMonths + 2 * dayPickerHorizontalPadding; // Adding `1px` because of whitespace between 2 inline-block

		    var fullHorizontalWidth = wrapperHorizontalWidth + calendarInfoPanelWidth + 1;
		    var transitionContainerStyle = {
		      width: isHorizontal && wrapperHorizontalWidth,
		      height: height
		    };
		    var dayPickerWrapperStyle = {
		      width: isHorizontal && wrapperHorizontalWidth
		    };
		    var dayPickerStyle = {
		      width: isHorizontal && fullHorizontalWidth,
		      // These values are to center the datepicker (approximately) on the page
		      marginLeft: isHorizontal && withPortal ? -fullHorizontalWidth / 2 : null,
		      marginTop: isHorizontal && withPortal ? -calendarMonthWidth / 2 : null
		    };
		    return _react["default"].createElement("div", (0, _reactWithStyles.css)(styles.DayPicker, isHorizontal && styles.DayPicker__horizontal, verticalScrollable && styles.DayPicker__verticalScrollable, isHorizontal && withPortal && styles.DayPicker_portal__horizontal, this.isVertical() && withPortal && styles.DayPicker_portal__vertical, dayPickerStyle, !monthTitleHeight && styles.DayPicker__hidden, !noBorder && styles.DayPicker__withBorder), _react["default"].createElement(_reactOutsideClickHandler["default"], {
		      onOutsideClick: onOutsideClick
		    }, (calendarInfoPositionTop || calendarInfoPositionBefore) && calendarInfo, _react["default"].createElement("div", (0, _reactWithStyles.css)(dayPickerWrapperStyle, calendarInfoIsInline && isHorizontal && styles.DayPicker_wrapper__horizontal), _react["default"].createElement("div", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.DayPicker_weekHeaders, isHorizontal && styles.DayPicker_weekHeaders__horizontal), {
		      "aria-hidden": "true",
		      role: "presentation"
		    }), weekHeaders), _react["default"].createElement("div", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.DayPicker_focusRegion), {
		      ref: this.setContainerRef,
		      onClick: function onClick(e) {
		        e.stopPropagation();
		      },
		      onKeyDown: this.onKeyDown,
		      onMouseUp: function onMouseUp() {
		        _this6.setState({
		          withMouseInteractions: true
		        });
		      },
		      tabIndex: -1,
		      role: "application",
		      "aria-roledescription": phrases.roleDescription,
		      "aria-label": phrases.calendarLabel
		    }), !verticalScrollable && navPosition === _constants.NAV_POSITION_TOP && this.renderNavigation(), _react["default"].createElement("div", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.DayPicker_transitionContainer, shouldAnimateHeight && styles.DayPicker_transitionContainer__horizontal, this.isVertical() && styles.DayPicker_transitionContainer__vertical, verticalScrollable && styles.DayPicker_transitionContainer__verticalScrollable, transitionContainerStyle), {
		      ref: this.setTransitionContainerRef
		    }), verticalScrollable && this.renderNavigation(PREV_NAV), _react["default"].createElement(_CalendarMonthGrid["default"], {
		      setMonthTitleHeight: !monthTitleHeight ? this.setMonthTitleHeight : undefined,
		      translationValue: translationValue,
		      enableOutsideDays: enableOutsideDays,
		      firstVisibleMonthIndex: firstVisibleMonthIndex,
		      initialMonth: currentMonth,
		      isAnimating: isCalendarMonthGridAnimating,
		      modifiers: modifiers,
		      orientation: orientation,
		      numberOfMonths: numberOfMonths * scrollableMonthMultiple,
		      onDayClick: onDayClick,
		      onDayMouseEnter: onDayMouseEnter,
		      onDayMouseLeave: onDayMouseLeave,
		      onMonthChange: this.onMonthChange,
		      onYearChange: this.onYearChange,
		      renderMonthText: renderMonthText,
		      renderCalendarDay: renderCalendarDay,
		      renderDayContents: renderDayContents,
		      renderMonthElement: renderMonthElement,
		      onMonthTransitionEnd: this.updateStateAfterMonthTransition,
		      monthFormat: monthFormat,
		      daySize: daySize,
		      firstDayOfWeek: firstDayOfWeek,
		      isFocused: shouldFocusDate,
		      focusedDate: focusedDate,
		      phrases: phrases,
		      isRTL: isRTL,
		      dayAriaLabelFormat: dayAriaLabelFormat,
		      transitionDuration: transitionDuration,
		      verticalBorderSpacing: verticalBorderSpacing,
		      horizontalMonthPadding: horizontalMonthPadding
		    }), verticalScrollable && this.renderNavigation(NEXT_NAV)), !verticalScrollable && navPosition === _constants.NAV_POSITION_BOTTOM && this.renderNavigation(), !isTouch && !hideKeyboardShortcutsPanel && _react["default"].createElement(_DayPickerKeyboardShortcuts["default"], {
		      block: this.isVertical() && !withPortal,
		      buttonLocation: keyboardShortcutButtonLocation,
		      showKeyboardShortcutsPanel: showKeyboardShortcuts,
		      openKeyboardShortcutsPanel: this.openKeyboardShortcutsPanel,
		      closeKeyboardShortcutsPanel: this.closeKeyboardShortcutsPanel,
		      phrases: phrases,
		      renderKeyboardShortcutsButton: renderKeyboardShortcutsButton,
		      renderKeyboardShortcutsPanel: renderKeyboardShortcutsPanel
		    }))), (calendarInfoPositionBottom || calendarInfoPositionAfter) && calendarInfo));
		  };

		  return DayPicker;
		}(_react["default"].PureComponent || _react["default"].Component);

		exports.PureDayPicker = DayPicker;
		DayPicker.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
		DayPicker.defaultProps = defaultProps;

		var _default = (0, _reactWithStyles.withStyles)(function (_ref4) {
		  var _ref4$reactDates = _ref4.reactDates,
		      color = _ref4$reactDates.color,
		      font = _ref4$reactDates.font,
		      noScrollBarOnVerticalScrollable = _ref4$reactDates.noScrollBarOnVerticalScrollable,
		      spacing = _ref4$reactDates.spacing,
		      zIndex = _ref4$reactDates.zIndex;
		  return {
		    DayPicker: {
		      background: color.background,
		      position: 'relative',
		      textAlign: (0, _noflip["default"])('left')
		    },
		    DayPicker__horizontal: {
		      background: color.background
		    },
		    DayPicker__verticalScrollable: {
		      height: '100%'
		    },
		    DayPicker__hidden: {
		      visibility: 'hidden'
		    },
		    DayPicker__withBorder: {
		      boxShadow: (0, _noflip["default"])('0 2px 6px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(0, 0, 0, 0.07)'),
		      borderRadius: 3
		    },
		    DayPicker_portal__horizontal: {
		      boxShadow: 'none',
		      position: 'absolute',
		      left: (0, _noflip["default"])('50%'),
		      top: '50%'
		    },
		    DayPicker_portal__vertical: {
		      position: 'initial'
		    },
		    DayPicker_focusRegion: {
		      outline: 'none'
		    },
		    DayPicker_calendarInfo__horizontal: {
		      display: 'inline-block',
		      verticalAlign: 'top'
		    },
		    DayPicker_wrapper__horizontal: {
		      display: 'inline-block',
		      verticalAlign: 'top'
		    },
		    DayPicker_weekHeaders: {
		      position: 'relative'
		    },
		    DayPicker_weekHeaders__horizontal: {
		      marginLeft: (0, _noflip["default"])(spacing.dayPickerHorizontalPadding)
		    },
		    DayPicker_weekHeader: {
		      color: color.placeholderText,
		      position: 'absolute',
		      top: 62,
		      zIndex: zIndex + 2,
		      textAlign: (0, _noflip["default"])('left')
		    },
		    DayPicker_weekHeader__vertical: {
		      left: (0, _noflip["default"])('50%')
		    },
		    DayPicker_weekHeader__verticalScrollable: {
		      top: 0,
		      display: 'table-row',
		      borderBottom: "1px solid ".concat(color.core.border),
		      background: color.background,
		      marginLeft: (0, _noflip["default"])(0),
		      left: (0, _noflip["default"])(0),
		      width: '100%',
		      textAlign: 'center'
		    },
		    DayPicker_weekHeader_ul: {
		      listStyle: 'none',
		      margin: '1px 0',
		      paddingLeft: (0, _noflip["default"])(0),
		      paddingRight: (0, _noflip["default"])(0),
		      fontSize: font.size
		    },
		    DayPicker_weekHeader_li: {
		      display: 'inline-block',
		      textAlign: 'center'
		    },
		    DayPicker_transitionContainer: {
		      position: 'relative',
		      overflow: 'hidden',
		      borderRadius: 3
		    },
		    DayPicker_transitionContainer__horizontal: {
		      transition: 'height 0.2s ease-in-out'
		    },
		    DayPicker_transitionContainer__vertical: {
		      width: '100%'
		    },
		    DayPicker_transitionContainer__verticalScrollable: _objectSpread({
		      paddingTop: 20,
		      height: '100%',
		      position: 'absolute',
		      top: 0,
		      bottom: 0,
		      right: (0, _noflip["default"])(0),
		      left: (0, _noflip["default"])(0),
		      overflowY: 'scroll'
		    }, noScrollBarOnVerticalScrollable && {
		      '-webkitOverflowScrolling': 'touch',
		      '::-webkit-scrollbar': {
		        '-webkit-appearance': 'none',
		        display: 'none'
		      }
		    })
		  };
		}, {
		  pureComponent: typeof _react["default"].PureComponent !== 'undefined'
		})(DayPicker);

		exports["default"] = _default; 
	} (DayPicker));
	return DayPicker;
}

var getPooledMoment = {};

var hasRequiredGetPooledMoment;

function requireGetPooledMoment () {
	if (hasRequiredGetPooledMoment) return getPooledMoment;
	hasRequiredGetPooledMoment = 1;
	(function (exports) {

		var _interopRequireDefault = interopRequireDefaultExports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = getPooledMoment;

		var _moment = _interopRequireDefault(momentExports);

		var momentPool = new Map();

		function getPooledMoment(dayString) {
		  if (!momentPool.has(dayString)) {
		    momentPool.set(dayString, (0, _moment["default"])(dayString));
		  }

		  return momentPool.get(dayString);
		} 
	} (getPooledMoment));
	return getPooledMoment;
}

(function (exports) {

	var _interopRequireDefault = interopRequireDefaultExports;

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = void 0;

	var _enzymeShallowEqual = _interopRequireDefault(requireBuild$3());

	var _slicedToArray2 = _interopRequireDefault(requireSlicedToArray());

	var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

	var _assertThisInitialized2 = _interopRequireDefault(requireAssertThisInitialized());

	var _inheritsLoose2 = _interopRequireDefault(requireInheritsLoose());

	var _react = _interopRequireDefault(reactExports);

	var _propTypes = _interopRequireDefault(PropTypes$1);

	var _reactMomentProptypes = _interopRequireDefault(src$1);

	var _airbnbPropTypes = requireAirbnbPropTypes();

	var _moment = _interopRequireDefault(momentExports);

	var _object = _interopRequireDefault(requireObject_values());

	var _isTouchDevice = _interopRequireDefault(requireBuild());

	var _defaultPhrases = requireDefaultPhrases();

	var _getPhrasePropTypes = _interopRequireDefault(requireGetPhrasePropTypes());

	var _isSameDay = _interopRequireDefault(requireIsSameDay());

	var _isAfterDay = _interopRequireDefault(requireIsAfterDay());

	var _getVisibleDays = _interopRequireDefault(requireGetVisibleDays());

	var _toISODateString = _interopRequireDefault(requireToISODateString());

	var _modifiers = requireModifiers();

	var _ScrollableOrientationShape = _interopRequireDefault(requireScrollableOrientationShape());

	var _DayOfWeekShape = _interopRequireDefault(requireDayOfWeekShape());

	var _CalendarInfoPositionShape = _interopRequireDefault(requireCalendarInfoPositionShape());

	var _NavPositionShape = _interopRequireDefault(requireNavPositionShape());

	var _constants = requireConstants();

	var _DayPicker = _interopRequireDefault(requireDayPicker());

	var _getPooledMoment = _interopRequireDefault(requireGetPooledMoment());

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	var propTypes = process.env.NODE_ENV !== "production" ? (0, _airbnbPropTypes.forbidExtraProps)({
	  date: _reactMomentProptypes["default"].momentObj,
	  onDateChange: _propTypes["default"].func,
	  focused: _propTypes["default"].bool,
	  onFocusChange: _propTypes["default"].func,
	  onClose: _propTypes["default"].func,
	  keepOpenOnDateSelect: _propTypes["default"].bool,
	  isOutsideRange: _propTypes["default"].func,
	  isDayBlocked: _propTypes["default"].func,
	  isDayHighlighted: _propTypes["default"].func,
	  // DayPicker props
	  renderMonthText: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes["default"].func, 'renderMonthText', 'renderMonthElement'),
	  renderMonthElement: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes["default"].func, 'renderMonthText', 'renderMonthElement'),
	  renderWeekHeaderElement: _propTypes["default"].func,
	  enableOutsideDays: _propTypes["default"].bool,
	  numberOfMonths: _propTypes["default"].number,
	  orientation: _ScrollableOrientationShape["default"],
	  withPortal: _propTypes["default"].bool,
	  initialVisibleMonth: _propTypes["default"].func,
	  firstDayOfWeek: _DayOfWeekShape["default"],
	  hideKeyboardShortcutsPanel: _propTypes["default"].bool,
	  daySize: _airbnbPropTypes.nonNegativeInteger,
	  verticalHeight: _airbnbPropTypes.nonNegativeInteger,
	  noBorder: _propTypes["default"].bool,
	  verticalBorderSpacing: _airbnbPropTypes.nonNegativeInteger,
	  transitionDuration: _airbnbPropTypes.nonNegativeInteger,
	  horizontalMonthPadding: _airbnbPropTypes.nonNegativeInteger,
	  dayPickerNavigationInlineStyles: _propTypes["default"].object,
	  navPosition: _NavPositionShape["default"],
	  navPrev: _propTypes["default"].node,
	  navNext: _propTypes["default"].node,
	  renderNavPrevButton: _propTypes["default"].func,
	  renderNavNextButton: _propTypes["default"].func,
	  noNavButtons: _propTypes["default"].bool,
	  noNavNextButton: _propTypes["default"].bool,
	  noNavPrevButton: _propTypes["default"].bool,
	  onPrevMonthClick: _propTypes["default"].func,
	  onNextMonthClick: _propTypes["default"].func,
	  onOutsideClick: _propTypes["default"].func,
	  renderCalendarDay: _propTypes["default"].func,
	  renderDayContents: _propTypes["default"].func,
	  renderCalendarInfo: _propTypes["default"].func,
	  calendarInfoPosition: _CalendarInfoPositionShape["default"],
	  // accessibility
	  onBlur: _propTypes["default"].func,
	  isFocused: _propTypes["default"].bool,
	  showKeyboardShortcuts: _propTypes["default"].bool,
	  onTab: _propTypes["default"].func,
	  onShiftTab: _propTypes["default"].func,
	  // i18n
	  monthFormat: _propTypes["default"].string,
	  weekDayFormat: _propTypes["default"].string,
	  phrases: _propTypes["default"].shape((0, _getPhrasePropTypes["default"])(_defaultPhrases.DayPickerPhrases)),
	  dayAriaLabelFormat: _propTypes["default"].string,
	  isRTL: _propTypes["default"].bool
	}) : {};
	var defaultProps = {
	  date: undefined,
	  // TODO: use null
	  onDateChange: function onDateChange() {},
	  focused: false,
	  onFocusChange: function onFocusChange() {},
	  onClose: function onClose() {},
	  keepOpenOnDateSelect: false,
	  isOutsideRange: function isOutsideRange() {},
	  isDayBlocked: function isDayBlocked() {},
	  isDayHighlighted: function isDayHighlighted() {},
	  // DayPicker props
	  renderMonthText: null,
	  renderWeekHeaderElement: null,
	  enableOutsideDays: false,
	  numberOfMonths: 1,
	  orientation: _constants.HORIZONTAL_ORIENTATION,
	  withPortal: false,
	  hideKeyboardShortcutsPanel: false,
	  initialVisibleMonth: null,
	  firstDayOfWeek: null,
	  daySize: _constants.DAY_SIZE,
	  verticalHeight: null,
	  noBorder: false,
	  verticalBorderSpacing: undefined,
	  transitionDuration: undefined,
	  horizontalMonthPadding: 13,
	  dayPickerNavigationInlineStyles: null,
	  navPosition: _constants.NAV_POSITION_TOP,
	  navPrev: null,
	  navNext: null,
	  renderNavPrevButton: null,
	  renderNavNextButton: null,
	  noNavButtons: false,
	  noNavNextButton: false,
	  noNavPrevButton: false,
	  onPrevMonthClick: function onPrevMonthClick() {},
	  onNextMonthClick: function onNextMonthClick() {},
	  onOutsideClick: function onOutsideClick() {},
	  renderCalendarDay: undefined,
	  renderDayContents: null,
	  renderCalendarInfo: null,
	  renderMonthElement: null,
	  calendarInfoPosition: _constants.INFO_POSITION_BOTTOM,
	  // accessibility
	  onBlur: function onBlur() {},
	  isFocused: false,
	  showKeyboardShortcuts: false,
	  onTab: function onTab() {},
	  onShiftTab: function onShiftTab() {},
	  // i18n
	  monthFormat: 'MMMM YYYY',
	  weekDayFormat: 'dd',
	  phrases: _defaultPhrases.DayPickerPhrases,
	  dayAriaLabelFormat: undefined,
	  isRTL: false
	};

	var DayPickerSingleDateController =
	/*#__PURE__*/
	function (_ref) {
	  (0, _inheritsLoose2["default"])(DayPickerSingleDateController, _ref);
	  var _proto = DayPickerSingleDateController.prototype;

	  _proto[!_react["default"].PureComponent && "shouldComponentUpdate"] = function (nextProps, nextState) {
	    return !(0, _enzymeShallowEqual["default"])(this.props, nextProps) || !(0, _enzymeShallowEqual["default"])(this.state, nextState);
	  };

	  function DayPickerSingleDateController(props) {
	    var _this;

	    _this = _ref.call(this, props) || this;
	    _this.isTouchDevice = false;
	    _this.today = (0, _moment["default"])();
	    _this.modifiers = {
	      today: function today(day) {
	        return _this.isToday(day);
	      },
	      blocked: function blocked(day) {
	        return _this.isBlocked(day);
	      },
	      'blocked-calendar': function blockedCalendar(day) {
	        return props.isDayBlocked(day);
	      },
	      'blocked-out-of-range': function blockedOutOfRange(day) {
	        return props.isOutsideRange(day);
	      },
	      'highlighted-calendar': function highlightedCalendar(day) {
	        return props.isDayHighlighted(day);
	      },
	      valid: function valid(day) {
	        return !_this.isBlocked(day);
	      },
	      hovered: function hovered(day) {
	        return _this.isHovered(day);
	      },
	      selected: function selected(day) {
	        return _this.isSelected(day);
	      },
	      'first-day-of-week': function firstDayOfWeek(day) {
	        return _this.isFirstDayOfWeek(day);
	      },
	      'last-day-of-week': function lastDayOfWeek(day) {
	        return _this.isLastDayOfWeek(day);
	      }
	    };

	    var _this$getStateForNewM = _this.getStateForNewMonth(props),
	        currentMonth = _this$getStateForNewM.currentMonth,
	        visibleDays = _this$getStateForNewM.visibleDays;

	    _this.state = {
	      hoverDate: null,
	      currentMonth: currentMonth,
	      visibleDays: visibleDays
	    };
	    _this.onDayMouseEnter = _this.onDayMouseEnter.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.onDayMouseLeave = _this.onDayMouseLeave.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.onDayClick = _this.onDayClick.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.onPrevMonthClick = _this.onPrevMonthClick.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.onNextMonthClick = _this.onNextMonthClick.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.onMonthChange = _this.onMonthChange.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.onYearChange = _this.onYearChange.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.onGetNextScrollableMonths = _this.onGetNextScrollableMonths.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.onGetPrevScrollableMonths = _this.onGetPrevScrollableMonths.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.getFirstFocusableDay = _this.getFirstFocusableDay.bind((0, _assertThisInitialized2["default"])(_this));
	    return _this;
	  }

	  _proto.componentDidMount = function componentDidMount() {
	    this.isTouchDevice = (0, _isTouchDevice["default"])();
	  };

	  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this2 = this;

	    var date = nextProps.date,
	        focused = nextProps.focused,
	        isOutsideRange = nextProps.isOutsideRange,
	        isDayBlocked = nextProps.isDayBlocked,
	        isDayHighlighted = nextProps.isDayHighlighted,
	        initialVisibleMonth = nextProps.initialVisibleMonth,
	        numberOfMonths = nextProps.numberOfMonths,
	        enableOutsideDays = nextProps.enableOutsideDays;
	    var _this$props = this.props,
	        prevIsOutsideRange = _this$props.isOutsideRange,
	        prevIsDayBlocked = _this$props.isDayBlocked,
	        prevIsDayHighlighted = _this$props.isDayHighlighted,
	        prevNumberOfMonths = _this$props.numberOfMonths,
	        prevEnableOutsideDays = _this$props.enableOutsideDays,
	        prevInitialVisibleMonth = _this$props.initialVisibleMonth,
	        prevFocused = _this$props.focused,
	        prevDate = _this$props.date;
	    var visibleDays = this.state.visibleDays;
	    var recomputeOutsideRange = false;
	    var recomputeDayBlocked = false;
	    var recomputeDayHighlighted = false;

	    if (isOutsideRange !== prevIsOutsideRange) {
	      this.modifiers['blocked-out-of-range'] = function (day) {
	        return isOutsideRange(day);
	      };

	      recomputeOutsideRange = true;
	    }

	    if (isDayBlocked !== prevIsDayBlocked) {
	      this.modifiers['blocked-calendar'] = function (day) {
	        return isDayBlocked(day);
	      };

	      recomputeDayBlocked = true;
	    }

	    if (isDayHighlighted !== prevIsDayHighlighted) {
	      this.modifiers['highlighted-calendar'] = function (day) {
	        return isDayHighlighted(day);
	      };

	      recomputeDayHighlighted = true;
	    }

	    var recomputePropModifiers = recomputeOutsideRange || recomputeDayBlocked || recomputeDayHighlighted;

	    if (numberOfMonths !== prevNumberOfMonths || enableOutsideDays !== prevEnableOutsideDays || initialVisibleMonth !== prevInitialVisibleMonth && !prevFocused && focused) {
	      var newMonthState = this.getStateForNewMonth(nextProps);
	      var currentMonth = newMonthState.currentMonth;
	      visibleDays = newMonthState.visibleDays;
	      this.setState({
	        currentMonth: currentMonth,
	        visibleDays: visibleDays
	      });
	    }

	    var didDateChange = date !== prevDate;
	    var didFocusChange = focused !== prevFocused;
	    var modifiers = {};

	    if (didDateChange) {
	      modifiers = this.deleteModifier(modifiers, prevDate, 'selected');
	      modifiers = this.addModifier(modifiers, date, 'selected');
	    }

	    if (didFocusChange || recomputePropModifiers) {
	      (0, _object["default"])(visibleDays).forEach(function (days) {
	        Object.keys(days).forEach(function (day) {
	          var momentObj = (0, _getPooledMoment["default"])(day);

	          if (_this2.isBlocked(momentObj)) {
	            modifiers = _this2.addModifier(modifiers, momentObj, 'blocked');
	          } else {
	            modifiers = _this2.deleteModifier(modifiers, momentObj, 'blocked');
	          }

	          if (didFocusChange || recomputeOutsideRange) {
	            if (isOutsideRange(momentObj)) {
	              modifiers = _this2.addModifier(modifiers, momentObj, 'blocked-out-of-range');
	            } else {
	              modifiers = _this2.deleteModifier(modifiers, momentObj, 'blocked-out-of-range');
	            }
	          }

	          if (didFocusChange || recomputeDayBlocked) {
	            if (isDayBlocked(momentObj)) {
	              modifiers = _this2.addModifier(modifiers, momentObj, 'blocked-calendar');
	            } else {
	              modifiers = _this2.deleteModifier(modifiers, momentObj, 'blocked-calendar');
	            }
	          }

	          if (didFocusChange || recomputeDayHighlighted) {
	            if (isDayHighlighted(momentObj)) {
	              modifiers = _this2.addModifier(modifiers, momentObj, 'highlighted-calendar');
	            } else {
	              modifiers = _this2.deleteModifier(modifiers, momentObj, 'highlighted-calendar');
	            }
	          }
	        });
	      });
	    }

	    var today = (0, _moment["default"])();

	    if (!(0, _isSameDay["default"])(this.today, today)) {
	      modifiers = this.deleteModifier(modifiers, this.today, 'today');
	      modifiers = this.addModifier(modifiers, today, 'today');
	      this.today = today;
	    }

	    if (Object.keys(modifiers).length > 0) {
	      this.setState({
	        visibleDays: _objectSpread({}, visibleDays, {}, modifiers)
	      });
	    }
	  };

	  _proto.componentWillUpdate = function componentWillUpdate() {
	    this.today = (0, _moment["default"])();
	  };

	  _proto.onDayClick = function onDayClick(day, e) {
	    if (e) e.preventDefault();
	    if (this.isBlocked(day)) return;
	    var _this$props2 = this.props,
	        onDateChange = _this$props2.onDateChange,
	        keepOpenOnDateSelect = _this$props2.keepOpenOnDateSelect,
	        onFocusChange = _this$props2.onFocusChange,
	        onClose = _this$props2.onClose;
	    onDateChange(day);

	    if (!keepOpenOnDateSelect) {
	      onFocusChange({
	        focused: false
	      });
	      onClose({
	        date: day
	      });
	    }
	  };

	  _proto.onDayMouseEnter = function onDayMouseEnter(day) {
	    if (this.isTouchDevice) return;
	    var _this$state = this.state,
	        hoverDate = _this$state.hoverDate,
	        visibleDays = _this$state.visibleDays;
	    var modifiers = this.deleteModifier({}, hoverDate, 'hovered');
	    modifiers = this.addModifier(modifiers, day, 'hovered');
	    this.setState({
	      hoverDate: day,
	      visibleDays: _objectSpread({}, visibleDays, {}, modifiers)
	    });
	  };

	  _proto.onDayMouseLeave = function onDayMouseLeave() {
	    var _this$state2 = this.state,
	        hoverDate = _this$state2.hoverDate,
	        visibleDays = _this$state2.visibleDays;
	    if (this.isTouchDevice || !hoverDate) return;
	    var modifiers = this.deleteModifier({}, hoverDate, 'hovered');
	    this.setState({
	      hoverDate: null,
	      visibleDays: _objectSpread({}, visibleDays, {}, modifiers)
	    });
	  };

	  _proto.onPrevMonthClick = function onPrevMonthClick() {
	    var _this$props3 = this.props,
	        onPrevMonthClick = _this$props3.onPrevMonthClick,
	        numberOfMonths = _this$props3.numberOfMonths,
	        enableOutsideDays = _this$props3.enableOutsideDays;
	    var _this$state3 = this.state,
	        currentMonth = _this$state3.currentMonth,
	        visibleDays = _this$state3.visibleDays;
	    var newVisibleDays = {};
	    Object.keys(visibleDays).sort().slice(0, numberOfMonths + 1).forEach(function (month) {
	      newVisibleDays[month] = visibleDays[month];
	    });
	    var prevMonth = currentMonth.clone().subtract(1, 'month');
	    var prevMonthVisibleDays = (0, _getVisibleDays["default"])(prevMonth, 1, enableOutsideDays);
	    this.setState({
	      currentMonth: prevMonth,
	      visibleDays: _objectSpread({}, newVisibleDays, {}, this.getModifiers(prevMonthVisibleDays))
	    }, function () {
	      onPrevMonthClick(prevMonth.clone());
	    });
	  };

	  _proto.onNextMonthClick = function onNextMonthClick() {
	    var _this$props4 = this.props,
	        onNextMonthClick = _this$props4.onNextMonthClick,
	        numberOfMonths = _this$props4.numberOfMonths,
	        enableOutsideDays = _this$props4.enableOutsideDays;
	    var _this$state4 = this.state,
	        currentMonth = _this$state4.currentMonth,
	        visibleDays = _this$state4.visibleDays;
	    var newVisibleDays = {};
	    Object.keys(visibleDays).sort().slice(1).forEach(function (month) {
	      newVisibleDays[month] = visibleDays[month];
	    });
	    var nextMonth = currentMonth.clone().add(numberOfMonths, 'month');
	    var nextMonthVisibleDays = (0, _getVisibleDays["default"])(nextMonth, 1, enableOutsideDays);
	    var newCurrentMonth = currentMonth.clone().add(1, 'month');
	    this.setState({
	      currentMonth: newCurrentMonth,
	      visibleDays: _objectSpread({}, newVisibleDays, {}, this.getModifiers(nextMonthVisibleDays))
	    }, function () {
	      onNextMonthClick(newCurrentMonth.clone());
	    });
	  };

	  _proto.onMonthChange = function onMonthChange(newMonth) {
	    var _this$props5 = this.props,
	        numberOfMonths = _this$props5.numberOfMonths,
	        enableOutsideDays = _this$props5.enableOutsideDays,
	        orientation = _this$props5.orientation;
	    var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;
	    var newVisibleDays = (0, _getVisibleDays["default"])(newMonth, numberOfMonths, enableOutsideDays, withoutTransitionMonths);
	    this.setState({
	      currentMonth: newMonth.clone(),
	      visibleDays: this.getModifiers(newVisibleDays)
	    });
	  };

	  _proto.onYearChange = function onYearChange(newMonth) {
	    var _this$props6 = this.props,
	        numberOfMonths = _this$props6.numberOfMonths,
	        enableOutsideDays = _this$props6.enableOutsideDays,
	        orientation = _this$props6.orientation;
	    var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;
	    var newVisibleDays = (0, _getVisibleDays["default"])(newMonth, numberOfMonths, enableOutsideDays, withoutTransitionMonths);
	    this.setState({
	      currentMonth: newMonth.clone(),
	      visibleDays: this.getModifiers(newVisibleDays)
	    });
	  };

	  _proto.onGetNextScrollableMonths = function onGetNextScrollableMonths() {
	    var _this$props7 = this.props,
	        numberOfMonths = _this$props7.numberOfMonths,
	        enableOutsideDays = _this$props7.enableOutsideDays;
	    var _this$state5 = this.state,
	        currentMonth = _this$state5.currentMonth,
	        visibleDays = _this$state5.visibleDays;
	    var numberOfVisibleMonths = Object.keys(visibleDays).length;
	    var nextMonth = currentMonth.clone().add(numberOfVisibleMonths, 'month');
	    var newVisibleDays = (0, _getVisibleDays["default"])(nextMonth, numberOfMonths, enableOutsideDays, true);
	    this.setState({
	      visibleDays: _objectSpread({}, visibleDays, {}, this.getModifiers(newVisibleDays))
	    });
	  };

	  _proto.onGetPrevScrollableMonths = function onGetPrevScrollableMonths() {
	    var _this$props8 = this.props,
	        numberOfMonths = _this$props8.numberOfMonths,
	        enableOutsideDays = _this$props8.enableOutsideDays;
	    var _this$state6 = this.state,
	        currentMonth = _this$state6.currentMonth,
	        visibleDays = _this$state6.visibleDays;
	    var firstPreviousMonth = currentMonth.clone().subtract(numberOfMonths, 'month');
	    var newVisibleDays = (0, _getVisibleDays["default"])(firstPreviousMonth, numberOfMonths, enableOutsideDays, true);
	    this.setState({
	      currentMonth: firstPreviousMonth.clone(),
	      visibleDays: _objectSpread({}, visibleDays, {}, this.getModifiers(newVisibleDays))
	    });
	  };

	  _proto.getFirstFocusableDay = function getFirstFocusableDay(newMonth) {
	    var _this3 = this;

	    var _this$props9 = this.props,
	        date = _this$props9.date,
	        numberOfMonths = _this$props9.numberOfMonths;
	    var focusedDate = newMonth.clone().startOf('month');

	    if (date) {
	      focusedDate = date.clone();
	    }

	    if (this.isBlocked(focusedDate)) {
	      var days = [];
	      var lastVisibleDay = newMonth.clone().add(numberOfMonths - 1, 'months').endOf('month');
	      var currentDay = focusedDate.clone();

	      while (!(0, _isAfterDay["default"])(currentDay, lastVisibleDay)) {
	        currentDay = currentDay.clone().add(1, 'day');
	        days.push(currentDay);
	      }

	      var viableDays = days.filter(function (day) {
	        return !_this3.isBlocked(day) && (0, _isAfterDay["default"])(day, focusedDate);
	      });

	      if (viableDays.length > 0) {
	        var _viableDays = (0, _slicedToArray2["default"])(viableDays, 1);

	        focusedDate = _viableDays[0];
	      }
	    }

	    return focusedDate;
	  };

	  _proto.getModifiers = function getModifiers(visibleDays) {
	    var _this4 = this;

	    var modifiers = {};
	    Object.keys(visibleDays).forEach(function (month) {
	      modifiers[month] = {};
	      visibleDays[month].forEach(function (day) {
	        modifiers[month][(0, _toISODateString["default"])(day)] = _this4.getModifiersForDay(day);
	      });
	    });
	    return modifiers;
	  };

	  _proto.getModifiersForDay = function getModifiersForDay(day) {
	    var _this5 = this;

	    return new Set(Object.keys(this.modifiers).filter(function (modifier) {
	      return _this5.modifiers[modifier](day);
	    }));
	  };

	  _proto.getStateForNewMonth = function getStateForNewMonth(nextProps) {
	    var _this6 = this;

	    var initialVisibleMonth = nextProps.initialVisibleMonth,
	        date = nextProps.date,
	        numberOfMonths = nextProps.numberOfMonths,
	        orientation = nextProps.orientation,
	        enableOutsideDays = nextProps.enableOutsideDays;
	    var initialVisibleMonthThunk = initialVisibleMonth || (date ? function () {
	      return date;
	    } : function () {
	      return _this6.today;
	    });
	    var currentMonth = initialVisibleMonthThunk();
	    var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;
	    var visibleDays = this.getModifiers((0, _getVisibleDays["default"])(currentMonth, numberOfMonths, enableOutsideDays, withoutTransitionMonths));
	    return {
	      currentMonth: currentMonth,
	      visibleDays: visibleDays
	    };
	  };

	  _proto.addModifier = function addModifier(updatedDays, day, modifier) {
	    return (0, _modifiers.addModifier)(updatedDays, day, modifier, this.props, this.state);
	  };

	  _proto.deleteModifier = function deleteModifier(updatedDays, day, modifier) {
	    return (0, _modifiers.deleteModifier)(updatedDays, day, modifier, this.props, this.state);
	  };

	  _proto.isBlocked = function isBlocked(day) {
	    var _this$props10 = this.props,
	        isDayBlocked = _this$props10.isDayBlocked,
	        isOutsideRange = _this$props10.isOutsideRange;
	    return isDayBlocked(day) || isOutsideRange(day);
	  };

	  _proto.isHovered = function isHovered(day) {
	    var _ref2 = this.state || {},
	        hoverDate = _ref2.hoverDate;

	    return (0, _isSameDay["default"])(day, hoverDate);
	  };

	  _proto.isSelected = function isSelected(day) {
	    var date = this.props.date;
	    return (0, _isSameDay["default"])(day, date);
	  };

	  _proto.isToday = function isToday(day) {
	    return (0, _isSameDay["default"])(day, this.today);
	  };

	  _proto.isFirstDayOfWeek = function isFirstDayOfWeek(day) {
	    var firstDayOfWeek = this.props.firstDayOfWeek;
	    return day.day() === (firstDayOfWeek || _moment["default"].localeData().firstDayOfWeek());
	  };

	  _proto.isLastDayOfWeek = function isLastDayOfWeek(day) {
	    var firstDayOfWeek = this.props.firstDayOfWeek;
	    return day.day() === ((firstDayOfWeek || _moment["default"].localeData().firstDayOfWeek()) + 6) % 7;
	  };

	  _proto.render = function render() {
	    var _this$props11 = this.props,
	        numberOfMonths = _this$props11.numberOfMonths,
	        orientation = _this$props11.orientation,
	        monthFormat = _this$props11.monthFormat,
	        renderMonthText = _this$props11.renderMonthText,
	        renderWeekHeaderElement = _this$props11.renderWeekHeaderElement,
	        dayPickerNavigationInlineStyles = _this$props11.dayPickerNavigationInlineStyles,
	        navPosition = _this$props11.navPosition,
	        navPrev = _this$props11.navPrev,
	        navNext = _this$props11.navNext,
	        renderNavPrevButton = _this$props11.renderNavPrevButton,
	        renderNavNextButton = _this$props11.renderNavNextButton,
	        noNavButtons = _this$props11.noNavButtons,
	        noNavPrevButton = _this$props11.noNavPrevButton,
	        noNavNextButton = _this$props11.noNavNextButton,
	        onOutsideClick = _this$props11.onOutsideClick,
	        onShiftTab = _this$props11.onShiftTab,
	        onTab = _this$props11.onTab,
	        withPortal = _this$props11.withPortal,
	        focused = _this$props11.focused,
	        enableOutsideDays = _this$props11.enableOutsideDays,
	        hideKeyboardShortcutsPanel = _this$props11.hideKeyboardShortcutsPanel,
	        daySize = _this$props11.daySize,
	        firstDayOfWeek = _this$props11.firstDayOfWeek,
	        renderCalendarDay = _this$props11.renderCalendarDay,
	        renderDayContents = _this$props11.renderDayContents,
	        renderCalendarInfo = _this$props11.renderCalendarInfo,
	        renderMonthElement = _this$props11.renderMonthElement,
	        calendarInfoPosition = _this$props11.calendarInfoPosition,
	        isFocused = _this$props11.isFocused,
	        isRTL = _this$props11.isRTL,
	        phrases = _this$props11.phrases,
	        dayAriaLabelFormat = _this$props11.dayAriaLabelFormat,
	        onBlur = _this$props11.onBlur,
	        showKeyboardShortcuts = _this$props11.showKeyboardShortcuts,
	        weekDayFormat = _this$props11.weekDayFormat,
	        verticalHeight = _this$props11.verticalHeight,
	        noBorder = _this$props11.noBorder,
	        transitionDuration = _this$props11.transitionDuration,
	        verticalBorderSpacing = _this$props11.verticalBorderSpacing,
	        horizontalMonthPadding = _this$props11.horizontalMonthPadding;
	    var _this$state7 = this.state,
	        currentMonth = _this$state7.currentMonth,
	        visibleDays = _this$state7.visibleDays;
	    return _react["default"].createElement(_DayPicker["default"], {
	      orientation: orientation,
	      enableOutsideDays: enableOutsideDays,
	      modifiers: visibleDays,
	      numberOfMonths: numberOfMonths,
	      onDayClick: this.onDayClick,
	      onDayMouseEnter: this.onDayMouseEnter,
	      onDayMouseLeave: this.onDayMouseLeave,
	      onPrevMonthClick: this.onPrevMonthClick,
	      onNextMonthClick: this.onNextMonthClick,
	      onMonthChange: this.onMonthChange,
	      onYearChange: this.onYearChange,
	      onGetNextScrollableMonths: this.onGetNextScrollableMonths,
	      onGetPrevScrollableMonths: this.onGetPrevScrollableMonths,
	      monthFormat: monthFormat,
	      withPortal: withPortal,
	      hidden: !focused,
	      hideKeyboardShortcutsPanel: hideKeyboardShortcutsPanel,
	      initialVisibleMonth: function initialVisibleMonth() {
	        return currentMonth;
	      },
	      firstDayOfWeek: firstDayOfWeek,
	      onOutsideClick: onOutsideClick,
	      dayPickerNavigationInlineStyles: dayPickerNavigationInlineStyles,
	      navPosition: navPosition,
	      navPrev: navPrev,
	      navNext: navNext,
	      renderNavPrevButton: renderNavPrevButton,
	      renderNavNextButton: renderNavNextButton,
	      noNavButtons: noNavButtons,
	      noNavNextButton: noNavNextButton,
	      noNavPrevButton: noNavPrevButton,
	      renderMonthText: renderMonthText,
	      renderWeekHeaderElement: renderWeekHeaderElement,
	      renderCalendarDay: renderCalendarDay,
	      renderDayContents: renderDayContents,
	      renderCalendarInfo: renderCalendarInfo,
	      renderMonthElement: renderMonthElement,
	      calendarInfoPosition: calendarInfoPosition,
	      isFocused: isFocused,
	      getFirstFocusableDay: this.getFirstFocusableDay,
	      onBlur: onBlur,
	      onTab: onTab,
	      onShiftTab: onShiftTab,
	      phrases: phrases,
	      daySize: daySize,
	      isRTL: isRTL,
	      showKeyboardShortcuts: showKeyboardShortcuts,
	      weekDayFormat: weekDayFormat,
	      dayAriaLabelFormat: dayAriaLabelFormat,
	      verticalHeight: verticalHeight,
	      noBorder: noBorder,
	      transitionDuration: transitionDuration,
	      verticalBorderSpacing: verticalBorderSpacing,
	      horizontalMonthPadding: horizontalMonthPadding
	    });
	  };

	  return DayPickerSingleDateController;
	}(_react["default"].PureComponent || _react["default"].Component);

	exports["default"] = DayPickerSingleDateController;
	DayPickerSingleDateController.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
	DayPickerSingleDateController.defaultProps = defaultProps; 
} (DayPickerSingleDateController$1));

var DayPickerSingleDateController = /*@__PURE__*/getDefaultExportFromCjs(DayPickerSingleDateController$1);

(function (exports) {

	var _interopRequireDefault = interopRequireDefaultExports;

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = exports.PureSingleDatePicker = void 0;

	var _enzymeShallowEqual = _interopRequireDefault(requireBuild$3());

	var _extends2 = _interopRequireDefault(require_extends());

	var _assertThisInitialized2 = _interopRequireDefault(requireAssertThisInitialized());

	var _inheritsLoose2 = _interopRequireDefault(requireInheritsLoose());

	var _defineProperty2 = _interopRequireDefault(requireDefineProperty());

	var _react = _interopRequireDefault(reactExports);

	var _moment = _interopRequireDefault(momentExports);

	var _reactWithStyles = requireWithStyles();

	var _reactPortal = requireLib$1();

	var _airbnbPropTypes = requireAirbnbPropTypes();

	var _consolidatedEvents = requireLib();

	var _isTouchDevice = _interopRequireDefault(requireBuild());

	var _reactOutsideClickHandler = _interopRequireDefault(requireReactOutsideClickHandler());

	var _SingleDatePickerShape = _interopRequireDefault(requireSingleDatePickerShape());

	var _defaultPhrases = requireDefaultPhrases();

	var _getResponsiveContainerStyles = _interopRequireDefault(requireGetResponsiveContainerStyles());

	var _getDetachedContainerStyles = _interopRequireDefault(requireGetDetachedContainerStyles());

	var _getInputHeight = _interopRequireDefault(requireGetInputHeight());

	var _isInclusivelyAfterDay = _interopRequireDefault(requireIsInclusivelyAfterDay());

	var _disableScroll2 = _interopRequireDefault(requireDisableScroll());

	var _noflip = _interopRequireDefault(requireNoflip());

	var _SingleDatePickerInputController = _interopRequireDefault(requireSingleDatePickerInputController());

	var _DayPickerSingleDateController = _interopRequireDefault(DayPickerSingleDateController$1);

	var _CloseButton = _interopRequireDefault(requireCloseButton());

	var _constants = requireConstants();

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	var propTypes = process.env.NODE_ENV !== "production" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, {}, _SingleDatePickerShape["default"])) : {};
	var defaultProps = {
	  // required props for a functional interactive SingleDatePicker
	  date: null,
	  focused: false,
	  // input related props
	  id: 'date',
	  placeholder: 'Date',
	  ariaLabel: undefined,
	  disabled: false,
	  required: false,
	  readOnly: false,
	  screenReaderInputMessage: '',
	  showClearDate: false,
	  showDefaultInputIcon: false,
	  inputIconPosition: _constants.ICON_BEFORE_POSITION,
	  customInputIcon: null,
	  customCloseIcon: null,
	  noBorder: false,
	  block: false,
	  small: false,
	  regular: false,
	  verticalSpacing: _constants.DEFAULT_VERTICAL_SPACING,
	  keepFocusOnInput: false,
	  // calendar presentation and interaction related props
	  orientation: _constants.HORIZONTAL_ORIENTATION,
	  anchorDirection: _constants.ANCHOR_LEFT,
	  openDirection: _constants.OPEN_DOWN,
	  horizontalMargin: 0,
	  withPortal: false,
	  withFullScreenPortal: false,
	  appendToBody: false,
	  disableScroll: false,
	  initialVisibleMonth: null,
	  firstDayOfWeek: null,
	  numberOfMonths: 2,
	  keepOpenOnDateSelect: false,
	  reopenPickerOnClearDate: false,
	  renderCalendarInfo: null,
	  calendarInfoPosition: _constants.INFO_POSITION_BOTTOM,
	  hideKeyboardShortcutsPanel: false,
	  daySize: _constants.DAY_SIZE,
	  isRTL: false,
	  verticalHeight: null,
	  transitionDuration: undefined,
	  horizontalMonthPadding: 13,
	  // navigation related props
	  dayPickerNavigationInlineStyles: null,
	  navPosition: _constants.NAV_POSITION_TOP,
	  navPrev: null,
	  navNext: null,
	  renderNavPrevButton: null,
	  renderNavNextButton: null,
	  onPrevMonthClick: function onPrevMonthClick() {},
	  onNextMonthClick: function onNextMonthClick() {},
	  onClose: function onClose() {},
	  // month presentation and interaction related props
	  renderMonthText: null,
	  renderWeekHeaderElement: null,
	  // day presentation and interaction related props
	  renderCalendarDay: undefined,
	  renderDayContents: null,
	  renderMonthElement: null,
	  enableOutsideDays: false,
	  isDayBlocked: function isDayBlocked() {
	    return false;
	  },
	  isOutsideRange: function isOutsideRange(day) {
	    return !(0, _isInclusivelyAfterDay["default"])(day, (0, _moment["default"])());
	  },
	  isDayHighlighted: function isDayHighlighted() {},
	  // internationalization props
	  displayFormat: function displayFormat() {
	    return _moment["default"].localeData().longDateFormat('L');
	  },
	  monthFormat: 'MMMM YYYY',
	  weekDayFormat: 'dd',
	  phrases: _defaultPhrases.SingleDatePickerPhrases,
	  dayAriaLabelFormat: undefined
	};

	var SingleDatePicker =
	/*#__PURE__*/
	function (_ref) {
	  (0, _inheritsLoose2["default"])(SingleDatePicker, _ref);
	  var _proto = SingleDatePicker.prototype;

	  _proto[!_react["default"].PureComponent && "shouldComponentUpdate"] = function (nextProps, nextState) {
	    return !(0, _enzymeShallowEqual["default"])(this.props, nextProps) || !(0, _enzymeShallowEqual["default"])(this.state, nextState);
	  };

	  function SingleDatePicker(props) {
	    var _this;

	    _this = _ref.call(this, props) || this;
	    _this.isTouchDevice = false;
	    _this.state = {
	      dayPickerContainerStyles: {},
	      isDayPickerFocused: false,
	      isInputFocused: false,
	      showKeyboardShortcuts: false
	    };
	    _this.onFocusOut = _this.onFocusOut.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.onOutsideClick = _this.onOutsideClick.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.onInputFocus = _this.onInputFocus.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.onDayPickerFocus = _this.onDayPickerFocus.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.onDayPickerBlur = _this.onDayPickerBlur.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.showKeyboardShortcutsPanel = _this.showKeyboardShortcutsPanel.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.responsivizePickerPosition = _this.responsivizePickerPosition.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.disableScroll = _this.disableScroll.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.setDayPickerContainerRef = _this.setDayPickerContainerRef.bind((0, _assertThisInitialized2["default"])(_this));
	    _this.setContainerRef = _this.setContainerRef.bind((0, _assertThisInitialized2["default"])(_this));
	    return _this;
	  }
	  /* istanbul ignore next */


	  _proto.componentDidMount = function componentDidMount() {
	    this.removeResizeEventListener = (0, _consolidatedEvents.addEventListener)(window, 'resize', this.responsivizePickerPosition, {
	      passive: true
	    });
	    this.responsivizePickerPosition();
	    this.disableScroll();
	    var focused = this.props.focused;

	    if (focused) {
	      this.setState({
	        isInputFocused: true
	      });
	    }

	    this.isTouchDevice = (0, _isTouchDevice["default"])();
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var focused = this.props.focused;

	    if (!prevProps.focused && focused) {
	      this.responsivizePickerPosition();
	      this.disableScroll();
	    } else if (prevProps.focused && !focused) {
	      if (this.enableScroll) this.enableScroll();
	    }
	  }
	  /* istanbul ignore next */
	  ;

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    if (this.removeResizeEventListener) this.removeResizeEventListener();
	    if (this.removeFocusOutEventListener) this.removeFocusOutEventListener();
	    if (this.enableScroll) this.enableScroll();
	  };

	  _proto.onOutsideClick = function onOutsideClick(event) {
	    var _this$props = this.props,
	        focused = _this$props.focused,
	        onFocusChange = _this$props.onFocusChange,
	        onClose = _this$props.onClose,
	        date = _this$props.date,
	        appendToBody = _this$props.appendToBody;
	    if (!focused) return;
	    if (appendToBody && this.dayPickerContainer.contains(event.target)) return;
	    this.setState({
	      isInputFocused: false,
	      isDayPickerFocused: false,
	      showKeyboardShortcuts: false
	    });
	    onFocusChange({
	      focused: false
	    });
	    onClose({
	      date: date
	    });
	  };

	  _proto.onInputFocus = function onInputFocus(_ref2) {
	    var focused = _ref2.focused;
	    var _this$props2 = this.props,
	        onFocusChange = _this$props2.onFocusChange,
	        readOnly = _this$props2.readOnly,
	        withPortal = _this$props2.withPortal,
	        withFullScreenPortal = _this$props2.withFullScreenPortal,
	        keepFocusOnInput = _this$props2.keepFocusOnInput;

	    if (focused) {
	      var withAnyPortal = withPortal || withFullScreenPortal;
	      var moveFocusToDayPicker = withAnyPortal || readOnly && !keepFocusOnInput || this.isTouchDevice && !keepFocusOnInput;

	      if (moveFocusToDayPicker) {
	        this.onDayPickerFocus();
	      } else {
	        this.onDayPickerBlur();
	      }
	    }

	    onFocusChange({
	      focused: focused
	    });
	  };

	  _proto.onDayPickerFocus = function onDayPickerFocus() {
	    this.setState({
	      isInputFocused: false,
	      isDayPickerFocused: true,
	      showKeyboardShortcuts: false
	    });
	  };

	  _proto.onDayPickerBlur = function onDayPickerBlur() {
	    this.setState({
	      isInputFocused: true,
	      isDayPickerFocused: false,
	      showKeyboardShortcuts: false
	    });
	  };

	  _proto.onFocusOut = function onFocusOut(e) {
	    var onFocusChange = this.props.onFocusChange; // In cases where **relatedTarget** is not null, it points to the right
	    // element here. However, in cases where it is null (such as clicking on a
	    // specific day) or it is **document.body** (IE11), the appropriate value is **event.target**.
	    //
	    // We handle both situations here by using the ` || ` operator to fallback
	    // to *event.target** when **relatedTarget** is not provided.

	    var relatedTarget = e.relatedTarget === document.body ? e.target : e.relatedTarget || e.target;
	    if (this.dayPickerContainer.contains(relatedTarget)) return;
	    onFocusChange({
	      focused: false
	    });
	  };

	  _proto.setDayPickerContainerRef = function setDayPickerContainerRef(ref) {
	    if (ref === this.dayPickerContainer) return;
	    this.removeEventListeners();
	    this.dayPickerContainer = ref;
	    if (!ref) return;
	    this.addEventListeners();
	  };

	  _proto.setContainerRef = function setContainerRef(ref) {
	    this.container = ref;
	  };

	  _proto.addEventListeners = function addEventListeners() {
	    // We manually set event because React has not implemented onFocusIn/onFocusOut.
	    // Keep an eye on https://github.com/facebook/react/issues/6410 for updates
	    // We use "blur w/ useCapture param" vs "onfocusout" for FF browser support
	    this.removeFocusOutEventListener = (0, _consolidatedEvents.addEventListener)(this.dayPickerContainer, 'focusout', this.onFocusOut);
	  };

	  _proto.removeEventListeners = function removeEventListeners() {
	    if (this.removeFocusOutEventListener) this.removeFocusOutEventListener();
	  };

	  _proto.disableScroll = function disableScroll() {
	    var _this$props3 = this.props,
	        appendToBody = _this$props3.appendToBody,
	        propDisableScroll = _this$props3.disableScroll,
	        focused = _this$props3.focused;
	    if (!appendToBody && !propDisableScroll) return;
	    if (!focused) return; // Disable scroll for every ancestor of this <SingleDatePicker> up to the
	    // document level. This ensures the input and the picker never move. Other
	    // sibling elements or the picker itself can scroll.

	    this.enableScroll = (0, _disableScroll2["default"])(this.container);
	  }
	  /* istanbul ignore next */
	  ;

	  _proto.responsivizePickerPosition = function responsivizePickerPosition() {
	    // It's possible the portal props have been changed in response to window resizes
	    // So let's ensure we reset this back to the base state each time
	    this.setState({
	      dayPickerContainerStyles: {}
	    });
	    var _this$props4 = this.props,
	        openDirection = _this$props4.openDirection,
	        anchorDirection = _this$props4.anchorDirection,
	        horizontalMargin = _this$props4.horizontalMargin,
	        withPortal = _this$props4.withPortal,
	        withFullScreenPortal = _this$props4.withFullScreenPortal,
	        appendToBody = _this$props4.appendToBody,
	        focused = _this$props4.focused;
	    var dayPickerContainerStyles = this.state.dayPickerContainerStyles;

	    if (!focused) {
	      return;
	    }

	    var isAnchoredLeft = anchorDirection === _constants.ANCHOR_LEFT;

	    if (!withPortal && !withFullScreenPortal) {
	      var containerRect = this.dayPickerContainer.getBoundingClientRect();
	      var currentOffset = dayPickerContainerStyles[anchorDirection] || 0;
	      var containerEdge = isAnchoredLeft ? containerRect[_constants.ANCHOR_RIGHT] : containerRect[_constants.ANCHOR_LEFT];
	      this.setState({
	        dayPickerContainerStyles: _objectSpread({}, (0, _getResponsiveContainerStyles["default"])(anchorDirection, currentOffset, containerEdge, horizontalMargin), {}, appendToBody && (0, _getDetachedContainerStyles["default"])(openDirection, anchorDirection, this.container))
	      });
	    }
	  };

	  _proto.showKeyboardShortcutsPanel = function showKeyboardShortcutsPanel() {
	    this.setState({
	      isInputFocused: false,
	      isDayPickerFocused: true,
	      showKeyboardShortcuts: true
	    });
	  };

	  _proto.maybeRenderDayPickerWithPortal = function maybeRenderDayPickerWithPortal() {
	    var _this$props5 = this.props,
	        focused = _this$props5.focused,
	        withPortal = _this$props5.withPortal,
	        withFullScreenPortal = _this$props5.withFullScreenPortal,
	        appendToBody = _this$props5.appendToBody;

	    if (!focused) {
	      return null;
	    }

	    if (withPortal || withFullScreenPortal || appendToBody) {
	      return _react["default"].createElement(_reactPortal.Portal, null, this.renderDayPicker());
	    }

	    return this.renderDayPicker();
	  };

	  _proto.renderDayPicker = function renderDayPicker() {
	    var _this$props6 = this.props,
	        anchorDirection = _this$props6.anchorDirection,
	        openDirection = _this$props6.openDirection,
	        onDateChange = _this$props6.onDateChange,
	        date = _this$props6.date,
	        onFocusChange = _this$props6.onFocusChange,
	        focused = _this$props6.focused,
	        enableOutsideDays = _this$props6.enableOutsideDays,
	        numberOfMonths = _this$props6.numberOfMonths,
	        orientation = _this$props6.orientation,
	        monthFormat = _this$props6.monthFormat,
	        dayPickerNavigationInlineStyles = _this$props6.dayPickerNavigationInlineStyles,
	        navPosition = _this$props6.navPosition,
	        navPrev = _this$props6.navPrev,
	        navNext = _this$props6.navNext,
	        renderNavPrevButton = _this$props6.renderNavPrevButton,
	        renderNavNextButton = _this$props6.renderNavNextButton,
	        onPrevMonthClick = _this$props6.onPrevMonthClick,
	        onNextMonthClick = _this$props6.onNextMonthClick,
	        onClose = _this$props6.onClose,
	        withPortal = _this$props6.withPortal,
	        withFullScreenPortal = _this$props6.withFullScreenPortal,
	        keepOpenOnDateSelect = _this$props6.keepOpenOnDateSelect,
	        initialVisibleMonth = _this$props6.initialVisibleMonth,
	        renderMonthText = _this$props6.renderMonthText,
	        renderWeekHeaderElement = _this$props6.renderWeekHeaderElement,
	        renderCalendarDay = _this$props6.renderCalendarDay,
	        renderDayContents = _this$props6.renderDayContents,
	        renderCalendarInfo = _this$props6.renderCalendarInfo,
	        renderMonthElement = _this$props6.renderMonthElement,
	        calendarInfoPosition = _this$props6.calendarInfoPosition,
	        hideKeyboardShortcutsPanel = _this$props6.hideKeyboardShortcutsPanel,
	        firstDayOfWeek = _this$props6.firstDayOfWeek,
	        customCloseIcon = _this$props6.customCloseIcon,
	        phrases = _this$props6.phrases,
	        dayAriaLabelFormat = _this$props6.dayAriaLabelFormat,
	        daySize = _this$props6.daySize,
	        isRTL = _this$props6.isRTL,
	        isOutsideRange = _this$props6.isOutsideRange,
	        isDayBlocked = _this$props6.isDayBlocked,
	        isDayHighlighted = _this$props6.isDayHighlighted,
	        weekDayFormat = _this$props6.weekDayFormat,
	        styles = _this$props6.styles,
	        verticalHeight = _this$props6.verticalHeight,
	        transitionDuration = _this$props6.transitionDuration,
	        verticalSpacing = _this$props6.verticalSpacing,
	        horizontalMonthPadding = _this$props6.horizontalMonthPadding,
	        small = _this$props6.small,
	        reactDates = _this$props6.theme.reactDates;
	    var _this$state = this.state,
	        dayPickerContainerStyles = _this$state.dayPickerContainerStyles,
	        isDayPickerFocused = _this$state.isDayPickerFocused,
	        showKeyboardShortcuts = _this$state.showKeyboardShortcuts;
	    var onOutsideClick = !withFullScreenPortal && withPortal ? this.onOutsideClick : undefined;

	    var closeIcon = customCloseIcon || _react["default"].createElement(_CloseButton["default"], null);

	    var inputHeight = (0, _getInputHeight["default"])(reactDates, small);
	    var withAnyPortal = withPortal || withFullScreenPortal;
	    /* eslint-disable jsx-a11y/no-static-element-interactions */

	    /* eslint-disable jsx-a11y/click-events-have-key-events */

	    return _react["default"].createElement("div", (0, _extends2["default"])({
	      ref: this.setDayPickerContainerRef
	    }, (0, _reactWithStyles.css)(styles.SingleDatePicker_picker, anchorDirection === _constants.ANCHOR_LEFT && styles.SingleDatePicker_picker__directionLeft, anchorDirection === _constants.ANCHOR_RIGHT && styles.SingleDatePicker_picker__directionRight, openDirection === _constants.OPEN_DOWN && styles.SingleDatePicker_picker__openDown, openDirection === _constants.OPEN_UP && styles.SingleDatePicker_picker__openUp, !withAnyPortal && openDirection === _constants.OPEN_DOWN && {
	      top: inputHeight + verticalSpacing
	    }, !withAnyPortal && openDirection === _constants.OPEN_UP && {
	      bottom: inputHeight + verticalSpacing
	    }, orientation === _constants.HORIZONTAL_ORIENTATION && styles.SingleDatePicker_picker__horizontal, orientation === _constants.VERTICAL_ORIENTATION && styles.SingleDatePicker_picker__vertical, withAnyPortal && styles.SingleDatePicker_picker__portal, withFullScreenPortal && styles.SingleDatePicker_picker__fullScreenPortal, isRTL && styles.SingleDatePicker_picker__rtl, dayPickerContainerStyles), {
	      onClick: onOutsideClick
	    }), _react["default"].createElement(_DayPickerSingleDateController["default"], {
	      date: date,
	      onDateChange: onDateChange,
	      onFocusChange: onFocusChange,
	      orientation: orientation,
	      enableOutsideDays: enableOutsideDays,
	      numberOfMonths: numberOfMonths,
	      monthFormat: monthFormat,
	      withPortal: withAnyPortal,
	      focused: focused,
	      keepOpenOnDateSelect: keepOpenOnDateSelect,
	      hideKeyboardShortcutsPanel: hideKeyboardShortcutsPanel,
	      initialVisibleMonth: initialVisibleMonth,
	      dayPickerNavigationInlineStyles: dayPickerNavigationInlineStyles,
	      navPosition: navPosition,
	      navPrev: navPrev,
	      navNext: navNext,
	      renderNavPrevButton: renderNavPrevButton,
	      renderNavNextButton: renderNavNextButton,
	      onPrevMonthClick: onPrevMonthClick,
	      onNextMonthClick: onNextMonthClick,
	      onClose: onClose,
	      renderMonthText: renderMonthText,
	      renderWeekHeaderElement: renderWeekHeaderElement,
	      renderCalendarDay: renderCalendarDay,
	      renderDayContents: renderDayContents,
	      renderCalendarInfo: renderCalendarInfo,
	      renderMonthElement: renderMonthElement,
	      calendarInfoPosition: calendarInfoPosition,
	      isFocused: isDayPickerFocused,
	      showKeyboardShortcuts: showKeyboardShortcuts,
	      onBlur: this.onDayPickerBlur,
	      phrases: phrases,
	      dayAriaLabelFormat: dayAriaLabelFormat,
	      daySize: daySize,
	      isRTL: isRTL,
	      isOutsideRange: isOutsideRange,
	      isDayBlocked: isDayBlocked,
	      isDayHighlighted: isDayHighlighted,
	      firstDayOfWeek: firstDayOfWeek,
	      weekDayFormat: weekDayFormat,
	      verticalHeight: verticalHeight,
	      transitionDuration: transitionDuration,
	      horizontalMonthPadding: horizontalMonthPadding
	    }), withFullScreenPortal && _react["default"].createElement("button", (0, _extends2["default"])({}, (0, _reactWithStyles.css)(styles.SingleDatePicker_closeButton), {
	      "aria-label": phrases.closeDatePicker,
	      type: "button",
	      onClick: this.onOutsideClick
	    }), _react["default"].createElement("div", (0, _reactWithStyles.css)(styles.SingleDatePicker_closeButton_svg), closeIcon)));
	    /* eslint-enable jsx-a11y/no-static-element-interactions */

	    /* eslint-enable jsx-a11y/click-events-have-key-events */
	  };

	  _proto.render = function render() {
	    var _this$props7 = this.props,
	        id = _this$props7.id,
	        placeholder = _this$props7.placeholder,
	        ariaLabel = _this$props7.ariaLabel,
	        disabled = _this$props7.disabled,
	        focused = _this$props7.focused,
	        required = _this$props7.required,
	        readOnly = _this$props7.readOnly,
	        openDirection = _this$props7.openDirection,
	        showClearDate = _this$props7.showClearDate,
	        showDefaultInputIcon = _this$props7.showDefaultInputIcon,
	        inputIconPosition = _this$props7.inputIconPosition,
	        customCloseIcon = _this$props7.customCloseIcon,
	        customInputIcon = _this$props7.customInputIcon,
	        date = _this$props7.date,
	        onDateChange = _this$props7.onDateChange,
	        displayFormat = _this$props7.displayFormat,
	        phrases = _this$props7.phrases,
	        withPortal = _this$props7.withPortal,
	        withFullScreenPortal = _this$props7.withFullScreenPortal,
	        screenReaderInputMessage = _this$props7.screenReaderInputMessage,
	        isRTL = _this$props7.isRTL,
	        noBorder = _this$props7.noBorder,
	        block = _this$props7.block,
	        small = _this$props7.small,
	        regular = _this$props7.regular,
	        verticalSpacing = _this$props7.verticalSpacing,
	        reopenPickerOnClearDate = _this$props7.reopenPickerOnClearDate,
	        keepOpenOnDateSelect = _this$props7.keepOpenOnDateSelect,
	        styles = _this$props7.styles,
	        isOutsideRange = _this$props7.isOutsideRange;
	    var isInputFocused = this.state.isInputFocused;
	    var enableOutsideClick = !withPortal && !withFullScreenPortal;
	    var hideFang = verticalSpacing < _constants.FANG_HEIGHT_PX;

	    var input = _react["default"].createElement(_SingleDatePickerInputController["default"], {
	      id: id,
	      placeholder: placeholder,
	      ariaLabel: ariaLabel,
	      focused: focused,
	      isFocused: isInputFocused,
	      disabled: disabled,
	      required: required,
	      readOnly: readOnly,
	      openDirection: openDirection,
	      showCaret: !withPortal && !withFullScreenPortal && !hideFang,
	      showClearDate: showClearDate,
	      showDefaultInputIcon: showDefaultInputIcon,
	      inputIconPosition: inputIconPosition,
	      isOutsideRange: isOutsideRange,
	      customCloseIcon: customCloseIcon,
	      customInputIcon: customInputIcon,
	      date: date,
	      onDateChange: onDateChange,
	      displayFormat: displayFormat,
	      onFocusChange: this.onInputFocus,
	      onKeyDownArrowDown: this.onDayPickerFocus,
	      onKeyDownQuestionMark: this.showKeyboardShortcutsPanel,
	      screenReaderMessage: screenReaderInputMessage,
	      phrases: phrases,
	      isRTL: isRTL,
	      noBorder: noBorder,
	      block: block,
	      small: small,
	      regular: regular,
	      verticalSpacing: verticalSpacing,
	      reopenPickerOnClearDate: reopenPickerOnClearDate,
	      keepOpenOnDateSelect: keepOpenOnDateSelect
	    }, this.maybeRenderDayPickerWithPortal());

	    return _react["default"].createElement("div", (0, _extends2["default"])({
	      ref: this.setContainerRef
	    }, (0, _reactWithStyles.css)(styles.SingleDatePicker, block && styles.SingleDatePicker__block)), enableOutsideClick && _react["default"].createElement(_reactOutsideClickHandler["default"], {
	      onOutsideClick: this.onOutsideClick
	    }, input), enableOutsideClick || input);
	  };

	  return SingleDatePicker;
	}(_react["default"].PureComponent || _react["default"].Component);

	exports.PureSingleDatePicker = SingleDatePicker;
	SingleDatePicker.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
	SingleDatePicker.defaultProps = defaultProps;

	var _default = (0, _reactWithStyles.withStyles)(function (_ref3) {
	  var _ref3$reactDates = _ref3.reactDates,
	      color = _ref3$reactDates.color,
	      zIndex = _ref3$reactDates.zIndex;
	  return {
	    SingleDatePicker: {
	      position: 'relative',
	      display: 'inline-block'
	    },
	    SingleDatePicker__block: {
	      display: 'block'
	    },
	    SingleDatePicker_picker: {
	      zIndex: zIndex + 1,
	      backgroundColor: color.background,
	      position: 'absolute'
	    },
	    SingleDatePicker_picker__rtl: {
	      direction: (0, _noflip["default"])('rtl')
	    },
	    SingleDatePicker_picker__directionLeft: {
	      left: (0, _noflip["default"])(0)
	    },
	    SingleDatePicker_picker__directionRight: {
	      right: (0, _noflip["default"])(0)
	    },
	    SingleDatePicker_picker__portal: {
	      backgroundColor: 'rgba(0, 0, 0, 0.3)',
	      position: 'fixed',
	      top: 0,
	      left: (0, _noflip["default"])(0),
	      height: '100%',
	      width: '100%'
	    },
	    SingleDatePicker_picker__fullScreenPortal: {
	      backgroundColor: color.background
	    },
	    SingleDatePicker_closeButton: {
	      background: 'none',
	      border: 0,
	      color: 'inherit',
	      font: 'inherit',
	      lineHeight: 'normal',
	      overflow: 'visible',
	      cursor: 'pointer',
	      position: 'absolute',
	      top: 0,
	      right: (0, _noflip["default"])(0),
	      padding: 15,
	      zIndex: zIndex + 2,
	      ':hover': {
	        color: "darken(".concat(color.core.grayLighter, ", 10%)"),
	        textDecoration: 'none'
	      },
	      ':focus': {
	        color: "darken(".concat(color.core.grayLighter, ", 10%)"),
	        textDecoration: 'none'
	      }
	    },
	    SingleDatePicker_closeButton_svg: {
	      height: 15,
	      width: 15,
	      fill: color.core.grayLighter
	    }
	  };
	}, {
	  pureComponent: typeof _react["default"].PureComponent !== 'undefined'
	})(SingleDatePicker);

	exports["default"] = _default; 
} (SingleDatePicker$1));

var SingleDatePicker = /*@__PURE__*/getDefaultExportFromCjs(SingleDatePicker$1);

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".PresetDateRangePicker_panel{padding:0 22px 11px}.PresetDateRangePicker_button{background:0 0;border:2px solid #00a699;-moz-box-sizing:border-box;box-sizing:border-box;color:#00a699;cursor:pointer;font:inherit;font-weight:700;height:100%;line-height:normal;margin-right:8px;overflow:visible;padding:4px 12px;position:relative;text-align:center}.PresetDateRangePicker_button:active{outline:0}.PresetDateRangePicker_button__selected{background:#00a699;color:#fff}.SingleDatePickerInput{background-color:#fff;display:inline-block}.SingleDatePickerInput__withBorder{border:1px solid #dbdbdb;border-radius:2px}.SingleDatePickerInput__rtl{direction:rtl}.SingleDatePickerInput__disabled{background-color:#f2f2f2}.SingleDatePickerInput__block{display:block}.SingleDatePickerInput__showClearDate{padding-right:30px}.SingleDatePickerInput_clearDate{background:0 0;border:0;color:inherit;cursor:pointer;font:inherit;line-height:normal;margin:0 10px 0 5px;overflow:visible;padding:10px;position:absolute;right:0;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%)}.SingleDatePickerInput_clearDate__default:focus,.SingleDatePickerInput_clearDate__default:hover{background:#dbdbdb;border-radius:50%}.SingleDatePickerInput_clearDate__small{padding:6px}.SingleDatePickerInput_clearDate__hide{visibility:hidden}.SingleDatePickerInput_clearDate_svg{fill:#82888a;height:12px;vertical-align:middle;width:15px}.SingleDatePickerInput_clearDate_svg__small{height:9px}.SingleDatePickerInput_calendarIcon{background:0 0;border:0;color:inherit;cursor:pointer;display:inline-block;font:inherit;line-height:normal;margin:0 5px 0 10px;overflow:visible;padding:10px;vertical-align:middle}.SingleDatePickerInput_calendarIcon_svg{fill:#82888a;height:15px;vertical-align:middle;width:14px}.SingleDatePicker{display:inline-block;position:relative}.SingleDatePicker__block{display:block}.SingleDatePicker_picker{background-color:#fff;position:absolute;z-index:1}.SingleDatePicker_picker__rtl{direction:rtl}.SingleDatePicker_picker__directionLeft{left:0}.SingleDatePicker_picker__directionRight{right:0}.SingleDatePicker_picker__portal{background-color:#0000004d;height:100%;left:0;position:fixed;top:0;width:100%}.SingleDatePicker_picker__fullScreenPortal{background-color:#fff}.SingleDatePicker_closeButton{background:0 0;border:0;color:inherit;cursor:pointer;font:inherit;line-height:normal;overflow:visible;padding:15px;position:absolute;right:0;top:0;z-index:2}.SingleDatePicker_closeButton:focus,.SingleDatePicker_closeButton:hover{color:darken(#cacccd,10%);text-decoration:none}.SingleDatePicker_closeButton_svg{fill:#cacccd;height:15px;width:15px}.DayPickerKeyboardShortcuts_buttonReset{background:0 0;border:0;border-radius:0;color:inherit;cursor:pointer;font:inherit;font-size:14px;line-height:normal;overflow:visible;padding:0}.DayPickerKeyboardShortcuts_buttonReset:active{outline:0}.DayPickerKeyboardShortcuts_show{height:26px;position:absolute;width:33px;z-index:2}.DayPickerKeyboardShortcuts_show:before{content:\"\";display:block;position:absolute}.DayPickerKeyboardShortcuts_show__bottomRight{bottom:0;right:0}.DayPickerKeyboardShortcuts_show__bottomRight:before{border-right:33px solid #00a699;border-top:26px solid #0000;bottom:0;right:0}.DayPickerKeyboardShortcuts_show__bottomRight:hover:before{border-right:33px solid #008489}.DayPickerKeyboardShortcuts_show__topRight{right:0;top:0}.DayPickerKeyboardShortcuts_show__topRight:before{border-bottom:26px solid #0000;border-right:33px solid #00a699;right:0;top:0}.DayPickerKeyboardShortcuts_show__topRight:hover:before{border-right:33px solid #008489}.DayPickerKeyboardShortcuts_show__topLeft{left:0;top:0}.DayPickerKeyboardShortcuts_show__topLeft:before{border-bottom:26px solid #0000;border-left:33px solid #00a699;left:0;top:0}.DayPickerKeyboardShortcuts_show__topLeft:hover:before{border-left:33px solid #008489}.DayPickerKeyboardShortcuts_showSpan{color:#fff;position:absolute}.DayPickerKeyboardShortcuts_showSpan__bottomRight{bottom:0;right:5px}.DayPickerKeyboardShortcuts_showSpan__topRight{right:5px;top:1px}.DayPickerKeyboardShortcuts_showSpan__topLeft{left:5px;top:1px}.DayPickerKeyboardShortcuts_panel{background:#fff;border:1px solid #dbdbdb;border-radius:2px;bottom:0;left:0;margin:33px;overflow:auto;padding:22px;position:absolute;right:0;text-align:left;top:0;z-index:2}.DayPickerKeyboardShortcuts_title{font-size:16px;font-weight:700;margin:0}.DayPickerKeyboardShortcuts_list{font-size:14px;list-style:none;padding:0}.DayPickerKeyboardShortcuts_close{position:absolute;right:22px;top:22px;z-index:2}.DayPickerKeyboardShortcuts_close:active{outline:0}.DayPickerKeyboardShortcuts_closeSvg{fill:#cacccd;height:15px;width:15px}.DayPickerKeyboardShortcuts_closeSvg:focus,.DayPickerKeyboardShortcuts_closeSvg:hover{fill:#82888a}.CalendarDay{-moz-box-sizing:border-box;box-sizing:border-box;cursor:pointer;font-size:14px;text-align:center}.CalendarDay:active{outline:0}.CalendarDay__defaultCursor{cursor:default}.CalendarDay__default{background:#fff;border:1px solid #e4e7e7;color:#484848}.CalendarDay__default:hover{background:#e4e7e7;border:1px solid #e4e7e7;color:inherit}.CalendarDay__hovered_offset{background:#f4f5f5;border:1px double #e4e7e7;color:inherit}.CalendarDay__outside{background:#fff;border:0;color:#484848}.CalendarDay__outside:hover{border:0}.CalendarDay__blocked_minimum_nights{background:#fff;border:1px solid #eceeee;color:#cacccd}.CalendarDay__blocked_minimum_nights:active,.CalendarDay__blocked_minimum_nights:hover{background:#fff;color:#cacccd}.CalendarDay__highlighted_calendar{background:#ffe8bc;color:#484848}.CalendarDay__highlighted_calendar:active,.CalendarDay__highlighted_calendar:hover{background:#ffce71;color:#484848}.CalendarDay__selected_span{background:#66e2da;border:1px double #33dacd;color:#fff}.CalendarDay__selected_span:active,.CalendarDay__selected_span:hover{background:#33dacd;border:1px double #33dacd;color:#fff}.CalendarDay__selected,.CalendarDay__selected:active,.CalendarDay__selected:hover{background:#00a699;border:1px double #00a699;color:#fff}.CalendarDay__hovered_span,.CalendarDay__hovered_span:hover{background:#b2f1ec;border:1px double #80e8e0;color:#007a87}.CalendarDay__hovered_span:active{background:#80e8e0;border:1px double #80e8e0;color:#007a87}.CalendarDay__blocked_calendar,.CalendarDay__blocked_calendar:active,.CalendarDay__blocked_calendar:hover{background:#cacccd;border:1px solid #cacccd;color:#82888a}.CalendarDay__blocked_out_of_range,.CalendarDay__blocked_out_of_range:active,.CalendarDay__blocked_out_of_range:hover{background:#fff;border:1px solid #e4e7e7;color:#cacccd}.CalendarDay__hovered_start_first_possible_end{background:#eceeee;border:1px double #eceeee}.CalendarDay__hovered_start_blocked_min_nights{background:#eceeee;border:1px double #e4e7e7}.CalendarMonth{background:#fff;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;vertical-align:top}.CalendarMonth_table{border-collapse:collapse;border-spacing:0}.CalendarMonth_verticalSpacing{border-collapse:initial}.CalendarMonth_caption{caption-side:top;color:#484848;font-size:18px;padding-bottom:37px;padding-top:22px;text-align:center}.CalendarMonth_caption__verticalScrollable{padding-bottom:7px;padding-top:12px}.CalendarMonthGrid{background:#fff;text-align:left;z-index:0}.CalendarMonthGrid__animating{z-index:1}.CalendarMonthGrid__horizontal{left:9px;position:absolute}.CalendarMonthGrid__vertical,.CalendarMonthGrid__vertical_scrollable{margin:0 auto}.CalendarMonthGrid_month__horizontal{display:inline-block;min-height:100%;vertical-align:top}.CalendarMonthGrid_month__hideForAnimation{opacity:0;pointer-events:none;position:absolute;z-index:-1}.CalendarMonthGrid_month__hidden{visibility:hidden}.DayPickerNavigation{position:relative;z-index:2}.DayPickerNavigation__horizontal{height:0}.DayPickerNavigation__verticalScrollable_prevNav{z-index:1}.DayPickerNavigation__verticalDefault{bottom:0;height:52px;left:0;position:absolute;width:100%}.DayPickerNavigation__verticalScrollableDefault{position:relative}.DayPickerNavigation__bottom{height:auto}.DayPickerNavigation__bottomDefault{-webkit-box-pack:justify;-ms-flex-pack:justify;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-justify-content:space-between;justify-content:space-between}.DayPickerNavigation_button{border:0;cursor:pointer;margin:0;padding:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.DayPickerNavigation_button__default{background-color:#fff;border:1px solid #e4e7e7;color:#757575}.DayPickerNavigation_button__default:focus,.DayPickerNavigation_button__default:hover{border:1px solid #c4c4c4}.DayPickerNavigation_button__default:active{background:#f2f2f2}.DayPickerNavigation_button__disabled{border:1px solid #f2f2f2;cursor:default}.DayPickerNavigation_button__disabled:focus,.DayPickerNavigation_button__disabled:hover{border:1px solid #f2f2f2}.DayPickerNavigation_button__disabled:active{background:0 0}.DayPickerNavigation_button__horizontalDefault{border-radius:3px;line-height:.78;padding:6px 9px;position:absolute;top:18px}.DayPickerNavigation_bottomButton__horizontalDefault{margin:-10px 22px 30px;position:static}.DayPickerNavigation_leftButton__horizontalDefault{left:22px}.DayPickerNavigation_rightButton__horizontalDefault{right:22px}.DayPickerNavigation_button__verticalDefault{background:#fff;box-shadow:0 0 5px 2px #0000001a;display:inline-block;height:100%;padding:5px;position:relative;text-align:center;width:50%}.DayPickerNavigation_nextButton__verticalDefault{border-left:0}.DayPickerNavigation_nextButton__verticalScrollableDefault,.DayPickerNavigation_prevButton__verticalScrollableDefault{width:100%}.DayPickerNavigation_svg__horizontal{fill:#82888a;display:block;height:19px;width:19px}.DayPickerNavigation_svg__vertical{fill:#484848;height:42px;width:42px}.DayPickerNavigation_svg__disabled{fill:#f2f2f2}.DayPicker{position:relative;text-align:left}.DayPicker,.DayPicker__horizontal{background:#fff}.DayPicker__verticalScrollable{height:100%}.DayPicker__hidden{visibility:hidden}.DayPicker__withBorder{border-radius:3px;box-shadow:0 2px 6px #0000000d,0 0 0 1px #00000012}.DayPicker_portal__horizontal{box-shadow:none;left:50%;position:absolute;top:50%}.DayPicker_portal__vertical{position:static}.DayPicker_focusRegion{outline:0}.DayPicker_calendarInfo__horizontal,.DayPicker_wrapper__horizontal{display:inline-block;vertical-align:top}.DayPicker_weekHeaders{position:relative}.DayPicker_weekHeaders__horizontal{margin-left:9px}.DayPicker_weekHeader{color:#757575;position:absolute;text-align:left;top:62px;z-index:2}.DayPicker_weekHeader__vertical{left:50%}.DayPicker_weekHeader__verticalScrollable{background:#fff;border-bottom:1px solid #dbdbdb;display:table-row;left:0;margin-left:0;text-align:center;top:0;width:100%}.DayPicker_weekHeader_ul{font-size:14px;list-style:none;margin:1px 0;padding-left:0;padding-right:0}.DayPicker_weekHeader_li{display:inline-block;text-align:center}.DayPicker_transitionContainer{border-radius:3px;overflow:hidden;position:relative}.DayPicker_transitionContainer__horizontal{-webkit-transition:height .2s ease-in-out;-moz-transition:height .2s ease-in-out;transition:height .2s ease-in-out}.DayPicker_transitionContainer__vertical{width:100%}.DayPicker_transitionContainer__verticalScrollable{bottom:0;height:100%;left:0;overflow-y:scroll;padding-top:20px;position:absolute;right:0;top:0}.DateInput{background:#fff;display:inline-block;margin:0;padding:0;position:relative;vertical-align:middle;width:130px}.DateInput__small{width:97px}.DateInput__block{width:100%}.DateInput__disabled{background:#f2f2f2;color:#dbdbdb}.DateInput_input{background-color:#fff;border:0;border-bottom:2px solid #0000;border-radius:0;color:#484848;font-size:19px;font-weight:200;line-height:24px;padding:11px 11px 9px;width:100%}.DateInput_input__small{font-size:15px;letter-spacing:.2px;line-height:18px;padding:7px 7px 5px}.DateInput_input__regular{font-weight:auto}.DateInput_input__readOnly{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.DateInput_input__focused{background:#fff;border:0;border-bottom:2px solid #008489;outline:0}.DateInput_input__disabled{background:#f2f2f2;font-style:italic}.DateInput_screenReaderMessage{clip:rect(0,0,0,0);border:0;height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.DateInput_fang{height:10px;left:22px;position:absolute;width:20px;z-index:2}.DateInput_fangShape{fill:#fff}.DateInput_fangStroke{stroke:#dbdbdb;fill:#0000}.DateRangePickerInput{background-color:#fff;display:inline-block}.DateRangePickerInput__disabled{background:#f2f2f2}.DateRangePickerInput__withBorder{border:1px solid #dbdbdb;border-radius:2px}.DateRangePickerInput__rtl{direction:rtl}.DateRangePickerInput__block{display:block}.DateRangePickerInput__showClearDates{padding-right:30px}.DateRangePickerInput_arrow{color:#484848;display:inline-block;vertical-align:middle}.DateRangePickerInput_arrow_svg{fill:#484848;height:24px;vertical-align:middle;width:24px}.DateRangePickerInput_clearDates{background:0 0;border:0;color:inherit;cursor:pointer;font:inherit;line-height:normal;margin:0 10px 0 5px;overflow:visible;padding:10px;position:absolute;right:0;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%)}.DateRangePickerInput_clearDates__small{padding:6px}.DateRangePickerInput_clearDates_default:focus,.DateRangePickerInput_clearDates_default:hover{background:#dbdbdb;border-radius:50%}.DateRangePickerInput_clearDates__hide{visibility:hidden}.DateRangePickerInput_clearDates_svg{fill:#82888a;height:12px;vertical-align:middle;width:15px}.DateRangePickerInput_clearDates_svg__small{height:9px}.DateRangePickerInput_calendarIcon{background:0 0;border:0;color:inherit;cursor:pointer;display:inline-block;font:inherit;line-height:normal;margin:0 5px 0 10px;overflow:visible;padding:10px;vertical-align:middle}.DateRangePickerInput_calendarIcon_svg{fill:#82888a;height:15px;vertical-align:middle;width:14px}.DateRangePicker{display:inline-block;position:relative}.DateRangePicker__block{display:block}.DateRangePicker_picker{background-color:#fff;position:absolute;z-index:1}.DateRangePicker_picker__rtl{direction:rtl}.DateRangePicker_picker__directionLeft{left:0}.DateRangePicker_picker__directionRight{right:0}.DateRangePicker_picker__portal{background-color:#0000004d;height:100%;left:0;position:fixed;top:0;width:100%}.DateRangePicker_picker__fullScreenPortal{background-color:#fff}.DateRangePicker_closeButton{background:0 0;border:0;color:inherit;cursor:pointer;font:inherit;line-height:normal;overflow:visible;padding:15px;position:absolute;right:0;top:0;z-index:2}.DateRangePicker_closeButton:focus,.DateRangePicker_closeButton:hover{color:darken(#cacccd,10%);text-decoration:none}.DateRangePicker_closeButton_svg{fill:#cacccd;height:15px;width:15px}";
styleInject(css_248z);

const CalendarContainer = styled.div(({
  daySize
}) => `
  .SingleDatePicker,
  .SingleDatePickerInput {
    display: block;
  }

  .SingleDatePicker_picker {
    box-shadow: none;
    border: 1px solid ${colorShuttleGrey};
    border-radius: 4px;
    z-index: 3;
  }

  .DateInput {
    width: 100%;
  }

  .SingleDatePickerInput__withBorder {
    border: 0;
  }

  .DateInput_input {
    padding: 0.5rem 1rem;
    border: 1px solid ${colorShuttleGrey};
    border-radius: 4px;
    min-height: 3.25rem;
    color: ${colorShuttleGrey};
    font-weight: ${helveticaNeueRoman55.fontWeight};
    font-size: 1rem;
    box-shadow: 0 1px 8px rgba(0, 0, 0, 0.05);
    box-sizing: border-box;
  }

  .DateInput_fang {
    transform: translateY(2px);
    z-index: 4;
  }

  .DateInput_fangStroke {
    stroke: ${colorShuttleGrey};
  }

  .CalendarMonth_caption {
    font-weight: ${helveticaNeueMedium65.fontWeight};
    padding-bottom: 48px;
  }

  .DayPicker__withBorder {
    box-shadow: none;
  }

  .DayPickerNavigation_button {
    border: 1px solid ${colorShark};
    background-color: ${colorWhite};
    border-radius: 2px;
    position: absolute;
    top: 18px;
    line-height: 0.78;
    padding: 7px 17px;
    cursor: pointer;
    user-select: none;
    &:nth-child(1) {
      left: 22px;
    }
    &:nth-child(2) {
      right: 22px;
      i {
        font-family: 'TELUS Core Icons';
        display: inline-block;
        font-weight: normal;
        font-style: normal;
        speak: none;
        text-decoration: inherit;
        text-transform: none;
        text-rendering: auto;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        line-height: 1;
        vertical-align: middle;
        &:before {
          content: '\\F107';
          display: inline-block;
        }
      }
    }
  }

  .DayPickerNavigation_button__default:focus,
  .DayPickerNavigation_button__default:hover {
    border: 1px solid ${colorGainsboro};
  }

  .DayPickerNavigation_svg__horizontal {
    fill: ${colorShark};
  }

  .DayPicker_weekHeader {
    color: ${colorShark};
  }

  .CalendarDay__default {
    position: relative;
    background-clip: padding-box;
    border: 1px solid ${colorGainsboro};
    vertical-align: middle;
    font-weight: ${helveticaNeueMedium65.fontWeight};
    color: ${colorShark};
    text-decoration: underline;
    transition: all 0.3s;
    line-height: ${daySize}px;
    &:before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      height: 1.9rem;
      width: 1.9rem;
      border-radius: 50%;
      background: transparent;
      transition: all 0.3s;
      z-index: -1;
      ${media.from("md").css({
  height: "2.25rem",
  width: "2.25rem"
})}
    }
  }

  .CalendarDay__default:hover,
  .CalendarDay__selected,
  .CalendarDay__selected:active,
  .CalendarDay__selected:hover {
    background: none;
    border: 1px solid ${colorGainsboro};
    z-index: 0;
    text-decoration: underline;
    &:before {
      background: ${colorGainsboro};
    }
  }

  .CalendarDay__default.CalendarDay__selected,
  .CalendarDay__default.CalendarDay__selected:active
    .CalendarDay__default.CalendarDay__selected:hover {
    color: ${colorWhite};
    text-decoration: none;
    &:before {
      background: ${colorNemetonPurple};
    }
  }

  .CalendarDay__blocked_out_of_range,
  .CalendarDay__blocked_out_of_range:active,
  .CalendarDay__blocked_out_of_range:hover,
  .CalendarDay__blocked_calendar,
  .CalendarDay__blocked_calendar:active,
  .CalendarDay__blocked_calendar:hover {
    font-weight: ${helveticaNeueLight45.fontWeight};
    background: ${colorWhite};
    background-clip: padding-box;
    color: ${colorShuttleGrey};
    text-decoration: none;
    &:before {
      content: none;
    }
  }
`);
const LabelText = styled.div({
  marginBottom: "0.5rem",
  fontWeight: helveticaNeueMedium65.fontWeight
});
const HiddenInputFieldContainer = styled.div({
  height: 0,
  width: 0,
  overflow: "hidden"
});

// from https://github.com/airbnb/react-dates/blob/master/src/defaultPhrases.js
const calendarLabel = "Calendrier";
const roleDescription = "Sélecteur de date";
const closeDatePicker = "Fermer ";
const clearDate = "Supprimer la date";
const jumpToPrevMonth = "Reculer pour passer au mois précédent.";
const jumpToNextMonth = "Avancer pour passer au mois suivant.";
const keyboardShortcuts = "Raccourcis clavier ";
const showKeyboardShortcutsPanel = "Ouvrir le panneau de raccourcis clavier.";
const hideKeyboardShortcutsPanel = "Fermez le panneau de raccourcis.";
const openThisPanel = "Ouvrir le panneau. ";
const enterKey = "Touche Entrée ";
const leftArrowRightArrow = "Touches de direction droite et gauche";
const upArrowDownArrow = "Touches de direction haut et bas";
const pageUpPageDown = "Touches Page précédente et Page suivante";
const homeEnd = "Touches Accueil et Fin";
const escape = "Touche Échap.";
const questionMark = "Point d'interrogation";
const selectFocusedDate = "Sélectionner la date mise au point.";
const moveFocusByOneDay = "Reculer (à gauche) et avancer (à droite) d'un jour.";
const moveFocusByOneWeek = "Reculer (vers le haut) et avancer (vers le bas) d'une semaine.";
const moveFocusByOneMonth = "Changer de mois.";
const moveFocustoStartAndEndOfWeek = "Aller au premier ou au dernier jour de la semaine.";
const returnFocusToInput = "Revenir au champ de saisie de la date.";
const keyboardForwardNavigationInstructions = "Naviguer vers l'avant pour interagir avec le calendrier et sélectionner une date. Appuyer sur la touche Point d'interrogation pour obtenir les raccourcis clavier permettant de modifier les dates.";
const keyboardBackwardNavigationInstructions = "Naviguer en arrière pour interagir avec le calendrier et sélectionner une date. Appuyer sur la touche Point d'interrogation pour obtenir les raccourcis clavier permettant de modifier les dates.";
const chooseAvailableStartDate = ({
  date
}) => `"Choisir ${date}. Disponible."`;
const chooseAvailableEndDate = ({
  date
}) => `"Non disponible. ${date}"`;
const chooseAvailableDate = ({
  date
}) => date;
const dateIsUnavailable = ({
  date
}) => `"Not available. ${date}"`;
const dateIsSelected = ({
  date
}) => `"Choisie. ${date}"`;
const dateIsSelectedAsStartDate = ({
  date
}) => `"Choisie comme date de début. ${date}"`;
const dateIsSelectedAsEndDate = ({
  date
}) => `"Choisie comme date de fin. ${date}"`;
const copyDictionary = {
  en: undefined,
  // uses react-dates defaults
  fr: {
    calendarLabel,
    roleDescription,
    jumpToPrevMonth,
    jumpToNextMonth,
    keyboardShortcuts,
    showKeyboardShortcutsPanel,
    hideKeyboardShortcutsPanel,
    openThisPanel,
    enterKey,
    leftArrowRightArrow,
    upArrowDownArrow,
    pageUpPageDown,
    homeEnd,
    escape,
    questionMark,
    selectFocusedDate,
    moveFocusByOneDay,
    moveFocusByOneWeek,
    moveFocusByOneMonth,
    moveFocustoStartAndEndOfWeek,
    returnFocusToInput,
    chooseAvailableStartDate,
    chooseAvailableEndDate,
    chooseAvailableDate,
    dateIsUnavailable,
    dateIsSelected,
    dateIsSelectedAsStartDate,
    dateIsSelectedAsEndDate,
    closeDatePicker,
    clearDate,
    keyboardForwardNavigationInstructions,
    keyboardBackwardNavigationInstructions
  }
};

const getResponsiveDaySize = inline => () => {
  let responsiveDaySize;
  if (typeof window === "undefined") {
    return undefined;
  }
  if (window.innerWidth >= 432) {
    responsiveDaySize = inline ? 60 : 48;
  } else if (window.innerWidth >= 376) {
    responsiveDaySize = 40;
  } else {
    responsiveDaySize = inline ? undefined : 33;
  }
  return responsiveDaySize;
};
const getIcon = type => /*#__PURE__*/React.createElement(React.Fragment, null, type === "leftChevron" && /*#__PURE__*/React.createElement(ChevronLeft, {
  size: 16
}), type === "chevron" && /*#__PURE__*/React.createElement(ChevronRight, {
  size: 16
}));
const DatePicker = ({
  id,
  date,
  copy,
  onDateChange,
  isDayDisabled,
  inline,
  label,
  ...props
}) => {
  const [isFocused, setIsFocused] = reactExports.useState(false);
  const labelRef = reactExports.useRef(null);
  reactExports.useEffect(() => {
    window.addEventListener("resize", getResponsiveDaySize(inline));
    return () => {
      window.removeEventListener("resize", getResponsiveDaySize(inline));
    };
  });
  reactExports.useEffect(() => {
    if (!isFocused) {
      labelRef.current.control.blur();
    }
  }, [isFocused]);
  const onFocusChange = ({
    focused
  }) => {
    setIsFocused(focused);
  };
  const {
    className,
    style,
    ...propsWithoutStyling
  } = safeRest(props);
  const daySize = getResponsiveDaySize(inline)();
  return /*#__PURE__*/React.createElement(CalendarContainer, _extends$2({}, safeRest(propsWithoutStyling), {
    daySize: daySize
  }), /*#__PURE__*/React.createElement("label", {
    htmlFor: id,
    ref: labelRef
  }, /*#__PURE__*/React.createElement(LabelText, null, label), inline && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HiddenInputFieldContainer, null, /*#__PURE__*/React.createElement("input", {
    id: id,
    type: "text",
    value: date.format("YYYY-MM-DD") || "",
    readOnly: true
  })), /*#__PURE__*/React.createElement(DayPickerSingleDateController, {
    date: date,
    onDateChange: onDateChange,
    focused: isFocused,
    onFocusChange: onFocusChange,
    numberOfMonths: 1,
    hideKeyboardShortcutsPanel: true,
    keepOpenOnDateSelect: false,
    daySize: daySize,
    navPrev: getIcon("leftChevron"),
    navNext: getIcon("chevron"),
    isOutsideRange: isDayDisabled,
    phrases: getCopy(copyDictionary, copy)
  })), !inline && /*#__PURE__*/React.createElement(SingleDatePicker, {
    id: id,
    date: date,
    onDateChange: onDateChange,
    focused: isFocused,
    onFocusChange: onFocusChange,
    numberOfMonths: 1,
    hideKeyboardShortcutsPanel: true,
    displayFormat: "DD / MM / YYYY",
    placeholder: "DD / MM / YYYY",
    keepOpenOnDateSelect: false,
    daySize: daySize,
    navPrev: getIcon("leftChevron"),
    navNext: getIcon("chevron"),
    isOutsideRange: isDayDisabled,
    phrases: getCopy(copyDictionary, copy)
  })));
};
DatePicker.propTypes = {
  id: PropTypes$1.string.isRequired,
  copy: PropTypes$1.oneOf(["en", "fr"]).isRequired,
  date: momentPropTypes.momentObj,
  onDateChange: PropTypes$1.func,
  isDayDisabled: PropTypes$1.func,
  label: PropTypes$1.string.isRequired,
  inline: PropTypes$1.bool
};
DatePicker.defaultProps = {
  isDayDisabled: undefined,
  date: undefined,
  onDateChange: () => {},
  inline: false
};

const HEADER_LEVELS = {
  H1: "h1",
  H2: "h2",
  H3: "h3",
  H4: "h4"
};
const TEXT_SIZES = {
  SMALL: "small",
  MEDIUM: "medium",
  LARGE: "large"
};
const BUTTON_RANKS = {
  MAIN: "main",
  COMMON: "common"
};
const CANCELLATION_BUTTON_TYPES = {
  BUTTON: "button",
  LINK_WITH_ICON: "linkWithIcon",
  LINK_WITHOUT_ICON: "linkWithoutIcon"
};
const BUTTON_VARIANTS = {
  PRIMARY: "primary",
  SECONDARY: "secondary",
  INVERTED: "inverted",
  STANDARD: "standard",
  BRAND: "brand",
  DANGER: "danger"
};
const LINK_ICON_POSITIONS = {
  LEFT: "left",
  RIGHT: "right"
};

const FullScreenOverlay = styled.div(props => {
  if (props && props.isOpen) {
    return {
      display: "flex",
      overflow: "scroll",
      backgroundColor: colorWhite,
      width: "100%",
      height: "100%",
      maxHeight: "100vh",
      position: "fixed",
      top: "0",
      bottom: "0",
      left: "0",
      right: "0",
      zIndex: "1400",
      ...media.from("md").css({
        backgroundColor: "rgba(255, 255, 255, 0.94)"
      })
    };
  }
  return null;
});
const StyledModal = styled.div(props => {
  const {
    width
  } = props;
  return {
    height: "100%",
    width: "100%",
    position: "relative",
    top: "0%",
    left: "0%",
    "> button:first-child": {
      display: "flex",
      alignSelf: "flex-end",
      background: "none",
      border: "none",
      margin: "1rem 0.5rem"
    },
    ...media.from("md").css({
      margin: "auto",
      maxWidth: "736px",
      width: `${width}px`,
      minWidth: "570px",
      height: "auto",
      maxHeight: "90vh",
      borderRadius: "0.25rem",
      boxShadow: "0 0 16px 0 rgba(0,0,0,0.2)",
      zIndex: "2000",
      backgroundColor: colorWhite
    })
  };
});
const CloseButtonWrapper = styled.div({
  float: "right",
  padding: "1rem 1rem 0 0",
  position: "absolute",
  right: "0%",
  top: "0%"
});
const ModalWrapper = styled.div({
  display: "flex",
  flexFlow: "column",
  justifyContent: "space-between",
  height: "100%",
  "> div:first-child": {
    height: "100%",
    display: "flex",
    flexFlow: "column",
    justifyContent: "space-between"
  }
});
const HeaderWrapper = styled.div({});
const ContentWrapper = styled.div(({
  offsetHeight,
  showHeaderDivider,
  showFooter
}) => {
  const updatedHeight = showHeaderDivider ? offsetHeight : offsetHeight - 16;
  return {
    margin: "0 -2rem",
    padding: "0 2rem",
    overflowY: "scroll",
    overflowX: "hidden",
    maxHeight: `calc(95vh - ${updatedHeight}px - 10rem)`,
    marginTop: 0,
    ...media.from("xs").until("md").css({
      height: "100%",
      maxHeight: `calc(175vh - ${updatedHeight}px - ${showFooter ? 6 : 5}rem)`
    })
  };
});
const LinkWrapper = styled.div({
  cursor: "pointer",
  marginTop: "1rem",
  "> a": {
    textDecoration: "underline"
  },
  ...media.from("xs").until("md").css({
    marginTop: 0,
    position: "relative",
    marginLeft: "auto",
    marginRight: "auto"
  })
});
const FooterWrapper = styled.div({
  ...media.from("md").css({
    marginBottom: "-1rem"
  })
});
const HairlineDividerWrapper = styled.div({
  margin: "0 -2rem"
});

const CancellationButton = (handleClose, buttonType, text) => {
  switch (buttonType) {
    case CANCELLATION_BUTTON_TYPES.LINK_WITH_ICON:
      return /*#__PURE__*/React.createElement(LinkWrapper, {
        tabIndex: "0"
      }, /*#__PURE__*/React.createElement(Link$1, {
        onClick: handleClose,
        icon: Delete,
        iconPosition: LINK_ICON_POSITIONS.RIGHT,
        "data-testid": "cancel-link"
      }, text));
    case CANCELLATION_BUTTON_TYPES.LINK_WITHOUT_ICON:
      return /*#__PURE__*/React.createElement(LinkWrapper, {
        tabIndex: "0"
      }, /*#__PURE__*/React.createElement(Link$1, {
        onClick: handleClose,
        "data-testid": "cancel-link"
      }, text));
    default:
      return /*#__PURE__*/React.createElement(Button$1, {
        variant: "danger",
        onClick: handleClose,
        "data-testid": "cancel-button",
        tabIndex: "0"
      }, text);
  }
};
const Footer = ({
  cancelButtonText,
  cancelButtonType,
  confirmButtonText,
  confirmButtonVariant,
  handleClose,
  handleConfirm
}) => {
  return /*#__PURE__*/React.createElement(Box, {
    between: 3,
    inline: {
      xs: false,
      md: true
    }
  }, /*#__PURE__*/React.createElement(Button$1, {
    variant: confirmButtonVariant,
    rank: BUTTON_RANKS.MAIN,
    onClick: handleConfirm,
    "data-testid": "confirm-button",
    tabIndex: 0
  }, confirmButtonText), cancelButtonText && CancellationButton(handleClose, cancelButtonType, cancelButtonText));
};
Footer.propTypes = {
  cancelButtonText: PropTypes$1.string,
  cancelButtonType: PropTypes$1.oneOf(Object.values(CANCELLATION_BUTTON_TYPES)),
  confirmButtonText: PropTypes$1.string.isRequired,
  confirmButtonVariant: PropTypes$1.oneOf(Object.values(BUTTON_VARIANTS)),
  handleClose: PropTypes$1.func.isRequired,
  handleConfirm: PropTypes$1.func.isRequired
};
Footer.defaultProps = {
  cancelButtonText: "",
  cancelButtonType: CANCELLATION_BUTTON_TYPES.LINK_WITHOUT_ICON,
  confirmButtonVariant: BUTTON_VARIANTS.STANDARD
};

const Header = ({
  heading,
  headingLevel,
  subHeading,
  subHeadingSize
}) => {
  return /*#__PURE__*/React.createElement(Box, {
    between: 3,
    tabIndex: 0
  }, /*#__PURE__*/React.createElement(Box, {
    between: 3
  }, /*#__PURE__*/React.createElement(Heading, {
    level: headingLevel
  }, heading), subHeading && /*#__PURE__*/React.createElement(Text, {
    size: subHeadingSize
  }, subHeading)));
};
Header.propTypes = {
  heading: PropTypes$1.string.isRequired,
  headingLevel: PropTypes$1.oneOf(Object.values(HEADER_LEVELS)),
  subHeading: PropTypes$1.string,
  subHeadingSize: PropTypes$1.oneOf(Object.values(TEXT_SIZES))
};
Header.defaultProps = {
  headingLevel: HEADER_LEVELS.H3,
  subHeading: "",
  subHeadingSize: TEXT_SIZES.MEDIUM
};

const FocusTrap = withFocusTrap("div");
const Modal = ({
  heading,
  headingLevel,
  subHeading,
  subHeadingSize,
  confirmButtonVariant,
  confirmCTAText,
  cancelButtonType,
  cancelCTAText,
  bodyText,
  isOpen,
  onClose,
  onConfirm,
  focusElementAfterClose,
  width,
  showHeaderHairlineDivider,
  showHeaderDimpleDivider,
  showFooterHairlineDivider,
  ...rest
}) => {
  const [offsetHeight, setOffsetHeight] = reactExports.useState(0);
  const ModalOverlayRef = reactExports.useRef(null);
  const modalRef = reactExports.useRef(null);
  const header = reactExports.useRef(null);
  const handleClose = e => {
    if (focusElementAfterClose && focusElementAfterClose.current) {
      focusElementAfterClose.current.focus();
    }
    return onClose(e);
  };
  const handleKeyDown = e => {
    const key = e.keyCode || e.key;
    if (key === "Escape" || key === 27) {
      return handleClose(e);
    }
    return null;
  };
  const preventScroll = e => {
    if (ModalOverlayRef.current.contains(e.targetTouches[0].target)) {
      e.preventDefault();
    }
  };
  const removeEventScrolling = () => {
    document.body.removeEventListener("touchmove", preventScroll);
    document.body.style.overflow = "visible";
  };
  const handleOutSideClick = e => {
    if (!modalRef.current.contains(e.target)) {
      handleClose(e);
    }
  };
  reactExports.useEffect(() => {
    if (isOpen) {
      document.body.addEventListener("touchmove", preventScroll, {
        passive: false
      });
      document.body.addEventListener("keydown", handleKeyDown, {
        passive: false
      });
      document.body.addEventListener("mousedown", handleOutSideClick, {
        passive: false
      });
      document.body.style.overflow = "hidden";
      header.current.focus();
    } else {
      removeEventScrolling();
      document.body.removeEventListener("keydown", handleKeyDown);
      document.body.removeEventListener("mousedown", handleOutSideClick);
    }
    return () => {
      removeEventScrolling();
      document.body.removeEventListener("keydown", handleKeyDown);
      document.body.removeEventListener("mousedown", handleOutSideClick);
    };
  }, [isOpen]);
  reactExports.useEffect(() => {
    const headerHeight = document.querySelector("#header-wrapper") ? document.querySelector("#header-wrapper").offsetHeight : 0;
    const footerHeight = document.querySelector("#footer-wrapper") ? document.querySelector("#footer-wrapper").offsetHeight : 0;
    setOffsetHeight(headerHeight + footerHeight);
  }, [isOpen]);
  const modalHeading = typeof heading === "string" ? /*#__PURE__*/React.createElement(Header, {
    heading: heading,
    headingLevel: headingLevel,
    subHeading: subHeading,
    subHeadingSize: subHeadingSize
  }) : heading;
  const showHeaderDivider = showHeaderHairlineDivider || showHeaderDimpleDivider;
  const description = typeof bodyText === "string" ? /*#__PURE__*/React.createElement(Paragraph, null, bodyText) : bodyText;
  return /*#__PURE__*/React.createElement(React.Fragment, null, isOpen && /*#__PURE__*/React.createElement(FocusTrap, null, /*#__PURE__*/React.createElement(FullScreenOverlay, _extends$2({
    "data-testid": "tds-modal-overlay"
  }, safeRest(rest), {
    isOpen: isOpen,
    ref: ModalOverlayRef
  }), /*#__PURE__*/React.createElement(StyledModal, {
    ref: modalRef,
    width: width
  }, /*#__PURE__*/React.createElement(ModalWrapper, null, /*#__PURE__*/React.createElement(Box, {
    inset: 4,
    between: 4
  }, /*#__PURE__*/React.createElement("div", {
    ref: header,
    tabIndex: "0"
  }, /*#__PURE__*/React.createElement(HeaderWrapper, {
    id: "header-wrapper"
  }, /*#__PURE__*/React.createElement(Box, {
    between: 3
  }, modalHeading, showHeaderHairlineDivider && /*#__PURE__*/React.createElement(HairlineDivider, null), showHeaderDimpleDivider && /*#__PURE__*/React.createElement(DimpleDivider, null)))), /*#__PURE__*/React.createElement(ContentWrapper, {
    offsetHeight: offsetHeight,
    showHeaderDivider: showHeaderDivider,
    showFooter: Boolean(confirmCTAText),
    tabIndex: "0"
  }, description), confirmCTAText && /*#__PURE__*/React.createElement(FooterWrapper, {
    id: "footer-wrapper"
  }, /*#__PURE__*/React.createElement(Box, {
    between: 3
  }, /*#__PURE__*/React.createElement(HairlineDividerWrapper, {
    decreaseMargin: showFooterHairlineDivider
  }, showFooterHairlineDivider && /*#__PURE__*/React.createElement(HairlineDivider, null)), /*#__PURE__*/React.createElement(Footer, {
    cancelButtonText: cancelCTAText,
    cancelButtonType: cancelButtonType,
    confirmButtonText: confirmCTAText,
    confirmButtonVariant: confirmButtonVariant,
    handleClose: handleClose,
    handleConfirm: onConfirm
  })))), /*#__PURE__*/React.createElement(CloseButtonWrapper, null, /*#__PURE__*/React.createElement(IconButton, {
    icon: Close$1,
    onClick: handleClose,
    a11yText: "Close",
    tabIndex: "0"
  })))))));
};
Modal.propTypes = {
  heading: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.node]).isRequired,
  headingLevel: PropTypes$1.oneOf(["h1", "h2", "h3", "h4"]),
  subHeading: PropTypes$1.string,
  subHeadingSize: PropTypes$1.oneOf(["small", "medium", "large"]),
  bodyText: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.node]).isRequired,
  confirmButtonVariant: PropTypes$1.oneOf(["inverted", "standard", "brand", "danger"]),
  confirmCTAText: PropTypes$1.string,
  cancelButtonType: PropTypes$1.oneOf(["button", "linkWithIcon", "linkWithoutIcon"]),
  cancelCTAText: PropTypes$1.string,
  isOpen: PropTypes$1.bool.isRequired,
  onClose: PropTypes$1.func.isRequired,
  onConfirm: PropTypes$1.func,
  focusElementAfterClose: PropTypes$1.oneOfType([PropTypes$1.shape({
    current: PropTypes$1.any
  })]).isRequired,
  width: PropTypes$1.number,
  showHeaderHairlineDivider: PropTypes$1.bool,
  showHeaderDimpleDivider: PropTypes$1.bool,
  showFooterHairlineDivider: PropTypes$1.bool
};
Modal.defaultProps = {
  headingLevel: "h3",
  subHeading: "",
  subHeadingSize: "medium",
  confirmButtonVariant: "standard",
  confirmCTAText: "",
  cancelButtonType: "linkWithoutIcon",
  cancelCTAText: "",
  width: 570,
  onConfirm: null,
  showHeaderHairlineDivider: true,
  showHeaderDimpleDivider: false,
  showFooterHairlineDivider: true
};

export { A11yContent, Accordion, BenefitNoHeading, BenefitWithHeading, Box, Button$1 as Button, ButtonGroup, ButtonLink, Reset as CSSReset, Card, Checkbox, ChevronLink, Col, colours as Colours, DatePicker, DecorativeIcon, DimpleDivider, Disclaimer, DisplayHeading, ExpandCollapse, FeedbackIcon, FlexGrid, Footnote, FootnoteLink, GlobalFlexMain, HairlineDivider, Heading, Input, InputFeedback, Link$1 as Link, Login, Modal, Notification, OrderedList, Paragraph, PriceLockup, Radio, Responsive, Row, index as SVGs, Select, Spinner, StepTracker, StyledCol, StyledOrderedItem, StyledRow, Tabs, TermsAndConditions, Text, TextArea, TextButton, ToggleSwitch, Tooltip, fonts, media };
